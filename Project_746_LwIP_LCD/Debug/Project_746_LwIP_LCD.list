
Project_746_LwIP_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016434  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004dac  08016604  08016604  00026604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b3b0  0801b3b0  00058128  2**0
                  CONTENTS
  4 .ARM          00000008  0801b3b0  0801b3b0  0002b3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b3b8  0801b3b8  00058128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b3b8  0801b3b8  0002b3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b3bc  0801b3bc  0002b3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0801b3c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000cc  0801b48c  000300cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000016c  0801b52c  0003016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008b00  2000020c  0801b5cc  0003020c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008d0c  0801b5cc  00038d0c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00058128  2**0
                  CONTENTS, READONLY
 14 .ExtQSPIFlashSection 00018128  90000000  90000000  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   00030ea6  00000000  00000000  00058158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007333  00000000  00000000  00088ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002360  00000000  00000000  00090338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000021e0  00000000  00000000  00092698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003647b  00000000  00000000  00094878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00035947  00000000  00000000  000cacf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010f51e  00000000  00000000  0010063a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  0020fb58  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009bf4  00000000  00000000  0020fba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080165ec 	.word	0x080165ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	080165ec 	.word	0x080165ec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <echo_close>:
#include <tcp.h>

char tcp_buffer[1024];

static void echo_close (struct tcp_pcb *pcb )
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    tcp_arg(pcb, NULL);
 80005cc:	2100      	movs	r1, #0
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f00d fc90 	bl	800def4 <tcp_arg>
    tcp_sent(pcb, NULL);
 80005d4:	2100      	movs	r1, #0
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f00d fcc0 	bl	800df5c <tcp_sent>
    tcp_recv(pcb, NULL);
 80005dc:	2100      	movs	r1, #0
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f00d fc9a 	bl	800df18 <tcp_recv>
    tcp_close(pcb);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f00c f9cb 	bl	800c980 <tcp_close>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <echo_recv>:

static err_t echo_recv( void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err )
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
 8000600:	70fb      	strb	r3, [r7, #3]
    int i;
    int len;
    char *pc;

    if ( err == ERR_OK && p != NULL )
 8000602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d142      	bne.n	8000690 <echo_recv+0x9c>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d03f      	beq.n	8000690 <echo_recv+0x9c>
    {
        tcp_recved( pcb, p->tot_len );  //possible error
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	891b      	ldrh	r3, [r3, #8]
 8000614:	4619      	mov	r1, r3
 8000616:	68b8      	ldr	r0, [r7, #8]
 8000618:	f00c fc76 	bl	800cf08 <tcp_recved>
        pc = (char *)p->payload;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	617b      	str	r3, [r7, #20]
        len =p->tot_len;				//possible error
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	891b      	ldrh	r3, [r3, #8]
 8000626:	61bb      	str	r3, [r7, #24]

        for( i=0; i<len; i++ )
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
 800062c:	e00b      	b.n	8000646 <echo_recv+0x52>
        {
            tcp_buffer[i] = pc[i];
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	4413      	add	r3, r2
 8000634:	7819      	ldrb	r1, [r3, #0]
 8000636:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <echo_recv+0xc0>)
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	4413      	add	r3, r2
 800063c:	460a      	mov	r2, r1
 800063e:	701a      	strb	r2, [r3, #0]
        for( i=0; i<len; i++ )
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	3301      	adds	r3, #1
 8000644:	61fb      	str	r3, [r7, #28]
 8000646:	69fa      	ldr	r2, [r7, #28]
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	429a      	cmp	r2, r3
 800064c:	dbef      	blt.n	800062e <echo_recv+0x3a>
        }

        if( tcp_buffer[0] == 'X' )
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <echo_recv+0xc0>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b58      	cmp	r3, #88	; 0x58
 8000654:	d102      	bne.n	800065c <echo_recv+0x68>
            echo_close( pcb );
 8000656:	68b8      	ldr	r0, [r7, #8]
 8000658:	f7ff ffb4 	bl	80005c4 <echo_close>

        pbuf_free( p );
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f00b fcf1 	bl	800c044 <pbuf_free>

        if( len > tcp_sndbuf( pcb ) )
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000668:	461a      	mov	r2, r3
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	4293      	cmp	r3, r2
 800066e:	dd03      	ble.n	8000678 <echo_recv+0x84>
            len= tcp_sndbuf( pcb );
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000676:	61bb      	str	r3, [r7, #24]

        tcp_write( pcb, tcp_buffer, len, 0 );
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	b29a      	uxth	r2, r3
 800067c:	2300      	movs	r3, #0
 800067e:	490d      	ldr	r1, [pc, #52]	; (80006b4 <echo_recv+0xc0>)
 8000680:	68b8      	ldr	r0, [r7, #8]
 8000682:	f010 fb79 	bl	8010d78 <tcp_write>
        tcp_sent( pcb, NULL );
 8000686:	2100      	movs	r1, #0
 8000688:	68b8      	ldr	r0, [r7, #8]
 800068a:	f00d fc67 	bl	800df5c <tcp_sent>
 800068e:	e002      	b.n	8000696 <echo_recv+0xa2>
    }
    else
    {
        pbuf_free( p );
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f00b fcd7 	bl	800c044 <pbuf_free>
    }

    if( err == ERR_OK && p == NULL )
 8000696:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d105      	bne.n	80006aa <echo_recv+0xb6>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <echo_recv+0xb6>
    {
        echo_close( pcb );
 80006a4:	68b8      	ldr	r0, [r7, #8]
 80006a6:	f7ff ff8d 	bl	80005c4 <echo_close>
    }

    return ERR_OK;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000228 	.word	0x20000228

080006b8 <echo_accept>:

static err_t echo_accept(void *arg, struct tcp_pcb *pcb, err_t err )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	4613      	mov	r3, r2
 80006c4:	71fb      	strb	r3, [r7, #7]
    LWIP_UNUSED_ARG( arg );
    LWIP_UNUSED_ARG( err );
    tcp_setprio( pcb, TCP_PRIO_MIN );
 80006c6:	2101      	movs	r1, #1
 80006c8:	68b8      	ldr	r0, [r7, #8]
 80006ca:	f00d fa19 	bl	800db00 <tcp_setprio>
    tcp_recv( pcb, echo_recv );
 80006ce:	490e      	ldr	r1, [pc, #56]	; (8000708 <echo_accept+0x50>)
 80006d0:	68b8      	ldr	r0, [r7, #8]
 80006d2:	f00d fc21 	bl	800df18 <tcp_recv>
    tcp_err( pcb, NULL );
 80006d6:	2100      	movs	r1, #0
 80006d8:	68b8      	ldr	r0, [r7, #8]
 80006da:	f00d fc61 	bl	800dfa0 <tcp_err>
    tcp_poll( pcb, NULL, 4 );
 80006de:	2204      	movs	r2, #4
 80006e0:	2100      	movs	r1, #0
 80006e2:	68b8      	ldr	r0, [r7, #8]
 80006e4:	f00d fc96 	bl	800e014 <tcp_poll>
    tcp_write( pcb,
 80006e8:	2300      	movs	r3, #0
 80006ea:	2276      	movs	r2, #118	; 0x76
 80006ec:	4907      	ldr	r1, [pc, #28]	; (800070c <echo_accept+0x54>)
 80006ee:	68b8      	ldr	r0, [r7, #8]
 80006f0:	f010 fb42 	bl	8010d78 <tcp_write>
    		"    Welcome to the echo server demo    \r\n"
    		" (I send everything back! X to close)  \r\n"
    		"=======================================\r\n", 118, 0 );
    tcp_sent( pcb, NULL );
 80006f4:	2100      	movs	r1, #0
 80006f6:	68b8      	ldr	r0, [r7, #8]
 80006f8:	f00d fc30 	bl	800df5c <tcp_sent>
    return ERR_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	080005f5 	.word	0x080005f5
 800070c:	08016604 	.word	0x08016604

08000710 <echo_init>:

void echo_init( void )
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
    struct tcp_pcb *tcp_pcb;
    tcp_pcb = tcp_new();
 8000716:	f00d fbe5 	bl	800dee4 <tcp_new>
 800071a:	6078      	str	r0, [r7, #4]
    tcp_bind(tcp_pcb, IP_ADDR_ANY, 23);
 800071c:	2217      	movs	r2, #23
 800071e:	4908      	ldr	r1, [pc, #32]	; (8000740 <echo_init+0x30>)
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f00c fa23 	bl	800cb6c <tcp_bind>

    tcp_pcb = tcp_listen( tcp_pcb );
 8000726:	21ff      	movs	r1, #255	; 0xff
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f00c fad7 	bl	800ccdc <tcp_listen_with_backlog>
 800072e:	6078      	str	r0, [r7, #4]
    tcp_accept( tcp_pcb, echo_accept );
 8000730:	4904      	ldr	r1, [pc, #16]	; (8000744 <echo_init+0x34>)
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f00d fc56 	bl	800dfe4 <tcp_accept>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	0801b254 	.word	0x0801b254
 8000744:	080006b9 	.word	0x080006b9

08000748 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//This function will send the characters from printf via UART1.
//Modified so you don't have to type \r\n anymore, just type \n.
int _write(int file, char *ptr, int len) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++){
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	e018      	b.n	800078c <_write+0x44>
		if(ptr[i]=='\n'){
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b0a      	cmp	r3, #10
 8000764:	d106      	bne.n	8000774 <_write+0x2c>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r", 1, HAL_MAX_DELAY);
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	2201      	movs	r2, #1
 800076c:	490c      	ldr	r1, [pc, #48]	; (80007a0 <_write+0x58>)
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <_write+0x5c>)
 8000770:	f008 fe69 	bl	8009446 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)&ptr[i], 1, HAL_MAX_DELAY);
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	18d1      	adds	r1, r2, r3
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	2201      	movs	r2, #1
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <_write+0x5c>)
 8000782:	f008 fe60 	bl	8009446 <HAL_UART_Transmit>
	for(int i = 0; i < len; i++){
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	3301      	adds	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	429a      	cmp	r2, r3
 8000792:	dbe2      	blt.n	800075a <_write+0x12>
	}
    return len;
 8000794:	687b      	ldr	r3, [r7, #4]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	08016680 	.word	0x08016680
 80007a4:	2000075c 	.word	0x2000075c

080007a8 <connectedToServer>:
err_t connectedToServer(void *arg, struct tcp_pcb *connection, err_t err)
{
 80007a8:	b5b0      	push	{r4, r5, r7, lr}
 80007aa:	b0e8      	sub	sp, #416	; 0x1a0
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80007b2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80007b6:	6018      	str	r0, [r3, #0]
 80007b8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80007bc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80007c0:	6019      	str	r1, [r3, #0]
 80007c2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80007c6:	f2a3 1399 	subw	r3, r3, #409	; 0x199
 80007ca:	701a      	strb	r2, [r3, #0]
	uint8_t button = *((uint8_t *) arg);
 80007cc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80007d0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
	printf("Geconecteerd\r\n");
 80007dc:	48b7      	ldr	r0, [pc, #732]	; (8000abc <connectedToServer+0x314>)
 80007de:	f014 fec5 	bl	801556c <puts>

	//write to the server

	const char cHttpHeaderGoogle1[] = "GET /My_PHP_files/Stm32_Server.php?q=Google";
 80007e2:	4bb7      	ldr	r3, [pc, #732]	; (8000ac0 <connectedToServer+0x318>)
 80007e4:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 80007e8:	461d      	mov	r5, r3
 80007ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const char cHttpHeaderGoogle2[] = " HTTP/1.0\r\nHost: localhost\r\n\r\n";
 80007fa:	4bb2      	ldr	r3, [pc, #712]	; (8000ac4 <connectedToServer+0x31c>)
 80007fc:	f507 74a8 	add.w	r4, r7, #336	; 0x150
 8000800:	461d      	mov	r5, r3
 8000802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000806:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800080a:	c407      	stmia	r4!, {r0, r1, r2}
 800080c:	8023      	strh	r3, [r4, #0]
 800080e:	3402      	adds	r4, #2
 8000810:	0c1b      	lsrs	r3, r3, #16
 8000812:	7023      	strb	r3, [r4, #0]
	const char cHttpHeaderOutlook1[] = "GET /My_PHP_files/Stm32_Server.php?q=Outlook";
 8000814:	4bac      	ldr	r3, [pc, #688]	; (8000ac8 <connectedToServer+0x320>)
 8000816:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800081a:	461d      	mov	r5, r3
 800081c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800081e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000824:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000828:	c407      	stmia	r4!, {r0, r1, r2}
 800082a:	7023      	strb	r3, [r4, #0]
	const char cHttpHeaderOutlook2[] = " HTTP/1.0\r\nHost: localhost\r\n\r\n";
 800082c:	4ba5      	ldr	r3, [pc, #660]	; (8000ac4 <connectedToServer+0x31c>)
 800082e:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8000832:	461d      	mov	r5, r3
 8000834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000838:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800083c:	c407      	stmia	r4!, {r0, r1, r2}
 800083e:	8023      	strh	r3, [r4, #0]
 8000840:	3402      	adds	r4, #2
 8000842:	0c1b      	lsrs	r3, r3, #16
 8000844:	7023      	strb	r3, [r4, #0]
	const char cHttpHeaderCanvas1[] = "GET /My_PHP_files/Stm32_Server.php?q=Canvas";
 8000846:	4ba1      	ldr	r3, [pc, #644]	; (8000acc <connectedToServer+0x324>)
 8000848:	f107 04d4 	add.w	r4, r7, #212	; 0xd4
 800084c:	461d      	mov	r5, r3
 800084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000856:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800085a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const char cHttpHeaderCanvas2[] = " HTTP/1.0\r\nHost: localhost\r\n\r\n";
 800085e:	4b99      	ldr	r3, [pc, #612]	; (8000ac4 <connectedToServer+0x31c>)
 8000860:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000864:	461d      	mov	r5, r3
 8000866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800086e:	c407      	stmia	r4!, {r0, r1, r2}
 8000870:	8023      	strh	r3, [r4, #0]
 8000872:	3402      	adds	r4, #2
 8000874:	0c1b      	lsrs	r3, r3, #16
 8000876:	7023      	strb	r3, [r4, #0]
	const char cHttpHeaderYoutube1[] = "GET /My_PHP_files/Stm32_Server.php?q=Youtube";
 8000878:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800087c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000880:	4a93      	ldr	r2, [pc, #588]	; (8000ad0 <connectedToServer+0x328>)
 8000882:	461c      	mov	r4, r3
 8000884:	4615      	mov	r5, r2
 8000886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000892:	c407      	stmia	r4!, {r0, r1, r2}
 8000894:	7023      	strb	r3, [r4, #0]
	const char cHttpHeaderYoutube2[] = " HTTP/1.0\r\nHost: localhost\r\n\r\n";
 8000896:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800089a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800089e:	4a89      	ldr	r2, [pc, #548]	; (8000ac4 <connectedToServer+0x31c>)
 80008a0:	461c      	mov	r4, r3
 80008a2:	4615      	mov	r5, r2
 80008a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ac:	c407      	stmia	r4!, {r0, r1, r2}
 80008ae:	8023      	strh	r3, [r4, #0]
 80008b0:	3402      	adds	r4, #2
 80008b2:	0c1b      	lsrs	r3, r3, #16
 80008b4:	7023      	strb	r3, [r4, #0]
	const char cHttpHeaderNetflix1[] = "GET /My_PHP_files/Stm32_Server.php?q=Netflix";
 80008b6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80008ba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80008be:	4a85      	ldr	r2, [pc, #532]	; (8000ad4 <connectedToServer+0x32c>)
 80008c0:	461c      	mov	r4, r3
 80008c2:	4615      	mov	r5, r2
 80008c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008d0:	c407      	stmia	r4!, {r0, r1, r2}
 80008d2:	7023      	strb	r3, [r4, #0]
	const char cHttpHeaderNetflix2[] = " HTTP/1.0\r\nHost: localhost\r\n\r\n";
 80008d4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80008d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80008dc:	4a79      	ldr	r2, [pc, #484]	; (8000ac4 <connectedToServer+0x31c>)
 80008de:	461c      	mov	r4, r3
 80008e0:	4615      	mov	r5, r2
 80008e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ea:	c407      	stmia	r4!, {r0, r1, r2}
 80008ec:	8023      	strh	r3, [r4, #0]
 80008ee:	3402      	adds	r4, #2
 80008f0:	0c1b      	lsrs	r3, r3, #16
 80008f2:	7023      	strb	r3, [r4, #0]
	switch(button)
 80008f4:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80008f8:	3b01      	subs	r3, #1
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	f200 80d1 	bhi.w	8000aa2 <connectedToServer+0x2fa>
 8000900:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <connectedToServer+0x160>)
 8000902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000906:	bf00      	nop
 8000908:	0800091d 	.word	0x0800091d
 800090c:	0800096b 	.word	0x0800096b
 8000910:	080009b9 	.word	0x080009b9
 8000914:	08000a07 	.word	0x08000a07
 8000918:	08000a55 	.word	0x08000a55
	{
	case 1:
		tcp_write(connection, cHttpHeaderGoogle1, strlen(cHttpHeaderGoogle1), TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE); // eerste deel van de header sturen
 800091c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fc75 	bl	8000210 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	b29a      	uxth	r2, r3
 800092a:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 800092e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000932:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 8000936:	2303      	movs	r3, #3
 8000938:	6800      	ldr	r0, [r0, #0]
 800093a:	f010 fa1d 	bl	8010d78 <tcp_write>
		tcp_write(connection, cHttpHeaderGoogle2, strlen(cHttpHeaderGoogle2), TCP_WRITE_FLAG_COPY ); // De rest van de header sturen
 800093e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fc64 	bl	8000210 <strlen>
 8000948:	4603      	mov	r3, r0
 800094a:	b29a      	uxth	r2, r3
 800094c:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8000950:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000954:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 8000958:	2301      	movs	r3, #1
 800095a:	6800      	ldr	r0, [r0, #0]
 800095c:	f010 fa0c 	bl	8010d78 <tcp_write>
		HAL_Delay(500);
 8000960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000964:	f003 fc4e 	bl	8004204 <HAL_Delay>
		break;
 8000968:	e09b      	b.n	8000aa2 <connectedToServer+0x2fa>
	case 2:
		tcp_write(connection, cHttpHeaderOutlook1, strlen(cHttpHeaderOutlook1), TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE); // eerste deel van de header sturen
 800096a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fc4e 	bl	8000210 <strlen>
 8000974:	4603      	mov	r3, r0
 8000976:	b29a      	uxth	r2, r3
 8000978:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800097c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000980:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 8000984:	2303      	movs	r3, #3
 8000986:	6800      	ldr	r0, [r0, #0]
 8000988:	f010 f9f6 	bl	8010d78 <tcp_write>
		tcp_write(connection, cHttpHeaderOutlook2, strlen(cHttpHeaderOutlook2), TCP_WRITE_FLAG_COPY ); // De rest van de header sturen
 800098c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fc3d 	bl	8000210 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	b29a      	uxth	r2, r3
 800099a:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800099e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80009a2:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 80009a6:	2301      	movs	r3, #1
 80009a8:	6800      	ldr	r0, [r0, #0]
 80009aa:	f010 f9e5 	bl	8010d78 <tcp_write>
		HAL_Delay(500);
 80009ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009b2:	f003 fc27 	bl	8004204 <HAL_Delay>
		break;
 80009b6:	e074      	b.n	8000aa2 <connectedToServer+0x2fa>
	case 3:
		tcp_write(connection, cHttpHeaderCanvas1, strlen(cHttpHeaderCanvas1), TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE); // eerste deel van de header sturen
 80009b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fc27 	bl	8000210 <strlen>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80009ca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80009ce:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 80009d2:	2303      	movs	r3, #3
 80009d4:	6800      	ldr	r0, [r0, #0]
 80009d6:	f010 f9cf 	bl	8010d78 <tcp_write>
		tcp_write(connection, cHttpHeaderCanvas2, strlen(cHttpHeaderCanvas2), TCP_WRITE_FLAG_COPY ); // De rest van de header sturen
 80009da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fc16 	bl	8000210 <strlen>
 80009e4:	4603      	mov	r3, r0
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80009ec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80009f0:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 80009f4:	2301      	movs	r3, #1
 80009f6:	6800      	ldr	r0, [r0, #0]
 80009f8:	f010 f9be 	bl	8010d78 <tcp_write>
		HAL_Delay(500);
 80009fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a00:	f003 fc00 	bl	8004204 <HAL_Delay>
		break;
 8000a04:	e04d      	b.n	8000aa2 <connectedToServer+0x2fa>
	case 4:
		tcp_write(connection, cHttpHeaderYoutube1, strlen(cHttpHeaderYoutube1), TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE); // eerste deel van de header sturen
 8000a06:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fc00 	bl	8000210 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000a18:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000a1c:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 8000a20:	2303      	movs	r3, #3
 8000a22:	6800      	ldr	r0, [r0, #0]
 8000a24:	f010 f9a8 	bl	8010d78 <tcp_write>
		tcp_write(connection, cHttpHeaderYoutube2, strlen(cHttpHeaderYoutube2), TCP_WRITE_FLAG_COPY ); // De rest van de header sturen
 8000a28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fbef 	bl	8000210 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000a3a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000a3e:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 8000a42:	2301      	movs	r3, #1
 8000a44:	6800      	ldr	r0, [r0, #0]
 8000a46:	f010 f997 	bl	8010d78 <tcp_write>
		HAL_Delay(500);
 8000a4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a4e:	f003 fbd9 	bl	8004204 <HAL_Delay>
		break;
 8000a52:	e026      	b.n	8000aa2 <connectedToServer+0x2fa>
	case 5:
		tcp_write(connection, cHttpHeaderNetflix1, strlen(cHttpHeaderNetflix1), TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE); // eerste deel van de header sturen
 8000a54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fbd9 	bl	8000210 <strlen>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000a66:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000a6a:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 8000a6e:	2303      	movs	r3, #3
 8000a70:	6800      	ldr	r0, [r0, #0]
 8000a72:	f010 f981 	bl	8010d78 <tcp_write>
		tcp_write(connection, cHttpHeaderNetflix2, strlen(cHttpHeaderNetflix2), TCP_WRITE_FLAG_COPY ); // De rest van de header sturen
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fbc8 	bl	8000210 <strlen>
 8000a80:	4603      	mov	r3, r0
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	f107 0114 	add.w	r1, r7, #20
 8000a88:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000a8c:	f5a3 70cc 	sub.w	r0, r3, #408	; 0x198
 8000a90:	2301      	movs	r3, #1
 8000a92:	6800      	ldr	r0, [r0, #0]
 8000a94:	f010 f970 	bl	8010d78 <tcp_write>
		HAL_Delay(500);
 8000a98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a9c:	f003 fbb2 	bl	8004204 <HAL_Delay>
		break;
 8000aa0:	bf00      	nop
		}
	tcp_output(connection); //Alles nu naar buiten sturen
 8000aa2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000aa6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000aaa:	6818      	ldr	r0, [r3, #0]
 8000aac:	f010 ff4e 	bl	801194c <tcp_output>


	//configure the receive callback
	return ERR_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bdb0      	pop	{r4, r5, r7, pc}
 8000abc:	08016684 	.word	0x08016684
 8000ac0:	08016694 	.word	0x08016694
 8000ac4:	080166c0 	.word	0x080166c0
 8000ac8:	080166e0 	.word	0x080166e0
 8000acc:	08016710 	.word	0x08016710
 8000ad0:	0801673c 	.word	0x0801673c
 8000ad4:	0801676c 	.word	0x0801676c

08000ad8 <ClearTouchedMarks>:

void ClearTouchedMarks(uint8_t button)
      {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
   	   BSP_LCD_SelectLayer(0);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f001 ffb2 	bl	8002a4c <BSP_LCD_SelectLayer>
   	   BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f001 ffbe 	bl	8002a6c <BSP_LCD_SetTextColor>
   	   switch(button)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	d832      	bhi.n	8000b5e <ClearTouchedMarks+0x86>
 8000af8:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <ClearTouchedMarks+0x28>)
 8000afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afe:	bf00      	nop
 8000b00:	08000b15 	.word	0x08000b15
 8000b04:	08000b23 	.word	0x08000b23
 8000b08:	08000b33 	.word	0x08000b33
 8000b0c:	08000b41 	.word	0x08000b41
 8000b10:	08000b4f 	.word	0x08000b4f
   	   {
   	   case 1:
   		BSP_LCD_FillRect(GoogleXStartPosition, GoogleYStartPosition, 100, 100);
 8000b14:	2364      	movs	r3, #100	; 0x64
 8000b16:	2264      	movs	r2, #100	; 0x64
 8000b18:	2118      	movs	r1, #24
 8000b1a:	205d      	movs	r0, #93	; 0x5d
 8000b1c:	f002 f96e 	bl	8002dfc <BSP_LCD_FillRect>
   		   break;
 8000b20:	e01e      	b.n	8000b60 <ClearTouchedMarks+0x88>
   	   case 2:
   		BSP_LCD_FillRect(OutlookXStartPosition, OutlookYStartPosition, 100, 93);
 8000b22:	235d      	movs	r3, #93	; 0x5d
 8000b24:	2264      	movs	r2, #100	; 0x64
 8000b26:	211b      	movs	r1, #27
 8000b28:	f44f 708f 	mov.w	r0, #286	; 0x11e
 8000b2c:	f002 f966 	bl	8002dfc <BSP_LCD_FillRect>
   		   break;
 8000b30:	e016      	b.n	8000b60 <ClearTouchedMarks+0x88>
   	   case 3:
   		BSP_LCD_FillRect(CanvasXStartPosition, CanvasYStartPosition, 100, 100);
 8000b32:	2364      	movs	r3, #100	; 0x64
 8000b34:	2264      	movs	r2, #100	; 0x64
 8000b36:	2194      	movs	r1, #148	; 0x94
 8000b38:	202d      	movs	r0, #45	; 0x2d
 8000b3a:	f002 f95f 	bl	8002dfc <BSP_LCD_FillRect>
   	   	   break;
 8000b3e:	e00f      	b.n	8000b60 <ClearTouchedMarks+0x88>
   	   case 4:
   		BSP_LCD_FillRect(YoutubeXStartPosition, YoutubeYStartPosition, 100, 100);
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	2264      	movs	r2, #100	; 0x64
 8000b44:	2194      	movs	r1, #148	; 0x94
 8000b46:	20be      	movs	r0, #190	; 0xbe
 8000b48:	f002 f958 	bl	8002dfc <BSP_LCD_FillRect>
   		   break;
 8000b4c:	e008      	b.n	8000b60 <ClearTouchedMarks+0x88>
   	   case 5:
   		BSP_LCD_FillRect(NetflixXStartPosition, NetflixYStartPosition, 100, 100);
 8000b4e:	2364      	movs	r3, #100	; 0x64
 8000b50:	2264      	movs	r2, #100	; 0x64
 8000b52:	2194      	movs	r1, #148	; 0x94
 8000b54:	f240 104f 	movw	r0, #335	; 0x14f
 8000b58:	f002 f950 	bl	8002dfc <BSP_LCD_FillRect>
   		   break;
 8000b5c:	e000      	b.n	8000b60 <ClearTouchedMarks+0x88>
   	   default:
   		   break;
 8000b5e:	bf00      	nop
   	   }
      }
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SetNewTouchedMarks>:
	void SetNewTouchedMarks(uint8_t button)
	{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
		switch(button)
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	d854      	bhi.n	8000c24 <SetNewTouchedMarks+0xbc>
 8000b7a:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <SetNewTouchedMarks+0x18>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000b95 	.word	0x08000b95
 8000b84:	08000bb1 	.word	0x08000bb1
 8000b88:	08000bcf 	.word	0x08000bcf
 8000b8c:	08000beb 	.word	0x08000beb
 8000b90:	08000c07 	.word	0x08000c07
		{
		case 1:
			BSP_LCD_SelectLayer(0);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f001 ff59 	bl	8002a4c <BSP_LCD_SelectLayer>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000b9a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000b9e:	f001 ff65 	bl	8002a6c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(GoogleXStartPosition, GoogleYStartPosition, 100, 100);
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	2264      	movs	r2, #100	; 0x64
 8000ba6:	2118      	movs	r1, #24
 8000ba8:	205d      	movs	r0, #93	; 0x5d
 8000baa:	f002 f927 	bl	8002dfc <BSP_LCD_FillRect>
			break;
 8000bae:	e039      	b.n	8000c24 <SetNewTouchedMarks+0xbc>

		case 2:
			BSP_LCD_SelectLayer(0);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f001 ff4b 	bl	8002a4c <BSP_LCD_SelectLayer>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000bb6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000bba:	f001 ff57 	bl	8002a6c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(OutlookXStartPosition, OutlookYStartPosition, 100, 93);
 8000bbe:	235d      	movs	r3, #93	; 0x5d
 8000bc0:	2264      	movs	r2, #100	; 0x64
 8000bc2:	211b      	movs	r1, #27
 8000bc4:	f44f 708f 	mov.w	r0, #286	; 0x11e
 8000bc8:	f002 f918 	bl	8002dfc <BSP_LCD_FillRect>
			break;
 8000bcc:	e02a      	b.n	8000c24 <SetNewTouchedMarks+0xbc>
		case 3:
			BSP_LCD_SelectLayer(0);
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f001 ff3c 	bl	8002a4c <BSP_LCD_SelectLayer>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000bd4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000bd8:	f001 ff48 	bl	8002a6c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(CanvasXStartPosition, CanvasYStartPosition, 100, 100);
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	2264      	movs	r2, #100	; 0x64
 8000be0:	2194      	movs	r1, #148	; 0x94
 8000be2:	202d      	movs	r0, #45	; 0x2d
 8000be4:	f002 f90a 	bl	8002dfc <BSP_LCD_FillRect>
			break;
 8000be8:	e01c      	b.n	8000c24 <SetNewTouchedMarks+0xbc>
		case 4:
			BSP_LCD_SelectLayer(0);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f001 ff2e 	bl	8002a4c <BSP_LCD_SelectLayer>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000bf0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000bf4:	f001 ff3a 	bl	8002a6c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(YoutubeXStartPosition, YoutubeYStartPosition, 100, 100);
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	2264      	movs	r2, #100	; 0x64
 8000bfc:	2194      	movs	r1, #148	; 0x94
 8000bfe:	20be      	movs	r0, #190	; 0xbe
 8000c00:	f002 f8fc 	bl	8002dfc <BSP_LCD_FillRect>

			break;
 8000c04:	e00e      	b.n	8000c24 <SetNewTouchedMarks+0xbc>
		case 5:
			BSP_LCD_SelectLayer(0);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f001 ff20 	bl	8002a4c <BSP_LCD_SelectLayer>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c0c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c10:	f001 ff2c 	bl	8002a6c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(NetflixXStartPosition, NetflixYStartPosition, 100, 100);
 8000c14:	2364      	movs	r3, #100	; 0x64
 8000c16:	2264      	movs	r2, #100	; 0x64
 8000c18:	2194      	movs	r1, #148	; 0x94
 8000c1a:	f240 104f 	movw	r0, #335	; 0x14f
 8000c1e:	f002 f8ed 	bl	8002dfc <BSP_LCD_FillRect>
			break;
 8000c22:	bf00      	nop
		}
	}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <SetANewConnection>:
   void SetANewConnection(uint8_t button)
   {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	   static uint8_t sbutton;
	   sbutton = button;
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <SetANewConnection+0x38>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	7013      	strb	r3, [r2, #0]
	   struct tcp_pcb *connection;
	   connection = tcp_new();
 8000c3c:	f00d f952 	bl	800dee4 <tcp_new>
 8000c40:	60f8      	str	r0, [r7, #12]
	   ip4_addr_t serverIp;
	   tcp_arg(connection, &sbutton);
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <SetANewConnection+0x38>)
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f00d f955 	bl	800def4 <tcp_arg>
	   IP_ADDR4(&serverIp, 192,168,69,11); /*server Ip = 192.168.69.11*/
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <SetANewConnection+0x3c>)
 8000c4c:	60bb      	str	r3, [r7, #8]
	   tcp_connect(connection, &serverIp, 80, connectedToServer);
 8000c4e:	f107 0108 	add.w	r1, r7, #8
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SetANewConnection+0x40>)
 8000c54:	2250      	movs	r2, #80	; 0x50
 8000c56:	68f8      	ldr	r0, [r7, #12]
 8000c58:	f00c f9ec 	bl	800d034 <tcp_connect>
   }
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000818 	.word	0x20000818
 8000c68:	0b45a8c0 	.word	0x0b45a8c0
 8000c6c:	080007a9 	.word	0x080007a9

08000c70 <ReadTouch>:
   uint8_t ReadTouch(uint8_t button)
   {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	; 0x38
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	   uint32_t SysTick_Old_Time;
	   TS_StateTypeDef TS_State;
	   BSP_TS_GetState(&TS_State);
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 f826 	bl	8003cd0 <BSP_TS_GetState>
	   //printf("%d",SysTick);

	   if(TS_State.touchDetected == 1 ) //1 vinger op het scherm
 8000c84:	7a3b      	ldrb	r3, [r7, #8]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	f040 80ac 	bne.w	8000de4 <ReadTouch+0x174>
	   {

	   if((TS_State.touchX[0]<=GoogleXStopPosition)&&(TS_State.touchX[0]>=GoogleXStartPosition)&&(TS_State.touchY[0]<=GoogleYStopPosition)&&(TS_State.touchY[0]>=GoogleYStartPosition))
 8000c8c:	897b      	ldrh	r3, [r7, #10]
 8000c8e:	2bc1      	cmp	r3, #193	; 0xc1
 8000c90:	d823      	bhi.n	8000cda <ReadTouch+0x6a>
 8000c92:	897b      	ldrh	r3, [r7, #10]
 8000c94:	2b5c      	cmp	r3, #92	; 0x5c
 8000c96:	d920      	bls.n	8000cda <ReadTouch+0x6a>
 8000c98:	8abb      	ldrh	r3, [r7, #20]
 8000c9a:	2b7c      	cmp	r3, #124	; 0x7c
 8000c9c:	d81d      	bhi.n	8000cda <ReadTouch+0x6a>
 8000c9e:	8abb      	ldrh	r3, [r7, #20]
 8000ca0:	2b17      	cmp	r3, #23
 8000ca2:	d91a      	bls.n	8000cda <ReadTouch+0x6a>
	   {

		   if(button != 1)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d017      	beq.n	8000cda <ReadTouch+0x6a>
		   {
		   SysTick_Old_Time = HAL_GetTick();
 8000caa:	f003 fa9f 	bl	80041ec <HAL_GetTick>
 8000cae:	6378      	str	r0, [r7, #52]	; 0x34
		   printf("%d", SysTick_Old_Time);
 8000cb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cb2:	484f      	ldr	r0, [pc, #316]	; (8000df0 <ReadTouch+0x180>)
 8000cb4:	f014 fbd4 	bl	8015460 <iprintf>
		   printf("Google is Pushed\r\n");
 8000cb8:	484e      	ldr	r0, [pc, #312]	; (8000df4 <ReadTouch+0x184>)
 8000cba:	f014 fc57 	bl	801556c <puts>
		   ClearTouchedMarks(button);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff09 	bl	8000ad8 <ClearTouchedMarks>
		   button = 1;	//debouncing
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
		   SetNewTouchedMarks(button);
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff4b 	bl	8000b68 <SetNewTouchedMarks>
		   SetANewConnection(button);
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ffa9 	bl	8000c2c <SetANewConnection>
		   }



	   }
	   if((button != 2)&&(TS_State.touchX[0]<=OutlookXStopPosition)&&(TS_State.touchX[0]>=OutlookXStartPosition)&&(TS_State.touchY[0]<=OutlookYStopPosition)&&(TS_State.touchY[0]>=OutlookYStartPosition))
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d01e      	beq.n	8000d1e <ReadTouch+0xae>
 8000ce0:	897b      	ldrh	r3, [r7, #10]
 8000ce2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8000ce6:	d81a      	bhi.n	8000d1e <ReadTouch+0xae>
 8000ce8:	897b      	ldrh	r3, [r7, #10]
 8000cea:	f5b3 7f8f 	cmp.w	r3, #286	; 0x11e
 8000cee:	d316      	bcc.n	8000d1e <ReadTouch+0xae>
 8000cf0:	8abb      	ldrh	r3, [r7, #20]
 8000cf2:	2b78      	cmp	r3, #120	; 0x78
 8000cf4:	d813      	bhi.n	8000d1e <ReadTouch+0xae>
 8000cf6:	8abb      	ldrh	r3, [r7, #20]
 8000cf8:	2b1a      	cmp	r3, #26
 8000cfa:	d910      	bls.n	8000d1e <ReadTouch+0xae>
	   {
		   printf("Outlook is Pushed\r\n");
 8000cfc:	483e      	ldr	r0, [pc, #248]	; (8000df8 <ReadTouch+0x188>)
 8000cfe:	f014 fc35 	bl	801556c <puts>
		   ClearTouchedMarks(button);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fee7 	bl	8000ad8 <ClearTouchedMarks>
		   button = 2;	//debouncing
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	71fb      	strb	r3, [r7, #7]
		   SetNewTouchedMarks(button);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff29 	bl	8000b68 <SetNewTouchedMarks>
		   SetANewConnection(button);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff87 	bl	8000c2c <SetANewConnection>

	   }
	   if((button != 3)&&(TS_State.touchX[0]<=CanvasXStopPosition)&&(TS_State.touchX[0]>=CanvasXStartPosition)&&(TS_State.touchY[0]<=CanvasYStopPosition)&&(TS_State.touchY[0]>=CanvasYStartPosition))
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d01c      	beq.n	8000d5e <ReadTouch+0xee>
 8000d24:	897b      	ldrh	r3, [r7, #10]
 8000d26:	2b91      	cmp	r3, #145	; 0x91
 8000d28:	d819      	bhi.n	8000d5e <ReadTouch+0xee>
 8000d2a:	897b      	ldrh	r3, [r7, #10]
 8000d2c:	2b2c      	cmp	r3, #44	; 0x2c
 8000d2e:	d916      	bls.n	8000d5e <ReadTouch+0xee>
 8000d30:	8abb      	ldrh	r3, [r7, #20]
 8000d32:	2bf8      	cmp	r3, #248	; 0xf8
 8000d34:	d813      	bhi.n	8000d5e <ReadTouch+0xee>
 8000d36:	8abb      	ldrh	r3, [r7, #20]
 8000d38:	2b93      	cmp	r3, #147	; 0x93
 8000d3a:	d910      	bls.n	8000d5e <ReadTouch+0xee>
	   {
		   printf("Canvas is Pushed\r\n");
 8000d3c:	482f      	ldr	r0, [pc, #188]	; (8000dfc <ReadTouch+0x18c>)
 8000d3e:	f014 fc15 	bl	801556c <puts>
		   ClearTouchedMarks(button);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fec7 	bl	8000ad8 <ClearTouchedMarks>
		   button = 3;	//debouncing
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	71fb      	strb	r3, [r7, #7]
		   SetNewTouchedMarks(button);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff09 	bl	8000b68 <SetNewTouchedMarks>
		   SetANewConnection(button);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff67 	bl	8000c2c <SetANewConnection>

	   }
	   if((button != 4)&&(TS_State.touchX[0]<=YoutubeXStopPosition)&&(TS_State.touchX[0]>=YoutubeXStartPosition)&&(TS_State.touchY[0]<=YoutubeYStopPosition)&&(TS_State.touchY[0]>=YoutubeYStartPosition))
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d01d      	beq.n	8000da0 <ReadTouch+0x130>
 8000d64:	897b      	ldrh	r3, [r7, #10]
 8000d66:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8000d6a:	d819      	bhi.n	8000da0 <ReadTouch+0x130>
 8000d6c:	897b      	ldrh	r3, [r7, #10]
 8000d6e:	2bbd      	cmp	r3, #189	; 0xbd
 8000d70:	d916      	bls.n	8000da0 <ReadTouch+0x130>
 8000d72:	8abb      	ldrh	r3, [r7, #20]
 8000d74:	2bf8      	cmp	r3, #248	; 0xf8
 8000d76:	d813      	bhi.n	8000da0 <ReadTouch+0x130>
 8000d78:	8abb      	ldrh	r3, [r7, #20]
 8000d7a:	2b93      	cmp	r3, #147	; 0x93
 8000d7c:	d910      	bls.n	8000da0 <ReadTouch+0x130>
	   {
		   printf("Youtube is Pushed\r\n");
 8000d7e:	4820      	ldr	r0, [pc, #128]	; (8000e00 <ReadTouch+0x190>)
 8000d80:	f014 fbf4 	bl	801556c <puts>
		   ClearTouchedMarks(button);
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fea6 	bl	8000ad8 <ClearTouchedMarks>
		   button = 4;	//debouncing
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	71fb      	strb	r3, [r7, #7]
		   SetNewTouchedMarks(button);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fee8 	bl	8000b68 <SetNewTouchedMarks>
		   SetANewConnection(button);
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff46 	bl	8000c2c <SetANewConnection>

	   }
	   if((button != 5)&&(TS_State.touchX[0]<=NetflixXStopPosition)&&(TS_State.touchX[0]>=NetflixXStartPosition)&&(TS_State.touchY[0]<=NetflixYStopPosition)&&(TS_State.touchY[0]>=NetflixYStartPosition))
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	d01e      	beq.n	8000de4 <ReadTouch+0x174>
 8000da6:	897b      	ldrh	r3, [r7, #10]
 8000da8:	f5b3 7fda 	cmp.w	r3, #436	; 0x1b4
 8000dac:	d21a      	bcs.n	8000de4 <ReadTouch+0x174>
 8000dae:	897b      	ldrh	r3, [r7, #10]
 8000db0:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8000db4:	d916      	bls.n	8000de4 <ReadTouch+0x174>
 8000db6:	8abb      	ldrh	r3, [r7, #20]
 8000db8:	2bf8      	cmp	r3, #248	; 0xf8
 8000dba:	d813      	bhi.n	8000de4 <ReadTouch+0x174>
 8000dbc:	8abb      	ldrh	r3, [r7, #20]
 8000dbe:	2b93      	cmp	r3, #147	; 0x93
 8000dc0:	d910      	bls.n	8000de4 <ReadTouch+0x174>
	   {
		   printf("Netflix is Pushed\r\n");
 8000dc2:	4810      	ldr	r0, [pc, #64]	; (8000e04 <ReadTouch+0x194>)
 8000dc4:	f014 fbd2 	bl	801556c <puts>
		   ClearTouchedMarks(button);
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fe84 	bl	8000ad8 <ClearTouchedMarks>
		   button = 5;	//debouncing
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	71fb      	strb	r3, [r7, #7]
		   SetNewTouchedMarks(button);
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fec6 	bl	8000b68 <SetNewTouchedMarks>
		   SetANewConnection(button);
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ff24 	bl	8000c2c <SetANewConnection>

	   }
	   }
	   return button;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
   }
 8000de6:	4618      	mov	r0, r3
 8000de8:	3738      	adds	r7, #56	; 0x38
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	0801679c 	.word	0x0801679c
 8000df4:	080167a0 	.word	0x080167a0
 8000df8:	080167b4 	.word	0x080167b4
 8000dfc:	080167c8 	.word	0x080167c8
 8000e00:	080167dc 	.word	0x080167dc
 8000e04:	080167f0 	.word	0x080167f0

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0e:	f003 f99b 	bl	8004148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e12:	f000 f8a3 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f000 faa7 	bl	8001368 <MX_GPIO_Init>
  MX_LTDC_Init();
 8000e1a:	f000 f941 	bl	80010a0 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8000e1e:	f000 fa25 	bl	800126c <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8000e22:	f000 f90b 	bl	800103c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e26:	f000 fa51 	bl	80012cc <MX_FMC_Init>
  MX_LWIP_Init();
 8000e2a:	f009 f895 	bl	8009f58 <MX_LWIP_Init>
  MX_QUADSPI_Init();
 8000e2e:	f000 f9f1 	bl	8001214 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  /*QSPI INIT*/
  BSP_QSPI_Init();
 8000e32:	f002 fad5 	bl	80033e0 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 8000e36:	f002 fb2b 	bl	8003490 <BSP_QSPI_EnableMemoryMappedMode>
  WRITE_REG(QUADSPI->LPTR, 0xFFF);
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <main+0x12c>)
 8000e3c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e40:	631a      	str	r2, [r3, #48]	; 0x30
  printf("Running LwIP & LCD start project...\n");
 8000e42:	483d      	ldr	r0, [pc, #244]	; (8000f38 <main+0x130>)
 8000e44:	f014 fb92 	bl	801556c <puts>
  echo_init();
 8000e48:	f7ff fc62 	bl	8000710 <echo_init>
  BSP_LCD_Init();
 8000e4c:	f001 fd06 	bl	800285c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8000e50:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000e54:	2001      	movs	r0, #1
 8000e56:	f001 fd99 	bl	800298c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS+(480*272*4));
 8000e5a:	4938      	ldr	r1, [pc, #224]	; (8000f3c <main+0x134>)
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f001 fd95 	bl	800298c <BSP_LCD_LayerDefaultInit>
  /* Enable the LCD */
  BSP_LCD_DisplayOn();
 8000e62:	f002 f845 	bl	8002ef0 <BSP_LCD_DisplayOn>
  /* Select the LCD Background Layer  */
  BSP_LCD_SelectLayer(0);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f001 fdf0 	bl	8002a4c <BSP_LCD_SelectLayer>
  /* Clear the Background Layer */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f001 fe48 	bl	8002b04 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f001 fde9 	bl	8002a4c <BSP_LCD_SelectLayer>
  /* Clear the foreground Layer */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7e:	f001 fe41 	bl	8002b04 <BSP_LCD_Clear>
  /* Some sign */
  BSP_LCD_SetFont(&Font12);
 8000e82:	482f      	ldr	r0, [pc, #188]	; (8000f40 <main+0x138>)
 8000e84:	f001 fe24 	bl	8002ad0 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e88:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e8c:	f001 fdee 	bl	8002a6c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(0);/*transparant*/
 8000e90:	2000      	movs	r0, #0
 8000e92:	f001 fe03 	bl	8002a9c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) "Click on what to open on computer!", CENTER_MODE);
 8000e96:	2301      	movs	r3, #1
 8000e98:	4a2a      	ldr	r2, [pc, #168]	; (8000f44 <main+0x13c>)
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f001 fe9d 	bl	8002bdc <BSP_LCD_DisplayStringAt>
  BSP_TS_Init(480,272);
 8000ea2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000ea6:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000eaa:	f002 fed1 	bl	8003c50 <BSP_TS_Init>
  BSP_LCD_SelectLayer(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f001 fdcc 	bl	8002a4c <BSP_LCD_SelectLayer>
  WDA_LCD_DrawBitmap(GOOGLE_DATA, GoogleXStartPosition, GoogleYStartPosition, GOOGLE_DATA_X_PIXEL, GOOGLE_DATA_Y_PIXEL, GOOGLE_DATA_FORMAT);
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	2364      	movs	r3, #100	; 0x64
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	2218      	movs	r2, #24
 8000ec0:	215d      	movs	r1, #93	; 0x5d
 8000ec2:	4821      	ldr	r0, [pc, #132]	; (8000f48 <main+0x140>)
 8000ec4:	f002 fa2c 	bl	8003320 <WDA_LCD_DrawBitmap>
  WDA_LCD_DrawBitmap(OUTLOOK_DATA, OutlookXStartPosition, OutlookYStartPosition, OUTLOOK_DATA_X_PIXEL, OUTLOOK_DATA_Y_PIXEL, OUTLOOK_DATA_FORMAT);
 8000ec8:	2303      	movs	r3, #3
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	235d      	movs	r3, #93	; 0x5d
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	221b      	movs	r2, #27
 8000ed4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8000ed8:	481c      	ldr	r0, [pc, #112]	; (8000f4c <main+0x144>)
 8000eda:	f002 fa21 	bl	8003320 <WDA_LCD_DrawBitmap>
  WDA_LCD_DrawBitmap(CANVAS_DATA, CanvasXStartPosition, CanvasYStartPosition, CANVAS_DATA_X_PIXEL, CANVAS_DATA_Y_PIXEL, CANVAS_DATA_FORMAT);
 8000ede:	2303      	movs	r3, #3
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	2364      	movs	r3, #100	; 0x64
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2364      	movs	r3, #100	; 0x64
 8000ee8:	2294      	movs	r2, #148	; 0x94
 8000eea:	212d      	movs	r1, #45	; 0x2d
 8000eec:	4818      	ldr	r0, [pc, #96]	; (8000f50 <main+0x148>)
 8000eee:	f002 fa17 	bl	8003320 <WDA_LCD_DrawBitmap>
  WDA_LCD_DrawBitmap(YOUTUBE_DATA, YoutubeXStartPosition, YoutubeYStartPosition, YOUTUBE_DATA_X_PIXEL, YOUTUBE_DATA_Y_PIXEL, YOUTUBE_DATA_FORMAT);
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2364      	movs	r3, #100	; 0x64
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2364      	movs	r3, #100	; 0x64
 8000efc:	2294      	movs	r2, #148	; 0x94
 8000efe:	21be      	movs	r1, #190	; 0xbe
 8000f00:	4814      	ldr	r0, [pc, #80]	; (8000f54 <main+0x14c>)
 8000f02:	f002 fa0d 	bl	8003320 <WDA_LCD_DrawBitmap>
  WDA_LCD_DrawBitmap(NETFLIX_DATA, NetflixXStartPosition, NetflixYStartPosition, NETFLIX_DATA_X_PIXEL, NETFLIX_DATA_Y_PIXEL, NETFLIX_DATA_FORMAT);
 8000f06:	2303      	movs	r3, #3
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2364      	movs	r3, #100	; 0x64
 8000f10:	2294      	movs	r2, #148	; 0x94
 8000f12:	f240 114f 	movw	r1, #335	; 0x14f
 8000f16:	4810      	ldr	r0, [pc, #64]	; (8000f58 <main+0x150>)
 8000f18:	f002 fa02 	bl	8003320 <WDA_LCD_DrawBitmap>

  uint8_t button = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	MX_LWIP_Process();
 8000f20:	f009 f966 	bl	800a1f0 <MX_LWIP_Process>
	button = ReadTouch(button);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff fea2 	bl	8000c70 <ReadTouch>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
	MX_LWIP_Process();
 8000f30:	e7f6      	b.n	8000f20 <main+0x118>
 8000f32:	bf00      	nop
 8000f34:	a0001000 	.word	0xa0001000
 8000f38:	08016804 	.word	0x08016804
 8000f3c:	c007f800 	.word	0xc007f800
 8000f40:	20000034 	.word	0x20000034
 8000f44:	08016828 	.word	0x08016828
 8000f48:	90004e20 	.word	0x90004e20
 8000f4c:	90009c40 	.word	0x90009c40
 8000f50:	9000e4e8 	.word	0x9000e4e8
 8000f54:	90013308 	.word	0x90013308
 8000f58:	90000000 	.word	0x90000000

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	; 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f014 fa70 	bl	8015450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f80:	f006 fb54 	bl	800762c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <SystemClock_Config+0xd8>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a2a      	ldr	r2, [pc, #168]	; (8001034 <SystemClock_Config+0xd8>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b28      	ldr	r3, [pc, #160]	; (8001034 <SystemClock_Config+0xd8>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <SystemClock_Config+0xdc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a25      	ldr	r2, [pc, #148]	; (8001038 <SystemClock_Config+0xdc>)
 8000fa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <SystemClock_Config+0xdc>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fc8:	2319      	movs	r3, #25
 8000fca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000fcc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000fd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 f8d8 	bl	8008194 <HAL_RCC_OscConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fea:	f000 fa8b 	bl	8001504 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fee:	f006 fb2d 	bl	800764c <HAL_PWREx_EnableOverDrive>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ff8:	f000 fa84 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001008:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800100e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001012:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2106      	movs	r1, #6
 800101a:	4618      	mov	r0, r3
 800101c:	f007 fb5e 	bl	80086dc <HAL_RCC_ClockConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001026:	f000 fa6d 	bl	8001504 <Error_Handler>
  }
}
 800102a:	bf00      	nop
 800102c:	3750      	adds	r7, #80	; 0x50
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_DMA2D_Init+0x5c>)
 8001042:	4a16      	ldr	r2, [pc, #88]	; (800109c <MX_DMA2D_Init+0x60>)
 8001044:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_DMA2D_Init+0x5c>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_DMA2D_Init+0x5c>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_DMA2D_Init+0x5c>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_DMA2D_Init+0x5c>)
 800105a:	2200      	movs	r2, #0
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_DMA2D_Init+0x5c>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_DMA2D_Init+0x5c>)
 8001066:	2200      	movs	r2, #0
 8001068:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_DMA2D_Init+0x5c>)
 800106c:	2200      	movs	r2, #0
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001070:	4809      	ldr	r0, [pc, #36]	; (8001098 <MX_DMA2D_Init+0x5c>)
 8001072:	f003 fc2b 	bl	80048cc <HAL_DMA2D_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800107c:	f000 fa42 	bl	8001504 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001080:	2101      	movs	r1, #1
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_DMA2D_Init+0x5c>)
 8001084:	f003 fd80 	bl	8004b88 <HAL_DMA2D_ConfigLayer>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800108e:	f000 fa39 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000628 	.word	0x20000628
 800109c:	4002b000 	.word	0x4002b000

080010a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b09a      	sub	sp, #104	; 0x68
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	2234      	movs	r2, #52	; 0x34
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f014 f9ce 	bl	8015450 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2234      	movs	r2, #52	; 0x34
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f014 f9c8 	bl	8015450 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010c0:	4b52      	ldr	r3, [pc, #328]	; (800120c <MX_LTDC_Init+0x16c>)
 80010c2:	4a53      	ldr	r2, [pc, #332]	; (8001210 <MX_LTDC_Init+0x170>)
 80010c4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010c6:	4b51      	ldr	r3, [pc, #324]	; (800120c <MX_LTDC_Init+0x16c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010cc:	4b4f      	ldr	r3, [pc, #316]	; (800120c <MX_LTDC_Init+0x16c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010d2:	4b4e      	ldr	r3, [pc, #312]	; (800120c <MX_LTDC_Init+0x16c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <MX_LTDC_Init+0x16c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80010de:	4b4b      	ldr	r3, [pc, #300]	; (800120c <MX_LTDC_Init+0x16c>)
 80010e0:	2228      	movs	r2, #40	; 0x28
 80010e2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <MX_LTDC_Init+0x16c>)
 80010e6:	2209      	movs	r2, #9
 80010e8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80010ea:	4b48      	ldr	r3, [pc, #288]	; (800120c <MX_LTDC_Init+0x16c>)
 80010ec:	2235      	movs	r2, #53	; 0x35
 80010ee:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80010f0:	4b46      	ldr	r3, [pc, #280]	; (800120c <MX_LTDC_Init+0x16c>)
 80010f2:	220b      	movs	r2, #11
 80010f4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80010f6:	4b45      	ldr	r3, [pc, #276]	; (800120c <MX_LTDC_Init+0x16c>)
 80010f8:	f240 2215 	movw	r2, #533	; 0x215
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80010fe:	4b43      	ldr	r3, [pc, #268]	; (800120c <MX_LTDC_Init+0x16c>)
 8001100:	f240 121b 	movw	r2, #283	; 0x11b
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <MX_LTDC_Init+0x16c>)
 8001108:	f240 2235 	movw	r2, #565	; 0x235
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800110e:	4b3f      	ldr	r3, [pc, #252]	; (800120c <MX_LTDC_Init+0x16c>)
 8001110:	f240 121d 	movw	r2, #285	; 0x11d
 8001114:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <MX_LTDC_Init+0x16c>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 255;
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <MX_LTDC_Init+0x16c>)
 8001120:	22ff      	movs	r2, #255	; 0xff
 8001122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001126:	4b39      	ldr	r3, [pc, #228]	; (800120c <MX_LTDC_Init+0x16c>)
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800112e:	4837      	ldr	r0, [pc, #220]	; (800120c <MX_LTDC_Init+0x16c>)
 8001130:	f005 ffc6 	bl	80070c0 <HAL_LTDC_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800113a:	f000 f9e3 	bl	8001504 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8001142:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 800114c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001150:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 8001152:	2303      	movs	r3, #3
 8001154:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001156:	23ff      	movs	r3, #255	; 0xff
 8001158:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800115e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001162:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001164:	2307      	movs	r3, #7
 8001166:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 800116c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001170:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001172:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001176:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800118a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	481e      	ldr	r0, [pc, #120]	; (800120c <MX_LTDC_Init+0x16c>)
 8001194:	f006 f864 	bl	8007260 <HAL_LTDC_ConfigLayer>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_LTDC_Init+0x102>
  {
    Error_Handler();
 800119e:	f000 f9b1 	bl	8001504 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 480;
 80011a6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011aa:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 272;
 80011b0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011b4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB1555;
 80011b6:	2303      	movs	r3, #3
 80011b8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 255;
 80011ba:	23ff      	movs	r3, #255	; 0xff
 80011bc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80011c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80011c6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80011c8:	2307      	movs	r3, #7
 80011ca:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 480;
 80011d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 272;
 80011d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80011ee:	463b      	mov	r3, r7
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_LTDC_Init+0x16c>)
 80011f6:	f006 f833 	bl	8007260 <HAL_LTDC_ConfigLayer>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_LTDC_Init+0x164>
  {
    Error_Handler();
 8001200:	f000 f980 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3768      	adds	r7, #104	; 0x68
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000668 	.word	0x20000668
 8001210:	40016800 	.word	0x40016800

08001214 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_QUADSPI_Init+0x50>)
 800121a:	4a13      	ldr	r2, [pc, #76]	; (8001268 <MX_QUADSPI_Init+0x54>)
 800121c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_QUADSPI_Init+0x50>)
 8001220:	22ff      	movs	r2, #255	; 0xff
 8001222:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_QUADSPI_Init+0x50>)
 8001226:	2201      	movs	r2, #1
 8001228:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_QUADSPI_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_QUADSPI_Init+0x50>)
 8001232:	2201      	movs	r2, #1
 8001234:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_QUADSPI_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_QUADSPI_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_QUADSPI_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_QUADSPI_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_QUADSPI_Init+0x50>)
 8001250:	f006 fa4c 	bl	80076ec <HAL_QSPI_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800125a:	f000 f953 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000710 	.word	0x20000710
 8001268:	a0001000 	.word	0xa0001000

0800126c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001272:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <MX_USART1_UART_Init+0x5c>)
 8001274:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_USART1_UART_Init+0x58>)
 80012b0:	f008 f87b 	bl	80093aa <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ba:	f000 f923 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000075c 	.word	0x2000075c
 80012c8:	40011000 	.word	0x40011000

080012cc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <MX_FMC_Init+0x94>)
 80012e6:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <MX_FMC_Init+0x98>)
 80012e8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_FMC_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_FMC_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_FMC_Init+0x94>)
 80012f8:	2204      	movs	r2, #4
 80012fa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_FMC_Init+0x94>)
 80012fe:	2210      	movs	r2, #16
 8001300:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <MX_FMC_Init+0x94>)
 8001304:	2240      	movs	r2, #64	; 0x40
 8001306:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_FMC_Init+0x94>)
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_FMC_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_FMC_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_FMC_Init+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_FMC_Init+0x94>)
 8001322:	2200      	movs	r2, #0
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001326:	2310      	movs	r3, #16
 8001328:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800132a:	2310      	movs	r3, #16
 800132c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800132e:	2310      	movs	r3, #16
 8001330:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001332:	2310      	movs	r3, #16
 8001334:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001336:	2310      	movs	r3, #16
 8001338:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800133a:	2310      	movs	r3, #16
 800133c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800133e:	2310      	movs	r3, #16
 8001340:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4619      	mov	r1, r3
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <MX_FMC_Init+0x94>)
 8001348:	f007 ff9e 	bl	8009288 <HAL_SDRAM_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001352:	f000 f8d7 	bl	8001504 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200007e4 	.word	0x200007e4
 8001364:	a0000140 	.word	0xa0000140

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b090      	sub	sp, #64	; 0x40
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800137e:	4b5e      	ldr	r3, [pc, #376]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a5d      	ldr	r2, [pc, #372]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <MX_GPIO_Init+0x190>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001396:	4b58      	ldr	r3, [pc, #352]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a57      	ldr	r2, [pc, #348]	; (80014f8 <MX_GPIO_Init+0x190>)
 800139c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b55      	ldr	r3, [pc, #340]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b52      	ldr	r3, [pc, #328]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a51      	ldr	r2, [pc, #324]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b4f      	ldr	r3, [pc, #316]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	623b      	str	r3, [r7, #32]
 80013c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013c6:	4b4c      	ldr	r3, [pc, #304]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b49      	ldr	r3, [pc, #292]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013de:	4b46      	ldr	r3, [pc, #280]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a45      	ldr	r2, [pc, #276]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013e4:	f043 0308 	orr.w	r3, r3, #8
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	61bb      	str	r3, [r7, #24]
 80013f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013f6:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <MX_GPIO_Init+0x190>)
 80013fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800140e:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a39      	ldr	r2, [pc, #228]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001414:	f043 0320 	orr.w	r3, r3, #32
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <MX_GPIO_Init+0x190>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001426:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a33      	ldr	r2, [pc, #204]	; (80014f8 <MX_GPIO_Init+0x190>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a2d      	ldr	r2, [pc, #180]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <MX_GPIO_Init+0x190>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a27      	ldr	r2, [pc, #156]	; (80014f8 <MX_GPIO_Init+0x190>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a21      	ldr	r2, [pc, #132]	; (80014f8 <MX_GPIO_Init+0x190>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_GPIO_Init+0x190>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2108      	movs	r1, #8
 800148a:	481c      	ldr	r0, [pc, #112]	; (80014fc <MX_GPIO_Init+0x194>)
 800148c:	f005 f854 	bl	8006538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f241 0102 	movw	r1, #4098	; 0x1002
 8001496:	481a      	ldr	r0, [pc, #104]	; (8001500 <MX_GPIO_Init+0x198>)
 8001498:	f005 f84e 	bl	8006538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800149c:	2308      	movs	r3, #8
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b0:	4619      	mov	r1, r3
 80014b2:	4812      	ldr	r0, [pc, #72]	; (80014fc <MX_GPIO_Init+0x194>)
 80014b4:	f004 fd88 	bl	8005fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LCD_DISP_Pin;
 80014b8:	f241 0302 	movw	r3, #4098	; 0x1002
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ce:	4619      	mov	r1, r3
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <MX_GPIO_Init+0x198>)
 80014d2:	f004 fd79 	bl	8005fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80014d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_GPIO_Init+0x198>)
 80014ec:	f004 fd6c 	bl	8005fc8 <HAL_GPIO_Init>

}
 80014f0:	bf00      	nop
 80014f2:	3740      	adds	r7, #64	; 0x40
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40022800 	.word	0x40022800
 8001500:	40022000 	.word	0x40022000

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	e7fe      	b.n	800150c <Error_Handler+0x8>
	...

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x44>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_MspInit+0x44>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_MspInit+0x44>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_MspInit+0x44>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_MspInit+0x44>)
 8001534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_MspInit+0x44>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_DMA2D_MspInit+0x38>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10b      	bne.n	8001582 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_DMA2D_MspInit+0x3c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_DMA2D_MspInit+0x3c>)
 8001570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_DMA2D_MspInit+0x3c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	4002b000 	.word	0x4002b000
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0ae      	sub	sp, #184	; 0xb8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	2284      	movs	r2, #132	; 0x84
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f013 ff49 	bl	8015450 <memset>
  if(hltdc->Instance==LTDC)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a6a      	ldr	r2, [pc, #424]	; (800176c <HAL_LTDC_MspInit+0x1d4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	f040 80cd 	bne.w	8001764 <HAL_LTDC_MspInit+0x1cc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80015ca:	2308      	movs	r3, #8
 80015cc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80015ce:	23c0      	movs	r3, #192	; 0xc0
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80015d2:	2305      	movs	r3, #5
 80015d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80015d6:	2302      	movs	r3, #2
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80015da:	2300      	movs	r3, #0
 80015dc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80015e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e8:	f107 0320 	add.w	r3, r7, #32
 80015ec:	4618      	mov	r0, r3
 80015ee:	f007 fa5b 	bl	8008aa8 <HAL_RCCEx_PeriphCLKConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 80015f8:	f7ff ff84 	bl	8001504 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80015fc:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	4a5b      	ldr	r2, [pc, #364]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 8001602:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001606:	6453      	str	r3, [r2, #68]	; 0x44
 8001608:	4b59      	ldr	r3, [pc, #356]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001610:	61fb      	str	r3, [r7, #28]
 8001612:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001614:	4b56      	ldr	r3, [pc, #344]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	4a55      	ldr	r2, [pc, #340]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	6313      	str	r3, [r2, #48]	; 0x30
 8001620:	4b53      	ldr	r3, [pc, #332]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 8001622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800162c:	4b50      	ldr	r3, [pc, #320]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	4a4f      	ldr	r2, [pc, #316]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 8001632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001636:	6313      	str	r3, [r2, #48]	; 0x30
 8001638:	4b4d      	ldr	r3, [pc, #308]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001644:	4b4a      	ldr	r3, [pc, #296]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	4a49      	ldr	r2, [pc, #292]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 800164a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164e:	6313      	str	r3, [r2, #48]	; 0x30
 8001650:	4b47      	ldr	r3, [pc, #284]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800165c:	4b44      	ldr	r3, [pc, #272]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4a43      	ldr	r2, [pc, #268]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 8001662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001674:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	4a3d      	ldr	r2, [pc, #244]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
 8001680:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <HAL_LTDC_MspInit+0x1d8>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800168c:	2310      	movs	r3, #16
 800168e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016a4:	230e      	movs	r3, #14
 80016a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ae:	4619      	mov	r1, r3
 80016b0:	4830      	ldr	r0, [pc, #192]	; (8001774 <HAL_LTDC_MspInit+0x1dc>)
 80016b2:	f004 fc89 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80016b6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80016ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016d0:	230e      	movs	r3, #14
 80016d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80016d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016da:	4619      	mov	r1, r3
 80016dc:	4826      	ldr	r0, [pc, #152]	; (8001778 <HAL_LTDC_MspInit+0x1e0>)
 80016de:	f004 fc73 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80016e2:	23f7      	movs	r3, #247	; 0xf7
 80016e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016fa:	230e      	movs	r3, #14
 80016fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001700:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001704:	4619      	mov	r1, r3
 8001706:	481d      	ldr	r0, [pc, #116]	; (800177c <HAL_LTDC_MspInit+0x1e4>)
 8001708:	f004 fc5e 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800170c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001710:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001726:	2309      	movs	r3, #9
 8001728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800172c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001730:	4619      	mov	r1, r3
 8001732:	4813      	ldr	r0, [pc, #76]	; (8001780 <HAL_LTDC_MspInit+0x1e8>)
 8001734:	f004 fc48 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001738:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800173c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001752:	230e      	movs	r3, #14
 8001754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001758:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800175c:	4619      	mov	r1, r3
 800175e:	4809      	ldr	r0, [pc, #36]	; (8001784 <HAL_LTDC_MspInit+0x1ec>)
 8001760:	f004 fc32 	bl	8005fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	37b8      	adds	r7, #184	; 0xb8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40016800 	.word	0x40016800
 8001770:	40023800 	.word	0x40023800
 8001774:	40021000 	.word	0x40021000
 8001778:	40022400 	.word	0x40022400
 800177c:	40022800 	.word	0x40022800
 8001780:	40021800 	.word	0x40021800
 8001784:	40022000 	.word	0x40022000

08001788 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a3b      	ldr	r2, [pc, #236]	; (8001894 <HAL_QSPI_MspInit+0x10c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d170      	bne.n	800188c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017aa:	4b3b      	ldr	r3, [pc, #236]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	4a3a      	ldr	r2, [pc, #232]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6393      	str	r3, [r2, #56]	; 0x38
 80017b6:	4b38      	ldr	r3, [pc, #224]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 80017b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c2:	4b35      	ldr	r3, [pc, #212]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a34      	ldr	r2, [pc, #208]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b32      	ldr	r3, [pc, #200]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a2e      	ldr	r2, [pc, #184]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a28      	ldr	r2, [pc, #160]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_QSPI_MspInit+0x110>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800180a:	2304      	movs	r3, #4
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800181a:	2309      	movs	r3, #9
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	481d      	ldr	r0, [pc, #116]	; (800189c <HAL_QSPI_MspInit+0x114>)
 8001826:	f004 fbcf 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800182a:	2340      	movs	r3, #64	; 0x40
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800183a:	230a      	movs	r3, #10
 800183c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	4816      	ldr	r0, [pc, #88]	; (80018a0 <HAL_QSPI_MspInit+0x118>)
 8001846:	f004 fbbf 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800184a:	2304      	movs	r3, #4
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800185a:	2309      	movs	r3, #9
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	480e      	ldr	r0, [pc, #56]	; (80018a0 <HAL_QSPI_MspInit+0x118>)
 8001866:	f004 fbaf 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 800186a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800186e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800187c:	2309      	movs	r3, #9
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <HAL_QSPI_MspInit+0x11c>)
 8001888:	f004 fb9e 	bl	8005fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3730      	adds	r7, #48	; 0x30
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	a0001000 	.word	0xa0001000
 8001898:	40023800 	.word	0x40023800
 800189c:	40021000 	.word	0x40021000
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40020c00 	.word	0x40020c00

080018a8 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <HAL_QSPI_MspDeInit+0x40>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d112      	bne.n	80018e0 <HAL_QSPI_MspDeInit+0x38>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_QSPI_MspDeInit+0x44>)
 80018bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_QSPI_MspDeInit+0x44>)
 80018c0:	f023 0302 	bic.w	r3, r3, #2
 80018c4:	6393      	str	r3, [r2, #56]	; 0x38
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80018c6:	2104      	movs	r1, #4
 80018c8:	4809      	ldr	r0, [pc, #36]	; (80018f0 <HAL_QSPI_MspDeInit+0x48>)
 80018ca:	f004 fd29 	bl	8006320 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 80018ce:	2144      	movs	r1, #68	; 0x44
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <HAL_QSPI_MspDeInit+0x4c>)
 80018d2:	f004 fd25 	bl	8006320 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80018d6:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <HAL_QSPI_MspDeInit+0x50>)
 80018dc:	f004 fd20 	bl	8006320 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	a0001000 	.word	0xa0001000
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40020400 	.word	0x40020400
 80018f8:	40020c00 	.word	0x40020c00

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b0ac      	sub	sp, #176	; 0xb0
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001914:	f107 0318 	add.w	r3, r7, #24
 8001918:	2284      	movs	r2, #132	; 0x84
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f013 fd97 	bl	8015450 <memset>
  if(huart->Instance==USART1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a32      	ldr	r2, [pc, #200]	; (80019f0 <HAL_UART_MspInit+0xf4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d15c      	bne.n	80019e6 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800192c:	2340      	movs	r3, #64	; 0x40
 800192e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001930:	2300      	movs	r3, #0
 8001932:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	4618      	mov	r0, r3
 800193a:	f007 f8b5 	bl	8008aa8 <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001944:	f7ff fdde 	bl	8001504 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_UART_MspInit+0xf8>)
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <HAL_UART_MspInit+0xf8>)
 800194e:	f043 0310 	orr.w	r3, r3, #16
 8001952:	6453      	str	r3, [r2, #68]	; 0x44
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_UART_MspInit+0xf8>)
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <HAL_UART_MspInit+0xf8>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4a23      	ldr	r2, [pc, #140]	; (80019f4 <HAL_UART_MspInit+0xf8>)
 8001966:	f043 0302 	orr.w	r3, r3, #2
 800196a:	6313      	str	r3, [r2, #48]	; 0x30
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <HAL_UART_MspInit+0xf8>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_UART_MspInit+0xf8>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <HAL_UART_MspInit+0xf8>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6313      	str	r3, [r2, #48]	; 0x30
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_UART_MspInit+0xf8>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019a8:	2307      	movs	r3, #7
 80019aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019b2:	4619      	mov	r1, r3
 80019b4:	4810      	ldr	r0, [pc, #64]	; (80019f8 <HAL_UART_MspInit+0xfc>)
 80019b6:	f004 fb07 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ce:	2303      	movs	r3, #3
 80019d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019d4:	2307      	movs	r3, #7
 80019d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019de:	4619      	mov	r1, r3
 80019e0:	4806      	ldr	r0, [pc, #24]	; (80019fc <HAL_UART_MspInit+0x100>)
 80019e2:	f004 faf1 	bl	8005fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	37b0      	adds	r7, #176	; 0xb0
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40011000 	.word	0x40011000
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020000 	.word	0x40020000

08001a00 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001a14:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_FMC_MspInit+0xe4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d15e      	bne.n	8001ada <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8001a1c:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <HAL_FMC_MspInit+0xe4>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a22:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <HAL_FMC_MspInit+0xe8>)
 8001a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a26:	4a30      	ldr	r2, [pc, #192]	; (8001ae8 <HAL_FMC_MspInit+0xe8>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6393      	str	r3, [r2, #56]	; 0x38
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <HAL_FMC_MspInit+0xe8>)
 8001a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8001a3a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	4619      	mov	r1, r3
 8001a54:	4825      	ldr	r0, [pc, #148]	; (8001aec <HAL_FMC_MspInit+0xec>)
 8001a56:	f004 fab7 	bl	8005fc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001a5a:	f248 1333 	movw	r3, #33075	; 0x8133
 8001a5e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	481e      	ldr	r0, [pc, #120]	; (8001af0 <HAL_FMC_MspInit+0xf0>)
 8001a76:	f004 faa7 	bl	8005fc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001a7a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001a7e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a8c:	230c      	movs	r3, #12
 8001a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4817      	ldr	r0, [pc, #92]	; (8001af4 <HAL_FMC_MspInit+0xf4>)
 8001a96:	f004 fa97 	bl	8005fc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a9a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a9e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aac:	230c      	movs	r3, #12
 8001aae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4810      	ldr	r0, [pc, #64]	; (8001af8 <HAL_FMC_MspInit+0xf8>)
 8001ab6:	f004 fa87 	bl	8005fc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8001aba:	232c      	movs	r3, #44	; 0x2c
 8001abc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001aca:	230c      	movs	r3, #12
 8001acc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480a      	ldr	r0, [pc, #40]	; (8001afc <HAL_FMC_MspInit+0xfc>)
 8001ad4:	f004 fa78 	bl	8005fc8 <HAL_GPIO_Init>
 8001ad8:	e000      	b.n	8001adc <HAL_FMC_MspInit+0xdc>
    return;
 8001ada:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000081c 	.word	0x2000081c
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40021800 	.word	0x40021800
 8001af4:	40020c00 	.word	0x40020c00
 8001af8:	40021400 	.word	0x40021400
 8001afc:	40021c00 	.word	0x40021c00

08001b00 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b08:	f7ff ff7a 	bl	8001a00 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b34:	f002 fb46 	bl	80041c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
	return 1;
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_kill>:

int _kill(int pid, int sig)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <_kill+0x20>)
 8001b58:	2216      	movs	r2, #22
 8001b5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	20008cfc 	.word	0x20008cfc

08001b70 <_exit>:

void _exit (int status)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ffe5 	bl	8001b4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b82:	e7fe      	b.n	8001b82 <_exit+0x12>

08001b84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	e00a      	b.n	8001bac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b96:	f3af 8000 	nop.w
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	b2ca      	uxtb	r2, r1
 8001ba4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	dbf0      	blt.n	8001b96 <_read+0x12>
	}

return len;
 8001bb4:	687b      	ldr	r3, [r7, #4]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be6:	605a      	str	r2, [r3, #4]
	return 0;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_isatty>:

int _isatty(int file)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
	return 1;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
	return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d205      	bcs.n	8001c64 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <_sbrk+0x6c>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	e009      	b.n	8001c78 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <_sbrk+0x64>)
 8001c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	20050000 	.word	0x20050000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	20000820 	.word	0x20000820
 8001c90:	20008d10 	.word	0x20008d10
 8001c94:	20008cfc 	.word	0x20008cfc

08001c98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <SystemInit+0x20>)
 8001c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <SystemInit+0x20>)
 8001ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc0:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cc2:	490e      	ldr	r1, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd8:	4c0b      	ldr	r4, [pc, #44]	; (8001d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ce6:	f7ff ffd7 	bl	8001c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cea:	f013 fb6f 	bl	80153cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cee:	f7ff f88b 	bl	8000e08 <main>
  bx  lr    
 8001cf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cfc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001d00:	0801b3c0 	.word	0x0801b3c0
  ldr r2, =_sbss
 8001d04:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001d08:	20008d0c 	.word	0x20008d0c

08001d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC_IRQHandler>

08001d0e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <LAN8742_RegisterBusIO+0x28>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <LAN8742_RegisterBusIO+0x28>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <LAN8742_RegisterBusIO+0x28>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	e014      	b.n	8001d66 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d17c      	bne.n	8001e8c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e01c      	b.n	8001de6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	f107 0208 	add.w	r2, r7, #8
 8001db4:	2112      	movs	r1, #18
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	4798      	blx	r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	da03      	bge.n	8001dc8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001dc0:	f06f 0304 	mvn.w	r3, #4
 8001dc4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001dc6:	e00b      	b.n	8001de0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d105      	bne.n	8001de0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
         break;
 8001dde:	e005      	b.n	8001dec <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b1f      	cmp	r3, #31
 8001dea:	d9df      	bls.n	8001dac <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b1f      	cmp	r3, #31
 8001df2:	d902      	bls.n	8001dfa <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001df4:	f06f 0302 	mvn.w	r3, #2
 8001df8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d145      	bne.n	8001e8c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6810      	ldr	r0, [r2, #0]
 8001e08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4798      	blx	r3
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db37      	blt.n	8001e86 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6810      	ldr	r0, [r2, #0]
 8001e1e:	f107 0208 	add.w	r2, r7, #8
 8001e22:	2100      	movs	r1, #0
 8001e24:	4798      	blx	r3
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db28      	blt.n	8001e7e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4798      	blx	r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001e36:	e01c      	b.n	8001e72 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4798      	blx	r3
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e4a:	d80e      	bhi.n	8001e6a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6810      	ldr	r0, [r2, #0]
 8001e54:	f107 0208 	add.w	r2, r7, #8
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4798      	blx	r3
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da07      	bge.n	8001e72 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001e62:	f06f 0304 	mvn.w	r3, #4
 8001e66:	613b      	str	r3, [r7, #16]
                 break;
 8001e68:	e010      	b.n	8001e8c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001e6a:	f06f 0301 	mvn.w	r3, #1
 8001e6e:	613b      	str	r3, [r7, #16]
               break;
 8001e70:	e00c      	b.n	8001e8c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1dd      	bne.n	8001e38 <LAN8742_Init+0xc6>
 8001e7c:	e006      	b.n	8001e8c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001e7e:	f06f 0304 	mvn.w	r3, #4
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	e002      	b.n	8001e8c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001e86:	f06f 0303 	mvn.w	r3, #3
 8001e8a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d112      	bne.n	8001eb8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	4798      	blx	r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001e9c:	bf00      	nop
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	4798      	blx	r3
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001eb0:	d9f5      	bls.n	8001e9e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 }
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6810      	ldr	r0, [r2, #0]
 8001ed6:	f107 020c 	add.w	r2, r7, #12
 8001eda:	2101      	movs	r1, #1
 8001edc:	4798      	blx	r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da02      	bge.n	8001eea <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ee4:	f06f 0304 	mvn.w	r3, #4
 8001ee8:	e06e      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6810      	ldr	r0, [r2, #0]
 8001ef2:	f107 020c 	add.w	r2, r7, #12
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	4798      	blx	r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	da02      	bge.n	8001f06 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f00:	f06f 0304 	mvn.w	r3, #4
 8001f04:	e060      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001f10:	2301      	movs	r3, #1
 8001f12:	e059      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6810      	ldr	r0, [r2, #0]
 8001f1c:	f107 020c 	add.w	r2, r7, #12
 8001f20:	2100      	movs	r1, #0
 8001f22:	4798      	blx	r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	da02      	bge.n	8001f30 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001f2a:	f06f 0304 	mvn.w	r3, #4
 8001f2e:	e04b      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d11b      	bne.n	8001f72 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <LAN8742_GetLinkState+0x90>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e03a      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e033      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e02c      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e02a      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6810      	ldr	r0, [r2, #0]
 8001f7a:	f107 020c 	add.w	r2, r7, #12
 8001f7e:	211f      	movs	r1, #31
 8001f80:	4798      	blx	r3
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	da02      	bge.n	8001f8e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001f88:	f06f 0304 	mvn.w	r3, #4
 8001f8c:	e01c      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001f98:	2306      	movs	r3, #6
 8001f9a:	e015      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 031c 	and.w	r3, r3, #28
 8001fa2:	2b18      	cmp	r3, #24
 8001fa4:	d101      	bne.n	8001faa <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e00e      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 031c 	and.w	r3, r3, #28
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d101      	bne.n	8001fb8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e007      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 031c 	and.w	r3, r3, #28
 8001fbe:	2b14      	cmp	r3, #20
 8001fc0:	d101      	bne.n	8001fc6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e000      	b.n	8001fc8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001fc6:	2305      	movs	r3, #5
    }				
  }
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8001fda:	20c8      	movs	r0, #200	; 0xc8
 8001fdc:	f000 fc32 	bl	8002844 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001fe0:	f000 fa7a 	bl	80024d8 <ft5336_I2C_InitializeIfRequired>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8002014:	2300      	movs	r3, #0
 8002016:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002018:	f000 fa5e 	bl	80024d8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e010      	b.n	8002044 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	21a8      	movs	r1, #168	; 0xa8
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fbed 	bl	8002808 <TS_IO_Read>
 800202e:	4603      	mov	r3, r0
 8002030:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8002032:	7b7b      	ldrb	r3, [r7, #13]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b51      	cmp	r3, #81	; 0x51
 8002038:	d101      	bne.n	800203e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	3301      	adds	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d802      	bhi.n	8002050 <ft5336_ReadID+0x4e>
 800204a:	7bbb      	ldrb	r3, [r7, #14]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0e8      	beq.n	8002022 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002050:	7b7b      	ldrb	r3, [r7, #13]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	b29b      	uxth	r3, r3
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 fa44 	bl	80024f8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f932 	bl	80022dc <ft5336_TS_DisableIT>
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2102      	movs	r1, #2
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fbb7 	bl	8002808 <TS_IO_Read>
 800209a:	4603      	mov	r3, r0
 800209c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d901      	bls.n	80020b6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <ft5336_TS_DetectTouch+0x50>)
 80020bc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <ft5336_TS_DetectTouch+0x50>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	b2db      	uxtb	r3, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000824 	.word	0x20000824

080020d4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80020f6:	4b6d      	ldr	r3, [pc, #436]	; (80022ac <ft5336_TS_GetXY+0x1d8>)
 80020f8:	789a      	ldrb	r2, [r3, #2]
 80020fa:	4b6c      	ldr	r3, [pc, #432]	; (80022ac <ft5336_TS_GetXY+0x1d8>)
 80020fc:	785b      	ldrb	r3, [r3, #1]
 80020fe:	429a      	cmp	r2, r3
 8002100:	f080 80cf 	bcs.w	80022a2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8002104:	4b69      	ldr	r3, [pc, #420]	; (80022ac <ft5336_TS_GetXY+0x1d8>)
 8002106:	789b      	ldrb	r3, [r3, #2]
 8002108:	2b09      	cmp	r3, #9
 800210a:	d871      	bhi.n	80021f0 <ft5336_TS_GetXY+0x11c>
 800210c:	a201      	add	r2, pc, #4	; (adr r2, 8002114 <ft5336_TS_GetXY+0x40>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	0800213d 	.word	0x0800213d
 8002118:	0800214f 	.word	0x0800214f
 800211c:	08002161 	.word	0x08002161
 8002120:	08002173 	.word	0x08002173
 8002124:	08002185 	.word	0x08002185
 8002128:	08002197 	.word	0x08002197
 800212c:	080021a9 	.word	0x080021a9
 8002130:	080021bb 	.word	0x080021bb
 8002134:	080021cd 	.word	0x080021cd
 8002138:	080021df 	.word	0x080021df
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800213c:	2304      	movs	r3, #4
 800213e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002140:	2303      	movs	r3, #3
 8002142:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8002144:	2306      	movs	r3, #6
 8002146:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002148:	2305      	movs	r3, #5
 800214a:	753b      	strb	r3, [r7, #20]
      break;
 800214c:	e051      	b.n	80021f2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800214e:	230a      	movs	r3, #10
 8002150:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8002152:	2309      	movs	r3, #9
 8002154:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8002156:	230c      	movs	r3, #12
 8002158:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800215a:	230b      	movs	r3, #11
 800215c:	753b      	strb	r3, [r7, #20]
      break;
 800215e:	e048      	b.n	80021f2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002160:	2310      	movs	r3, #16
 8002162:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8002164:	230f      	movs	r3, #15
 8002166:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002168:	2312      	movs	r3, #18
 800216a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800216c:	2311      	movs	r3, #17
 800216e:	753b      	strb	r3, [r7, #20]
      break;
 8002170:	e03f      	b.n	80021f2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8002172:	2316      	movs	r3, #22
 8002174:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8002176:	2315      	movs	r3, #21
 8002178:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800217a:	2318      	movs	r3, #24
 800217c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800217e:	2317      	movs	r3, #23
 8002180:	753b      	strb	r3, [r7, #20]
      break;
 8002182:	e036      	b.n	80021f2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8002184:	231c      	movs	r3, #28
 8002186:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8002188:	231b      	movs	r3, #27
 800218a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800218c:	231e      	movs	r3, #30
 800218e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8002190:	231d      	movs	r3, #29
 8002192:	753b      	strb	r3, [r7, #20]
      break;
 8002194:	e02d      	b.n	80021f2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8002196:	2322      	movs	r3, #34	; 0x22
 8002198:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800219a:	2321      	movs	r3, #33	; 0x21
 800219c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800219e:	2324      	movs	r3, #36	; 0x24
 80021a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80021a2:	2323      	movs	r3, #35	; 0x23
 80021a4:	753b      	strb	r3, [r7, #20]
      break;
 80021a6:	e024      	b.n	80021f2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80021a8:	2328      	movs	r3, #40	; 0x28
 80021aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80021ac:	2327      	movs	r3, #39	; 0x27
 80021ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80021b0:	232a      	movs	r3, #42	; 0x2a
 80021b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80021b4:	2329      	movs	r3, #41	; 0x29
 80021b6:	753b      	strb	r3, [r7, #20]
      break;
 80021b8:	e01b      	b.n	80021f2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80021ba:	232e      	movs	r3, #46	; 0x2e
 80021bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80021be:	232d      	movs	r3, #45	; 0x2d
 80021c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80021c2:	2330      	movs	r3, #48	; 0x30
 80021c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80021c6:	232f      	movs	r3, #47	; 0x2f
 80021c8:	753b      	strb	r3, [r7, #20]
      break;
 80021ca:	e012      	b.n	80021f2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80021cc:	2334      	movs	r3, #52	; 0x34
 80021ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80021d0:	2333      	movs	r3, #51	; 0x33
 80021d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80021d4:	2336      	movs	r3, #54	; 0x36
 80021d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80021d8:	2335      	movs	r3, #53	; 0x35
 80021da:	753b      	strb	r3, [r7, #20]
      break;
 80021dc:	e009      	b.n	80021f2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80021de:	233a      	movs	r3, #58	; 0x3a
 80021e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80021e2:	2339      	movs	r3, #57	; 0x39
 80021e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80021e6:	233c      	movs	r3, #60	; 0x3c
 80021e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80021ea:	233b      	movs	r3, #59	; 0x3b
 80021ec:	753b      	strb	r3, [r7, #20]
      break;
 80021ee:	e000      	b.n	80021f2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80021f0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80021f2:	89fb      	ldrh	r3, [r7, #14]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	7dfa      	ldrb	r2, [r7, #23]
 80021f8:	4611      	mov	r1, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fb04 	bl	8002808 <TS_IO_Read>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	b29a      	uxth	r2, r3
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <ft5336_TS_GetXY+0x1dc>)
 800220c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800220e:	89fb      	ldrh	r3, [r7, #14]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	7dba      	ldrb	r2, [r7, #22]
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f000 faf6 	bl	8002808 <TS_IO_Read>
 800221c:	4603      	mov	r3, r0
 800221e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800222a:	b21a      	sxth	r2, r3
 800222c:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <ft5336_TS_GetXY+0x1dc>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	b21b      	sxth	r3, r3
 8002232:	4313      	orrs	r3, r2
 8002234:	b21b      	sxth	r3, r3
 8002236:	b29a      	uxth	r2, r3
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <ft5336_TS_GetXY+0x1dc>)
 800223a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <ft5336_TS_GetXY+0x1dc>)
 800223e:	881a      	ldrh	r2, [r3, #0]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8002244:	89fb      	ldrh	r3, [r7, #14]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	7d7a      	ldrb	r2, [r7, #21]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fadb 	bl	8002808 <TS_IO_Read>
 8002252:	4603      	mov	r3, r0
 8002254:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	b29a      	uxth	r2, r3
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <ft5336_TS_GetXY+0x1dc>)
 800225e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002260:	89fb      	ldrh	r3, [r7, #14]
 8002262:	b2db      	uxtb	r3, r3
 8002264:	7d3a      	ldrb	r2, [r7, #20]
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f000 facd 	bl	8002808 <TS_IO_Read>
 800226e:	4603      	mov	r3, r0
 8002270:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002272:	7cfb      	ldrb	r3, [r7, #19]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800227c:	b21a      	sxth	r2, r3
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <ft5336_TS_GetXY+0x1dc>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b21b      	sxth	r3, r3
 8002284:	4313      	orrs	r3, r2
 8002286:	b21b      	sxth	r3, r3
 8002288:	b29a      	uxth	r2, r3
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <ft5336_TS_GetXY+0x1dc>)
 800228c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <ft5336_TS_GetXY+0x1dc>)
 8002290:	881a      	ldrh	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <ft5336_TS_GetXY+0x1d8>)
 8002298:	789b      	ldrb	r3, [r3, #2]
 800229a:	3301      	adds	r3, #1
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4b03      	ldr	r3, [pc, #12]	; (80022ac <ft5336_TS_GetXY+0x1d8>)
 80022a0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000824 	.word	0x20000824
 80022b0:	20000828 	.word	0x20000828

080022b4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	21a4      	movs	r1, #164	; 0xa4
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fa80 	bl	80027d4 <TS_IO_Write>
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	21a4      	movs	r1, #164	; 0xa4
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fa6c 	bl	80027d4 <TS_IO_Write>
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	6039      	str	r1, [r7, #0]
 800233c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2101      	movs	r1, #1
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fa5d 	bl	8002808 <TS_IO_Read>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4603      	mov	r3, r0
 8002372:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8002384:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <ft5336_TS_GetTouchInfo+0x158>)
 8002386:	785b      	ldrb	r3, [r3, #1]
 8002388:	461a      	mov	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4293      	cmp	r3, r2
 800238e:	f080 8090 	bcs.w	80024b2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d85d      	bhi.n	8002454 <ft5336_TS_GetTouchInfo+0xf0>
 8002398:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <ft5336_TS_GetTouchInfo+0x3c>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080023c9 	.word	0x080023c9
 80023a4:	080023d7 	.word	0x080023d7
 80023a8:	080023e5 	.word	0x080023e5
 80023ac:	080023f3 	.word	0x080023f3
 80023b0:	08002401 	.word	0x08002401
 80023b4:	0800240f 	.word	0x0800240f
 80023b8:	0800241d 	.word	0x0800241d
 80023bc:	0800242b 	.word	0x0800242b
 80023c0:	08002439 	.word	0x08002439
 80023c4:	08002447 	.word	0x08002447
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80023c8:	2303      	movs	r3, #3
 80023ca:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80023cc:	2307      	movs	r3, #7
 80023ce:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80023d0:	2308      	movs	r3, #8
 80023d2:	757b      	strb	r3, [r7, #21]
      break;
 80023d4:	e03f      	b.n	8002456 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80023d6:	2309      	movs	r3, #9
 80023d8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80023da:	230d      	movs	r3, #13
 80023dc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80023de:	230e      	movs	r3, #14
 80023e0:	757b      	strb	r3, [r7, #21]
      break;
 80023e2:	e038      	b.n	8002456 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80023e4:	230f      	movs	r3, #15
 80023e6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80023e8:	2313      	movs	r3, #19
 80023ea:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80023ec:	2314      	movs	r3, #20
 80023ee:	757b      	strb	r3, [r7, #21]
      break;
 80023f0:	e031      	b.n	8002456 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80023f2:	2315      	movs	r3, #21
 80023f4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80023f6:	2319      	movs	r3, #25
 80023f8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80023fa:	231a      	movs	r3, #26
 80023fc:	757b      	strb	r3, [r7, #21]
      break;
 80023fe:	e02a      	b.n	8002456 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8002400:	231b      	movs	r3, #27
 8002402:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8002404:	231f      	movs	r3, #31
 8002406:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8002408:	2320      	movs	r3, #32
 800240a:	757b      	strb	r3, [r7, #21]
      break;
 800240c:	e023      	b.n	8002456 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800240e:	2321      	movs	r3, #33	; 0x21
 8002410:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8002412:	2325      	movs	r3, #37	; 0x25
 8002414:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8002416:	2326      	movs	r3, #38	; 0x26
 8002418:	757b      	strb	r3, [r7, #21]
      break;
 800241a:	e01c      	b.n	8002456 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800241c:	2327      	movs	r3, #39	; 0x27
 800241e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8002420:	232b      	movs	r3, #43	; 0x2b
 8002422:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8002424:	232c      	movs	r3, #44	; 0x2c
 8002426:	757b      	strb	r3, [r7, #21]
      break;
 8002428:	e015      	b.n	8002456 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800242a:	232d      	movs	r3, #45	; 0x2d
 800242c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800242e:	2331      	movs	r3, #49	; 0x31
 8002430:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8002432:	2332      	movs	r3, #50	; 0x32
 8002434:	757b      	strb	r3, [r7, #21]
      break;
 8002436:	e00e      	b.n	8002456 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002438:	2333      	movs	r3, #51	; 0x33
 800243a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800243c:	2337      	movs	r3, #55	; 0x37
 800243e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8002440:	2338      	movs	r3, #56	; 0x38
 8002442:	757b      	strb	r3, [r7, #21]
      break;
 8002444:	e007      	b.n	8002456 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8002446:	2339      	movs	r3, #57	; 0x39
 8002448:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800244a:	233d      	movs	r3, #61	; 0x3d
 800244c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800244e:	233e      	movs	r3, #62	; 0x3e
 8002450:	757b      	strb	r3, [r7, #21]
      break;
 8002452:	e000      	b.n	8002456 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8002454:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002456:	89fb      	ldrh	r3, [r7, #14]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	7dfa      	ldrb	r2, [r7, #23]
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f9d2 	bl	8002808 <TS_IO_Read>
 8002464:	4603      	mov	r3, r0
 8002466:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8002468:	7d3b      	ldrb	r3, [r7, #20]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	119b      	asrs	r3, r3, #6
 800246e:	f003 0203 	and.w	r2, r3, #3
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8002476:	89fb      	ldrh	r3, [r7, #14]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	7dba      	ldrb	r2, [r7, #22]
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f9c2 	bl	8002808 <TS_IO_Read>
 8002484:	4603      	mov	r3, r0
 8002486:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8002488:	7d3b      	ldrb	r3, [r7, #20]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8002492:	89fb      	ldrh	r3, [r7, #14]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	7d7a      	ldrb	r2, [r7, #21]
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f9b4 	bl	8002808 <TS_IO_Read>
 80024a0:	4603      	mov	r3, r0
 80024a2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80024a4:	7d3b      	ldrb	r3, [r7, #20]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	111b      	asrs	r3, r3, #4
 80024aa:	f003 0204 	and.w	r2, r3, #4
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000824 	.word	0x20000824

080024c0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000824 	.word	0x20000824

080024d8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80024dc:	f7ff fff0 	bl	80024c0 <ft5336_Get_I2C_InitializedStatus>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d104      	bne.n	80024f0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80024e6:	f000 f96b 	bl	80027c0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80024ea:	4b02      	ldr	r3, [pc, #8]	; (80024f4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
  }
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000824 	.word	0x20000824

080024f8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	; 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a51      	ldr	r2, [pc, #324]	; (8002664 <I2Cx_MspInit+0x150>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d14d      	bne.n	80025c0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002524:	4b50      	ldr	r3, [pc, #320]	; (8002668 <I2Cx_MspInit+0x154>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <I2Cx_MspInit+0x154>)
 800252a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800252e:	6313      	str	r3, [r2, #48]	; 0x30
 8002530:	4b4d      	ldr	r3, [pc, #308]	; (8002668 <I2Cx_MspInit+0x154>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002538:	61bb      	str	r3, [r7, #24]
 800253a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002540:	2312      	movs	r3, #18
 8002542:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002548:	2302      	movs	r3, #2
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800254c:	2304      	movs	r3, #4
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	4619      	mov	r1, r3
 8002556:	4845      	ldr	r0, [pc, #276]	; (800266c <I2Cx_MspInit+0x158>)
 8002558:	f003 fd36 	bl	8005fc8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800255c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	4840      	ldr	r0, [pc, #256]	; (800266c <I2Cx_MspInit+0x158>)
 800256a:	f003 fd2d 	bl	8005fc8 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800256e:	4b3e      	ldr	r3, [pc, #248]	; (8002668 <I2Cx_MspInit+0x154>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a3d      	ldr	r2, [pc, #244]	; (8002668 <I2Cx_MspInit+0x154>)
 8002574:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <I2Cx_MspInit+0x154>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <I2Cx_MspInit+0x154>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	4a37      	ldr	r2, [pc, #220]	; (8002668 <I2Cx_MspInit+0x154>)
 800258c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002590:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002592:	4b35      	ldr	r3, [pc, #212]	; (8002668 <I2Cx_MspInit+0x154>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4a34      	ldr	r2, [pc, #208]	; (8002668 <I2Cx_MspInit+0x154>)
 8002598:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800259c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	210f      	movs	r1, #15
 80025a2:	2048      	movs	r0, #72	; 0x48
 80025a4:	f001 ff2d 	bl	8004402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80025a8:	2048      	movs	r0, #72	; 0x48
 80025aa:	f001 ff46 	bl	800443a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	210f      	movs	r1, #15
 80025b2:	2049      	movs	r0, #73	; 0x49
 80025b4:	f001 ff25 	bl	8004402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80025b8:	2049      	movs	r0, #73	; 0x49
 80025ba:	f001 ff3e 	bl	800443a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80025be:	e04d      	b.n	800265c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <I2Cx_MspInit+0x154>)
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	4a28      	ldr	r2, [pc, #160]	; (8002668 <I2Cx_MspInit+0x154>)
 80025c6:	f043 0302 	orr.w	r3, r3, #2
 80025ca:	6313      	str	r3, [r2, #48]	; 0x30
 80025cc:	4b26      	ldr	r3, [pc, #152]	; (8002668 <I2Cx_MspInit+0x154>)
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80025d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025dc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80025de:	2312      	movs	r3, #18
 80025e0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025e6:	2302      	movs	r3, #2
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80025ea:	2304      	movs	r3, #4
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	4619      	mov	r1, r3
 80025f4:	481e      	ldr	r0, [pc, #120]	; (8002670 <I2Cx_MspInit+0x15c>)
 80025f6:	f003 fce7 	bl	8005fc8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80025fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	4619      	mov	r1, r3
 8002606:	481a      	ldr	r0, [pc, #104]	; (8002670 <I2Cx_MspInit+0x15c>)
 8002608:	f003 fcde 	bl	8005fc8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <I2Cx_MspInit+0x154>)
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	4a15      	ldr	r2, [pc, #84]	; (8002668 <I2Cx_MspInit+0x154>)
 8002612:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002616:	6413      	str	r3, [r2, #64]	; 0x40
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <I2Cx_MspInit+0x154>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002624:	4b10      	ldr	r3, [pc, #64]	; (8002668 <I2Cx_MspInit+0x154>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <I2Cx_MspInit+0x154>)
 800262a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800262e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <I2Cx_MspInit+0x154>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a0c      	ldr	r2, [pc, #48]	; (8002668 <I2Cx_MspInit+0x154>)
 8002636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800263a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	210f      	movs	r1, #15
 8002640:	201f      	movs	r0, #31
 8002642:	f001 fede 	bl	8004402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002646:	201f      	movs	r0, #31
 8002648:	f001 fef7 	bl	800443a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	210f      	movs	r1, #15
 8002650:	2020      	movs	r0, #32
 8002652:	f001 fed6 	bl	8004402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002656:	2020      	movs	r0, #32
 8002658:	f001 feef 	bl	800443a <HAL_NVIC_EnableIRQ>
}
 800265c:	bf00      	nop
 800265e:	3730      	adds	r7, #48	; 0x30
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	2000082c 	.word	0x2000082c
 8002668:	40023800 	.word	0x40023800
 800266c:	40021c00 	.word	0x40021c00
 8002670:	40020400 	.word	0x40020400

08002674 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f004 fa77 	bl	8006b70 <HAL_I2C_GetState>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d125      	bne.n	80026d4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a14      	ldr	r2, [pc, #80]	; (80026dc <I2Cx_Init+0x68>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d103      	bne.n	8002698 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a13      	ldr	r2, [pc, #76]	; (80026e0 <I2Cx_Init+0x6c>)
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e002      	b.n	800269e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <I2Cx_Init+0x70>)
 800269c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <I2Cx_Init+0x74>)
 80026a2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff23 	bl	8002514 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f003 ff4c 	bl	800656c <HAL_I2C_Init>
  }
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2000082c 	.word	0x2000082c
 80026e0:	40005c00 	.word	0x40005c00
 80026e4:	40005400 	.word	0x40005400
 80026e8:	40912732 	.word	0x40912732

080026ec <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	; 0x28
 80026f0:	af04      	add	r7, sp, #16
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	4608      	mov	r0, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	461a      	mov	r2, r3
 80026fa:	4603      	mov	r3, r0
 80026fc:	72fb      	strb	r3, [r7, #11]
 80026fe:	460b      	mov	r3, r1
 8002700:	813b      	strh	r3, [r7, #8]
 8002702:	4613      	mov	r3, r2
 8002704:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800270a:	7afb      	ldrb	r3, [r7, #11]
 800270c:	b299      	uxth	r1, r3
 800270e:	88f8      	ldrh	r0, [r7, #6]
 8002710:	893a      	ldrh	r2, [r7, #8]
 8002712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002716:	9302      	str	r3, [sp, #8]
 8002718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	4603      	mov	r3, r0
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f004 f90a 	bl	800693c <HAL_I2C_Mem_Read>
 8002728:	4603      	mov	r3, r0
 800272a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002732:	7afb      	ldrb	r3, [r7, #11]
 8002734:	4619      	mov	r1, r3
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f832 	bl	80027a0 <I2Cx_Error>
  }
  return status;    
 800273c:	7dfb      	ldrb	r3, [r7, #23]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b08a      	sub	sp, #40	; 0x28
 800274a:	af04      	add	r7, sp, #16
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	4608      	mov	r0, r1
 8002750:	4611      	mov	r1, r2
 8002752:	461a      	mov	r2, r3
 8002754:	4603      	mov	r3, r0
 8002756:	72fb      	strb	r3, [r7, #11]
 8002758:	460b      	mov	r3, r1
 800275a:	813b      	strh	r3, [r7, #8]
 800275c:	4613      	mov	r3, r2
 800275e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002764:	7afb      	ldrb	r3, [r7, #11]
 8002766:	b299      	uxth	r1, r3
 8002768:	88f8      	ldrh	r0, [r7, #6]
 800276a:	893a      	ldrh	r2, [r7, #8]
 800276c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002770:	9302      	str	r3, [sp, #8]
 8002772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	4603      	mov	r3, r0
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f003 ffc9 	bl	8006714 <HAL_I2C_Mem_Write>
 8002782:	4603      	mov	r3, r0
 8002784:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002786:	7dfb      	ldrb	r3, [r7, #23]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800278c:	7afb      	ldrb	r3, [r7, #11]
 800278e:	4619      	mov	r1, r3
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 f805 	bl	80027a0 <I2Cx_Error>
  }
  return status;
 8002796:	7dfb      	ldrb	r3, [r7, #23]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f003 ff6d 	bl	800668c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff ff5e 	bl	8002674 <I2Cx_Init>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <TS_IO_Init+0x10>)
 80027c6:	f7ff ff55 	bl	8002674 <I2Cx_Init>
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2000082c 	.word	0x2000082c

080027d4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af02      	add	r7, sp, #8
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
 80027de:	460b      	mov	r3, r1
 80027e0:	71bb      	strb	r3, [r7, #6]
 80027e2:	4613      	mov	r3, r2
 80027e4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80027e6:	79bb      	ldrb	r3, [r7, #6]
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	79f9      	ldrb	r1, [r7, #7]
 80027ec:	2301      	movs	r3, #1
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	1d7b      	adds	r3, r7, #5
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2301      	movs	r3, #1
 80027f6:	4803      	ldr	r0, [pc, #12]	; (8002804 <TS_IO_Write+0x30>)
 80027f8:	f7ff ffa5 	bl	8002746 <I2Cx_WriteMultiple>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	2000082c 	.word	0x2000082c

08002808 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af02      	add	r7, sp, #8
 800280e:	4603      	mov	r3, r0
 8002810:	460a      	mov	r2, r1
 8002812:	71fb      	strb	r3, [r7, #7]
 8002814:	4613      	mov	r3, r2
 8002816:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800281c:	79bb      	ldrb	r3, [r7, #6]
 800281e:	b29a      	uxth	r2, r3
 8002820:	79f9      	ldrb	r1, [r7, #7]
 8002822:	2301      	movs	r3, #1
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	f107 030f 	add.w	r3, r7, #15
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2301      	movs	r3, #1
 800282e:	4804      	ldr	r0, [pc, #16]	; (8002840 <TS_IO_Read+0x38>)
 8002830:	f7ff ff5c 	bl	80026ec <I2Cx_ReadMultiple>

  return read_value;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000082c 	.word	0x2000082c

08002844 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f001 fcd9 	bl	8004204 <HAL_Delay>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002860:	4b31      	ldr	r3, [pc, #196]	; (8002928 <BSP_LCD_Init+0xcc>)
 8002862:	2228      	movs	r2, #40	; 0x28
 8002864:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002866:	4b30      	ldr	r3, [pc, #192]	; (8002928 <BSP_LCD_Init+0xcc>)
 8002868:	2209      	movs	r2, #9
 800286a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800286c:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <BSP_LCD_Init+0xcc>)
 800286e:	2235      	movs	r2, #53	; 0x35
 8002870:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <BSP_LCD_Init+0xcc>)
 8002874:	220b      	movs	r2, #11
 8002876:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <BSP_LCD_Init+0xcc>)
 800287a:	f240 121b 	movw	r2, #283	; 0x11b
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002880:	4b29      	ldr	r3, [pc, #164]	; (8002928 <BSP_LCD_Init+0xcc>)
 8002882:	f240 2215 	movw	r2, #533	; 0x215
 8002886:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <BSP_LCD_Init+0xcc>)
 800288a:	f240 121d 	movw	r2, #285	; 0x11d
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <BSP_LCD_Init+0xcc>)
 8002892:	f240 2235 	movw	r2, #565	; 0x235
 8002896:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002898:	2100      	movs	r1, #0
 800289a:	4823      	ldr	r0, [pc, #140]	; (8002928 <BSP_LCD_Init+0xcc>)
 800289c:	f000 fc20 	bl	80030e0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80028a0:	4b21      	ldr	r3, [pc, #132]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80028a6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80028a8:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028aa:	f44f 7288 	mov.w	r2, #272	; 0x110
 80028ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80028da:	4b13      	ldr	r3, [pc, #76]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80028e0:	4b11      	ldr	r3, [pc, #68]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <BSP_LCD_Init+0xd0>)
 80028e4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80028e6:	4810      	ldr	r0, [pc, #64]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028e8:	f004 fcf8 	bl	80072dc <HAL_LTDC_GetState>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80028f2:	2100      	movs	r1, #0
 80028f4:	480c      	ldr	r0, [pc, #48]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028f6:	f000 fb19 	bl	8002f2c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80028fa:	480b      	ldr	r0, [pc, #44]	; (8002928 <BSP_LCD_Init+0xcc>)
 80028fc:	f004 fbe0 	bl	80070c0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002900:	2201      	movs	r2, #1
 8002902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002906:	480a      	ldr	r0, [pc, #40]	; (8002930 <BSP_LCD_Init+0xd4>)
 8002908:	f003 fe16 	bl	8006538 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800290c:	2201      	movs	r2, #1
 800290e:	2108      	movs	r1, #8
 8002910:	4808      	ldr	r0, [pc, #32]	; (8002934 <BSP_LCD_Init+0xd8>)
 8002912:	f003 fe11 	bl	8006538 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002916:	f000 ffe5 	bl	80038e4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800291a:	4807      	ldr	r0, [pc, #28]	; (8002938 <BSP_LCD_Init+0xdc>)
 800291c:	f000 f8d8 	bl	8002ad0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000880 	.word	0x20000880
 800292c:	40016800 	.word	0x40016800
 8002930:	40022000 	.word	0x40022000
 8002934:	40022800 	.word	0x40022800
 8002938:	2000002c 	.word	0x2000002c

0800293c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <BSP_LCD_GetXSize+0x20>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a06      	ldr	r2, [pc, #24]	; (8002960 <BSP_LCD_GetXSize+0x24>)
 8002946:	2134      	movs	r1, #52	; 0x34
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3360      	adds	r3, #96	; 0x60
 8002950:	681b      	ldr	r3, [r3, #0]
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	20000968 	.word	0x20000968
 8002960:	20000880 	.word	0x20000880

08002964 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <BSP_LCD_GetYSize+0x20>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a06      	ldr	r2, [pc, #24]	; (8002988 <BSP_LCD_GetYSize+0x24>)
 800296e:	2134      	movs	r1, #52	; 0x34
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3364      	adds	r3, #100	; 0x64
 8002978:	681b      	ldr	r3, [r3, #0]
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	20000968 	.word	0x20000968
 8002988:	20000880 	.word	0x20000880

0800298c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800298c:	b580      	push	{r7, lr}
 800298e:	b090      	sub	sp, #64	; 0x40
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800299c:	f7ff ffce 	bl	800293c <BSP_LCD_GetXSize>
 80029a0:	4603      	mov	r3, r0
 80029a2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80029a8:	f7ff ffdc 	bl	8002964 <BSP_LCD_GetYSize>
 80029ac:	4603      	mov	r3, r0
 80029ae:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80029b8:	23ff      	movs	r3, #255	; 0xff
 80029ba:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80029d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80029d8:	2307      	movs	r3, #7
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80029dc:	f7ff ffae 	bl	800293c <BSP_LCD_GetXSize>
 80029e0:	4603      	mov	r3, r0
 80029e2:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80029e4:	f7ff ffbe 	bl	8002964 <BSP_LCD_GetYSize>
 80029e8:	4603      	mov	r3, r0
 80029ea:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	f107 030c 	add.w	r3, r7, #12
 80029f2:	4619      	mov	r1, r3
 80029f4:	4812      	ldr	r0, [pc, #72]	; (8002a40 <BSP_LCD_LayerDefaultInit+0xb4>)
 80029f6:	f004 fc33 	bl	8007260 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	4911      	ldr	r1, [pc, #68]	; (8002a44 <BSP_LCD_LayerDefaultInit+0xb8>)
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	3304      	adds	r3, #4
 8002a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002a10:	88fa      	ldrh	r2, [r7, #6]
 8002a12:	490c      	ldr	r1, [pc, #48]	; (8002a44 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3308      	adds	r3, #8
 8002a20:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002a22:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002a24:	88fa      	ldrh	r2, [r7, #6]
 8002a26:	4907      	ldr	r1, [pc, #28]	; (8002a44 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002a36:	601a      	str	r2, [r3, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	3740      	adds	r7, #64	; 0x40
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000880 	.word	0x20000880
 8002a44:	2000096c 	.word	0x2000096c
 8002a48:	2000002c 	.word	0x2000002c

08002a4c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <BSP_LCD_SelectLayer+0x1c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
} 
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000968 	.word	0x20000968

08002a6c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <BSP_LCD_SetTextColor+0x28>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4907      	ldr	r1, [pc, #28]	; (8002a98 <BSP_LCD_SetTextColor+0x2c>)
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	601a      	str	r2, [r3, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	20000968 	.word	0x20000968
 8002a98:	2000096c 	.word	0x2000096c

08002a9c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <BSP_LCD_SetBackColor+0x2c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4908      	ldr	r1, [pc, #32]	; (8002acc <BSP_LCD_SetBackColor+0x30>)
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	601a      	str	r2, [r3, #0]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000968 	.word	0x20000968
 8002acc:	2000096c 	.word	0x2000096c

08002ad0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <BSP_LCD_SetFont+0x2c>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4908      	ldr	r1, [pc, #32]	; (8002b00 <BSP_LCD_SetFont+0x30>)
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3308      	adds	r3, #8
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	601a      	str	r2, [r3, #0]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000968 	.word	0x20000968
 8002b00:	2000096c 	.word	0x2000096c

08002b04 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <BSP_LCD_Clear+0x48>)
 8002b0e:	681c      	ldr	r4, [r3, #0]
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <BSP_LCD_Clear+0x48>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <BSP_LCD_Clear+0x4c>)
 8002b16:	2134      	movs	r1, #52	; 0x34
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	335c      	adds	r3, #92	; 0x5c
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	461e      	mov	r6, r3
 8002b24:	f7ff ff0a 	bl	800293c <BSP_LCD_GetXSize>
 8002b28:	4605      	mov	r5, r0
 8002b2a:	f7ff ff1b 	bl	8002964 <BSP_LCD_GetYSize>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	2300      	movs	r3, #0
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	462a      	mov	r2, r5
 8002b3c:	4631      	mov	r1, r6
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f000 fba2 	bl	8003288 <LL_FillBuffer>
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b4c:	20000968 	.word	0x20000968
 8002b50:	20000880 	.word	0x20000880

08002b54 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80fb      	strh	r3, [r7, #6]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	80bb      	strh	r3, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <BSP_LCD_DisplayChar+0x80>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	491b      	ldr	r1, [pc, #108]	; (8002bd8 <BSP_LCD_DisplayChar+0x84>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	3308      	adds	r3, #8
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <BSP_LCD_DisplayChar+0x80>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4c14      	ldr	r4, [pc, #80]	; (8002bd8 <BSP_LCD_DisplayChar+0x84>)
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4423      	add	r3, r4
 8002b92:	3308      	adds	r3, #8
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b98:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <BSP_LCD_DisplayChar+0x80>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4c0d      	ldr	r4, [pc, #52]	; (8002bd8 <BSP_LCD_DisplayChar+0x84>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4423      	add	r3, r4
 8002bac:	3308      	adds	r3, #8
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	889b      	ldrh	r3, [r3, #4]
 8002bb2:	3307      	adds	r3, #7
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	da00      	bge.n	8002bba <BSP_LCD_DisplayChar+0x66>
 8002bb8:	3307      	adds	r3, #7
 8002bba:	10db      	asrs	r3, r3, #3
 8002bbc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002bc0:	18ca      	adds	r2, r1, r3
 8002bc2:	88b9      	ldrh	r1, [r7, #4]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 faa6 	bl	8003118 <DrawChar>
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd90      	pop	{r4, r7, pc}
 8002bd4:	20000968 	.word	0x20000968
 8002bd8:	2000096c 	.word	0x2000096c

08002bdc <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002bdc:	b5b0      	push	{r4, r5, r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60ba      	str	r2, [r7, #8]
 8002be4:	461a      	mov	r2, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	81fb      	strh	r3, [r7, #14]
 8002bea:	460b      	mov	r3, r1
 8002bec:	81bb      	strh	r3, [r7, #12]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	83fb      	strh	r3, [r7, #30]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002c06:	e002      	b.n	8002c0e <BSP_LCD_DisplayStringAt+0x32>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	617a      	str	r2, [r7, #20]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f6      	bne.n	8002c08 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002c1a:	f7ff fe8f 	bl	800293c <BSP_LCD_GetXSize>
 8002c1e:	4601      	mov	r1, r0
 8002c20:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <BSP_LCD_DisplayStringAt+0x188>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4850      	ldr	r0, [pc, #320]	; (8002d68 <BSP_LCD_DisplayStringAt+0x18c>)
 8002c26:	4613      	mov	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4403      	add	r3, r0
 8002c30:	3308      	adds	r3, #8
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	889b      	ldrh	r3, [r3, #4]
 8002c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c3a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d01c      	beq.n	8002c7c <BSP_LCD_DisplayStringAt+0xa0>
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	dc33      	bgt.n	8002cae <BSP_LCD_DisplayStringAt+0xd2>
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d002      	beq.n	8002c50 <BSP_LCD_DisplayStringAt+0x74>
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d019      	beq.n	8002c82 <BSP_LCD_DisplayStringAt+0xa6>
 8002c4e:	e02e      	b.n	8002cae <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	1ad1      	subs	r1, r2, r3
 8002c56:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <BSP_LCD_DisplayStringAt+0x188>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4843      	ldr	r0, [pc, #268]	; (8002d68 <BSP_LCD_DisplayStringAt+0x18c>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4403      	add	r3, r0
 8002c66:	3308      	adds	r3, #8
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	889b      	ldrh	r3, [r3, #4]
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	89fb      	ldrh	r3, [r7, #14]
 8002c76:	4413      	add	r3, r2
 8002c78:	83fb      	strh	r3, [r7, #30]
      break;
 8002c7a:	e01b      	b.n	8002cb4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002c7c:	89fb      	ldrh	r3, [r7, #14]
 8002c7e:	83fb      	strh	r3, [r7, #30]
      break;
 8002c80:	e018      	b.n	8002cb4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	b299      	uxth	r1, r3
 8002c8a:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <BSP_LCD_DisplayStringAt+0x188>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4836      	ldr	r0, [pc, #216]	; (8002d68 <BSP_LCD_DisplayStringAt+0x18c>)
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4403      	add	r3, r0
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	889b      	ldrh	r3, [r3, #4]
 8002ca0:	fb11 f303 	smulbb	r3, r1, r3
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	89fb      	ldrh	r3, [r7, #14]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	83fb      	strh	r3, [r7, #30]
      break;
 8002cac:	e002      	b.n	8002cb4 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002cae:	89fb      	ldrh	r3, [r7, #14]
 8002cb0:	83fb      	strh	r3, [r7, #30]
      break;
 8002cb2:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002cb4:	8bfb      	ldrh	r3, [r7, #30]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <BSP_LCD_DisplayStringAt+0xe6>
 8002cba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	da1d      	bge.n	8002cfe <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002cc6:	e01a      	b.n	8002cfe <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	781a      	ldrb	r2, [r3, #0]
 8002ccc:	89b9      	ldrh	r1, [r7, #12]
 8002cce:	8bfb      	ldrh	r3, [r7, #30]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff3f 	bl	8002b54 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002cd6:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <BSP_LCD_DisplayStringAt+0x188>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4923      	ldr	r1, [pc, #140]	; (8002d68 <BSP_LCD_DisplayStringAt+0x18c>)
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	889a      	ldrh	r2, [r3, #4]
 8002cec:	8bfb      	ldrh	r3, [r7, #30]
 8002cee:	4413      	add	r3, r2
 8002cf0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
    i++;
 8002cf8:	8bbb      	ldrh	r3, [r7, #28]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	b2dc      	uxtb	r4, r3
 8002d0c:	f7ff fe16 	bl	800293c <BSP_LCD_GetXSize>
 8002d10:	8bb9      	ldrh	r1, [r7, #28]
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <BSP_LCD_DisplayStringAt+0x188>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4d14      	ldr	r5, [pc, #80]	; (8002d68 <BSP_LCD_DisplayStringAt+0x18c>)
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	442b      	add	r3, r5
 8002d22:	3308      	adds	r3, #8
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	889b      	ldrh	r3, [r3, #4]
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	1ac3      	subs	r3, r0, r3
 8002d2e:	b299      	uxth	r1, r3
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <BSP_LCD_DisplayStringAt+0x188>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	480c      	ldr	r0, [pc, #48]	; (8002d68 <BSP_LCD_DisplayStringAt+0x18c>)
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4403      	add	r3, r0
 8002d40:	3308      	adds	r3, #8
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	889b      	ldrh	r3, [r3, #4]
 8002d46:	4299      	cmp	r1, r3
 8002d48:	bf2c      	ite	cs
 8002d4a:	2301      	movcs	r3, #1
 8002d4c:	2300      	movcc	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4023      	ands	r3, r4
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1b7      	bne.n	8002cc8 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bdb0      	pop	{r4, r5, r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000968 	.word	0x20000968
 8002d68:	2000096c 	.word	0x2000096c

08002d6c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	603a      	str	r2, [r7, #0]
 8002d76:	80fb      	strh	r3, [r7, #6]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <BSP_LCD_DrawPixel+0x88>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <BSP_LCD_DrawPixel+0x8c>)
 8002d82:	2134      	movs	r1, #52	; 0x34
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	3348      	adds	r3, #72	; 0x48
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d116      	bne.n	8002dc0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <BSP_LCD_DrawPixel+0x88>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <BSP_LCD_DrawPixel+0x8c>)
 8002d98:	2134      	movs	r1, #52	; 0x34
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	335c      	adds	r3, #92	; 0x5c
 8002da2:	681c      	ldr	r4, [r3, #0]
 8002da4:	88bd      	ldrh	r5, [r7, #4]
 8002da6:	f7ff fdc9 	bl	800293c <BSP_LCD_GetXSize>
 8002daa:	4603      	mov	r3, r0
 8002dac:	fb03 f205 	mul.w	r2, r3, r5
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	4413      	add	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4423      	add	r3, r4
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	b292      	uxth	r2, r2
 8002dbc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002dbe:	e015      	b.n	8002dec <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <BSP_LCD_DrawPixel+0x88>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <BSP_LCD_DrawPixel+0x8c>)
 8002dc6:	2134      	movs	r1, #52	; 0x34
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	681c      	ldr	r4, [r3, #0]
 8002dd2:	88bd      	ldrh	r5, [r7, #4]
 8002dd4:	f7ff fdb2 	bl	800293c <BSP_LCD_GetXSize>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	fb03 f205 	mul.w	r2, r3, r5
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4423      	add	r3, r4
 8002de6:	461a      	mov	r2, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bdb0      	pop	{r4, r5, r7, pc}
 8002df4:	20000968 	.word	0x20000968
 8002df8:	20000880 	.word	0x20000880

08002dfc <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af02      	add	r7, sp, #8
 8002e04:	4604      	mov	r4, r0
 8002e06:	4608      	mov	r0, r1
 8002e08:	4611      	mov	r1, r2
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4623      	mov	r3, r4
 8002e0e:	80fb      	strh	r3, [r7, #6]
 8002e10:	4603      	mov	r3, r0
 8002e12:	80bb      	strh	r3, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002e20:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <BSP_LCD_FillRect+0xe8>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4930      	ldr	r1, [pc, #192]	; (8002ee8 <BSP_LCD_FillRect+0xec>)
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fe1a 	bl	8002a6c <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <BSP_LCD_FillRect+0xe8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2b      	ldr	r2, [pc, #172]	; (8002eec <BSP_LCD_FillRect+0xf0>)
 8002e3e:	2134      	movs	r1, #52	; 0x34
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3348      	adds	r3, #72	; 0x48
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d114      	bne.n	8002e78 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002e4e:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <BSP_LCD_FillRect+0xe8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a26      	ldr	r2, [pc, #152]	; (8002eec <BSP_LCD_FillRect+0xf0>)
 8002e54:	2134      	movs	r1, #52	; 0x34
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	335c      	adds	r3, #92	; 0x5c
 8002e5e:	681c      	ldr	r4, [r3, #0]
 8002e60:	f7ff fd6c 	bl	800293c <BSP_LCD_GetXSize>
 8002e64:	4602      	mov	r2, r0
 8002e66:	88bb      	ldrh	r3, [r7, #4]
 8002e68:	fb03 f202 	mul.w	r2, r3, r2
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	4413      	add	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4423      	add	r3, r4
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e013      	b.n	8002ea0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <BSP_LCD_FillRect+0xe8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1b      	ldr	r2, [pc, #108]	; (8002eec <BSP_LCD_FillRect+0xf0>)
 8002e7e:	2134      	movs	r1, #52	; 0x34
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	335c      	adds	r3, #92	; 0x5c
 8002e88:	681c      	ldr	r4, [r3, #0]
 8002e8a:	f7ff fd57 	bl	800293c <BSP_LCD_GetXSize>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	fb03 f202 	mul.w	r2, r3, r2
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4423      	add	r3, r4
 8002e9e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002ea0:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <BSP_LCD_FillRect+0xe8>)
 8002ea2:	681c      	ldr	r4, [r3, #0]
 8002ea4:	68fd      	ldr	r5, [r7, #12]
 8002ea6:	887e      	ldrh	r6, [r7, #2]
 8002ea8:	f8b7 8000 	ldrh.w	r8, [r7]
 8002eac:	f7ff fd46 	bl	800293c <BSP_LCD_GetXSize>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	1ad1      	subs	r1, r2, r3
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <BSP_LCD_FillRect+0xe8>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	480b      	ldr	r0, [pc, #44]	; (8002ee8 <BSP_LCD_FillRect+0xec>)
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4403      	add	r3, r0
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	9100      	str	r1, [sp, #0]
 8002ecc:	4643      	mov	r3, r8
 8002ece:	4632      	mov	r2, r6
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	f000 f9d8 	bl	8003288 <LL_FillBuffer>
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000968 	.word	0x20000968
 8002ee8:	2000096c 	.word	0x2000096c
 8002eec:	20000880 	.word	0x20000880

08002ef0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <BSP_LCD_DisplayOn+0x30>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <BSP_LCD_DisplayOn+0x30>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002f04:	2201      	movs	r2, #1
 8002f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f0a:	4806      	ldr	r0, [pc, #24]	; (8002f24 <BSP_LCD_DisplayOn+0x34>)
 8002f0c:	f003 fb14 	bl	8006538 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002f10:	2201      	movs	r2, #1
 8002f12:	2108      	movs	r1, #8
 8002f14:	4804      	ldr	r0, [pc, #16]	; (8002f28 <BSP_LCD_DisplayOn+0x38>)
 8002f16:	f003 fb0f 	bl	8006538 <HAL_GPIO_WritePin>
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000880 	.word	0x20000880
 8002f24:	40022000 	.word	0x40022000
 8002f28:	40022800 	.word	0x40022800

08002f2c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b090      	sub	sp, #64	; 0x40
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002f36:	4b64      	ldr	r3, [pc, #400]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	4a63      	ldr	r2, [pc, #396]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f40:	6453      	str	r3, [r2, #68]	; 0x44
 8002f42:	4b61      	ldr	r3, [pc, #388]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f4e:	4b5e      	ldr	r3, [pc, #376]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a5d      	ldr	r2, [pc, #372]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b5b      	ldr	r3, [pc, #364]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f66:	4b58      	ldr	r3, [pc, #352]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a57      	ldr	r2, [pc, #348]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f6c:	f043 0310 	orr.w	r3, r3, #16
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b55      	ldr	r3, [pc, #340]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	623b      	str	r3, [r7, #32]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f7e:	4b52      	ldr	r3, [pc, #328]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a51      	ldr	r2, [pc, #324]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b4f      	ldr	r3, [pc, #316]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f96:	4b4c      	ldr	r3, [pc, #304]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a4b      	ldr	r2, [pc, #300]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b49      	ldr	r3, [pc, #292]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002fae:	4b46      	ldr	r3, [pc, #280]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a45      	ldr	r2, [pc, #276]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002fb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002fc6:	4b40      	ldr	r3, [pc, #256]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a3f      	ldr	r2, [pc, #252]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b3d      	ldr	r3, [pc, #244]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002fde:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a39      	ldr	r2, [pc, #228]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002ff6:	4b34      	ldr	r3, [pc, #208]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a33      	ldr	r2, [pc, #204]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8002ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <BSP_LCD_MspInit+0x19c>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800300e:	2310      	movs	r3, #16
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003012:	2302      	movs	r3, #2
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800301a:	2302      	movs	r3, #2
 800301c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800301e:	230e      	movs	r3, #14
 8003020:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003026:	4619      	mov	r1, r3
 8003028:	4828      	ldr	r0, [pc, #160]	; (80030cc <BSP_LCD_MspInit+0x1a0>)
 800302a:	f002 ffcd 	bl	8005fc8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800302e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003038:	2309      	movs	r3, #9
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800303c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003040:	4619      	mov	r1, r3
 8003042:	4823      	ldr	r0, [pc, #140]	; (80030d0 <BSP_LCD_MspInit+0x1a4>)
 8003044:	f002 ffc0 	bl	8005fc8 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003048:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800304e:	2302      	movs	r3, #2
 8003050:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003052:	230e      	movs	r3, #14
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003056:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800305a:	4619      	mov	r1, r3
 800305c:	481d      	ldr	r0, [pc, #116]	; (80030d4 <BSP_LCD_MspInit+0x1a8>)
 800305e:	f002 ffb3 	bl	8005fc8 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003062:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003068:	2302      	movs	r3, #2
 800306a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800306c:	230e      	movs	r3, #14
 800306e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003074:	4619      	mov	r1, r3
 8003076:	4818      	ldr	r0, [pc, #96]	; (80030d8 <BSP_LCD_MspInit+0x1ac>)
 8003078:	f002 ffa6 	bl	8005fc8 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800307c:	23f7      	movs	r3, #247	; 0xf7
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003084:	230e      	movs	r3, #14
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003088:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800308c:	4619      	mov	r1, r3
 800308e:	4813      	ldr	r0, [pc, #76]	; (80030dc <BSP_LCD_MspInit+0x1b0>)
 8003090:	f002 ff9a 	bl	8005fc8 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800309a:	2301      	movs	r3, #1
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800309e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030a2:	4619      	mov	r1, r3
 80030a4:	480b      	ldr	r0, [pc, #44]	; (80030d4 <BSP_LCD_MspInit+0x1a8>)
 80030a6:	f002 ff8f 	bl	8005fc8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80030aa:	2308      	movs	r3, #8
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80030ae:	2301      	movs	r3, #1
 80030b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80030b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030b6:	4619      	mov	r1, r3
 80030b8:	4808      	ldr	r0, [pc, #32]	; (80030dc <BSP_LCD_MspInit+0x1b0>)
 80030ba:	f002 ff85 	bl	8005fc8 <HAL_GPIO_Init>
}
 80030be:	bf00      	nop
 80030c0:	3740      	adds	r7, #64	; 0x40
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40021800 	.word	0x40021800
 80030d4:	40022000 	.word	0x40022000
 80030d8:	40022400 	.word	0x40022400
 80030dc:	40022800 	.word	0x40022800

080030e0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <BSP_LCD_ClockConfig+0x34>)
 80030ec:	2208      	movs	r2, #8
 80030ee:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80030f0:	4b08      	ldr	r3, [pc, #32]	; (8003114 <BSP_LCD_ClockConfig+0x34>)
 80030f2:	22c0      	movs	r2, #192	; 0xc0
 80030f4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <BSP_LCD_ClockConfig+0x34>)
 80030f8:	2205      	movs	r2, #5
 80030fa:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <BSP_LCD_ClockConfig+0x34>)
 80030fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003104:	4803      	ldr	r0, [pc, #12]	; (8003114 <BSP_LCD_ClockConfig+0x34>)
 8003106:	f005 fccf 	bl	8008aa8 <HAL_RCCEx_PeriphCLKConfig>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000984 	.word	0x20000984

08003118 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	603a      	str	r2, [r7, #0]
 8003122:	80fb      	strh	r3, [r7, #6]
 8003124:	460b      	mov	r3, r1
 8003126:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003130:	4b53      	ldr	r3, [pc, #332]	; (8003280 <DrawChar+0x168>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4953      	ldr	r1, [pc, #332]	; (8003284 <DrawChar+0x16c>)
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3308      	adds	r3, #8
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	88db      	ldrh	r3, [r3, #6]
 8003146:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003148:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <DrawChar+0x168>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	494d      	ldr	r1, [pc, #308]	; (8003284 <DrawChar+0x16c>)
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3308      	adds	r3, #8
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	889b      	ldrh	r3, [r3, #4]
 800315e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003160:	8a3b      	ldrh	r3, [r7, #16]
 8003162:	3307      	adds	r3, #7
 8003164:	2b00      	cmp	r3, #0
 8003166:	da00      	bge.n	800316a <DrawChar+0x52>
 8003168:	3307      	adds	r3, #7
 800316a:	10db      	asrs	r3, r3, #3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	b2da      	uxtb	r2, r3
 8003172:	8a3b      	ldrh	r3, [r7, #16]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	e076      	b.n	800326e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003180:	8a3b      	ldrh	r3, [r7, #16]
 8003182:	3307      	adds	r3, #7
 8003184:	2b00      	cmp	r3, #0
 8003186:	da00      	bge.n	800318a <DrawChar+0x72>
 8003188:	3307      	adds	r3, #7
 800318a:	10db      	asrs	r3, r3, #3
 800318c:	461a      	mov	r2, r3
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	4413      	add	r3, r2
 8003198:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800319a:	8a3b      	ldrh	r3, [r7, #16]
 800319c:	3307      	adds	r3, #7
 800319e:	2b00      	cmp	r3, #0
 80031a0:	da00      	bge.n	80031a4 <DrawChar+0x8c>
 80031a2:	3307      	adds	r3, #7
 80031a4:	10db      	asrs	r3, r3, #3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d002      	beq.n	80031b0 <DrawChar+0x98>
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d004      	beq.n	80031b8 <DrawChar+0xa0>
 80031ae:	e00c      	b.n	80031ca <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	617b      	str	r3, [r7, #20]
      break;
 80031b6:	e016      	b.n	80031e6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	3201      	adds	r2, #1
 80031c2:	7812      	ldrb	r2, [r2, #0]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
      break;
 80031c8:	e00d      	b.n	80031e6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	041a      	lsls	r2, r3, #16
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	3301      	adds	r3, #1
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	4313      	orrs	r3, r2
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	3202      	adds	r2, #2
 80031de:	7812      	ldrb	r2, [r2, #0]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
      break;
 80031e4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	e036      	b.n	800325a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80031ec:	8a3a      	ldrh	r2, [r7, #16]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	1ad2      	subs	r2, r2, r3
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	4413      	add	r3, r2
 80031f6:	3b01      	subs	r3, #1
 80031f8:	2201      	movs	r2, #1
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	4013      	ands	r3, r2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d012      	beq.n	800322e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	b29a      	uxth	r2, r3
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	4413      	add	r3, r2
 8003210:	b298      	uxth	r0, r3
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <DrawChar+0x168>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	491b      	ldr	r1, [pc, #108]	; (8003284 <DrawChar+0x16c>)
 8003218:	4613      	mov	r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	88bb      	ldrh	r3, [r7, #4]
 8003226:	4619      	mov	r1, r3
 8003228:	f7ff fda0 	bl	8002d6c <BSP_LCD_DrawPixel>
 800322c:	e012      	b.n	8003254 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	b29a      	uxth	r2, r3
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	4413      	add	r3, r2
 8003236:	b298      	uxth	r0, r3
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <DrawChar+0x168>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4911      	ldr	r1, [pc, #68]	; (8003284 <DrawChar+0x16c>)
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	3304      	adds	r3, #4
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	88bb      	ldrh	r3, [r7, #4]
 800324e:	4619      	mov	r1, r3
 8003250:	f7ff fd8c 	bl	8002d6c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	3301      	adds	r3, #1
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	8a3b      	ldrh	r3, [r7, #16]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	429a      	cmp	r2, r3
 8003260:	d3c4      	bcc.n	80031ec <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003262:	88bb      	ldrh	r3, [r7, #4]
 8003264:	3301      	adds	r3, #1
 8003266:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	3301      	adds	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	8a7b      	ldrh	r3, [r7, #18]
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	429a      	cmp	r2, r3
 8003274:	d384      	bcc.n	8003180 <DrawChar+0x68>
  }
}
 8003276:	bf00      	nop
 8003278:	bf00      	nop
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000968 	.word	0x20000968
 8003284:	2000096c 	.word	0x2000096c

08003288 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003296:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <LL_FillBuffer+0x88>)
 8003298:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800329c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <LL_FillBuffer+0x8c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a1d      	ldr	r2, [pc, #116]	; (8003318 <LL_FillBuffer+0x90>)
 80032a4:	2134      	movs	r1, #52	; 0x34
 80032a6:	fb01 f303 	mul.w	r3, r1, r3
 80032aa:	4413      	add	r3, r2
 80032ac:	3348      	adds	r3, #72	; 0x48
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d103      	bne.n	80032bc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80032b4:	4b16      	ldr	r3, [pc, #88]	; (8003310 <LL_FillBuffer+0x88>)
 80032b6:	2202      	movs	r2, #2
 80032b8:	609a      	str	r2, [r3, #8]
 80032ba:	e002      	b.n	80032c2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <LL_FillBuffer+0x88>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80032c2:	4a13      	ldr	r2, [pc, #76]	; (8003310 <LL_FillBuffer+0x88>)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <LL_FillBuffer+0x88>)
 80032ca:	4a14      	ldr	r2, [pc, #80]	; (800331c <LL_FillBuffer+0x94>)
 80032cc:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80032ce:	4810      	ldr	r0, [pc, #64]	; (8003310 <LL_FillBuffer+0x88>)
 80032d0:	f001 fafc 	bl	80048cc <HAL_DMA2D_Init>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d115      	bne.n	8003306 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80032da:	68f9      	ldr	r1, [r7, #12]
 80032dc:	480c      	ldr	r0, [pc, #48]	; (8003310 <LL_FillBuffer+0x88>)
 80032de:	f001 fc53 	bl	8004b88 <HAL_DMA2D_ConfigLayer>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10e      	bne.n	8003306 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69f9      	ldr	r1, [r7, #28]
 80032f2:	4807      	ldr	r0, [pc, #28]	; (8003310 <LL_FillBuffer+0x88>)
 80032f4:	f001 fb34 	bl	8004960 <HAL_DMA2D_Start>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80032fe:	210a      	movs	r1, #10
 8003300:	4803      	ldr	r0, [pc, #12]	; (8003310 <LL_FillBuffer+0x88>)
 8003302:	f001 fb58 	bl	80049b6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000928 	.word	0x20000928
 8003314:	20000968 	.word	0x20000968
 8003318:	20000880 	.word	0x20000880
 800331c:	4002b000 	.word	0x4002b000

08003320 <WDA_LCD_DrawBitmap>:
 * @param: ySize size of the image (in pixels)
 * @param: ColorMode is the color format of the image data (pSrc).
 * @retval None
 */
void WDA_LCD_DrawBitmap(const void *pSrc, uint32_t xPos, uint32_t yPos, uint32_t xSize, uint32_t ySize, uint32_t ColorMode)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]


	uint32_t address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((480*yPos) + xPos)*(4));
 800332e:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <WDA_LCD_DrawBitmap+0xb0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a28      	ldr	r2, [pc, #160]	; (80033d4 <WDA_LCD_DrawBitmap+0xb4>)
 8003334:	2134      	movs	r1, #52	; 0x34
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	335c      	adds	r3, #92	; 0x5c
 800333e:	6819      	ldr	r1, [r3, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	015b      	lsls	r3, r3, #5
 800334a:	461a      	mov	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	617b      	str	r3, [r7, #20]
	void *pDst = (void *)address;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	613b      	str	r3, [r7, #16]

  /* Configure the DMA2D Mode, Color Mode and output offset */
	hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800335a:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 800335c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003360:	605a      	str	r2, [r3, #4]
	hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
	hDma2dHandler.Init.OutputOffset = 480-xSize;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 800336e:	4a1a      	ldr	r2, [pc, #104]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 8003370:	60d3      	str	r3, [r2, #12]

  /* Foreground Configuration */
	hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003372:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
	hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003378:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 800337a:	22ff      	movs	r2, #255	; 0xff
 800337c:	635a      	str	r2, [r3, #52]	; 0x34
	hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 800337e:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	62d3      	str	r3, [r2, #44]	; 0x2c
	hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 8003386:	2200      	movs	r2, #0
 8003388:	629a      	str	r2, [r3, #40]	; 0x28

	hDma2dHandler.Instance = DMA2D;
 800338a:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <WDA_LCD_DrawBitmap+0xbc>)
 800338e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK)
 8003390:	4811      	ldr	r0, [pc, #68]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 8003392:	f001 fa9b 	bl	80048cc <HAL_DMA2D_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d115      	bne.n	80033c8 <WDA_LCD_DrawBitmap+0xa8>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK)
 800339c:	2101      	movs	r1, #1
 800339e:	480e      	ldr	r0, [pc, #56]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 80033a0:	f001 fbf2 	bl	8004b88 <HAL_DMA2D_ConfigLayer>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10e      	bne.n	80033c8 <WDA_LCD_DrawBitmap+0xa8>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	4808      	ldr	r0, [pc, #32]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 80033b6:	f001 fad3 	bl	8004960 <HAL_DMA2D_Start>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <WDA_LCD_DrawBitmap+0xa8>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80033c0:	210a      	movs	r1, #10
 80033c2:	4805      	ldr	r0, [pc, #20]	; (80033d8 <WDA_LCD_DrawBitmap+0xb8>)
 80033c4:	f001 faf7 	bl	80049b6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000968 	.word	0x20000968
 80033d4:	20000880 	.word	0x20000880
 80033d8:	20000928 	.word	0x20000928
 80033dc:	4002b000 	.word	0x4002b000

080033e0 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
  QSPIHandle.Instance = QUADSPI;
 80033e6:	4b28      	ldr	r3, [pc, #160]	; (8003488 <BSP_QSPI_Init+0xa8>)
 80033e8:	4a28      	ldr	r2, [pc, #160]	; (800348c <BSP_QSPI_Init+0xac>)
 80033ea:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 80033ec:	4826      	ldr	r0, [pc, #152]	; (8003488 <BSP_QSPI_Init+0xa8>)
 80033ee:	f004 f9f9 	bl	80077e4 <HAL_QSPI_DeInit>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e041      	b.n	8003480 <BSP_QSPI_Init+0xa0>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 80033fc:	2100      	movs	r1, #0
 80033fe:	4822      	ldr	r0, [pc, #136]	; (8003488 <BSP_QSPI_Init+0xa8>)
 8003400:	f000 f878 	bl	80034f4 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  QSPIHandle.Init.ClockPrescaler     = 1; /* QSPI freq = 216 MHz/(1+1) = 108 Mhz */
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <BSP_QSPI_Init+0xa8>)
 8003406:	2201      	movs	r2, #1
 8003408:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 4;
 800340a:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <BSP_QSPI_Init+0xa8>)
 800340c:	2204      	movs	r2, #4
 800340e:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <BSP_QSPI_Init+0xa8>)
 8003412:	2210      	movs	r2, #16
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800341a:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003424:	683b      	ldr	r3, [r7, #0]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	461a      	mov	r2, r3
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <BSP_QSPI_Init+0xa8>)
 8003432:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8003434:	4b14      	ldr	r3, [pc, #80]	; (8003488 <BSP_QSPI_Init+0xa8>)
 8003436:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800343a:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800343c:	4b12      	ldr	r3, [pc, #72]	; (8003488 <BSP_QSPI_Init+0xa8>)
 800343e:	2200      	movs	r2, #0
 8003440:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 8003442:	4b11      	ldr	r3, [pc, #68]	; (8003488 <BSP_QSPI_Init+0xa8>)
 8003444:	2200      	movs	r2, #0
 8003446:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <BSP_QSPI_Init+0xa8>)
 800344a:	2200      	movs	r2, #0
 800344c:	621a      	str	r2, [r3, #32]

  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800344e:	480e      	ldr	r0, [pc, #56]	; (8003488 <BSP_QSPI_Init+0xa8>)
 8003450:	f004 f94c 	bl	80076ec <HAL_QSPI_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <BSP_QSPI_Init+0x7e>
  {
    return QSPI_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e010      	b.n	8003480 <BSP_QSPI_Init+0xa0>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK)
 800345e:	480a      	ldr	r0, [pc, #40]	; (8003488 <BSP_QSPI_Init+0xa8>)
 8003460:	f000 f908 	bl	8003674 <QSPI_ResetMemory>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <BSP_QSPI_Init+0x8e>
  {
    return QSPI_NOT_SUPPORTED;
 800346a:	2304      	movs	r3, #4
 800346c:	e008      	b.n	8003480 <BSP_QSPI_Init+0xa0>
  }
 
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK)
 800346e:	4806      	ldr	r0, [pc, #24]	; (8003488 <BSP_QSPI_Init+0xa8>)
 8003470:	f000 f942 	bl	80036f8 <QSPI_DummyCyclesCfg>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <BSP_QSPI_Init+0x9e>
  {
    return QSPI_NOT_SUPPORTED;
 800347a:	2304      	movs	r3, #4
 800347c:	e000      	b.n	8003480 <BSP_QSPI_Init+0xa0>
  }
  
  return QSPI_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000a08 	.word	0x20000a08
 800348c:	a0001000 	.word	0xa0001000

08003490 <BSP_QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_EnableMemoryMappedMode(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b090      	sub	sp, #64	; 0x40
 8003494:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800349a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 800349c:	23eb      	movs	r3, #235	; 0xeb
 800349e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80034a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80034a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034aa:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80034b0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80034b6:	230a      	movs	r3, #10
 80034b8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80034be:	2300      	movs	r3, #0
 80034c0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80034c2:	2300      	movs	r3, #0
 80034c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80034ca:	2300      	movs	r3, #0
 80034cc:	603b      	str	r3, [r7, #0]
  
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80034ce:	463a      	mov	r2, r7
 80034d0:	f107 0308 	add.w	r3, r7, #8
 80034d4:	4619      	mov	r1, r3
 80034d6:	4806      	ldr	r0, [pc, #24]	; (80034f0 <BSP_QSPI_EnableMemoryMappedMode+0x60>)
 80034d8:	f004 fbb6 	bl	8007c48 <HAL_QSPI_MemoryMapped>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <BSP_QSPI_EnableMemoryMappedMode+0x56>
  {
    return QSPI_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <BSP_QSPI_EnableMemoryMappedMode+0x58>
  }

  return QSPI_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3740      	adds	r7, #64	; 0x40
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000a08 	.word	0x20000a08

080034f4 <BSP_QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
__weak void BSP_QSPI_MspInit(QSPI_HandleTypeDef *hqspi, void *Params)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08e      	sub	sp, #56	; 0x38
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80034fe:	4b59      	ldr	r3, [pc, #356]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	4a58      	ldr	r2, [pc, #352]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6393      	str	r3, [r2, #56]	; 0x38
 800350a:	4b56      	ldr	r3, [pc, #344]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	623b      	str	r3, [r7, #32]
 8003514:	6a3b      	ldr	r3, [r7, #32]
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8003516:	4b53      	ldr	r3, [pc, #332]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	4a52      	ldr	r2, [pc, #328]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8003522:	4b50      	ldr	r3, [pc, #320]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	4a4f      	ldr	r2, [pc, #316]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003528:	f023 0302 	bic.w	r3, r3, #2
 800352c:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 800352e:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	4a4c      	ldr	r2, [pc, #304]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003534:	f043 0302 	orr.w	r3, r3, #2
 8003538:	6313      	str	r3, [r2, #48]	; 0x30
 800353a:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	69fb      	ldr	r3, [r7, #28]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8003546:	4b47      	ldr	r3, [pc, #284]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	4a46      	ldr	r2, [pc, #280]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	6313      	str	r3, [r2, #48]	; 0x30
 8003552:	4b44      	ldr	r3, [pc, #272]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	69bb      	ldr	r3, [r7, #24]
  QSPI_D0_GPIO_CLK_ENABLE();
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a40      	ldr	r2, [pc, #256]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003564:	f043 0308 	orr.w	r3, r3, #8
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b3e      	ldr	r3, [pc, #248]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697b      	ldr	r3, [r7, #20]
  QSPI_D1_GPIO_CLK_ENABLE();
 8003576:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4a3a      	ldr	r2, [pc, #232]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 800357c:	f043 0308 	orr.w	r3, r3, #8
 8003580:	6313      	str	r3, [r2, #48]	; 0x30
 8003582:	4b38      	ldr	r3, [pc, #224]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 800358e:	4b35      	ldr	r3, [pc, #212]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a34      	ldr	r2, [pc, #208]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 8003594:	f043 0310 	orr.w	r3, r3, #16
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b32      	ldr	r3, [pc, #200]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
  QSPI_D3_GPIO_CLK_ENABLE();
 80035a6:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a2e      	ldr	r2, [pc, #184]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 80035ac:	f043 0308 	orr.w	r3, r3, #8
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <BSP_QSPI_MspInit+0x170>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CS_PIN;
 80035be:	2340      	movs	r3, #64	; 0x40
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80035c6:	2301      	movs	r3, #1
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80035ce:	230a      	movs	r3, #10
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80035d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d6:	4619      	mov	r1, r3
 80035d8:	4823      	ldr	r0, [pc, #140]	; (8003668 <BSP_QSPI_MspInit+0x174>)
 80035da:	f002 fcf5 	bl	8005fc8 <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80035de:	2304      	movs	r3, #4
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80035e6:	2309      	movs	r3, #9
 80035e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80035ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ee:	4619      	mov	r1, r3
 80035f0:	481d      	ldr	r0, [pc, #116]	; (8003668 <BSP_QSPI_MspInit+0x174>)
 80035f2:	f002 fce9 	bl	8005fc8 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80035f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80035fc:	2309      	movs	r3, #9
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8003600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003604:	4619      	mov	r1, r3
 8003606:	4819      	ldr	r0, [pc, #100]	; (800366c <BSP_QSPI_MspInit+0x178>)
 8003608:	f002 fcde 	bl	8005fc8 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 800360c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003612:	2309      	movs	r3, #9
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8003616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800361a:	4619      	mov	r1, r3
 800361c:	4813      	ldr	r0, [pc, #76]	; (800366c <BSP_QSPI_MspInit+0x178>)
 800361e:	f002 fcd3 	bl	8005fc8 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8003622:	2304      	movs	r3, #4
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8003626:	2309      	movs	r3, #9
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 800362a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362e:	4619      	mov	r1, r3
 8003630:	480f      	ldr	r0, [pc, #60]	; (8003670 <BSP_QSPI_MspInit+0x17c>)
 8003632:	f002 fcc9 	bl	8005fc8 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8003636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800363c:	2309      	movs	r3, #9
 800363e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8003640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003644:	4619      	mov	r1, r3
 8003646:	4809      	ldr	r0, [pc, #36]	; (800366c <BSP_QSPI_MspInit+0x178>)
 8003648:	f002 fcbe 	bl	8005fc8 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800364c:	2200      	movs	r2, #0
 800364e:	210f      	movs	r1, #15
 8003650:	205c      	movs	r0, #92	; 0x5c
 8003652:	f000 fed6 	bl	8004402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003656:	205c      	movs	r0, #92	; 0x5c
 8003658:	f000 feef 	bl	800443a <HAL_NVIC_EnableIRQ>
}
 800365c:	bf00      	nop
 800365e:	3738      	adds	r7, #56	; 0x38
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40023800 	.word	0x40023800
 8003668:	40020400 	.word	0x40020400
 800366c:	40020c00 	.word	0x40020c00
 8003670:	40021000 	.word	0x40021000

08003674 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b090      	sub	sp, #64	; 0x40
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800367c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003680:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003682:	2366      	movs	r3, #102	; 0x66
 8003684:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003686:	2300      	movs	r3, #0
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800368a:	2300      	movs	r3, #0
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800368e:	2300      	movs	r3, #0
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003696:	2300      	movs	r3, #0
 8003698:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800369a:	2300      	movs	r3, #0
 800369c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800369e:	2300      	movs	r3, #0
 80036a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036a2:	f107 0308 	add.w	r3, r7, #8
 80036a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f004 f8bd 	bl	800782c <HAL_QSPI_Command>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <QSPI_ResetMemory+0x48>
  {
    return QSPI_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e019      	b.n	80036f0 <QSPI_ResetMemory+0x7c>
  }

  /* Send the reset memory command */
  s_command.Instruction = RESET_MEMORY_CMD;
 80036bc:	2399      	movs	r3, #153	; 0x99
 80036be:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036c0:	f107 0308 	add.w	r3, r7, #8
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	4619      	mov	r1, r3
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f004 f8ae 	bl	800782c <HAL_QSPI_Command>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <QSPI_ResetMemory+0x66>
  {
    return QSPI_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00a      	b.n	80036f0 <QSPI_ResetMemory+0x7c>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80036da:	f241 3188 	movw	r1, #5000	; 0x1388
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f8c7 	bl	8003872 <QSPI_AutoPollingMemReady>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <QSPI_ResetMemory+0x7a>
  {
    return QSPI_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <QSPI_ResetMemory+0x7c>
  }

  return QSPI_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3740      	adds	r7, #64	; 0x40
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b094      	sub	sp, #80	; 0x50
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8003706:	2385      	movs	r3, #133	; 0x85
 8003708:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800370a:	2300      	movs	r3, #0
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800370e:	2300      	movs	r3, #0
 8003710:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8003712:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003716:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 1;
 800371c:	2301      	movs	r3, #1
 800371e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003720:	2300      	movs	r3, #0
 8003722:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003724:	2300      	movs	r3, #0
 8003726:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003728:	2300      	movs	r3, #0
 800372a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800372c:	f107 0310 	add.w	r3, r7, #16
 8003730:	f241 3288 	movw	r2, #5000	; 0x1388
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f004 f878 	bl	800782c <HAL_QSPI_Command>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <QSPI_DummyCyclesCfg+0x4e>
  {
    return QSPI_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e048      	b.n	80037d8 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003746:	f107 030f 	add.w	r3, r7, #15
 800374a:	f241 3288 	movw	r2, #5000	; 0x1388
 800374e:	4619      	mov	r1, r3
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f004 f960 	bl	8007a16 <HAL_QSPI_Receive>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <QSPI_DummyCyclesCfg+0x68>
  {
    return QSPI_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e03b      	b.n	80037d8 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f83d 	bl	80037e0 <QSPI_WriteEnable>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <QSPI_DummyCyclesCfg+0x78>
  {
    return QSPI_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e033      	b.n	80037d8 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Update volatile configuration register (with new dummy cycles) */  
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8003770:	2381      	movs	r3, #129	; 0x81
 8003772:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	b25b      	sxtb	r3, r3
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	b25a      	sxtb	r2, r3
 800377e:	23f0      	movs	r3, #240	; 0xf0
 8003780:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800378a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800378c:	fab3 f383 	clz	r3, r3
 8003790:	b2db      	uxtb	r3, r3
 8003792:	4619      	mov	r1, r3
 8003794:	230a      	movs	r3, #10
 8003796:	408b      	lsls	r3, r1
 8003798:	b25b      	sxtb	r3, r3
 800379a:	4313      	orrs	r3, r2
 800379c:	b25b      	sxtb	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	73fb      	strb	r3, [r7, #15]
      
  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037a2:	f107 0310 	add.w	r3, r7, #16
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4619      	mov	r1, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f004 f83d 	bl	800782c <HAL_QSPI_Command>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <QSPI_DummyCyclesCfg+0xc4>
  {
    return QSPI_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e00d      	b.n	80037d8 <QSPI_DummyCyclesCfg+0xe0>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037bc:	f107 030f 	add.w	r3, r7, #15
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f004 f88e 	bl	80078e8 <HAL_QSPI_Transmit>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <QSPI_DummyCyclesCfg+0xde>
  {
    return QSPI_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <QSPI_DummyCyclesCfg+0xe0>
  }
  
  return QSPI_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3750      	adds	r7, #80	; 0x50
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b096      	sub	sp, #88	; 0x58
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80037e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = WRITE_ENABLE_CMD;
 80037ee:	2306      	movs	r3, #6
 80037f0:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003802:	2300      	movs	r3, #0
 8003804:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8003806:	2300      	movs	r3, #0
 8003808:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800380a:	2300      	movs	r3, #0
 800380c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800380e:	f107 0320 	add.w	r3, r7, #32
 8003812:	f241 3288 	movw	r2, #5000	; 0x1388
 8003816:	4619      	mov	r1, r3
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f004 f807 	bl	800782c <HAL_QSPI_Command>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <QSPI_WriteEnable+0x48>
  {
    return QSPI_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e020      	b.n	800386a <QSPI_WriteEnable+0x8a>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  s_config.Match           = N25Q128A_SR_WREN;
 8003828:	2302      	movs	r3, #2
 800382a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WREN;
 800382c:	2302      	movs	r3, #2
 800382e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8003830:	2300      	movs	r3, #0
 8003832:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8003834:	2301      	movs	r3, #1
 8003836:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8003838:	2310      	movs	r3, #16
 800383a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800383c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003840:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = READ_STATUS_REG_CMD;
 8003842:	2305      	movs	r3, #5
 8003844:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8003846:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800384a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800384c:	f107 0208 	add.w	r2, r7, #8
 8003850:	f107 0120 	add.w	r1, r7, #32
 8003854:	f241 3388 	movw	r3, #5000	; 0x1388
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f004 f97e 	bl	8007b5a <HAL_QSPI_AutoPolling>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <QSPI_WriteEnable+0x88>
  {
    return QSPI_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <QSPI_WriteEnable+0x8a>
  }

  return QSPI_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3758      	adds	r7, #88	; 0x58
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b096      	sub	sp, #88	; 0x58
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800387c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8003882:	2305      	movs	r3, #5
 8003884:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8003886:	2300      	movs	r3, #0
 8003888:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800388a:	2300      	movs	r3, #0
 800388c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800388e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003892:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003898:	2300      	movs	r3, #0
 800389a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800389c:	2300      	movs	r3, #0
 800389e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80038a0:	2300      	movs	r3, #0
 80038a2:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = N25Q128A_SR_WIP;
 80038a8:	2301      	movs	r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 80038b0:	2301      	movs	r3, #1
 80038b2:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 80038b4:	2310      	movs	r3, #16
 80038b6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80038b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038bc:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 80038be:	f107 0208 	add.w	r2, r7, #8
 80038c2:	f107 0120 	add.w	r1, r7, #32
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f004 f946 	bl	8007b5a <HAL_QSPI_AutoPolling>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <QSPI_AutoPollingMemReady+0x66>
  {
    return QSPI_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <QSPI_AutoPollingMemReady+0x68>
  }

  return QSPI_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3758      	adds	r7, #88	; 0x58
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80038e8:	4b29      	ldr	r3, [pc, #164]	; (8003990 <BSP_SDRAM_Init+0xac>)
 80038ea:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <BSP_SDRAM_Init+0xb0>)
 80038ec:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80038ee:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <BSP_SDRAM_Init+0xb4>)
 80038f0:	2202      	movs	r2, #2
 80038f2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80038f4:	4b28      	ldr	r3, [pc, #160]	; (8003998 <BSP_SDRAM_Init+0xb4>)
 80038f6:	2207      	movs	r2, #7
 80038f8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80038fa:	4b27      	ldr	r3, [pc, #156]	; (8003998 <BSP_SDRAM_Init+0xb4>)
 80038fc:	2204      	movs	r2, #4
 80038fe:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <BSP_SDRAM_Init+0xb4>)
 8003902:	2207      	movs	r2, #7
 8003904:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003906:	4b24      	ldr	r3, [pc, #144]	; (8003998 <BSP_SDRAM_Init+0xb4>)
 8003908:	2202      	movs	r2, #2
 800390a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800390c:	4b22      	ldr	r3, [pc, #136]	; (8003998 <BSP_SDRAM_Init+0xb4>)
 800390e:	2202      	movs	r2, #2
 8003910:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003912:	4b21      	ldr	r3, [pc, #132]	; (8003998 <BSP_SDRAM_Init+0xb4>)
 8003914:	2202      	movs	r2, #2
 8003916:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <BSP_SDRAM_Init+0xac>)
 800391a:	2200      	movs	r2, #0
 800391c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800391e:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <BSP_SDRAM_Init+0xac>)
 8003920:	2200      	movs	r2, #0
 8003922:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <BSP_SDRAM_Init+0xac>)
 8003926:	2204      	movs	r2, #4
 8003928:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800392a:	4b19      	ldr	r3, [pc, #100]	; (8003990 <BSP_SDRAM_Init+0xac>)
 800392c:	2210      	movs	r2, #16
 800392e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <BSP_SDRAM_Init+0xac>)
 8003932:	2240      	movs	r2, #64	; 0x40
 8003934:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003936:	4b16      	ldr	r3, [pc, #88]	; (8003990 <BSP_SDRAM_Init+0xac>)
 8003938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800393c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800393e:	4b14      	ldr	r3, [pc, #80]	; (8003990 <BSP_SDRAM_Init+0xac>)
 8003940:	2200      	movs	r2, #0
 8003942:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003944:	4b12      	ldr	r3, [pc, #72]	; (8003990 <BSP_SDRAM_Init+0xac>)
 8003946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800394a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800394c:	4b10      	ldr	r3, [pc, #64]	; (8003990 <BSP_SDRAM_Init+0xac>)
 800394e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003952:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <BSP_SDRAM_Init+0xac>)
 8003956:	2200      	movs	r2, #0
 8003958:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800395a:	2100      	movs	r1, #0
 800395c:	480c      	ldr	r0, [pc, #48]	; (8003990 <BSP_SDRAM_Init+0xac>)
 800395e:	f000 f87f 	bl	8003a60 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003962:	490d      	ldr	r1, [pc, #52]	; (8003998 <BSP_SDRAM_Init+0xb4>)
 8003964:	480a      	ldr	r0, [pc, #40]	; (8003990 <BSP_SDRAM_Init+0xac>)
 8003966:	f005 fc8f 	bl	8009288 <HAL_SDRAM_Init>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <BSP_SDRAM_Init+0xb8>)
 8003972:	2201      	movs	r2, #1
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e002      	b.n	800397e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003978:	4b08      	ldr	r3, [pc, #32]	; (800399c <BSP_SDRAM_Init+0xb8>)
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800397e:	f240 6003 	movw	r0, #1539	; 0x603
 8003982:	f000 f80d 	bl	80039a0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <BSP_SDRAM_Init+0xb8>)
 8003988:	781b      	ldrb	r3, [r3, #0]
}
 800398a:	4618      	mov	r0, r3
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000a54 	.word	0x20000a54
 8003994:	a0000140 	.word	0xa0000140
 8003998:	20000a88 	.word	0x20000a88
 800399c:	2000003c 	.word	0x2000003c

080039a0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80039ac:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039b2:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039b4:	2210      	movs	r2, #16
 80039b6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80039b8:	4b27      	ldr	r3, [pc, #156]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80039be:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80039c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039c8:	4923      	ldr	r1, [pc, #140]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039ca:	4824      	ldr	r0, [pc, #144]	; (8003a5c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039cc:	f005 fc90 	bl	80092f0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80039d0:	2001      	movs	r0, #1
 80039d2:	f000 fc17 	bl	8004204 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039d8:	2202      	movs	r2, #2
 80039da:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039dc:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039de:	2210      	movs	r2, #16
 80039e0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80039e2:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80039e8:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80039ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039f2:	4919      	ldr	r1, [pc, #100]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039f4:	4819      	ldr	r0, [pc, #100]	; (8003a5c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039f6:	f005 fc7b 	bl	80092f0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039fc:	2203      	movs	r2, #3
 80039fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a00:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a02:	2210      	movs	r2, #16
 8003a04:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003a06:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a08:	2208      	movs	r2, #8
 8003a0a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a0c:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a16:	4910      	ldr	r1, [pc, #64]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a18:	4810      	ldr	r0, [pc, #64]	; (8003a5c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a1a:	f005 fc69 	bl	80092f0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003a1e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003a22:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a26:	2204      	movs	r2, #4
 8003a28:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a07      	ldr	r2, [pc, #28]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a3a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a40:	4905      	ldr	r1, [pc, #20]	; (8003a58 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a42:	4806      	ldr	r0, [pc, #24]	; (8003a5c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a44:	f005 fc54 	bl	80092f0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4804      	ldr	r0, [pc, #16]	; (8003a5c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a4c:	f005 fc85 	bl	800935a <HAL_SDRAM_ProgramRefreshRate>
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000aa4 	.word	0x20000aa4
 8003a5c:	20000a54 	.word	0x20000a54

08003a60 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b090      	sub	sp, #64	; 0x40
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003a6a:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	4a6f      	ldr	r2, [pc, #444]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6393      	str	r3, [r2, #56]	; 0x38
 8003a76:	4b6d      	ldr	r3, [pc, #436]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003a82:	4b6a      	ldr	r3, [pc, #424]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	4a69      	ldr	r2, [pc, #420]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003a88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a8e:	4b67      	ldr	r3, [pc, #412]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a9a:	4b64      	ldr	r3, [pc, #400]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	4a63      	ldr	r2, [pc, #396]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003aa0:	f043 0304 	orr.w	r3, r3, #4
 8003aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa6:	4b61      	ldr	r3, [pc, #388]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	f003 0304 	and.w	r3, r3, #4
 8003aae:	623b      	str	r3, [r7, #32]
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ab2:	4b5e      	ldr	r3, [pc, #376]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a5d      	ldr	r2, [pc, #372]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003ab8:	f043 0308 	orr.w	r3, r3, #8
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003aca:	4b58      	ldr	r3, [pc, #352]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a57      	ldr	r2, [pc, #348]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003ad0:	f043 0310 	orr.w	r3, r3, #16
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ae2:	4b52      	ldr	r3, [pc, #328]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a51      	ldr	r2, [pc, #324]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003ae8:	f043 0320 	orr.w	r3, r3, #32
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b4f      	ldr	r3, [pc, #316]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003afa:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	4a4b      	ldr	r2, [pc, #300]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b04:	6313      	str	r3, [r2, #48]	; 0x30
 8003b06:	4b49      	ldr	r3, [pc, #292]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b12:	4b46      	ldr	r3, [pc, #280]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4a45      	ldr	r2, [pc, #276]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1e:	4b43      	ldr	r3, [pc, #268]	; (8003c2c <BSP_SDRAM_MspInit+0x1cc>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003b32:	2302      	movs	r3, #2
 8003b34:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003b36:	230c      	movs	r3, #12
 8003b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b42:	4619      	mov	r1, r3
 8003b44:	483a      	ldr	r0, [pc, #232]	; (8003c30 <BSP_SDRAM_MspInit+0x1d0>)
 8003b46:	f002 fa3f 	bl	8005fc8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003b4a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b54:	4619      	mov	r1, r3
 8003b56:	4837      	ldr	r0, [pc, #220]	; (8003c34 <BSP_SDRAM_MspInit+0x1d4>)
 8003b58:	f002 fa36 	bl	8005fc8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003b5c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b66:	4619      	mov	r1, r3
 8003b68:	4833      	ldr	r0, [pc, #204]	; (8003c38 <BSP_SDRAM_MspInit+0x1d8>)
 8003b6a:	f002 fa2d 	bl	8005fc8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003b6e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4830      	ldr	r0, [pc, #192]	; (8003c3c <BSP_SDRAM_MspInit+0x1dc>)
 8003b7c:	f002 fa24 	bl	8005fc8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003b80:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	482c      	ldr	r0, [pc, #176]	; (8003c40 <BSP_SDRAM_MspInit+0x1e0>)
 8003b8e:	f002 fa1b 	bl	8005fc8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003b92:	2328      	movs	r3, #40	; 0x28
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4829      	ldr	r0, [pc, #164]	; (8003c44 <BSP_SDRAM_MspInit+0x1e4>)
 8003b9e:	f002 fa13 	bl	8005fc8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003ba2:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003ba8:	4b27      	ldr	r3, [pc, #156]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003bae:	4b26      	ldr	r3, [pc, #152]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003bb6:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bbc:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bbe:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003bc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bc4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003bc6:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003bc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bcc:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003bce:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003bd4:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003bd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bda:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003be2:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003be4:	2203      	movs	r2, #3
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003be8:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003bee:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003bf6:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <BSP_SDRAM_MspInit+0x1ec>)
 8003bf8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8003c00:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003c06:	4810      	ldr	r0, [pc, #64]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003c08:	f000 fce0 	bl	80045cc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003c0c:	480e      	ldr	r0, [pc, #56]	; (8003c48 <BSP_SDRAM_MspInit+0x1e8>)
 8003c0e:	f000 fc2f 	bl	8004470 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003c12:	2200      	movs	r2, #0
 8003c14:	210f      	movs	r1, #15
 8003c16:	2038      	movs	r0, #56	; 0x38
 8003c18:	f000 fbf3 	bl	8004402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003c1c:	2038      	movs	r0, #56	; 0x38
 8003c1e:	f000 fc0c 	bl	800443a <HAL_NVIC_EnableIRQ>
}
 8003c22:	bf00      	nop
 8003c24:	3740      	adds	r7, #64	; 0x40
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40020800 	.word	0x40020800
 8003c34:	40020c00 	.word	0x40020c00
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40021400 	.word	0x40021400
 8003c40:	40021800 	.word	0x40021800
 8003c44:	40021c00 	.word	0x40021c00
 8003c48:	20000ab4 	.word	0x20000ab4
 8003c4c:	40026410 	.word	0x40026410

08003c50 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	460a      	mov	r2, r1
 8003c5a:	80fb      	strh	r3, [r7, #6]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <BSP_TS_Init+0x68>)
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003c6a:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <BSP_TS_Init+0x6c>)
 8003c6c:	88bb      	ldrh	r3, [r7, #4]
 8003c6e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003c70:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <BSP_TS_Init+0x70>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2070      	movs	r0, #112	; 0x70
 8003c76:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <BSP_TS_Init+0x70>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2070      	movs	r0, #112	; 0x70
 8003c7e:	4798      	blx	r3
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b51      	cmp	r3, #81	; 0x51
 8003c84:	d111      	bne.n	8003caa <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <BSP_TS_Init+0x74>)
 8003c88:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <BSP_TS_Init+0x70>)
 8003c8a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <BSP_TS_Init+0x78>)
 8003c8e:	2270      	movs	r2, #112	; 0x70
 8003c90:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <BSP_TS_Init+0x7c>)
 8003c94:	2208      	movs	r2, #8
 8003c96:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <BSP_TS_Init+0x74>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <BSP_TS_Init+0x78>)
 8003ca0:	7812      	ldrb	r2, [r2, #0]
 8003ca2:	b292      	uxth	r2, r2
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4798      	blx	r3
 8003ca8:	e001      	b.n	8003cae <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003caa:	2303      	movs	r3, #3
 8003cac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000b18 	.word	0x20000b18
 8003cbc:	20000b1a 	.word	0x20000b1a
 8003cc0:	20000004 	.word	0x20000004
 8003cc4:	20000b14 	.word	0x20000b14
 8003cc8:	20000b1d 	.word	0x20000b1d
 8003ccc:	20000b1c 	.word	0x20000b1c

08003cd0 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b097      	sub	sp, #92	; 0x5c
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003cea:	4bb4      	ldr	r3, [pc, #720]	; (8003fbc <BSP_TS_GetState+0x2ec>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	4ab3      	ldr	r2, [pc, #716]	; (8003fc0 <BSP_TS_GetState+0x2f0>)
 8003cf2:	7812      	ldrb	r2, [r2, #0]
 8003cf4:	b292      	uxth	r2, r2
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4798      	blx	r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 8196 	beq.w	8004038 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d10:	e185      	b.n	800401e <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003d12:	4baa      	ldr	r3, [pc, #680]	; (8003fbc <BSP_TS_GetState+0x2ec>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	4aa9      	ldr	r2, [pc, #676]	; (8003fc0 <BSP_TS_GetState+0x2f0>)
 8003d1a:	7812      	ldrb	r2, [r2, #0]
 8003d1c:	b290      	uxth	r0, r2
 8003d1e:	f107 0120 	add.w	r1, r7, #32
 8003d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d24:	0052      	lsls	r2, r2, #1
 8003d26:	188c      	adds	r4, r1, r2
 8003d28:	f107 0114 	add.w	r1, r7, #20
 8003d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d2e:	0052      	lsls	r2, r2, #1
 8003d30:	440a      	add	r2, r1
 8003d32:	4621      	mov	r1, r4
 8003d34:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003d36:	4ba3      	ldr	r3, [pc, #652]	; (8003fc4 <BSP_TS_GetState+0x2f4>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d117      	bne.n	8003d6e <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8003d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	3350      	adds	r3, #80	; 0x50
 8003d44:	443b      	add	r3, r7
 8003d46:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	3350      	adds	r3, #80	; 0x50
 8003d50:	443b      	add	r3, r7
 8003d52:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	3350      	adds	r3, #80	; 0x50
 8003d5c:	443b      	add	r3, r7
 8003d5e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	3350      	adds	r3, #80	; 0x50
 8003d68:	443b      	add	r3, r7
 8003d6a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003d6e:	4b95      	ldr	r3, [pc, #596]	; (8003fc4 <BSP_TS_GetState+0x2f4>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00e      	beq.n	8003d98 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8003d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	3350      	adds	r3, #80	; 0x50
 8003d80:	443b      	add	r3, r7
 8003d82:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003d86:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	3350      	adds	r3, #80	; 0x50
 8003d92:	443b      	add	r3, r7
 8003d94:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003d98:	4b8a      	ldr	r3, [pc, #552]	; (8003fc4 <BSP_TS_GetState+0x2f4>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00e      	beq.n	8003dc2 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8003da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	3350      	adds	r3, #80	; 0x50
 8003daa:	443b      	add	r3, r7
 8003dac:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003db0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	3350      	adds	r3, #80	; 0x50
 8003dbc:	443b      	add	r3, r7
 8003dbe:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003dc2:	4b80      	ldr	r3, [pc, #512]	; (8003fc4 <BSP_TS_GetState+0x2f4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d017      	beq.n	8003dfe <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8003dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	3350      	adds	r3, #80	; 0x50
 8003dd4:	443b      	add	r3, r7
 8003dd6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	3350      	adds	r3, #80	; 0x50
 8003de0:	443b      	add	r3, r7
 8003de2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	3350      	adds	r3, #80	; 0x50
 8003dec:	443b      	add	r3, r7
 8003dee:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	3350      	adds	r3, #80	; 0x50
 8003df8:	443b      	add	r3, r7
 8003dfa:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	3350      	adds	r3, #80	; 0x50
 8003e04:	443b      	add	r3, r7
 8003e06:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4a6e      	ldr	r2, [pc, #440]	; (8003fc8 <BSP_TS_GetState+0x2f8>)
 8003e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e14:	4299      	cmp	r1, r3
 8003e16:	d90d      	bls.n	8003e34 <BSP_TS_GetState+0x164>
 8003e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	3350      	adds	r3, #80	; 0x50
 8003e1e:	443b      	add	r3, r7
 8003e20:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003e24:	4968      	ldr	r1, [pc, #416]	; (8003fc8 <BSP_TS_GetState+0x2f8>)
 8003e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	e00c      	b.n	8003e4e <BSP_TS_GetState+0x17e>
 8003e34:	4a64      	ldr	r2, [pc, #400]	; (8003fc8 <BSP_TS_GetState+0x2f8>)
 8003e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	3350      	adds	r3, #80	; 0x50
 8003e44:	443b      	add	r3, r7
 8003e46:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	3350      	adds	r3, #80	; 0x50
 8003e58:	443b      	add	r3, r7
 8003e5a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4a5a      	ldr	r2, [pc, #360]	; (8003fcc <BSP_TS_GetState+0x2fc>)
 8003e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e68:	4299      	cmp	r1, r3
 8003e6a:	d90d      	bls.n	8003e88 <BSP_TS_GetState+0x1b8>
 8003e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	3350      	adds	r3, #80	; 0x50
 8003e72:	443b      	add	r3, r7
 8003e74:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003e78:	4954      	ldr	r1, [pc, #336]	; (8003fcc <BSP_TS_GetState+0x2fc>)
 8003e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	e00c      	b.n	8003ea2 <BSP_TS_GetState+0x1d2>
 8003e88:	4a50      	ldr	r2, [pc, #320]	; (8003fcc <BSP_TS_GetState+0x2fc>)
 8003e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	3350      	adds	r3, #80	; 0x50
 8003e98:	443b      	add	r3, r7
 8003e9a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003ea6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003eaa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003eae:	4413      	add	r3, r2
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	dd15      	ble.n	8003ee0 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8003eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	3350      	adds	r3, #80	; 0x50
 8003eba:	443b      	add	r3, r7
 8003ebc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4a41      	ldr	r2, [pc, #260]	; (8003fc8 <BSP_TS_GetState+0x2f8>)
 8003ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	3350      	adds	r3, #80	; 0x50
 8003ed0:	443b      	add	r3, r7
 8003ed2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4a3c      	ldr	r2, [pc, #240]	; (8003fcc <BSP_TS_GetState+0x2fc>)
 8003eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003edc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003ee0:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <BSP_TS_GetState+0x2f0>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b70      	cmp	r3, #112	; 0x70
 8003ee6:	d119      	bne.n	8003f1c <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8003ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	3350      	adds	r3, #80	; 0x50
 8003eee:	443b      	add	r3, r7
 8003ef0:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	460a      	mov	r2, r1
 8003efe:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	3350      	adds	r3, #80	; 0x50
 8003f06:	443b      	add	r3, r7
 8003f08:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f10:	3304      	adds	r3, #4
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	460a      	mov	r2, r1
 8003f18:	809a      	strh	r2, [r3, #4]
 8003f1a:	e022      	b.n	8003f62 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003f1c:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <BSP_TS_GetState+0x300>)
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	4619      	mov	r1, r3
 8003f22:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <BSP_TS_GetState+0x2f8>)
 8003f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	0b1b      	lsrs	r3, r3, #12
 8003f30:	b299      	uxth	r1, r3
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	460a      	mov	r2, r1
 8003f3c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <BSP_TS_GetState+0x304>)
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	4619      	mov	r1, r3
 8003f44:	4a21      	ldr	r2, [pc, #132]	; (8003fcc <BSP_TS_GetState+0x2fc>)
 8003f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4c:	fb01 f303 	mul.w	r3, r1, r3
 8003f50:	0b1b      	lsrs	r3, r3, #12
 8003f52:	b299      	uxth	r1, r3
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f58:	3304      	adds	r3, #4
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4413      	add	r3, r2
 8003f5e:	460a      	mov	r2, r1
 8003f60:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003f62:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <BSP_TS_GetState+0x2f0>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	b298      	uxth	r0, r3
 8003f68:	f107 010c 	add.w	r1, r7, #12
 8003f6c:	f107 0210 	add.w	r2, r7, #16
 8003f70:	f107 0308 	add.w	r3, r7, #8
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	460b      	mov	r3, r1
 8003f78:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003f7a:	f7fe f9f3 	bl	8002364 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	b2d9      	uxtb	r1, r3
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f86:	4413      	add	r3, r2
 8003f88:	3316      	adds	r3, #22
 8003f8a:	460a      	mov	r2, r1
 8003f8c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	b2d9      	uxtb	r1, r3
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f96:	4413      	add	r3, r2
 8003f98:	3320      	adds	r3, #32
 8003f9a:	460a      	mov	r2, r1
 8003f9c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d835      	bhi.n	8004010 <BSP_TS_GetState+0x340>
 8003fa4:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <BSP_TS_GetState+0x2dc>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fd9 	.word	0x08003fd9
 8003fb0:	08003fe7 	.word	0x08003fe7
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08004003 	.word	0x08004003
 8003fbc:	20000b14 	.word	0x20000b14
 8003fc0:	20000b1d 	.word	0x20000b1d
 8003fc4:	20000b1c 	.word	0x20000b1c
 8003fc8:	20000b20 	.word	0x20000b20
 8003fcc:	20000b34 	.word	0x20000b34
 8003fd0:	20000b18 	.word	0x20000b18
 8003fd4:	20000b1a 	.word	0x20000b1a
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fdc:	4413      	add	r3, r2
 8003fde:	331b      	adds	r3, #27
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	701a      	strb	r2, [r3, #0]
          break;
 8003fe4:	e018      	b.n	8004018 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fea:	4413      	add	r3, r2
 8003fec:	331b      	adds	r3, #27
 8003fee:	2202      	movs	r2, #2
 8003ff0:	701a      	strb	r2, [r3, #0]
          break;
 8003ff2:	e011      	b.n	8004018 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff8:	4413      	add	r3, r2
 8003ffa:	331b      	adds	r3, #27
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	701a      	strb	r2, [r3, #0]
          break;
 8004000:	e00a      	b.n	8004018 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004006:	4413      	add	r3, r2
 8004008:	331b      	adds	r3, #27
 800400a:	2200      	movs	r2, #0
 800400c:	701a      	strb	r2, [r3, #0]
          break;
 800400e:	e003      	b.n	8004018 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004016:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800401a:	3301      	adds	r3, #1
 800401c:	64bb      	str	r3, [r7, #72]	; 0x48
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004026:	4293      	cmp	r3, r2
 8004028:	f4ff ae73 	bcc.w	8003d12 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f809 	bl	8004044 <BSP_TS_Get_GestureId>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004038:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800403c:	4618      	mov	r0, r3
 800403e:	3754      	adds	r7, #84	; 0x54
 8004040:	46bd      	mov	sp, r7
 8004042:	bd90      	pop	{r4, r7, pc}

08004044 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004054:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <BSP_TS_Get_GestureId+0x100>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f107 0208 	add.w	r2, r7, #8
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe f966 	bl	8002332 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b49      	cmp	r3, #73	; 0x49
 800406a:	d05e      	beq.n	800412a <BSP_TS_Get_GestureId+0xe6>
 800406c:	2b49      	cmp	r3, #73	; 0x49
 800406e:	d860      	bhi.n	8004132 <BSP_TS_Get_GestureId+0xee>
 8004070:	2b1c      	cmp	r3, #28
 8004072:	d83f      	bhi.n	80040f4 <BSP_TS_Get_GestureId+0xb0>
 8004074:	2b1c      	cmp	r3, #28
 8004076:	d85c      	bhi.n	8004132 <BSP_TS_Get_GestureId+0xee>
 8004078:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <BSP_TS_Get_GestureId+0x3c>)
 800407a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407e:	bf00      	nop
 8004080:	080040fb 	.word	0x080040fb
 8004084:	08004133 	.word	0x08004133
 8004088:	08004133 	.word	0x08004133
 800408c:	08004133 	.word	0x08004133
 8004090:	08004133 	.word	0x08004133
 8004094:	08004133 	.word	0x08004133
 8004098:	08004133 	.word	0x08004133
 800409c:	08004133 	.word	0x08004133
 80040a0:	08004133 	.word	0x08004133
 80040a4:	08004133 	.word	0x08004133
 80040a8:	08004133 	.word	0x08004133
 80040ac:	08004133 	.word	0x08004133
 80040b0:	08004133 	.word	0x08004133
 80040b4:	08004133 	.word	0x08004133
 80040b8:	08004133 	.word	0x08004133
 80040bc:	08004133 	.word	0x08004133
 80040c0:	08004103 	.word	0x08004103
 80040c4:	08004133 	.word	0x08004133
 80040c8:	08004133 	.word	0x08004133
 80040cc:	08004133 	.word	0x08004133
 80040d0:	0800410b 	.word	0x0800410b
 80040d4:	08004133 	.word	0x08004133
 80040d8:	08004133 	.word	0x08004133
 80040dc:	08004133 	.word	0x08004133
 80040e0:	08004113 	.word	0x08004113
 80040e4:	08004133 	.word	0x08004133
 80040e8:	08004133 	.word	0x08004133
 80040ec:	08004133 	.word	0x08004133
 80040f0:	0800411b 	.word	0x0800411b
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d014      	beq.n	8004122 <BSP_TS_Get_GestureId+0xde>
 80040f8:	e01b      	b.n	8004132 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004100:	e01a      	b.n	8004138 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004108:	e016      	b.n	8004138 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2202      	movs	r2, #2
 800410e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004110:	e012      	b.n	8004138 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2203      	movs	r2, #3
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004118:	e00e      	b.n	8004138 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2204      	movs	r2, #4
 800411e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004120:	e00a      	b.n	8004138 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2205      	movs	r2, #5
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004128:	e006      	b.n	8004138 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2206      	movs	r2, #6
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004130:	e002      	b.n	8004138 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
      break;
 8004136:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000b1d 	.word	0x20000b1d

08004148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800414c:	2003      	movs	r0, #3
 800414e:	f000 f94d 	bl	80043ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004152:	2000      	movs	r0, #0
 8004154:	f000 f806 	bl	8004164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004158:	f7fd f9da 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800416c:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_InitTick+0x54>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_InitTick+0x58>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	4619      	mov	r1, r3
 8004176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800417a:	fbb3 f3f1 	udiv	r3, r3, r1
 800417e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f967 	bl	8004456 <HAL_SYSTICK_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e00e      	b.n	80041b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d80a      	bhi.n	80041ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004198:	2200      	movs	r2, #0
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	f000 f92f 	bl	8004402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041a4:	4a06      	ldr	r2, [pc, #24]	; (80041c0 <HAL_InitTick+0x5c>)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000000 	.word	0x20000000
 80041bc:	20000044 	.word	0x20000044
 80041c0:	20000040 	.word	0x20000040

080041c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_IncTick+0x20>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_IncTick+0x24>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4413      	add	r3, r2
 80041d4:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <HAL_IncTick+0x24>)
 80041d6:	6013      	str	r3, [r2, #0]
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000044 	.word	0x20000044
 80041e8:	20000b48 	.word	0x20000b48

080041ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return uwTick;
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <HAL_GetTick+0x14>)
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000b48 	.word	0x20000b48

08004204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800420c:	f7ff ffee 	bl	80041ec <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d005      	beq.n	800422a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800421e:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <HAL_Delay+0x44>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800422a:	bf00      	nop
 800422c:	f7ff ffde 	bl	80041ec <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	429a      	cmp	r2, r3
 800423a:	d8f7      	bhi.n	800422c <HAL_Delay+0x28>
  {
  }
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000044 	.word	0x20000044

0800424c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <__NVIC_SetPriorityGrouping+0x40>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004268:	4013      	ands	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <__NVIC_SetPriorityGrouping+0x44>)
 8004276:	4313      	orrs	r3, r2
 8004278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800427a:	4a04      	ldr	r2, [pc, #16]	; (800428c <__NVIC_SetPriorityGrouping+0x40>)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	60d3      	str	r3, [r2, #12]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000ed00 	.word	0xe000ed00
 8004290:	05fa0000 	.word	0x05fa0000

08004294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <__NVIC_GetPriorityGrouping+0x18>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	f003 0307 	and.w	r3, r3, #7
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000ed00 	.word	0xe000ed00

080042b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	db0b      	blt.n	80042da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	f003 021f 	and.w	r2, r3, #31
 80042c8:	4907      	ldr	r1, [pc, #28]	; (80042e8 <__NVIC_EnableIRQ+0x38>)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	2001      	movs	r0, #1
 80042d2:	fa00 f202 	lsl.w	r2, r0, r2
 80042d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	e000e100 	.word	0xe000e100

080042ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	6039      	str	r1, [r7, #0]
 80042f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	db0a      	blt.n	8004316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	490c      	ldr	r1, [pc, #48]	; (8004338 <__NVIC_SetPriority+0x4c>)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	0112      	lsls	r2, r2, #4
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	440b      	add	r3, r1
 8004310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004314:	e00a      	b.n	800432c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4908      	ldr	r1, [pc, #32]	; (800433c <__NVIC_SetPriority+0x50>)
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	3b04      	subs	r3, #4
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	440b      	add	r3, r1
 800432a:	761a      	strb	r2, [r3, #24]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	e000e100 	.word	0xe000e100
 800433c:	e000ed00 	.word	0xe000ed00

08004340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004340:	b480      	push	{r7}
 8004342:	b089      	sub	sp, #36	; 0x24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f1c3 0307 	rsb	r3, r3, #7
 800435a:	2b04      	cmp	r3, #4
 800435c:	bf28      	it	cs
 800435e:	2304      	movcs	r3, #4
 8004360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3304      	adds	r3, #4
 8004366:	2b06      	cmp	r3, #6
 8004368:	d902      	bls.n	8004370 <NVIC_EncodePriority+0x30>
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3b03      	subs	r3, #3
 800436e:	e000      	b.n	8004372 <NVIC_EncodePriority+0x32>
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004374:	f04f 32ff 	mov.w	r2, #4294967295
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43da      	mvns	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	401a      	ands	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004388:	f04f 31ff 	mov.w	r1, #4294967295
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	43d9      	mvns	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004398:	4313      	orrs	r3, r2
         );
}
 800439a:	4618      	mov	r0, r3
 800439c:	3724      	adds	r7, #36	; 0x24
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043b8:	d301      	bcc.n	80043be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ba:	2301      	movs	r3, #1
 80043bc:	e00f      	b.n	80043de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043be:	4a0a      	ldr	r2, [pc, #40]	; (80043e8 <SysTick_Config+0x40>)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043c6:	210f      	movs	r1, #15
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	f7ff ff8e 	bl	80042ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <SysTick_Config+0x40>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043d6:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <SysTick_Config+0x40>)
 80043d8:	2207      	movs	r2, #7
 80043da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	e000e010 	.word	0xe000e010

080043ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ff29 	bl	800424c <__NVIC_SetPriorityGrouping>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004402:	b580      	push	{r7, lr}
 8004404:	b086      	sub	sp, #24
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004414:	f7ff ff3e 	bl	8004294 <__NVIC_GetPriorityGrouping>
 8004418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f7ff ff8e 	bl	8004340 <NVIC_EncodePriority>
 8004424:	4602      	mov	r2, r0
 8004426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442a:	4611      	mov	r1, r2
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff ff5d 	bl	80042ec <__NVIC_SetPriority>
}
 8004432:	bf00      	nop
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ff31 	bl	80042b0 <__NVIC_EnableIRQ>
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff ffa2 	bl	80043a8 <SysTick_Config>
 8004464:	4603      	mov	r3, r0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7ff feb6 	bl	80041ec <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e099      	b.n	80045c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ac:	e00f      	b.n	80044ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ae:	f7ff fe9d 	bl	80041ec <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	d908      	bls.n	80044ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2203      	movs	r2, #3
 80044c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e078      	b.n	80045c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e8      	bne.n	80044ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <HAL_DMA_Init+0x158>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2b04      	cmp	r3, #4
 8004526:	d107      	bne.n	8004538 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	4313      	orrs	r3, r2
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 0307 	bic.w	r3, r3, #7
 800454e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b04      	cmp	r3, #4
 8004560:	d117      	bne.n	8004592 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00e      	beq.n	8004592 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f92d 	bl	80047d4 <DMA_CheckFifoParam>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2240      	movs	r2, #64	; 0x40
 8004584:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800458e:	2301      	movs	r3, #1
 8004590:	e016      	b.n	80045c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f8e4 	bl	8004768 <DMA_CalcBaseAndBitshift>
 80045a0:	4603      	mov	r3, r0
 80045a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a8:	223f      	movs	r2, #63	; 0x3f
 80045aa:	409a      	lsls	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	f010803f 	.word	0xf010803f

080045cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e050      	b.n	8004680 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d101      	bne.n	80045ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
 80045ec:	e048      	b.n	8004680 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2200      	movs	r2, #0
 8004624:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2221      	movs	r2, #33	; 0x21
 800462c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f89a 	bl	8004768 <DMA_CalcBaseAndBitshift>
 8004634:	4603      	mov	r3, r0
 8004636:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	223f      	movs	r2, #63	; 0x3f
 800463e:	409a      	lsls	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004694:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004696:	f7ff fda9 	bl	80041ec <HAL_GetTick>
 800469a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d008      	beq.n	80046ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2280      	movs	r2, #128	; 0x80
 80046ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e052      	b.n	8004760 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0216 	bic.w	r2, r2, #22
 80046c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	695a      	ldr	r2, [r3, #20]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d103      	bne.n	80046ea <HAL_DMA_Abort+0x62>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0208 	bic.w	r2, r2, #8
 80046f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800470a:	e013      	b.n	8004734 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800470c:	f7ff fd6e 	bl	80041ec <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b05      	cmp	r3, #5
 8004718:	d90c      	bls.n	8004734 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2203      	movs	r2, #3
 8004724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e015      	b.n	8004760 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e4      	bne.n	800470c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004746:	223f      	movs	r2, #63	; 0x3f
 8004748:	409a      	lsls	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3b10      	subs	r3, #16
 8004778:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <DMA_CalcBaseAndBitshift+0x60>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	091b      	lsrs	r3, r3, #4
 8004780:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004782:	4a12      	ldr	r2, [pc, #72]	; (80047cc <DMA_CalcBaseAndBitshift+0x64>)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d908      	bls.n	80047a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <DMA_CalcBaseAndBitshift+0x68>)
 800479e:	4013      	ands	r3, r2
 80047a0:	1d1a      	adds	r2, r3, #4
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	659a      	str	r2, [r3, #88]	; 0x58
 80047a6:	e006      	b.n	80047b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <DMA_CalcBaseAndBitshift+0x68>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	aaaaaaab 	.word	0xaaaaaaab
 80047cc:	0801b170 	.word	0x0801b170
 80047d0:	fffffc00 	.word	0xfffffc00

080047d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d11f      	bne.n	800482e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d856      	bhi.n	80048a2 <DMA_CheckFifoParam+0xce>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <DMA_CheckFifoParam+0x28>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	0800481f 	.word	0x0800481f
 8004804:	0800480d 	.word	0x0800480d
 8004808:	080048a3 	.word	0x080048a3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d046      	beq.n	80048a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800481c:	e043      	b.n	80048a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004826:	d140      	bne.n	80048aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482c:	e03d      	b.n	80048aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004836:	d121      	bne.n	800487c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b03      	cmp	r3, #3
 800483c:	d837      	bhi.n	80048ae <DMA_CheckFifoParam+0xda>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <DMA_CheckFifoParam+0x70>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004855 	.word	0x08004855
 8004848:	0800485b 	.word	0x0800485b
 800484c:	08004855 	.word	0x08004855
 8004850:	0800486d 	.word	0x0800486d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      break;
 8004858:	e030      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d025      	beq.n	80048b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486a:	e022      	b.n	80048b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004874:	d11f      	bne.n	80048b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800487a:	e01c      	b.n	80048b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d903      	bls.n	800488a <DMA_CheckFifoParam+0xb6>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b03      	cmp	r3, #3
 8004886:	d003      	beq.n	8004890 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004888:	e018      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
      break;
 800488e:	e015      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      break;
 80048a0:	e00b      	b.n	80048ba <DMA_CheckFifoParam+0xe6>
      break;
 80048a2:	bf00      	nop
 80048a4:	e00a      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;
 80048a6:	bf00      	nop
 80048a8:	e008      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;
 80048aa:	bf00      	nop
 80048ac:	e006      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;
 80048ae:	bf00      	nop
 80048b0:	e004      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;
 80048b2:	bf00      	nop
 80048b4:	e002      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;   
 80048b6:	bf00      	nop
 80048b8:	e000      	b.n	80048bc <DMA_CheckFifoParam+0xe8>
      break;
 80048ba:	bf00      	nop
    }
  } 
  
  return status; 
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop

080048cc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e039      	b.n	8004952 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc fe30 	bl	8001558 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	f023 0107 	bic.w	r1, r3, #7
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <HAL_DMA2D_Init+0x90>)
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68d1      	ldr	r1, [r2, #12]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	430b      	orrs	r3, r1
 8004940:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	ffffc000 	.word	0xffffc000

08004960 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_DMA2D_Start+0x1c>
 8004978:	2302      	movs	r3, #2
 800497a:	e018      	b.n	80049ae <HAL_DMA2D_Start+0x4e>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f988 	bl	8004cac <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b086      	sub	sp, #24
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d056      	beq.n	8004a80 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80049d2:	f7ff fc0b 	bl	80041ec <HAL_GetTick>
 80049d6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80049d8:	e04b      	b.n	8004a72 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d023      	beq.n	8004a34 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fa:	f043 0202 	orr.w	r2, r3, #2
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a10:	f043 0201 	orr.w	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2221      	movs	r2, #33	; 0x21
 8004a1e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2204      	movs	r2, #4
 8004a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0a5      	b.n	8004b80 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d01a      	beq.n	8004a72 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a3c:	f7ff fbd6 	bl	80041ec <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d302      	bcc.n	8004a52 <HAL_DMA2D_PollForTransfer+0x9c>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2203      	movs	r2, #3
 8004a62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e086      	b.n	8004b80 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ac      	beq.n	80049da <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d061      	beq.n	8004b66 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aa2:	f7ff fba3 	bl	80041ec <HAL_GetTick>
 8004aa6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004aa8:	e056      	b.n	8004b58 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d02e      	beq.n	8004b1a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	f043 0204 	orr.w	r2, r3, #4
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	f043 0202 	orr.w	r2, r3, #2
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	f043 0201 	orr.w	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2229      	movs	r2, #41	; 0x29
 8004b04:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2204      	movs	r2, #4
 8004b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e032      	b.n	8004b80 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d01a      	beq.n	8004b58 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b22:	f7ff fb63 	bl	80041ec <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d302      	bcc.n	8004b38 <HAL_DMA2D_PollForTransfer+0x182>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10f      	bne.n	8004b58 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2203      	movs	r2, #3
 8004b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e013      	b.n	8004b80 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0a1      	beq.n	8004aaa <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2212      	movs	r2, #18
 8004b6c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_DMA2D_ConfigLayer+0x20>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e079      	b.n	8004c9c <HAL_DMA2D_ConfigLayer+0x114>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	3318      	adds	r3, #24
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004bd2:	4b35      	ldr	r3, [pc, #212]	; (8004ca8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004bd4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b0a      	cmp	r3, #10
 8004bdc:	d003      	beq.n	8004be6 <HAL_DMA2D_ConfigLayer+0x5e>
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b09      	cmp	r3, #9
 8004be4:	d107      	bne.n	8004bf6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e005      	b.n	8004c02 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	061b      	lsls	r3, r3, #24
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d120      	bne.n	8004c4a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	43db      	mvns	r3, r3
 8004c12:	ea02 0103 	and.w	r1, r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b0a      	cmp	r3, #10
 8004c30:	d003      	beq.n	8004c3a <HAL_DMA2D_ConfigLayer+0xb2>
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b09      	cmp	r3, #9
 8004c38:	d127      	bne.n	8004c8a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
 8004c48:	e01f      	b.n	8004c8a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	43db      	mvns	r3, r3
 8004c54:	ea02 0103 	and.w	r1, r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b0a      	cmp	r3, #10
 8004c72:	d003      	beq.n	8004c7c <HAL_DMA2D_ConfigLayer+0xf4>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b09      	cmp	r3, #9
 8004c7a:	d106      	bne.n	8004c8a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c88:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	ff03000f 	.word	0xff03000f

08004cac <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b08b      	sub	sp, #44	; 0x2c
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	041a      	lsls	r2, r3, #16
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ce4:	d174      	bne.n	8004dd0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004cec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cf4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004cfc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d108      	bne.n	8004d1e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1c:	e053      	b.n	8004dc6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d106      	bne.n	8004d34 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
 8004d32:	e048      	b.n	8004dc6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d111      	bne.n	8004d60 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	0cdb      	lsrs	r3, r3, #19
 8004d40:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	0a9b      	lsrs	r3, r3, #10
 8004d46:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	08db      	lsrs	r3, r3, #3
 8004d4c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	02db      	lsls	r3, r3, #11
 8004d56:	4313      	orrs	r3, r2
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	e032      	b.n	8004dc6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d117      	bne.n	8004d98 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	0fdb      	lsrs	r3, r3, #31
 8004d6c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	0cdb      	lsrs	r3, r3, #19
 8004d72:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	0adb      	lsrs	r3, r3, #11
 8004d78:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	08db      	lsrs	r3, r3, #3
 8004d7e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	029b      	lsls	r3, r3, #10
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	03db      	lsls	r3, r3, #15
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
 8004d96:	e016      	b.n	8004dc6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	0f1b      	lsrs	r3, r3, #28
 8004d9c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	0d1b      	lsrs	r3, r3, #20
 8004da2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	0b1b      	lsrs	r3, r3, #12
 8004da8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	011a      	lsls	r2, r3, #4
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	431a      	orrs	r2, r3
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	031b      	lsls	r3, r3, #12
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004dce:	e003      	b.n	8004dd8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	60da      	str	r2, [r3, #12]
}
 8004dd8:	bf00      	nop
 8004dda:	372c      	adds	r7, #44	; 0x2c
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e06a      	b.n	8004ecc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d106      	bne.n	8004e0e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2223      	movs	r2, #35	; 0x23
 8004e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f005 fbd9 	bl	800a5c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e0e:	4b31      	ldr	r3, [pc, #196]	; (8004ed4 <HAL_ETH_Init+0xf0>)
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	4a30      	ldr	r2, [pc, #192]	; (8004ed4 <HAL_ETH_Init+0xf0>)
 8004e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e18:	6453      	str	r3, [r2, #68]	; 0x44
 8004e1a:	4b2e      	ldr	r3, [pc, #184]	; (8004ed4 <HAL_ETH_Init+0xf0>)
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004e26:	4b2c      	ldr	r3, [pc, #176]	; (8004ed8 <HAL_ETH_Init+0xf4>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4a2b      	ldr	r2, [pc, #172]	; (8004ed8 <HAL_ETH_Init+0xf4>)
 8004e2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e30:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004e32:	4b29      	ldr	r3, [pc, #164]	; (8004ed8 <HAL_ETH_Init+0xf4>)
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	4927      	ldr	r1, [pc, #156]	; (8004ed8 <HAL_ETH_Init+0xf4>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004e40:	4b25      	ldr	r3, [pc, #148]	; (8004ed8 <HAL_ETH_Init+0xf4>)
 8004e42:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6812      	ldr	r2, [r2, #0]
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e5c:	f7ff f9c6 	bl	80041ec <HAL_GetTick>
 8004e60:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004e62:	e011      	b.n	8004e88 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004e64:	f7ff f9c2 	bl	80041ec <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e72:	d909      	bls.n	8004e88 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2204      	movs	r2, #4
 8004e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	22e0      	movs	r2, #224	; 0xe0
 8004e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e021      	b.n	8004ecc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e4      	bne.n	8004e64 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fdf0 	bl	8005a80 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 fe97 	bl	8005bd4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 feed 	bl	8005c86 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 fe55 	bl	8005b64 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2210      	movs	r2, #16
 8004ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	40013800 	.word	0x40013800

08004edc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eea:	2b10      	cmp	r3, #16
 8004eec:	d150      	bne.n	8004f90 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2223      	movs	r2, #35	; 0x23
 8004ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f9fd 	bl	80052fc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0208 	orr.w	r2, r2, #8
 8004f10:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f1a:	2001      	movs	r0, #1
 8004f1c:	f7ff f972 	bl	8004204 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0204 	orr.w	r2, r2, #4
 8004f36:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f40:	2001      	movs	r0, #1
 8004f42:	f7ff f95f 	bl	8004204 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fc36 	bl	80057c0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f6a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	f043 0302 	orr.w	r3, r3, #2
 8004f7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004f82:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2223      	movs	r2, #35	; 0x23
 8004f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	e000      	b.n	8004f92 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
  }
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa8:	2b23      	cmp	r3, #35	; 0x23
 8004faa:	d14a      	bne.n	8005042 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2223      	movs	r2, #35	; 0x23
 8004fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fca:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	f023 0302 	bic.w	r3, r3, #2
 8004fde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fe2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0204 	bic.w	r2, r2, #4
 8004ff2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	f7ff f901 	bl	8004204 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fbd8 	bl	80057c0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0208 	bic.w	r2, r2, #8
 800501e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005028:	2001      	movs	r0, #1
 800502a:	f7ff f8eb 	bl	8004204 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2210      	movs	r2, #16
 800503a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	e000      	b.n	8005044 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
  }
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005064:	f043 0201 	orr.w	r2, r3, #1
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e07c      	b.n	800516c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005078:	2b23      	cmp	r3, #35	; 0x23
 800507a:	d176      	bne.n	800516a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800507c:	2200      	movs	r2, #0
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fe6d 	bl	8005d60 <ETH_Prepare_Tx_Descriptors>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005092:	f043 0202 	orr.w	r2, r3, #2
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e065      	b.n	800516c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80050a0:	f3bf 8f4f 	dsb	sy
}
 80050a4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3206      	adds	r2, #6
 80050ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	629a      	str	r2, [r3, #40]	; 0x28
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d904      	bls.n	80050d0 <HAL_ETH_Transmit+0x84>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	1f1a      	subs	r2, r3, #4
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3106      	adds	r1, #6
 80050dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80050e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050e4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80050e6:	f7ff f881 	bl	80041ec <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80050ec:	e037      	b.n	800515e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d011      	beq.n	8005124 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	f043 0208 	orr.w	r2, r3, #8
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005118:	695a      	ldr	r2, [r3, #20]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e023      	b.n	800516c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d018      	beq.n	800515e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800512c:	f7ff f85e 	bl	80041ec <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	429a      	cmp	r2, r3
 800513a:	d302      	bcc.n	8005142 <HAL_ETH_Transmit+0xf6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10d      	bne.n	800515e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	f043 0204 	orr.w	r2, r3, #4
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8005158:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e006      	b.n	800516c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	dbc3      	blt.n	80050ee <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e000      	b.n	800516c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
  }
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800517e:	2300      	movs	r3, #0
 8005180:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0a8      	b.n	80052f2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a6:	2b23      	cmp	r3, #35	; 0x23
 80051a8:	d001      	beq.n	80051ae <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e0a1      	b.n	80052f2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	3212      	adds	r2, #18
 80051ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051be:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c4:	f1c3 0304 	rsb	r3, r3, #4
 80051c8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80051ca:	e06a      	b.n	80052a2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d103      	bne.n	80051fc <HAL_ETH_ReadData+0x88>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d040      	beq.n	800527e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005230:	3b04      	subs	r3, #4
 8005232:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800523c:	2301      	movs	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005258:	461a      	mov	r2, r3
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f005 fb51 	bl	800a904 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	441a      	add	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2200      	movs	r2, #0
 800527c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3301      	adds	r3, #1
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	2b03      	cmp	r3, #3
 8005288:	d902      	bls.n	8005290 <HAL_ETH_ReadData+0x11c>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	3b04      	subs	r3, #4
 800528e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	3212      	adds	r2, #18
 8005296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800529a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	3301      	adds	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	db06      	blt.n	80052b8 <HAL_ETH_ReadData+0x144>
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d202      	bcs.n	80052b8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d089      	beq.n	80051cc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	441a      	add	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f815 	bl	80052fc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d108      	bne.n	80052f0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	e000      	b.n	80052f2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8005308:	2301      	movs	r3, #1
 800530a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005310:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	3212      	adds	r2, #18
 8005318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005322:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8005324:	e040      	b.n	80053a8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d112      	bne.n	8005354 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800532e:	f107 030c 	add.w	r3, r7, #12
 8005332:	4618      	mov	r0, r3
 8005334:	f005 fab6 	bl	800a8a4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d102      	bne.n	8005344 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	74fb      	strb	r3, [r7, #19]
 8005342:	e007      	b.n	8005354 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	461a      	mov	r2, r3
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	461a      	mov	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d026      	beq.n	80053a8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535e:	2b00      	cmp	r3, #0
 8005360:	d103      	bne.n	800536a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <ETH_UpdateDescriptor+0xe4>)
 8005366:	605a      	str	r2, [r3, #4]
 8005368:	e003      	b.n	8005372 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8005370:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8005372:	f3bf 8f5f 	dmb	sy
}
 8005376:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	3301      	adds	r3, #1
 8005388:	61fb      	str	r3, [r7, #28]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d902      	bls.n	8005396 <ETH_UpdateDescriptor+0x9a>
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	3b04      	subs	r3, #4
 8005394:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	3212      	adds	r2, #18
 800539c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a0:	617b      	str	r3, [r7, #20]
      desccount--;
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <ETH_UpdateDescriptor+0xb8>
 80053ae:	7cfb      	ldrb	r3, [r7, #19]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1b8      	bne.n	8005326 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d00c      	beq.n	80053d8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053c6:	461a      	mov	r2, r3
 80053c8:	2300      	movs	r3, #0
 80053ca:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80053d8:	bf00      	nop
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	800045f8 	.word	0x800045f8

080053e4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f003 031c 	and.w	r3, r3, #28
 8005400:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	02db      	lsls	r3, r3, #11
 8005406:	b29b      	uxth	r3, r3
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	019b      	lsls	r3, r3, #6
 8005412:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f023 0302 	bic.w	r3, r3, #2
 8005422:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005434:	f7fe feda 	bl	80041ec <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800543a:	e00d      	b.n	8005458 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800543c:	f7fe fed6 	bl	80041ec <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544a:	d301      	bcc.n	8005450 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e010      	b.n	8005472 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ec      	bne.n	800543c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	b29b      	uxth	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b086      	sub	sp, #24
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	607a      	str	r2, [r7, #4]
 8005486:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 031c 	and.w	r3, r3, #28
 8005496:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	02db      	lsls	r3, r3, #11
 800549c:	b29b      	uxth	r3, r3
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	019b      	lsls	r3, r3, #6
 80054a8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054d4:	f7fe fe8a 	bl	80041ec <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80054da:	e00d      	b.n	80054f8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80054dc:	f7fe fe86 	bl	80041ec <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ea:	d301      	bcc.n	80054f0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e009      	b.n	8005504 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1ec      	bne.n	80054dc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0d9      	b.n	80056d4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0310 	and.w	r3, r3, #16
 800552a:	2b00      	cmp	r3, #0
 800552c:	bf14      	ite	ne
 800552e:	2301      	movne	r3, #1
 8005530:	2300      	moveq	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005554:	2b00      	cmp	r3, #0
 8005556:	bf0c      	ite	eq
 8005558:	2301      	moveq	r3, #1
 800555a:	2300      	movne	r3, #0
 800555c:	b2db      	uxtb	r3, r3
 800555e:	461a      	mov	r2, r3
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800558a:	2b00      	cmp	r3, #0
 800558c:	bf0c      	ite	eq
 800558e:	2301      	moveq	r3, #1
 8005590:	2300      	movne	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf14      	ite	ne
 80055a8:	2301      	movne	r3, #1
 80055aa:	2300      	moveq	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bf0c      	ite	eq
 80055de:	2301      	moveq	r3, #1
 80055e0:	2300      	movne	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf0c      	ite	eq
 80055f8:	2301      	moveq	r3, #1
 80055fa:	2300      	movne	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	2b00      	cmp	r3, #0
 8005610:	bf14      	ite	ne
 8005612:	2301      	movne	r3, #1
 8005614:	2300      	moveq	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005636:	2b00      	cmp	r3, #0
 8005638:	bf14      	ite	ne
 800563a:	2301      	movne	r3, #1
 800563c:	2300      	moveq	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	0c1b      	lsrs	r3, r3, #16
 8005694:	b29a      	uxth	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	bf14      	ite	ne
 80056a8:	2301      	movne	r3, #1
 80056aa:	2300      	moveq	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e00b      	b.n	800570c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d105      	bne.n	800570a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f883 	bl	800580c <ETH_SetMACConfig>

    return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e000      	b.n	800570c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
  }
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 031c 	bic.w	r3, r3, #28
 800572a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800572c:	f003 f988 	bl	8008a40 <HAL_RCC_GetHCLKFreq>
 8005730:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a1d      	ldr	r2, [pc, #116]	; (80057ac <HAL_ETH_SetMDIOClockRange+0x98>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d908      	bls.n	800574c <HAL_ETH_SetMDIOClockRange+0x38>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4a1c      	ldr	r2, [pc, #112]	; (80057b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d804      	bhi.n	800574c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f043 0308 	orr.w	r3, r3, #8
 8005748:	60fb      	str	r3, [r7, #12]
 800574a:	e027      	b.n	800579c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d908      	bls.n	8005766 <HAL_ETH_SetMDIOClockRange+0x52>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d204      	bcs.n	8005766 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f043 030c 	orr.w	r3, r3, #12
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e01a      	b.n	800579c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4a12      	ldr	r2, [pc, #72]	; (80057b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d303      	bcc.n	8005776 <HAL_ETH_SetMDIOClockRange+0x62>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4a11      	ldr	r2, [pc, #68]	; (80057b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d911      	bls.n	800579a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	4a0f      	ldr	r2, [pc, #60]	; (80057b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d908      	bls.n	8005790 <HAL_ETH_SetMDIOClockRange+0x7c>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4a0e      	ldr	r2, [pc, #56]	; (80057bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d804      	bhi.n	8005790 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f043 0304 	orr.w	r3, r3, #4
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e005      	b.n	800579c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f043 0310 	orr.w	r3, r3, #16
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	e000      	b.n	800579c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800579a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	611a      	str	r2, [r3, #16]
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	01312cff 	.word	0x01312cff
 80057b0:	02160ebf 	.word	0x02160ebf
 80057b4:	03938700 	.word	0x03938700
 80057b8:	05f5e0ff 	.word	0x05f5e0ff
 80057bc:	08f0d17f 	.word	0x08f0d17f

080057c0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6812      	ldr	r2, [r2, #0]
 80057da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057e2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80057f0:	2001      	movs	r0, #1
 80057f2:	f7fe fd07 	bl	8004204 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005800:	6193      	str	r3, [r2, #24]
}
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4b51      	ldr	r3, [pc, #324]	; (8005968 <ETH_SetMACConfig+0x15c>)
 8005822:	4013      	ands	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	7c1b      	ldrb	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <ETH_SetMACConfig+0x28>
 800582e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005832:	e000      	b.n	8005836 <ETH_SetMACConfig+0x2a>
 8005834:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	7c5b      	ldrb	r3, [r3, #17]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <ETH_SetMACConfig+0x38>
 800583e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005842:	e000      	b.n	8005846 <ETH_SetMACConfig+0x3a>
 8005844:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005846:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800584c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	7fdb      	ldrb	r3, [r3, #31]
 8005852:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005854:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800585a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	7f92      	ldrb	r2, [r2, #30]
 8005860:	2a00      	cmp	r2, #0
 8005862:	d102      	bne.n	800586a <ETH_SetMACConfig+0x5e>
 8005864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005868:	e000      	b.n	800586c <ETH_SetMACConfig+0x60>
 800586a:	2200      	movs	r2, #0
                        macconf->Speed |
 800586c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	7f1b      	ldrb	r3, [r3, #28]
 8005872:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005874:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800587a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	791b      	ldrb	r3, [r3, #4]
 8005880:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005882:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	f892 2020 	ldrb.w	r2, [r2, #32]
 800588a:	2a00      	cmp	r2, #0
 800588c:	d102      	bne.n	8005894 <ETH_SetMACConfig+0x88>
 800588e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005892:	e000      	b.n	8005896 <ETH_SetMACConfig+0x8a>
 8005894:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005896:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	7bdb      	ldrb	r3, [r3, #15]
 800589c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800589e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80058a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058ac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80058ae:	4313      	orrs	r3, r2
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80058c6:	2001      	movs	r0, #1
 80058c8:	f7fe fc9c 	bl	8004204 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f64f 7341 	movw	r3, #65345	; 0xff41
 80058e2:	4013      	ands	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80058f2:	2a00      	cmp	r2, #0
 80058f4:	d101      	bne.n	80058fa <ETH_SetMACConfig+0xee>
 80058f6:	2280      	movs	r2, #128	; 0x80
 80058f8:	e000      	b.n	80058fc <ETH_SetMACConfig+0xf0>
 80058fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80058fc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005902:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800590a:	2a01      	cmp	r2, #1
 800590c:	d101      	bne.n	8005912 <ETH_SetMACConfig+0x106>
 800590e:	2208      	movs	r2, #8
 8005910:	e000      	b.n	8005914 <ETH_SetMACConfig+0x108>
 8005912:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005914:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800591c:	2a01      	cmp	r2, #1
 800591e:	d101      	bne.n	8005924 <ETH_SetMACConfig+0x118>
 8005920:	2204      	movs	r2, #4
 8005922:	e000      	b.n	8005926 <ETH_SetMACConfig+0x11a>
 8005924:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005926:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800592e:	2a01      	cmp	r2, #1
 8005930:	d101      	bne.n	8005936 <ETH_SetMACConfig+0x12a>
 8005932:	2202      	movs	r2, #2
 8005934:	e000      	b.n	8005938 <ETH_SetMACConfig+0x12c>
 8005936:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005938:	4313      	orrs	r3, r2
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005950:	2001      	movs	r0, #1
 8005952:	f7fe fc57 	bl	8004204 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	619a      	str	r2, [r3, #24]
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	ff20810f 	.word	0xff20810f

0800596c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4b3d      	ldr	r3, [pc, #244]	; (8005a7c <ETH_SetDMAConfig+0x110>)
 8005986:	4013      	ands	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	7b1b      	ldrb	r3, [r3, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d102      	bne.n	8005998 <ETH_SetDMAConfig+0x2c>
 8005992:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005996:	e000      	b.n	800599a <ETH_SetDMAConfig+0x2e>
 8005998:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	7b5b      	ldrb	r3, [r3, #13]
 800599e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80059a0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	7f52      	ldrb	r2, [r2, #29]
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	d102      	bne.n	80059b0 <ETH_SetDMAConfig+0x44>
 80059aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059ae:	e000      	b.n	80059b2 <ETH_SetDMAConfig+0x46>
 80059b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80059b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	7b9b      	ldrb	r3, [r3, #14]
 80059b8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80059ba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80059c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	7f1b      	ldrb	r3, [r3, #28]
 80059c6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80059c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	7f9b      	ldrb	r3, [r3, #30]
 80059ce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80059d0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80059d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059de:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80059e0:	4313      	orrs	r3, r2
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f0:	461a      	mov	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a02:	2001      	movs	r0, #1
 8005a04:	f7fe fbfe 	bl	8004204 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a10:	461a      	mov	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	791b      	ldrb	r3, [r3, #4]
 8005a1a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005a20:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005a26:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005a2c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a34:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005a36:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005a3e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005a44:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a52:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a60:	2001      	movs	r0, #1
 8005a62:	f7fe fbcf 	bl	8004204 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6013      	str	r3, [r2, #0]
}
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	f8de3f23 	.word	0xf8de3f23

08005a80 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b0a6      	sub	sp, #152	; 0x98
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005a94:	2300      	movs	r3, #0
 8005a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005abc:	2300      	movs	r3, #0
 8005abe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005ae2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005ae8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005af4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff fe86 	bl	800580c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005b00:	2301      	movs	r3, #1
 8005b02:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005b22:	2300      	movs	r3, #0
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005b26:	2301      	movs	r3, #1
 8005b28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b34:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005b36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b3a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005b50:	f107 0308 	add.w	r3, r7, #8
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff ff08 	bl	800596c <ETH_SetDMAConfig>
}
 8005b5c:	bf00      	nop
 8005b5e:	3798      	adds	r7, #152	; 0x98
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3305      	adds	r3, #5
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	3204      	adds	r2, #4
 8005b7c:	7812      	ldrb	r2, [r2, #0]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <ETH_MACAddressConfig+0x68>)
 8005b86:	4413      	add	r3, r2
 8005b88:	461a      	mov	r2, r3
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3303      	adds	r3, #3
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	061a      	lsls	r2, r3, #24
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	3302      	adds	r3, #2
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	041b      	lsls	r3, r3, #16
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	7812      	ldrb	r2, [r2, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <ETH_MACAddressConfig+0x6c>)
 8005bb6:	4413      	add	r3, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6013      	str	r3, [r2, #0]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40028040 	.word	0x40028040
 8005bd0:	40028044 	.word	0x40028044

08005bd4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	e03e      	b.n	8005c60 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68d9      	ldr	r1, [r3, #12]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	440b      	add	r3, r1
 8005bf2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2200      	movs	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	3206      	adds	r2, #6
 8005c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d80c      	bhi.n	8005c44 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68d9      	ldr	r1, [r3, #12]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	440b      	add	r3, r1
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	60da      	str	r2, [r3, #12]
 8005c42:	e004      	b.n	8005c4e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d9bd      	bls.n	8005be2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c78:	611a      	str	r2, [r3, #16]
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b085      	sub	sp, #20
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e046      	b.n	8005d22 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6919      	ldr	r1, [r3, #16]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	440b      	add	r3, r1
 8005ca4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cd0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8005cd8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005ce6:	68b9      	ldr	r1, [r7, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	3212      	adds	r2, #18
 8005cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d80c      	bhi.n	8005d12 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6919      	ldr	r1, [r3, #16]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	440b      	add	r3, r1
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	60da      	str	r2, [r3, #12]
 8005d10:	e004      	b.n	8005d1c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	461a      	mov	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d9b5      	bls.n	8005c94 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d52:	60da      	str	r2, [r3, #12]
}
 8005d54:	bf00      	nop
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b08d      	sub	sp, #52	; 0x34
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3318      	adds	r3, #24
 8005d70:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005da2:	d007      	beq.n	8005db4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da8:	3304      	adds	r3, #4
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005db4:	2302      	movs	r3, #2
 8005db6:	e0ff      	b.n	8005fb8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	3301      	adds	r3, #1
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	685a      	ldr	r2, [r3, #4]
 8005dcc:	4b7d      	ldr	r3, [pc, #500]	; (8005fc4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005dce:	4013      	ands	r3, r2
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	6852      	ldr	r2, [r2, #4]
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d008      	beq.n	8005df8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	431a      	orrs	r2, r3
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d005      	beq.n	8005e2e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8005e3a:	f3bf 8f5f 	dmb	sy
}
 8005e3e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005e4c:	e082      	b.n	8005f54 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d006      	beq.n	8005e6e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e005      	b.n	8005e7a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d902      	bls.n	8005e8c <ETH_Prepare_Tx_Descriptors+0x12c>
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	3b04      	subs	r3, #4
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e94:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eae:	d007      	beq.n	8005ec0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d029      	beq.n	8005f14 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ecc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ed2:	e019      	b.n	8005f08 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8005ed4:	f3bf 8f5f 	dmb	sy
}
 8005ed8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	3301      	adds	r3, #1
 8005eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d902      	bls.n	8005ef8 <ETH_Prepare_Tx_Descriptors+0x198>
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	3b04      	subs	r3, #4
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f00:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	3301      	adds	r3, #1
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d3e1      	bcc.n	8005ed4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8005f10:	2302      	movs	r3, #2
 8005f12:	e051      	b.n	8005fb8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	3301      	adds	r3, #1
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	461a      	mov	r2, r3
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	4b25      	ldr	r3, [pc, #148]	; (8005fc4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	6852      	ldr	r2, [r2, #4]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005f42:	f3bf 8f5f 	dmb	sy
}
 8005f46:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f47f af78 	bne.w	8005e4e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d006      	beq.n	8005f72 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	e005      	b.n	8005f7e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f8e:	6979      	ldr	r1, [r7, #20]
 8005f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f92:	3304      	adds	r3, #4
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f9e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fa0:	b672      	cpsid	i
}
 8005fa2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	4413      	add	r3, r2
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005fb2:	b662      	cpsie	i
}
 8005fb4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3734      	adds	r7, #52	; 0x34
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	ffffe000 	.word	0xffffe000

08005fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b089      	sub	sp, #36	; 0x24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
 8005fe6:	e175      	b.n	80062d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005fe8:	2201      	movs	r2, #1
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	429a      	cmp	r2, r3
 8006002:	f040 8164 	bne.w	80062ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d005      	beq.n	800601e <HAL_GPIO_Init+0x56>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d130      	bne.n	8006080 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	2203      	movs	r2, #3
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	43db      	mvns	r3, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4013      	ands	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	fa02 f303 	lsl.w	r3, r2, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4313      	orrs	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006054:	2201      	movs	r2, #1
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4013      	ands	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	091b      	lsrs	r3, r3, #4
 800606a:	f003 0201 	and.w	r2, r3, #1
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	4313      	orrs	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	2b03      	cmp	r3, #3
 800608a:	d017      	beq.n	80060bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	2203      	movs	r2, #3
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4013      	ands	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 0303 	and.w	r3, r3, #3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d123      	bne.n	8006110 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	08da      	lsrs	r2, r3, #3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3208      	adds	r2, #8
 80060d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	220f      	movs	r2, #15
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	43db      	mvns	r3, r3
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	4013      	ands	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	fa02 f303 	lsl.w	r3, r2, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4313      	orrs	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	08da      	lsrs	r2, r3, #3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3208      	adds	r2, #8
 800610a:	69b9      	ldr	r1, [r7, #24]
 800610c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	2203      	movs	r2, #3
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f003 0203 	and.w	r2, r3, #3
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80be 	beq.w	80062ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006152:	4b66      	ldr	r3, [pc, #408]	; (80062ec <HAL_GPIO_Init+0x324>)
 8006154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006156:	4a65      	ldr	r2, [pc, #404]	; (80062ec <HAL_GPIO_Init+0x324>)
 8006158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800615c:	6453      	str	r3, [r2, #68]	; 0x44
 800615e:	4b63      	ldr	r3, [pc, #396]	; (80062ec <HAL_GPIO_Init+0x324>)
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800616a:	4a61      	ldr	r2, [pc, #388]	; (80062f0 <HAL_GPIO_Init+0x328>)
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	089b      	lsrs	r3, r3, #2
 8006170:	3302      	adds	r3, #2
 8006172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006176:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	220f      	movs	r2, #15
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	43db      	mvns	r3, r3
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4013      	ands	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a58      	ldr	r2, [pc, #352]	; (80062f4 <HAL_GPIO_Init+0x32c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d037      	beq.n	8006206 <HAL_GPIO_Init+0x23e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a57      	ldr	r2, [pc, #348]	; (80062f8 <HAL_GPIO_Init+0x330>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d031      	beq.n	8006202 <HAL_GPIO_Init+0x23a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a56      	ldr	r2, [pc, #344]	; (80062fc <HAL_GPIO_Init+0x334>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d02b      	beq.n	80061fe <HAL_GPIO_Init+0x236>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a55      	ldr	r2, [pc, #340]	; (8006300 <HAL_GPIO_Init+0x338>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d025      	beq.n	80061fa <HAL_GPIO_Init+0x232>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a54      	ldr	r2, [pc, #336]	; (8006304 <HAL_GPIO_Init+0x33c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d01f      	beq.n	80061f6 <HAL_GPIO_Init+0x22e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a53      	ldr	r2, [pc, #332]	; (8006308 <HAL_GPIO_Init+0x340>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d019      	beq.n	80061f2 <HAL_GPIO_Init+0x22a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a52      	ldr	r2, [pc, #328]	; (800630c <HAL_GPIO_Init+0x344>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d013      	beq.n	80061ee <HAL_GPIO_Init+0x226>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a51      	ldr	r2, [pc, #324]	; (8006310 <HAL_GPIO_Init+0x348>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00d      	beq.n	80061ea <HAL_GPIO_Init+0x222>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a50      	ldr	r2, [pc, #320]	; (8006314 <HAL_GPIO_Init+0x34c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <HAL_GPIO_Init+0x21e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a4f      	ldr	r2, [pc, #316]	; (8006318 <HAL_GPIO_Init+0x350>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d101      	bne.n	80061e2 <HAL_GPIO_Init+0x21a>
 80061de:	2309      	movs	r3, #9
 80061e0:	e012      	b.n	8006208 <HAL_GPIO_Init+0x240>
 80061e2:	230a      	movs	r3, #10
 80061e4:	e010      	b.n	8006208 <HAL_GPIO_Init+0x240>
 80061e6:	2308      	movs	r3, #8
 80061e8:	e00e      	b.n	8006208 <HAL_GPIO_Init+0x240>
 80061ea:	2307      	movs	r3, #7
 80061ec:	e00c      	b.n	8006208 <HAL_GPIO_Init+0x240>
 80061ee:	2306      	movs	r3, #6
 80061f0:	e00a      	b.n	8006208 <HAL_GPIO_Init+0x240>
 80061f2:	2305      	movs	r3, #5
 80061f4:	e008      	b.n	8006208 <HAL_GPIO_Init+0x240>
 80061f6:	2304      	movs	r3, #4
 80061f8:	e006      	b.n	8006208 <HAL_GPIO_Init+0x240>
 80061fa:	2303      	movs	r3, #3
 80061fc:	e004      	b.n	8006208 <HAL_GPIO_Init+0x240>
 80061fe:	2302      	movs	r3, #2
 8006200:	e002      	b.n	8006208 <HAL_GPIO_Init+0x240>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <HAL_GPIO_Init+0x240>
 8006206:	2300      	movs	r3, #0
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	f002 0203 	and.w	r2, r2, #3
 800620e:	0092      	lsls	r2, r2, #2
 8006210:	4093      	lsls	r3, r2
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	4313      	orrs	r3, r2
 8006216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006218:	4935      	ldr	r1, [pc, #212]	; (80062f0 <HAL_GPIO_Init+0x328>)
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	089b      	lsrs	r3, r3, #2
 800621e:	3302      	adds	r3, #2
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006226:	4b3d      	ldr	r3, [pc, #244]	; (800631c <HAL_GPIO_Init+0x354>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	43db      	mvns	r3, r3
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	4013      	ands	r3, r2
 8006234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800624a:	4a34      	ldr	r2, [pc, #208]	; (800631c <HAL_GPIO_Init+0x354>)
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006250:	4b32      	ldr	r3, [pc, #200]	; (800631c <HAL_GPIO_Init+0x354>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	43db      	mvns	r3, r3
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	4013      	ands	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006274:	4a29      	ldr	r2, [pc, #164]	; (800631c <HAL_GPIO_Init+0x354>)
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800627a:	4b28      	ldr	r3, [pc, #160]	; (800631c <HAL_GPIO_Init+0x354>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	43db      	mvns	r3, r3
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	4013      	ands	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d003      	beq.n	800629e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800629e:	4a1f      	ldr	r2, [pc, #124]	; (800631c <HAL_GPIO_Init+0x354>)
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062a4:	4b1d      	ldr	r3, [pc, #116]	; (800631c <HAL_GPIO_Init+0x354>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	43db      	mvns	r3, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	4013      	ands	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062c8:	4a14      	ldr	r2, [pc, #80]	; (800631c <HAL_GPIO_Init+0x354>)
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	3301      	adds	r3, #1
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2b0f      	cmp	r3, #15
 80062d8:	f67f ae86 	bls.w	8005fe8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	3724      	adds	r7, #36	; 0x24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40023800 	.word	0x40023800
 80062f0:	40013800 	.word	0x40013800
 80062f4:	40020000 	.word	0x40020000
 80062f8:	40020400 	.word	0x40020400
 80062fc:	40020800 	.word	0x40020800
 8006300:	40020c00 	.word	0x40020c00
 8006304:	40021000 	.word	0x40021000
 8006308:	40021400 	.word	0x40021400
 800630c:	40021800 	.word	0x40021800
 8006310:	40021c00 	.word	0x40021c00
 8006314:	40022000 	.word	0x40022000
 8006318:	40022400 	.word	0x40022400
 800631c:	40013c00 	.word	0x40013c00

08006320 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800632a:	2300      	movs	r3, #0
 800632c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006332:	2300      	movs	r3, #0
 8006334:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006336:	2300      	movs	r3, #0
 8006338:	617b      	str	r3, [r7, #20]
 800633a:	e0d9      	b.n	80064f0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800633c:	2201      	movs	r2, #1
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	4013      	ands	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	429a      	cmp	r2, r3
 8006354:	f040 80c9 	bne.w	80064ea <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006358:	4a6b      	ldr	r2, [pc, #428]	; (8006508 <HAL_GPIO_DeInit+0x1e8>)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	089b      	lsrs	r3, r3, #2
 800635e:	3302      	adds	r3, #2
 8006360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006364:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f003 0303 	and.w	r3, r3, #3
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	220f      	movs	r2, #15
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	4013      	ands	r3, r2
 8006378:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a63      	ldr	r2, [pc, #396]	; (800650c <HAL_GPIO_DeInit+0x1ec>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d037      	beq.n	80063f2 <HAL_GPIO_DeInit+0xd2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a62      	ldr	r2, [pc, #392]	; (8006510 <HAL_GPIO_DeInit+0x1f0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d031      	beq.n	80063ee <HAL_GPIO_DeInit+0xce>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a61      	ldr	r2, [pc, #388]	; (8006514 <HAL_GPIO_DeInit+0x1f4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d02b      	beq.n	80063ea <HAL_GPIO_DeInit+0xca>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a60      	ldr	r2, [pc, #384]	; (8006518 <HAL_GPIO_DeInit+0x1f8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d025      	beq.n	80063e6 <HAL_GPIO_DeInit+0xc6>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a5f      	ldr	r2, [pc, #380]	; (800651c <HAL_GPIO_DeInit+0x1fc>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01f      	beq.n	80063e2 <HAL_GPIO_DeInit+0xc2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a5e      	ldr	r2, [pc, #376]	; (8006520 <HAL_GPIO_DeInit+0x200>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d019      	beq.n	80063de <HAL_GPIO_DeInit+0xbe>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a5d      	ldr	r2, [pc, #372]	; (8006524 <HAL_GPIO_DeInit+0x204>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <HAL_GPIO_DeInit+0xba>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a5c      	ldr	r2, [pc, #368]	; (8006528 <HAL_GPIO_DeInit+0x208>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00d      	beq.n	80063d6 <HAL_GPIO_DeInit+0xb6>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a5b      	ldr	r2, [pc, #364]	; (800652c <HAL_GPIO_DeInit+0x20c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d007      	beq.n	80063d2 <HAL_GPIO_DeInit+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a5a      	ldr	r2, [pc, #360]	; (8006530 <HAL_GPIO_DeInit+0x210>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d101      	bne.n	80063ce <HAL_GPIO_DeInit+0xae>
 80063ca:	2309      	movs	r3, #9
 80063cc:	e012      	b.n	80063f4 <HAL_GPIO_DeInit+0xd4>
 80063ce:	230a      	movs	r3, #10
 80063d0:	e010      	b.n	80063f4 <HAL_GPIO_DeInit+0xd4>
 80063d2:	2308      	movs	r3, #8
 80063d4:	e00e      	b.n	80063f4 <HAL_GPIO_DeInit+0xd4>
 80063d6:	2307      	movs	r3, #7
 80063d8:	e00c      	b.n	80063f4 <HAL_GPIO_DeInit+0xd4>
 80063da:	2306      	movs	r3, #6
 80063dc:	e00a      	b.n	80063f4 <HAL_GPIO_DeInit+0xd4>
 80063de:	2305      	movs	r3, #5
 80063e0:	e008      	b.n	80063f4 <HAL_GPIO_DeInit+0xd4>
 80063e2:	2304      	movs	r3, #4
 80063e4:	e006      	b.n	80063f4 <HAL_GPIO_DeInit+0xd4>
 80063e6:	2303      	movs	r3, #3
 80063e8:	e004      	b.n	80063f4 <HAL_GPIO_DeInit+0xd4>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e002      	b.n	80063f4 <HAL_GPIO_DeInit+0xd4>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <HAL_GPIO_DeInit+0xd4>
 80063f2:	2300      	movs	r3, #0
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	f002 0203 	and.w	r2, r2, #3
 80063fa:	0092      	lsls	r2, r2, #2
 80063fc:	4093      	lsls	r3, r2
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	429a      	cmp	r2, r3
 8006402:	d132      	bne.n	800646a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006404:	4b4b      	ldr	r3, [pc, #300]	; (8006534 <HAL_GPIO_DeInit+0x214>)
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	43db      	mvns	r3, r3
 800640c:	4949      	ldr	r1, [pc, #292]	; (8006534 <HAL_GPIO_DeInit+0x214>)
 800640e:	4013      	ands	r3, r2
 8006410:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006412:	4b48      	ldr	r3, [pc, #288]	; (8006534 <HAL_GPIO_DeInit+0x214>)
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	43db      	mvns	r3, r3
 800641a:	4946      	ldr	r1, [pc, #280]	; (8006534 <HAL_GPIO_DeInit+0x214>)
 800641c:	4013      	ands	r3, r2
 800641e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006420:	4b44      	ldr	r3, [pc, #272]	; (8006534 <HAL_GPIO_DeInit+0x214>)
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	43db      	mvns	r3, r3
 8006428:	4942      	ldr	r1, [pc, #264]	; (8006534 <HAL_GPIO_DeInit+0x214>)
 800642a:	4013      	ands	r3, r2
 800642c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800642e:	4b41      	ldr	r3, [pc, #260]	; (8006534 <HAL_GPIO_DeInit+0x214>)
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	43db      	mvns	r3, r3
 8006436:	493f      	ldr	r1, [pc, #252]	; (8006534 <HAL_GPIO_DeInit+0x214>)
 8006438:	4013      	ands	r3, r2
 800643a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	220f      	movs	r2, #15
 8006446:	fa02 f303 	lsl.w	r3, r2, r3
 800644a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800644c:	4a2e      	ldr	r2, [pc, #184]	; (8006508 <HAL_GPIO_DeInit+0x1e8>)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	089b      	lsrs	r3, r3, #2
 8006452:	3302      	adds	r3, #2
 8006454:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	43da      	mvns	r2, r3
 800645c:	482a      	ldr	r0, [pc, #168]	; (8006508 <HAL_GPIO_DeInit+0x1e8>)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	089b      	lsrs	r3, r3, #2
 8006462:	400a      	ands	r2, r1
 8006464:	3302      	adds	r3, #2
 8006466:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	2103      	movs	r1, #3
 8006474:	fa01 f303 	lsl.w	r3, r1, r3
 8006478:	43db      	mvns	r3, r3
 800647a:	401a      	ands	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	08da      	lsrs	r2, r3, #3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3208      	adds	r2, #8
 8006488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	220f      	movs	r2, #15
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	08d2      	lsrs	r2, r2, #3
 80064a0:	4019      	ands	r1, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3208      	adds	r2, #8
 80064a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	2103      	movs	r1, #3
 80064b4:	fa01 f303 	lsl.w	r3, r1, r3
 80064b8:	43db      	mvns	r3, r3
 80064ba:	401a      	ands	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	2101      	movs	r1, #1
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	fa01 f303 	lsl.w	r3, r1, r3
 80064cc:	43db      	mvns	r3, r3
 80064ce:	401a      	ands	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689a      	ldr	r2, [r3, #8]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	2103      	movs	r1, #3
 80064de:	fa01 f303 	lsl.w	r3, r1, r3
 80064e2:	43db      	mvns	r3, r3
 80064e4:	401a      	ands	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	3301      	adds	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b0f      	cmp	r3, #15
 80064f4:	f67f af22 	bls.w	800633c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40013800 	.word	0x40013800
 800650c:	40020000 	.word	0x40020000
 8006510:	40020400 	.word	0x40020400
 8006514:	40020800 	.word	0x40020800
 8006518:	40020c00 	.word	0x40020c00
 800651c:	40021000 	.word	0x40021000
 8006520:	40021400 	.word	0x40021400
 8006524:	40021800 	.word	0x40021800
 8006528:	40021c00 	.word	0x40021c00
 800652c:	40022000 	.word	0x40022000
 8006530:	40022400 	.word	0x40022400
 8006534:	40013c00 	.word	0x40013c00

08006538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	807b      	strh	r3, [r7, #2]
 8006544:	4613      	mov	r3, r2
 8006546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006548:	787b      	ldrb	r3, [r7, #1]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800654e:	887a      	ldrh	r2, [r7, #2]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006554:	e003      	b.n	800655e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006556:	887b      	ldrh	r3, [r7, #2]
 8006558:	041a      	lsls	r2, r3, #16
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	619a      	str	r2, [r3, #24]
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e07f      	b.n	800667e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d106      	bne.n	8006598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f8a9 	bl	80066ea <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2224      	movs	r2, #36	; 0x24
 800659c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d107      	bne.n	80065e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065e2:	609a      	str	r2, [r3, #8]
 80065e4:	e006      	b.n	80065f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80065f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d104      	bne.n	8006606 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006604:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6859      	ldr	r1, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <HAL_I2C_Init+0x11c>)
 8006612:	430b      	orrs	r3, r1
 8006614:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006624:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	69d9      	ldr	r1, [r3, #28]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1a      	ldr	r2, [r3, #32]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0201 	orr.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	02008000 	.word	0x02008000

0800668c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e021      	b.n	80066e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2224      	movs	r2, #36	; 0x24
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0201 	bic.w	r2, r2, #1
 80066b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f821 	bl	80066fe <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	4608      	mov	r0, r1
 800671e:	4611      	mov	r1, r2
 8006720:	461a      	mov	r2, r3
 8006722:	4603      	mov	r3, r0
 8006724:	817b      	strh	r3, [r7, #10]
 8006726:	460b      	mov	r3, r1
 8006728:	813b      	strh	r3, [r7, #8]
 800672a:	4613      	mov	r3, r2
 800672c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b20      	cmp	r3, #32
 8006738:	f040 80f9 	bne.w	800692e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <HAL_I2C_Mem_Write+0x34>
 8006742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006744:	2b00      	cmp	r3, #0
 8006746:	d105      	bne.n	8006754 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800674e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e0ed      	b.n	8006930 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_I2C_Mem_Write+0x4e>
 800675e:	2302      	movs	r3, #2
 8006760:	e0e6      	b.n	8006930 <HAL_I2C_Mem_Write+0x21c>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800676a:	f7fd fd3f 	bl	80041ec <HAL_GetTick>
 800676e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	2319      	movs	r3, #25
 8006776:	2201      	movs	r2, #1
 8006778:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fad1 	bl	8006d24 <I2C_WaitOnFlagUntilTimeout>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e0d1      	b.n	8006930 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2221      	movs	r2, #33	; 0x21
 8006790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2240      	movs	r2, #64	; 0x40
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a3a      	ldr	r2, [r7, #32]
 80067a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067b4:	88f8      	ldrh	r0, [r7, #6]
 80067b6:	893a      	ldrh	r2, [r7, #8]
 80067b8:	8979      	ldrh	r1, [r7, #10]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	4603      	mov	r3, r0
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f9e1 	bl	8006b8c <I2C_RequestMemoryWrite>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e0a9      	b.n	8006930 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2bff      	cmp	r3, #255	; 0xff
 80067e4:	d90e      	bls.n	8006804 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	22ff      	movs	r2, #255	; 0xff
 80067ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	8979      	ldrh	r1, [r7, #10]
 80067f4:	2300      	movs	r3, #0
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fc2d 	bl	800705c <I2C_TransferConfig>
 8006802:	e00f      	b.n	8006824 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006808:	b29a      	uxth	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006812:	b2da      	uxtb	r2, r3
 8006814:	8979      	ldrh	r1, [r7, #10]
 8006816:	2300      	movs	r3, #0
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fc1c 	bl	800705c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 fabb 	bl	8006da4 <I2C_WaitOnTXISFlagUntilTimeout>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e07b      	b.n	8006930 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	781a      	ldrb	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006852:	b29b      	uxth	r3, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d034      	beq.n	80068dc <HAL_I2C_Mem_Write+0x1c8>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006876:	2b00      	cmp	r3, #0
 8006878:	d130      	bne.n	80068dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	2200      	movs	r2, #0
 8006882:	2180      	movs	r1, #128	; 0x80
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 fa4d 	bl	8006d24 <I2C_WaitOnFlagUntilTimeout>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e04d      	b.n	8006930 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	2bff      	cmp	r3, #255	; 0xff
 800689c:	d90e      	bls.n	80068bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	22ff      	movs	r2, #255	; 0xff
 80068a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	8979      	ldrh	r1, [r7, #10]
 80068ac:	2300      	movs	r3, #0
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 fbd1 	bl	800705c <I2C_TransferConfig>
 80068ba:	e00f      	b.n	80068dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	8979      	ldrh	r1, [r7, #10]
 80068ce:	2300      	movs	r3, #0
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 fbc0 	bl	800705c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d19e      	bne.n	8006824 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 fa9a 	bl	8006e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e01a      	b.n	8006930 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2220      	movs	r2, #32
 8006900:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6859      	ldr	r1, [r3, #4]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <HAL_I2C_Mem_Write+0x224>)
 800690e:	400b      	ands	r3, r1
 8006910:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2220      	movs	r2, #32
 8006916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	e000      	b.n	8006930 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800692e:	2302      	movs	r3, #2
  }
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	fe00e800 	.word	0xfe00e800

0800693c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af02      	add	r7, sp, #8
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	4608      	mov	r0, r1
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	4603      	mov	r3, r0
 800694c:	817b      	strh	r3, [r7, #10]
 800694e:	460b      	mov	r3, r1
 8006950:	813b      	strh	r3, [r7, #8]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b20      	cmp	r3, #32
 8006960:	f040 80fd 	bne.w	8006b5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_I2C_Mem_Read+0x34>
 800696a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800696c:	2b00      	cmp	r3, #0
 800696e:	d105      	bne.n	800697c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006976:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0f1      	b.n	8006b60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_I2C_Mem_Read+0x4e>
 8006986:	2302      	movs	r3, #2
 8006988:	e0ea      	b.n	8006b60 <HAL_I2C_Mem_Read+0x224>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006992:	f7fd fc2b 	bl	80041ec <HAL_GetTick>
 8006996:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	2319      	movs	r3, #25
 800699e:	2201      	movs	r2, #1
 80069a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 f9bd 	bl	8006d24 <I2C_WaitOnFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0d5      	b.n	8006b60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2222      	movs	r2, #34	; 0x22
 80069b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2240      	movs	r2, #64	; 0x40
 80069c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a3a      	ldr	r2, [r7, #32]
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069dc:	88f8      	ldrh	r0, [r7, #6]
 80069de:	893a      	ldrh	r2, [r7, #8]
 80069e0:	8979      	ldrh	r1, [r7, #10]
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	4603      	mov	r3, r0
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f921 	bl	8006c34 <I2C_RequestMemoryRead>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e0ad      	b.n	8006b60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2bff      	cmp	r3, #255	; 0xff
 8006a0c:	d90e      	bls.n	8006a2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	22ff      	movs	r2, #255	; 0xff
 8006a12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	8979      	ldrh	r1, [r7, #10]
 8006a1c:	4b52      	ldr	r3, [pc, #328]	; (8006b68 <HAL_I2C_Mem_Read+0x22c>)
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fb19 	bl	800705c <I2C_TransferConfig>
 8006a2a:	e00f      	b.n	8006a4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	8979      	ldrh	r1, [r7, #10]
 8006a3e:	4b4a      	ldr	r3, [pc, #296]	; (8006b68 <HAL_I2C_Mem_Read+0x22c>)
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f000 fb08 	bl	800705c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	2200      	movs	r2, #0
 8006a54:	2104      	movs	r1, #4
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f964 	bl	8006d24 <I2C_WaitOnFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e07c      	b.n	8006b60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d034      	beq.n	8006b0c <HAL_I2C_Mem_Read+0x1d0>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d130      	bne.n	8006b0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2180      	movs	r1, #128	; 0x80
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f935 	bl	8006d24 <I2C_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e04d      	b.n	8006b60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2bff      	cmp	r3, #255	; 0xff
 8006acc:	d90e      	bls.n	8006aec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	22ff      	movs	r2, #255	; 0xff
 8006ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	8979      	ldrh	r1, [r7, #10]
 8006adc:	2300      	movs	r3, #0
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 fab9 	bl	800705c <I2C_TransferConfig>
 8006aea:	e00f      	b.n	8006b0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	8979      	ldrh	r1, [r7, #10]
 8006afe:	2300      	movs	r3, #0
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 faa8 	bl	800705c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d19a      	bne.n	8006a4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 f982 	bl	8006e24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e01a      	b.n	8006b60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6859      	ldr	r1, [r3, #4]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <HAL_I2C_Mem_Read+0x230>)
 8006b3e:	400b      	ands	r3, r1
 8006b40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e000      	b.n	8006b60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006b5e:	2302      	movs	r3, #2
  }
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	80002400 	.word	0x80002400
 8006b6c:	fe00e800 	.word	0xfe00e800

08006b70 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b7e:	b2db      	uxtb	r3, r3
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	4608      	mov	r0, r1
 8006b96:	4611      	mov	r1, r2
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	817b      	strh	r3, [r7, #10]
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	813b      	strh	r3, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006ba6:	88fb      	ldrh	r3, [r7, #6]
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	8979      	ldrh	r1, [r7, #10]
 8006bac:	4b20      	ldr	r3, [pc, #128]	; (8006c30 <I2C_RequestMemoryWrite+0xa4>)
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 fa51 	bl	800705c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	69b9      	ldr	r1, [r7, #24]
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f8f0 	bl	8006da4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e02c      	b.n	8006c28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d105      	bne.n	8006be0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bd4:	893b      	ldrh	r3, [r7, #8]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	629a      	str	r2, [r3, #40]	; 0x28
 8006bde:	e015      	b.n	8006c0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006be0:	893b      	ldrh	r3, [r7, #8]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	69b9      	ldr	r1, [r7, #24]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f8d6 	bl	8006da4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e012      	b.n	8006c28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c02:	893b      	ldrh	r3, [r7, #8]
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2200      	movs	r2, #0
 8006c14:	2180      	movs	r1, #128	; 0x80
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f884 	bl	8006d24 <I2C_WaitOnFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	80002000 	.word	0x80002000

08006c34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	4611      	mov	r1, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	817b      	strh	r3, [r7, #10]
 8006c46:	460b      	mov	r3, r1
 8006c48:	813b      	strh	r3, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	8979      	ldrh	r1, [r7, #10]
 8006c54:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <I2C_RequestMemoryRead+0xa4>)
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f000 f9fe 	bl	800705c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	69b9      	ldr	r1, [r7, #24]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f89d 	bl	8006da4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e02c      	b.n	8006cce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d105      	bne.n	8006c86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c7a:	893b      	ldrh	r3, [r7, #8]
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28
 8006c84:	e015      	b.n	8006cb2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c86:	893b      	ldrh	r3, [r7, #8]
 8006c88:	0a1b      	lsrs	r3, r3, #8
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	69b9      	ldr	r1, [r7, #24]
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 f883 	bl	8006da4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e012      	b.n	8006cce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ca8:	893b      	ldrh	r3, [r7, #8]
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2140      	movs	r1, #64	; 0x40
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 f831 	bl	8006d24 <I2C_WaitOnFlagUntilTimeout>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d001      	beq.n	8006ccc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e000      	b.n	8006cce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	80002000 	.word	0x80002000

08006cdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d103      	bne.n	8006cfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d007      	beq.n	8006d18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	619a      	str	r2, [r3, #24]
  }
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	603b      	str	r3, [r7, #0]
 8006d30:	4613      	mov	r3, r2
 8006d32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d34:	e022      	b.n	8006d7c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3c:	d01e      	beq.n	8006d7c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d3e:	f7fd fa55 	bl	80041ec <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d302      	bcc.n	8006d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d113      	bne.n	8006d7c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d58:	f043 0220 	orr.w	r2, r3, #32
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e00f      	b.n	8006d9c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699a      	ldr	r2, [r3, #24]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	4013      	ands	r3, r2
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	bf0c      	ite	eq
 8006d8c:	2301      	moveq	r3, #1
 8006d8e:	2300      	movne	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d0cd      	beq.n	8006d36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006db0:	e02c      	b.n	8006e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	68b9      	ldr	r1, [r7, #8]
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f000 f870 	bl	8006e9c <I2C_IsErrorOccurred>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e02a      	b.n	8006e1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dcc:	d01e      	beq.n	8006e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dce:	f7fd fa0d 	bl	80041ec <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d302      	bcc.n	8006de4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d113      	bne.n	8006e0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de8:	f043 0220 	orr.w	r2, r3, #32
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e007      	b.n	8006e1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d1cb      	bne.n	8006db2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e30:	e028      	b.n	8006e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 f830 	bl	8006e9c <I2C_IsErrorOccurred>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e026      	b.n	8006e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e46:	f7fd f9d1 	bl	80041ec <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d302      	bcc.n	8006e5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d113      	bne.n	8006e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e60:	f043 0220 	orr.w	r2, r3, #32
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e007      	b.n	8006e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	2b20      	cmp	r3, #32
 8006e90:	d1cf      	bne.n	8006e32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08a      	sub	sp, #40	; 0x28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d068      	beq.n	8006f9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2210      	movs	r2, #16
 8006ece:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ed0:	e049      	b.n	8006f66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed8:	d045      	beq.n	8006f66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006eda:	f7fd f987 	bl	80041ec <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d302      	bcc.n	8006ef0 <I2C_IsErrorOccurred+0x54>
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d13a      	bne.n	8006f66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006efa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f12:	d121      	bne.n	8006f58 <I2C_IsErrorOccurred+0xbc>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f1a:	d01d      	beq.n	8006f58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006f1c:	7cfb      	ldrb	r3, [r7, #19]
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d01a      	beq.n	8006f58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f32:	f7fd f95b 	bl	80041ec <HAL_GetTick>
 8006f36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f38:	e00e      	b.n	8006f58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f3a:	f7fd f957 	bl	80041ec <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b19      	cmp	r3, #25
 8006f46:	d907      	bls.n	8006f58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	f043 0320 	orr.w	r3, r3, #32
 8006f4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006f56:	e006      	b.n	8006f66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d1e9      	bne.n	8006f3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	f003 0320 	and.w	r3, r3, #32
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d003      	beq.n	8006f7c <I2C_IsErrorOccurred+0xe0>
 8006f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0aa      	beq.n	8006ed2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d103      	bne.n	8006f8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	f043 0304 	orr.w	r3, r3, #4
 8006f92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	f043 0301 	orr.w	r3, r3, #1
 8006fb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00b      	beq.n	8006fe6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	f043 0308 	orr.w	r3, r3, #8
 8006fd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00b      	beq.n	8007008 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	f043 0302 	orr.w	r3, r3, #2
 8006ff6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007000:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800700c:	2b00      	cmp	r3, #0
 800700e:	d01c      	beq.n	800704a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f7ff fe63 	bl	8006cdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6859      	ldr	r1, [r3, #4]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	4b0d      	ldr	r3, [pc, #52]	; (8007058 <I2C_IsErrorOccurred+0x1bc>)
 8007022:	400b      	ands	r3, r1
 8007024:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	431a      	orrs	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2220      	movs	r2, #32
 8007036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800704a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800704e:	4618      	mov	r0, r3
 8007050:	3728      	adds	r7, #40	; 0x28
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	fe00e800 	.word	0xfe00e800

0800705c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	607b      	str	r3, [r7, #4]
 8007066:	460b      	mov	r3, r1
 8007068:	817b      	strh	r3, [r7, #10]
 800706a:	4613      	mov	r3, r2
 800706c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800706e:	897b      	ldrh	r3, [r7, #10]
 8007070:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007074:	7a7b      	ldrb	r3, [r7, #9]
 8007076:	041b      	lsls	r3, r3, #16
 8007078:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800707c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	4313      	orrs	r3, r2
 8007086:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800708a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	0d5b      	lsrs	r3, r3, #21
 8007096:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800709a:	4b08      	ldr	r3, [pc, #32]	; (80070bc <I2C_TransferConfig+0x60>)
 800709c:	430b      	orrs	r3, r1
 800709e:	43db      	mvns	r3, r3
 80070a0:	ea02 0103 	and.w	r1, r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80070ae:	bf00      	nop
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	03ff63ff 	.word	0x03ff63ff

080070c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e0bf      	b.n	8007252 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fa fa56 	bl	8001598 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007102:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6999      	ldr	r1, [r3, #24]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007118:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6899      	ldr	r1, [r3, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	4b4a      	ldr	r3, [pc, #296]	; (800725c <HAL_LTDC_Init+0x19c>)
 8007134:	400b      	ands	r3, r1
 8007136:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6899      	ldr	r1, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68d9      	ldr	r1, [r3, #12]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4b3e      	ldr	r3, [pc, #248]	; (800725c <HAL_LTDC_Init+0x19c>)
 8007162:	400b      	ands	r3, r1
 8007164:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	041b      	lsls	r3, r3, #16
 800716c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68d9      	ldr	r1, [r3, #12]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6919      	ldr	r1, [r3, #16]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b33      	ldr	r3, [pc, #204]	; (800725c <HAL_LTDC_Init+0x19c>)
 8007190:	400b      	ands	r3, r1
 8007192:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6919      	ldr	r1, [r3, #16]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6959      	ldr	r1, [r3, #20]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4b27      	ldr	r3, [pc, #156]	; (800725c <HAL_LTDC_Init+0x19c>)
 80071be:	400b      	ands	r3, r1
 80071c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6959      	ldr	r1, [r3, #20]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007202:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4313      	orrs	r3, r2
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0206 	orr.w	r2, r2, #6
 800722e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f042 0201 	orr.w	r2, r2, #1
 800723e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	f000f800 	.word	0xf000f800

08007260 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007260:	b5b0      	push	{r4, r5, r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_LTDC_ConfigLayer+0x1a>
 8007276:	2302      	movs	r3, #2
 8007278:	e02c      	b.n	80072d4 <HAL_LTDC_ConfigLayer+0x74>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2202      	movs	r2, #2
 8007286:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2134      	movs	r1, #52	; 0x34
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	4413      	add	r3, r2
 8007296:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	4614      	mov	r4, r2
 800729e:	461d      	mov	r5, r3
 80072a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f81f 	bl	80072f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2201      	movs	r2, #1
 80072c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bdb0      	pop	{r4, r5, r7, pc}

080072dc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80072ea:	b2db      	uxtb	r3, r3
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b089      	sub	sp, #36	; 0x24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	0c1b      	lsrs	r3, r3, #16
 8007310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007314:	4413      	add	r3, r2
 8007316:	041b      	lsls	r3, r3, #16
 8007318:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	01db      	lsls	r3, r3, #7
 8007324:	4413      	add	r3, r2
 8007326:	3384      	adds	r3, #132	; 0x84
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	4611      	mov	r1, r2
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	01d2      	lsls	r2, r2, #7
 8007334:	440a      	add	r2, r1
 8007336:	3284      	adds	r2, #132	; 0x84
 8007338:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800733c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800734e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007350:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4619      	mov	r1, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	01db      	lsls	r3, r3, #7
 800735c:	440b      	add	r3, r1
 800735e:	3384      	adds	r3, #132	; 0x84
 8007360:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007366:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007376:	4413      	add	r3, r2
 8007378:	041b      	lsls	r3, r3, #16
 800737a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	01db      	lsls	r3, r3, #7
 8007386:	4413      	add	r3, r2
 8007388:	3384      	adds	r3, #132	; 0x84
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	6812      	ldr	r2, [r2, #0]
 8007390:	4611      	mov	r1, r2
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	01d2      	lsls	r2, r2, #7
 8007396:	440a      	add	r2, r1
 8007398:	3284      	adds	r2, #132	; 0x84
 800739a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800739e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073ae:	4413      	add	r3, r2
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4619      	mov	r1, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	01db      	lsls	r3, r3, #7
 80073bc:	440b      	add	r3, r1
 80073be:	3384      	adds	r3, #132	; 0x84
 80073c0:	4619      	mov	r1, r3
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	461a      	mov	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	01db      	lsls	r3, r3, #7
 80073d2:	4413      	add	r3, r2
 80073d4:	3384      	adds	r3, #132	; 0x84
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	4611      	mov	r1, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	01d2      	lsls	r2, r2, #7
 80073e2:	440a      	add	r2, r1
 80073e4:	3284      	adds	r2, #132	; 0x84
 80073e6:	f023 0307 	bic.w	r3, r3, #7
 80073ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	01db      	lsls	r3, r3, #7
 80073f6:	4413      	add	r3, r2
 80073f8:	3384      	adds	r3, #132	; 0x84
 80073fa:	461a      	mov	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007412:	041b      	lsls	r3, r3, #16
 8007414:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	061b      	lsls	r3, r3, #24
 800741c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	01db      	lsls	r3, r3, #7
 8007428:	4413      	add	r3, r2
 800742a:	3384      	adds	r3, #132	; 0x84
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	01db      	lsls	r3, r3, #7
 8007438:	4413      	add	r3, r2
 800743a:	3384      	adds	r3, #132	; 0x84
 800743c:	461a      	mov	r2, r3
 800743e:	2300      	movs	r3, #0
 8007440:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007448:	461a      	mov	r2, r3
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	431a      	orrs	r2, r3
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	431a      	orrs	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4619      	mov	r1, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	01db      	lsls	r3, r3, #7
 800745c:	440b      	add	r3, r1
 800745e:	3384      	adds	r3, #132	; 0x84
 8007460:	4619      	mov	r1, r3
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	4313      	orrs	r3, r2
 8007466:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	461a      	mov	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	01db      	lsls	r3, r3, #7
 8007472:	4413      	add	r3, r2
 8007474:	3384      	adds	r3, #132	; 0x84
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	6812      	ldr	r2, [r2, #0]
 800747c:	4611      	mov	r1, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	01d2      	lsls	r2, r2, #7
 8007482:	440a      	add	r2, r1
 8007484:	3284      	adds	r2, #132	; 0x84
 8007486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800748a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	01db      	lsls	r3, r3, #7
 8007496:	4413      	add	r3, r2
 8007498:	3384      	adds	r3, #132	; 0x84
 800749a:	461a      	mov	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	01db      	lsls	r3, r3, #7
 80074ac:	4413      	add	r3, r2
 80074ae:	3384      	adds	r3, #132	; 0x84
 80074b0:	69da      	ldr	r2, [r3, #28]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4619      	mov	r1, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	01db      	lsls	r3, r3, #7
 80074bc:	440b      	add	r3, r1
 80074be:	3384      	adds	r3, #132	; 0x84
 80074c0:	4619      	mov	r1, r3
 80074c2:	4b58      	ldr	r3, [pc, #352]	; (8007624 <LTDC_SetConfig+0x32c>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	69da      	ldr	r2, [r3, #28]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	68f9      	ldr	r1, [r7, #12]
 80074d2:	6809      	ldr	r1, [r1, #0]
 80074d4:	4608      	mov	r0, r1
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	01c9      	lsls	r1, r1, #7
 80074da:	4401      	add	r1, r0
 80074dc:	3184      	adds	r1, #132	; 0x84
 80074de:	4313      	orrs	r3, r2
 80074e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	01db      	lsls	r3, r3, #7
 80074ec:	4413      	add	r3, r2
 80074ee:	3384      	adds	r3, #132	; 0x84
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	01db      	lsls	r3, r3, #7
 80074fc:	4413      	add	r3, r2
 80074fe:	3384      	adds	r3, #132	; 0x84
 8007500:	461a      	mov	r2, r3
 8007502:	2300      	movs	r3, #0
 8007504:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	01db      	lsls	r3, r3, #7
 8007510:	4413      	add	r3, r2
 8007512:	3384      	adds	r3, #132	; 0x84
 8007514:	461a      	mov	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007524:	2304      	movs	r3, #4
 8007526:	61fb      	str	r3, [r7, #28]
 8007528:	e01b      	b.n	8007562 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d102      	bne.n	8007538 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007532:	2303      	movs	r3, #3
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	e014      	b.n	8007562 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	2b04      	cmp	r3, #4
 800753e:	d00b      	beq.n	8007558 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007544:	2b02      	cmp	r3, #2
 8007546:	d007      	beq.n	8007558 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800754c:	2b03      	cmp	r3, #3
 800754e:	d003      	beq.n	8007558 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007554:	2b07      	cmp	r3, #7
 8007556:	d102      	bne.n	800755e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007558:	2302      	movs	r3, #2
 800755a:	61fb      	str	r3, [r7, #28]
 800755c:	e001      	b.n	8007562 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800755e:	2301      	movs	r3, #1
 8007560:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	01db      	lsls	r3, r3, #7
 800756c:	4413      	add	r3, r2
 800756e:	3384      	adds	r3, #132	; 0x84
 8007570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	6812      	ldr	r2, [r2, #0]
 8007576:	4611      	mov	r1, r2
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	01d2      	lsls	r2, r2, #7
 800757c:	440a      	add	r2, r1
 800757e:	3284      	adds	r2, #132	; 0x84
 8007580:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007584:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	fb02 f303 	mul.w	r3, r2, r3
 8007590:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6859      	ldr	r1, [r3, #4]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	1acb      	subs	r3, r1, r3
 800759c:	69f9      	ldr	r1, [r7, #28]
 800759e:	fb01 f303 	mul.w	r3, r1, r3
 80075a2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80075a4:	68f9      	ldr	r1, [r7, #12]
 80075a6:	6809      	ldr	r1, [r1, #0]
 80075a8:	4608      	mov	r0, r1
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	01c9      	lsls	r1, r1, #7
 80075ae:	4401      	add	r1, r0
 80075b0:	3184      	adds	r1, #132	; 0x84
 80075b2:	4313      	orrs	r3, r2
 80075b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	01db      	lsls	r3, r3, #7
 80075c0:	4413      	add	r3, r2
 80075c2:	3384      	adds	r3, #132	; 0x84
 80075c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4619      	mov	r1, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	01db      	lsls	r3, r3, #7
 80075d0:	440b      	add	r3, r1
 80075d2:	3384      	adds	r3, #132	; 0x84
 80075d4:	4619      	mov	r1, r3
 80075d6:	4b14      	ldr	r3, [pc, #80]	; (8007628 <LTDC_SetConfig+0x330>)
 80075d8:	4013      	ands	r3, r2
 80075da:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	01db      	lsls	r3, r3, #7
 80075e6:	4413      	add	r3, r2
 80075e8:	3384      	adds	r3, #132	; 0x84
 80075ea:	461a      	mov	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	01db      	lsls	r3, r3, #7
 80075fc:	4413      	add	r3, r2
 80075fe:	3384      	adds	r3, #132	; 0x84
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	4611      	mov	r1, r2
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	01d2      	lsls	r2, r2, #7
 800760c:	440a      	add	r2, r1
 800760e:	3284      	adds	r2, #132	; 0x84
 8007610:	f043 0301 	orr.w	r3, r3, #1
 8007614:	6013      	str	r3, [r2, #0]
}
 8007616:	bf00      	nop
 8007618:	3724      	adds	r7, #36	; 0x24
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	fffff8f8 	.word	0xfffff8f8
 8007628:	fffff800 	.word	0xfffff800

0800762c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a04      	ldr	r2, [pc, #16]	; (8007648 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800763a:	6013      	str	r3, [r2, #0]
}
 800763c:	bf00      	nop
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	40007000 	.word	0x40007000

0800764c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007656:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	4a22      	ldr	r2, [pc, #136]	; (80076e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800765c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007660:	6413      	str	r3, [r2, #64]	; 0x40
 8007662:	4b20      	ldr	r3, [pc, #128]	; (80076e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800766e:	4b1e      	ldr	r3, [pc, #120]	; (80076e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1d      	ldr	r2, [pc, #116]	; (80076e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007678:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800767a:	f7fc fdb7 	bl	80041ec <HAL_GetTick>
 800767e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007680:	e009      	b.n	8007696 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007682:	f7fc fdb3 	bl	80041ec <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007690:	d901      	bls.n	8007696 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e022      	b.n	80076dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007696:	4b14      	ldr	r3, [pc, #80]	; (80076e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800769e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a2:	d1ee      	bne.n	8007682 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80076a4:	4b10      	ldr	r3, [pc, #64]	; (80076e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a0f      	ldr	r2, [pc, #60]	; (80076e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076b0:	f7fc fd9c 	bl	80041ec <HAL_GetTick>
 80076b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076b6:	e009      	b.n	80076cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80076b8:	f7fc fd98 	bl	80041ec <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076c6:	d901      	bls.n	80076cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e007      	b.n	80076dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076d8:	d1ee      	bne.n	80076b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40023800 	.word	0x40023800
 80076e8:	40007000 	.word	0x40007000

080076ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80076f4:	f7fc fd7a 	bl	80041ec <HAL_GetTick>
 80076f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e067      	b.n	80077d4 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10b      	bne.n	8007728 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7fa f835 	bl	8001788 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800771e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fb6b 	bl	8007dfe <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	3b01      	subs	r3, #1
 8007738:	021a      	lsls	r2, r3, #8
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	430a      	orrs	r2, r1
 8007740:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	2120      	movs	r1, #32
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fb63 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 8007754:	4603      	mov	r3, r0
 8007756:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007758:	7afb      	ldrb	r3, [r7, #11]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d135      	bne.n	80077ca <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	4b1d      	ldr	r3, [pc, #116]	; (80077dc <HAL_QSPI_Init+0xf0>)
 8007766:	4013      	ands	r3, r2
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6852      	ldr	r2, [r2, #4]
 800776c:	0611      	lsls	r1, r2, #24
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	68d2      	ldr	r2, [r2, #12]
 8007772:	4311      	orrs	r1, r2
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	69d2      	ldr	r2, [r2, #28]
 8007778:	4311      	orrs	r1, r2
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6a12      	ldr	r2, [r2, #32]
 800777e:	4311      	orrs	r1, r2
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	430b      	orrs	r3, r1
 8007786:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <HAL_QSPI_Init+0xf4>)
 8007790:	4013      	ands	r3, r2
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6912      	ldr	r2, [r2, #16]
 8007796:	0411      	lsls	r1, r2, #16
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	6952      	ldr	r2, [r2, #20]
 800779c:	4311      	orrs	r1, r2
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	6992      	ldr	r2, [r2, #24]
 80077a2:	4311      	orrs	r1, r2
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	430b      	orrs	r3, r1
 80077aa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0201 	orr.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80077d2:	7afb      	ldrb	r3, [r7, #11]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	00ffff2f 	.word	0x00ffff2f
 80077e0:	ffe0f8fe 	.word	0xffe0f8fe

080077e4 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e016      	b.n	8007824 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0201 	bic.w	r2, r2, #1
 8007804:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7fa f84e 	bl	80018a8 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007838:	f7fc fcd8 	bl	80041ec <HAL_GetTick>
 800783c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_QSPI_Command+0x22>
 800784a:	2302      	movs	r3, #2
 800784c:	e048      	b.n	80078e0 <HAL_QSPI_Command+0xb4>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b01      	cmp	r3, #1
 8007860:	d137      	bne.n	80078d2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	2200      	movs	r2, #0
 8007878:	2120      	movs	r1, #32
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 facd 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 8007880:	4603      	mov	r3, r0
 8007882:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d125      	bne.n	80078d6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800788a:	2200      	movs	r2, #0
 800788c:	68b9      	ldr	r1, [r7, #8]
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 fafa 	bl	8007e88 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d115      	bne.n	80078c8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	2201      	movs	r2, #1
 80078a4:	2102      	movs	r1, #2
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 fab7 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 80078ac:	4603      	mov	r3, r0
 80078ae:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10f      	bne.n	80078d6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2202      	movs	r2, #2
 80078bc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078c6:	e006      	b.n	80078d6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078d0:	e001      	b.n	80078d6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80078d2:	2302      	movs	r3, #2
 80078d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80078de:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08a      	sub	sp, #40	; 0x28
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80078f8:	f7fc fc78 	bl	80041ec <HAL_GetTick>
 80078fc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3320      	adds	r3, #32
 8007904:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_QSPI_Transmit+0x2e>
 8007912:	2302      	movs	r3, #2
 8007914:	e07b      	b.n	8007a0e <HAL_QSPI_Transmit+0x126>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b01      	cmp	r3, #1
 8007928:	d16a      	bne.n	8007a00 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d05b      	beq.n	80079ee <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2212      	movs	r2, #18
 800793a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	1c5a      	adds	r2, r3, #1
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695a      	ldr	r2, [r3, #20]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800796a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800796c:	e01b      	b.n	80079a6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2201      	movs	r2, #1
 8007976:	2104      	movs	r1, #4
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fa4e 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 800797e:	4603      	mov	r3, r0
 8007980:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8007982:	7ffb      	ldrb	r3, [r7, #31]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d113      	bne.n	80079b0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	1e5a      	subs	r2, r3, #1
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1df      	bne.n	800796e <HAL_QSPI_Transmit+0x86>
 80079ae:	e000      	b.n	80079b2 <HAL_QSPI_Transmit+0xca>
          break;
 80079b0:	bf00      	nop
      }

      if (status == HAL_OK)
 80079b2:	7ffb      	ldrb	r3, [r7, #31]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d115      	bne.n	80079e4 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2201      	movs	r2, #1
 80079c0:	2102      	movs	r1, #2
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 fa29 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80079cc:	7ffb      	ldrb	r3, [r7, #31]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d108      	bne.n	80079e4 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2202      	movs	r2, #2
 80079d8:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 f996 	bl	8007d0c <HAL_QSPI_Abort>
 80079e0:	4603      	mov	r3, r0
 80079e2:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079ec:	e00a      	b.n	8007a04 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f2:	f043 0208 	orr.w	r2, r3, #8
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	77fb      	strb	r3, [r7, #31]
 80079fe:	e001      	b.n	8007a04 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007a00:	2302      	movs	r3, #2
 8007a02:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007a0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b08a      	sub	sp, #40	; 0x28
 8007a1a:	af02      	add	r7, sp, #8
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007a26:	f7fc fbe1 	bl	80041ec <HAL_GetTick>
 8007a2a:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3320      	adds	r3, #32
 8007a3a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_QSPI_Receive+0x36>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e082      	b.n	8007b52 <HAL_QSPI_Receive+0x13c>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d171      	bne.n	8007b44 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d062      	beq.n	8007b32 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2222      	movs	r2, #34	; 0x22
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	1c5a      	adds	r2, r3, #1
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007aa4:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8007aae:	e01c      	b.n	8007aea <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	2106      	movs	r1, #6
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 f9ad 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8007ac4:	7ffb      	ldrb	r3, [r7, #31]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d114      	bne.n	8007af4 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	7812      	ldrb	r2, [r2, #0]
 8007ad2:	b2d2      	uxtb	r2, r2
 8007ad4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	1e5a      	subs	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1de      	bne.n	8007ab0 <HAL_QSPI_Receive+0x9a>
 8007af2:	e000      	b.n	8007af6 <HAL_QSPI_Receive+0xe0>
          break;
 8007af4:	bf00      	nop
      }

      if (status == HAL_OK)
 8007af6:	7ffb      	ldrb	r3, [r7, #31]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d115      	bne.n	8007b28 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	2201      	movs	r2, #1
 8007b04:	2102      	movs	r1, #2
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f987 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8007b10:	7ffb      	ldrb	r3, [r7, #31]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d108      	bne.n	8007b28 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f8f4 	bl	8007d0c <HAL_QSPI_Abort>
 8007b24:	4603      	mov	r3, r0
 8007b26:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b30:	e00a      	b.n	8007b48 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b36:	f043 0208 	orr.w	r2, r3, #8
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	77fb      	strb	r3, [r7, #31]
 8007b42:	e001      	b.n	8007b48 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007b44:	2302      	movs	r3, #2
 8007b46:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007b50:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3720      	adds	r7, #32
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b088      	sub	sp, #32
 8007b5e:	af02      	add	r7, sp, #8
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007b68:	f7fc fb40 	bl	80041ec <HAL_GetTick>
 8007b6c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d101      	bne.n	8007b7e <HAL_QSPI_AutoPolling+0x24>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e060      	b.n	8007c40 <HAL_QSPI_AutoPolling+0xe6>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d14f      	bne.n	8007c32 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2242      	movs	r2, #66	; 0x42
 8007b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2120      	movs	r1, #32
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f935 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d13d      	bne.n	8007c36 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	6812      	ldr	r2, [r2, #0]
 8007bc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6852      	ldr	r2, [r2, #4]
 8007bcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6892      	ldr	r2, [r2, #8]
 8007bd6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	431a      	orrs	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007bf0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007bfe:	68b9      	ldr	r1, [r7, #8]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f000 f941 	bl	8007e88 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	2108      	movs	r1, #8
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f000 f902 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2208      	movs	r2, #8
 8007c26:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c30:	e001      	b.n	8007c36 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8007c32:	2302      	movs	r3, #2
 8007c34:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b088      	sub	sp, #32
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007c54:	f7fc faca 	bl	80041ec <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_QSPI_MemoryMapped+0x22>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e04c      	b.n	8007d04 <HAL_QSPI_MemoryMapped+0xbc>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d13b      	bne.n	8007cf6 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2282      	movs	r2, #130	; 0x82
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	2200      	movs	r2, #0
 8007c96:	2120      	movs	r1, #32
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f8be 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d128      	bne.n	8007cfa <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f023 0108 	bic.w	r1, r3, #8
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2b08      	cmp	r3, #8
 8007cc4:	d110      	bne.n	8007ce8 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2210      	movs	r2, #16
 8007cd6:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007ce6:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8007ce8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 f8ca 	bl	8007e88 <QSPI_Config>
 8007cf4:	e001      	b.n	8007cfa <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3718      	adds	r7, #24
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007d18:	f7fc fa68 	bl	80041ec <HAL_GetTick>
 8007d1c:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d062      	beq.n	8007df4 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d017      	beq.n	8007d74 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 0204 	bic.w	r2, r2, #4
 8007d52:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fc fc95 	bl	8004688 <HAL_DMA_Abort>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6c:	f043 0204 	orr.w	r2, r3, #4
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d034      	beq.n	8007dec <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f042 0202 	orr.w	r2, r2, #2
 8007d90:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	2102      	movs	r1, #2
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f83b 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10e      	bne.n	8007dcc <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2202      	movs	r2, #2
 8007db4:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2120      	movs	r1, #32
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f829 	bl	8007e1a <QSPI_WaitFlagStateUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8007dcc:	7bfb      	ldrb	r3, [r7, #15]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d110      	bne.n	8007df4 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695a      	ldr	r2, [r3, #20]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007de0:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dea:	e003      	b.n	8007df4 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	603b      	str	r3, [r7, #0]
 8007e26:	4613      	mov	r3, r2
 8007e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007e2a:	e01a      	b.n	8007e62 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e32:	d016      	beq.n	8007e62 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e34:	f7fc f9da 	bl	80041ec <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d302      	bcc.n	8007e4a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10b      	bne.n	8007e62 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e56:	f043 0201 	orr.w	r2, r3, #1
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e00e      	b.n	8007e80 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bf14      	ite	ne
 8007e70:	2301      	movne	r3, #1
 8007e72:	2300      	moveq	r3, #0
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	461a      	mov	r2, r3
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d1d6      	bne.n	8007e2c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d009      	beq.n	8007eb0 <QSPI_Config+0x28>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007ea2:	d005      	beq.n	8007eb0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3a01      	subs	r2, #1
 8007eae:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 80b9 	beq.w	800802c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d05f      	beq.n	8007f82 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	6892      	ldr	r2, [r2, #8]
 8007eca:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d031      	beq.n	8007f38 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007edc:	431a      	orrs	r2, r3
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	049b      	lsls	r3, r3, #18
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	431a      	orrs	r2, r3
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	ea42 0103 	orr.w	r1, r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007f28:	f000 812e 	beq.w	8008188 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	6852      	ldr	r2, [r2, #4]
 8007f34:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007f36:	e127      	b.n	8008188 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f40:	431a      	orrs	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f46:	431a      	orrs	r2, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	049b      	lsls	r3, r3, #18
 8007f54:	431a      	orrs	r2, r3
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	431a      	orrs	r2, r3
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	431a      	orrs	r2, r3
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	ea42 0103 	orr.w	r1, r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	615a      	str	r2, [r3, #20]
}
 8007f80:	e102      	b.n	8008188 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d02e      	beq.n	8007fe8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f92:	431a      	orrs	r2, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	049b      	lsls	r3, r3, #18
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	431a      	orrs	r2, r3
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	ea42 0103 	orr.w	r1, r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007fd8:	f000 80d6 	beq.w	8008188 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	6852      	ldr	r2, [r2, #4]
 8007fe4:	619a      	str	r2, [r3, #24]
}
 8007fe6:	e0cf      	b.n	8008188 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	049b      	lsls	r3, r3, #18
 8008004:	431a      	orrs	r2, r3
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	431a      	orrs	r2, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	431a      	orrs	r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	431a      	orrs	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	ea42 0103 	orr.w	r1, r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	430a      	orrs	r2, r1
 8008028:	615a      	str	r2, [r3, #20]
}
 800802a:	e0ad      	b.n	8008188 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d058      	beq.n	80080e6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	6892      	ldr	r2, [r2, #8]
 800803c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d02d      	beq.n	80080a2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	431a      	orrs	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008054:	431a      	orrs	r2, r3
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	431a      	orrs	r2, r3
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	049b      	lsls	r3, r3, #18
 8008062:	431a      	orrs	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	431a      	orrs	r2, r3
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	431a      	orrs	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	431a      	orrs	r2, r3
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	431a      	orrs	r2, r3
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	ea42 0103 	orr.w	r1, r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	430a      	orrs	r2, r1
 800808c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008094:	d078      	beq.n	8008188 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	6852      	ldr	r2, [r2, #4]
 800809e:	619a      	str	r2, [r3, #24]
}
 80080a0:	e072      	b.n	8008188 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080aa:	431a      	orrs	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b0:	431a      	orrs	r2, r3
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	431a      	orrs	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	049b      	lsls	r3, r3, #18
 80080be:	431a      	orrs	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	431a      	orrs	r2, r3
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	431a      	orrs	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	431a      	orrs	r2, r3
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	ea42 0103 	orr.w	r1, r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	615a      	str	r2, [r3, #20]
}
 80080e4:	e050      	b.n	8008188 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d02a      	beq.n	8008144 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f6:	431a      	orrs	r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fc:	431a      	orrs	r2, r3
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	431a      	orrs	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	049b      	lsls	r3, r3, #18
 800810a:	431a      	orrs	r2, r3
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	6a1b      	ldr	r3, [r3, #32]
 8008110:	431a      	orrs	r2, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	431a      	orrs	r2, r3
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	431a      	orrs	r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	ea42 0103 	orr.w	r1, r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	430a      	orrs	r2, r1
 800812e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008136:	d027      	beq.n	8008188 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	6852      	ldr	r2, [r2, #4]
 8008140:	619a      	str	r2, [r3, #24]
}
 8008142:	e021      	b.n	8008188 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01d      	beq.n	8008188 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008154:	431a      	orrs	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815a:	431a      	orrs	r2, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	431a      	orrs	r2, r3
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	049b      	lsls	r3, r3, #18
 8008168:	431a      	orrs	r2, r3
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	431a      	orrs	r2, r3
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	431a      	orrs	r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	ea42 0103 	orr.w	r1, r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	430a      	orrs	r2, r1
 8008186:	615a      	str	r2, [r3, #20]
}
 8008188:	bf00      	nop
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800819c:	2300      	movs	r3, #0
 800819e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e291      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 8087 	beq.w	80082c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80081b8:	4b96      	ldr	r3, [pc, #600]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f003 030c 	and.w	r3, r3, #12
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d00c      	beq.n	80081de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081c4:	4b93      	ldr	r3, [pc, #588]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f003 030c 	and.w	r3, r3, #12
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d112      	bne.n	80081f6 <HAL_RCC_OscConfig+0x62>
 80081d0:	4b90      	ldr	r3, [pc, #576]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081dc:	d10b      	bne.n	80081f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081de:	4b8d      	ldr	r3, [pc, #564]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d06c      	beq.n	80082c4 <HAL_RCC_OscConfig+0x130>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d168      	bne.n	80082c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e26b      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081fe:	d106      	bne.n	800820e <HAL_RCC_OscConfig+0x7a>
 8008200:	4b84      	ldr	r3, [pc, #528]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a83      	ldr	r2, [pc, #524]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	e02e      	b.n	800826c <HAL_RCC_OscConfig+0xd8>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10c      	bne.n	8008230 <HAL_RCC_OscConfig+0x9c>
 8008216:	4b7f      	ldr	r3, [pc, #508]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a7e      	ldr	r2, [pc, #504]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800821c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	4b7c      	ldr	r3, [pc, #496]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a7b      	ldr	r2, [pc, #492]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e01d      	b.n	800826c <HAL_RCC_OscConfig+0xd8>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008238:	d10c      	bne.n	8008254 <HAL_RCC_OscConfig+0xc0>
 800823a:	4b76      	ldr	r3, [pc, #472]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a75      	ldr	r2, [pc, #468]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	4b73      	ldr	r3, [pc, #460]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a72      	ldr	r2, [pc, #456]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800824c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	e00b      	b.n	800826c <HAL_RCC_OscConfig+0xd8>
 8008254:	4b6f      	ldr	r3, [pc, #444]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a6e      	ldr	r2, [pc, #440]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800825a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	4b6c      	ldr	r3, [pc, #432]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a6b      	ldr	r2, [pc, #428]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800826a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d013      	beq.n	800829c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008274:	f7fb ffba 	bl	80041ec <HAL_GetTick>
 8008278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800827a:	e008      	b.n	800828e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800827c:	f7fb ffb6 	bl	80041ec <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b64      	cmp	r3, #100	; 0x64
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e21f      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800828e:	4b61      	ldr	r3, [pc, #388]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0f0      	beq.n	800827c <HAL_RCC_OscConfig+0xe8>
 800829a:	e014      	b.n	80082c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800829c:	f7fb ffa6 	bl	80041ec <HAL_GetTick>
 80082a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082a2:	e008      	b.n	80082b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082a4:	f7fb ffa2 	bl	80041ec <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b64      	cmp	r3, #100	; 0x64
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e20b      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082b6:	4b57      	ldr	r3, [pc, #348]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1f0      	bne.n	80082a4 <HAL_RCC_OscConfig+0x110>
 80082c2:	e000      	b.n	80082c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d069      	beq.n	80083a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80082d2:	4b50      	ldr	r3, [pc, #320]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f003 030c 	and.w	r3, r3, #12
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00b      	beq.n	80082f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082de:	4b4d      	ldr	r3, [pc, #308]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 030c 	and.w	r3, r3, #12
 80082e6:	2b08      	cmp	r3, #8
 80082e8:	d11c      	bne.n	8008324 <HAL_RCC_OscConfig+0x190>
 80082ea:	4b4a      	ldr	r3, [pc, #296]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d116      	bne.n	8008324 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082f6:	4b47      	ldr	r3, [pc, #284]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d005      	beq.n	800830e <HAL_RCC_OscConfig+0x17a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d001      	beq.n	800830e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e1df      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800830e:	4b41      	ldr	r3, [pc, #260]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	493d      	ldr	r1, [pc, #244]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800831e:	4313      	orrs	r3, r2
 8008320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008322:	e040      	b.n	80083a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d023      	beq.n	8008374 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800832c:	4b39      	ldr	r3, [pc, #228]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a38      	ldr	r2, [pc, #224]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008332:	f043 0301 	orr.w	r3, r3, #1
 8008336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008338:	f7fb ff58 	bl	80041ec <HAL_GetTick>
 800833c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800833e:	e008      	b.n	8008352 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008340:	f7fb ff54 	bl	80041ec <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e1bd      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008352:	4b30      	ldr	r3, [pc, #192]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0f0      	beq.n	8008340 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800835e:	4b2d      	ldr	r3, [pc, #180]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	4929      	ldr	r1, [pc, #164]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800836e:	4313      	orrs	r3, r2
 8008370:	600b      	str	r3, [r1, #0]
 8008372:	e018      	b.n	80083a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008374:	4b27      	ldr	r3, [pc, #156]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a26      	ldr	r2, [pc, #152]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800837a:	f023 0301 	bic.w	r3, r3, #1
 800837e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008380:	f7fb ff34 	bl	80041ec <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008388:	f7fb ff30 	bl	80041ec <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e199      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800839a:	4b1e      	ldr	r3, [pc, #120]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f0      	bne.n	8008388 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0308 	and.w	r3, r3, #8
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d038      	beq.n	8008424 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d019      	beq.n	80083ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083ba:	4b16      	ldr	r3, [pc, #88]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80083bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083be:	4a15      	ldr	r2, [pc, #84]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80083c0:	f043 0301 	orr.w	r3, r3, #1
 80083c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c6:	f7fb ff11 	bl	80041ec <HAL_GetTick>
 80083ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083cc:	e008      	b.n	80083e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083ce:	f7fb ff0d 	bl	80041ec <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e176      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083e0:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80083e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0f0      	beq.n	80083ce <HAL_RCC_OscConfig+0x23a>
 80083ec:	e01a      	b.n	8008424 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80083f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083f2:	4a08      	ldr	r2, [pc, #32]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80083f4:	f023 0301 	bic.w	r3, r3, #1
 80083f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083fa:	f7fb fef7 	bl	80041ec <HAL_GetTick>
 80083fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008400:	e00a      	b.n	8008418 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008402:	f7fb fef3 	bl	80041ec <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d903      	bls.n	8008418 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e15c      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
 8008414:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008418:	4b91      	ldr	r3, [pc, #580]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 800841a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1ee      	bne.n	8008402 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 80a4 	beq.w	800857a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008432:	4b8b      	ldr	r3, [pc, #556]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10d      	bne.n	800845a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800843e:	4b88      	ldr	r3, [pc, #544]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	4a87      	ldr	r2, [pc, #540]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008448:	6413      	str	r3, [r2, #64]	; 0x40
 800844a:	4b85      	ldr	r3, [pc, #532]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008452:	60bb      	str	r3, [r7, #8]
 8008454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008456:	2301      	movs	r3, #1
 8008458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800845a:	4b82      	ldr	r3, [pc, #520]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008462:	2b00      	cmp	r3, #0
 8008464:	d118      	bne.n	8008498 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008466:	4b7f      	ldr	r3, [pc, #508]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a7e      	ldr	r2, [pc, #504]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 800846c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008472:	f7fb febb 	bl	80041ec <HAL_GetTick>
 8008476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008478:	e008      	b.n	800848c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800847a:	f7fb feb7 	bl	80041ec <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b64      	cmp	r3, #100	; 0x64
 8008486:	d901      	bls.n	800848c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e120      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800848c:	4b75      	ldr	r3, [pc, #468]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0f0      	beq.n	800847a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d106      	bne.n	80084ae <HAL_RCC_OscConfig+0x31a>
 80084a0:	4b6f      	ldr	r3, [pc, #444]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	4a6e      	ldr	r2, [pc, #440]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	6713      	str	r3, [r2, #112]	; 0x70
 80084ac:	e02d      	b.n	800850a <HAL_RCC_OscConfig+0x376>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10c      	bne.n	80084d0 <HAL_RCC_OscConfig+0x33c>
 80084b6:	4b6a      	ldr	r3, [pc, #424]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ba:	4a69      	ldr	r2, [pc, #420]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084bc:	f023 0301 	bic.w	r3, r3, #1
 80084c0:	6713      	str	r3, [r2, #112]	; 0x70
 80084c2:	4b67      	ldr	r3, [pc, #412]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c6:	4a66      	ldr	r2, [pc, #408]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084c8:	f023 0304 	bic.w	r3, r3, #4
 80084cc:	6713      	str	r3, [r2, #112]	; 0x70
 80084ce:	e01c      	b.n	800850a <HAL_RCC_OscConfig+0x376>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	2b05      	cmp	r3, #5
 80084d6:	d10c      	bne.n	80084f2 <HAL_RCC_OscConfig+0x35e>
 80084d8:	4b61      	ldr	r3, [pc, #388]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084dc:	4a60      	ldr	r2, [pc, #384]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084de:	f043 0304 	orr.w	r3, r3, #4
 80084e2:	6713      	str	r3, [r2, #112]	; 0x70
 80084e4:	4b5e      	ldr	r3, [pc, #376]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e8:	4a5d      	ldr	r2, [pc, #372]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084ea:	f043 0301 	orr.w	r3, r3, #1
 80084ee:	6713      	str	r3, [r2, #112]	; 0x70
 80084f0:	e00b      	b.n	800850a <HAL_RCC_OscConfig+0x376>
 80084f2:	4b5b      	ldr	r3, [pc, #364]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f6:	4a5a      	ldr	r2, [pc, #360]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	6713      	str	r3, [r2, #112]	; 0x70
 80084fe:	4b58      	ldr	r3, [pc, #352]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008502:	4a57      	ldr	r2, [pc, #348]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008504:	f023 0304 	bic.w	r3, r3, #4
 8008508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d015      	beq.n	800853e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008512:	f7fb fe6b 	bl	80041ec <HAL_GetTick>
 8008516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008518:	e00a      	b.n	8008530 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800851a:	f7fb fe67 	bl	80041ec <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	f241 3288 	movw	r2, #5000	; 0x1388
 8008528:	4293      	cmp	r3, r2
 800852a:	d901      	bls.n	8008530 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e0ce      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008530:	4b4b      	ldr	r3, [pc, #300]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008534:	f003 0302 	and.w	r3, r3, #2
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0ee      	beq.n	800851a <HAL_RCC_OscConfig+0x386>
 800853c:	e014      	b.n	8008568 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800853e:	f7fb fe55 	bl	80041ec <HAL_GetTick>
 8008542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008544:	e00a      	b.n	800855c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008546:	f7fb fe51 	bl	80041ec <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	f241 3288 	movw	r2, #5000	; 0x1388
 8008554:	4293      	cmp	r3, r2
 8008556:	d901      	bls.n	800855c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e0b8      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800855c:	4b40      	ldr	r3, [pc, #256]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 800855e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1ee      	bne.n	8008546 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d105      	bne.n	800857a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800856e:	4b3c      	ldr	r3, [pc, #240]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	4a3b      	ldr	r2, [pc, #236]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008578:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80a4 	beq.w	80086cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008584:	4b36      	ldr	r3, [pc, #216]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f003 030c 	and.w	r3, r3, #12
 800858c:	2b08      	cmp	r3, #8
 800858e:	d06b      	beq.n	8008668 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	2b02      	cmp	r3, #2
 8008596:	d149      	bne.n	800862c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008598:	4b31      	ldr	r3, [pc, #196]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a30      	ldr	r2, [pc, #192]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 800859e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a4:	f7fb fe22 	bl	80041ec <HAL_GetTick>
 80085a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085aa:	e008      	b.n	80085be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085ac:	f7fb fe1e 	bl	80041ec <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e087      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085be:	4b28      	ldr	r3, [pc, #160]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1f0      	bne.n	80085ac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	69da      	ldr	r2, [r3, #28]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	431a      	orrs	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	019b      	lsls	r3, r3, #6
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	085b      	lsrs	r3, r3, #1
 80085e2:	3b01      	subs	r3, #1
 80085e4:	041b      	lsls	r3, r3, #16
 80085e6:	431a      	orrs	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	061b      	lsls	r3, r3, #24
 80085ee:	4313      	orrs	r3, r2
 80085f0:	4a1b      	ldr	r2, [pc, #108]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80085f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085f6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085f8:	4b19      	ldr	r3, [pc, #100]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a18      	ldr	r2, [pc, #96]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 80085fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008604:	f7fb fdf2 	bl	80041ec <HAL_GetTick>
 8008608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800860a:	e008      	b.n	800861e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800860c:	f7fb fdee 	bl	80041ec <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	2b02      	cmp	r3, #2
 8008618:	d901      	bls.n	800861e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e057      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800861e:	4b10      	ldr	r3, [pc, #64]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0f0      	beq.n	800860c <HAL_RCC_OscConfig+0x478>
 800862a:	e04f      	b.n	80086cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800862c:	4b0c      	ldr	r3, [pc, #48]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a0b      	ldr	r2, [pc, #44]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008638:	f7fb fdd8 	bl	80041ec <HAL_GetTick>
 800863c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800863e:	e008      	b.n	8008652 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008640:	f7fb fdd4 	bl	80041ec <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	2b02      	cmp	r3, #2
 800864c:	d901      	bls.n	8008652 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e03d      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008652:	4b03      	ldr	r3, [pc, #12]	; (8008660 <HAL_RCC_OscConfig+0x4cc>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1f0      	bne.n	8008640 <HAL_RCC_OscConfig+0x4ac>
 800865e:	e035      	b.n	80086cc <HAL_RCC_OscConfig+0x538>
 8008660:	40023800 	.word	0x40023800
 8008664:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008668:	4b1b      	ldr	r3, [pc, #108]	; (80086d8 <HAL_RCC_OscConfig+0x544>)
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d028      	beq.n	80086c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008680:	429a      	cmp	r2, r3
 8008682:	d121      	bne.n	80086c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800868e:	429a      	cmp	r2, r3
 8008690:	d11a      	bne.n	80086c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008698:	4013      	ands	r3, r2
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800869e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d111      	bne.n	80086c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	085b      	lsrs	r3, r3, #1
 80086b0:	3b01      	subs	r3, #1
 80086b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d107      	bne.n	80086c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d001      	beq.n	80086cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e000      	b.n	80086ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	40023800 	.word	0x40023800

080086dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e0d0      	b.n	8008896 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086f4:	4b6a      	ldr	r3, [pc, #424]	; (80088a0 <HAL_RCC_ClockConfig+0x1c4>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 030f 	and.w	r3, r3, #15
 80086fc:	683a      	ldr	r2, [r7, #0]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d910      	bls.n	8008724 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008702:	4b67      	ldr	r3, [pc, #412]	; (80088a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f023 020f 	bic.w	r2, r3, #15
 800870a:	4965      	ldr	r1, [pc, #404]	; (80088a0 <HAL_RCC_ClockConfig+0x1c4>)
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	4313      	orrs	r3, r2
 8008710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008712:	4b63      	ldr	r3, [pc, #396]	; (80088a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 030f 	and.w	r3, r3, #15
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d001      	beq.n	8008724 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e0b8      	b.n	8008896 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d020      	beq.n	8008772 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800873c:	4b59      	ldr	r3, [pc, #356]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	4a58      	ldr	r2, [pc, #352]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008742:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008746:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0308 	and.w	r3, r3, #8
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008754:	4b53      	ldr	r3, [pc, #332]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	4a52      	ldr	r2, [pc, #328]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 800875a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800875e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008760:	4b50      	ldr	r3, [pc, #320]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	494d      	ldr	r1, [pc, #308]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 800876e:	4313      	orrs	r3, r2
 8008770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	2b00      	cmp	r3, #0
 800877c:	d040      	beq.n	8008800 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d107      	bne.n	8008796 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008786:	4b47      	ldr	r3, [pc, #284]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d115      	bne.n	80087be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e07f      	b.n	8008896 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d107      	bne.n	80087ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800879e:	4b41      	ldr	r3, [pc, #260]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d109      	bne.n	80087be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e073      	b.n	8008896 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087ae:	4b3d      	ldr	r3, [pc, #244]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e06b      	b.n	8008896 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087be:	4b39      	ldr	r3, [pc, #228]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f023 0203 	bic.w	r2, r3, #3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	4936      	ldr	r1, [pc, #216]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 80087cc:	4313      	orrs	r3, r2
 80087ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087d0:	f7fb fd0c 	bl	80041ec <HAL_GetTick>
 80087d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087d6:	e00a      	b.n	80087ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087d8:	f7fb fd08 	bl	80041ec <HAL_GetTick>
 80087dc:	4602      	mov	r2, r0
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e053      	b.n	8008896 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ee:	4b2d      	ldr	r3, [pc, #180]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f003 020c 	and.w	r2, r3, #12
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d1eb      	bne.n	80087d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008800:	4b27      	ldr	r3, [pc, #156]	; (80088a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 030f 	and.w	r3, r3, #15
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d210      	bcs.n	8008830 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800880e:	4b24      	ldr	r3, [pc, #144]	; (80088a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f023 020f 	bic.w	r2, r3, #15
 8008816:	4922      	ldr	r1, [pc, #136]	; (80088a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	4313      	orrs	r3, r2
 800881c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800881e:	4b20      	ldr	r3, [pc, #128]	; (80088a0 <HAL_RCC_ClockConfig+0x1c4>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 030f 	and.w	r3, r3, #15
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d001      	beq.n	8008830 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e032      	b.n	8008896 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0304 	and.w	r3, r3, #4
 8008838:	2b00      	cmp	r3, #0
 800883a:	d008      	beq.n	800884e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800883c:	4b19      	ldr	r3, [pc, #100]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	4916      	ldr	r1, [pc, #88]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 800884a:	4313      	orrs	r3, r2
 800884c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	2b00      	cmp	r3, #0
 8008858:	d009      	beq.n	800886e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800885a:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	490e      	ldr	r1, [pc, #56]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 800886a:	4313      	orrs	r3, r2
 800886c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800886e:	f000 f821 	bl	80088b4 <HAL_RCC_GetSysClockFreq>
 8008872:	4602      	mov	r2, r0
 8008874:	4b0b      	ldr	r3, [pc, #44]	; (80088a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	091b      	lsrs	r3, r3, #4
 800887a:	f003 030f 	and.w	r3, r3, #15
 800887e:	490a      	ldr	r1, [pc, #40]	; (80088a8 <HAL_RCC_ClockConfig+0x1cc>)
 8008880:	5ccb      	ldrb	r3, [r1, r3]
 8008882:	fa22 f303 	lsr.w	r3, r2, r3
 8008886:	4a09      	ldr	r2, [pc, #36]	; (80088ac <HAL_RCC_ClockConfig+0x1d0>)
 8008888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800888a:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <HAL_RCC_ClockConfig+0x1d4>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4618      	mov	r0, r3
 8008890:	f7fb fc68 	bl	8004164 <HAL_InitTick>

  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	40023c00 	.word	0x40023c00
 80088a4:	40023800 	.word	0x40023800
 80088a8:	0801922c 	.word	0x0801922c
 80088ac:	20000000 	.word	0x20000000
 80088b0:	20000040 	.word	0x20000040

080088b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088b8:	b090      	sub	sp, #64	; 0x40
 80088ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
 80088c0:	2300      	movs	r3, #0
 80088c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088c4:	2300      	movs	r3, #0
 80088c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088cc:	4b59      	ldr	r3, [pc, #356]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x180>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f003 030c 	and.w	r3, r3, #12
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d00d      	beq.n	80088f4 <HAL_RCC_GetSysClockFreq+0x40>
 80088d8:	2b08      	cmp	r3, #8
 80088da:	f200 80a1 	bhi.w	8008a20 <HAL_RCC_GetSysClockFreq+0x16c>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <HAL_RCC_GetSysClockFreq+0x34>
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d003      	beq.n	80088ee <HAL_RCC_GetSysClockFreq+0x3a>
 80088e6:	e09b      	b.n	8008a20 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80088e8:	4b53      	ldr	r3, [pc, #332]	; (8008a38 <HAL_RCC_GetSysClockFreq+0x184>)
 80088ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088ec:	e09b      	b.n	8008a26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80088ee:	4b53      	ldr	r3, [pc, #332]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x188>)
 80088f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088f2:	e098      	b.n	8008a26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80088f4:	4b4f      	ldr	r3, [pc, #316]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x180>)
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80088fe:	4b4d      	ldr	r3, [pc, #308]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d028      	beq.n	800895c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800890a:	4b4a      	ldr	r3, [pc, #296]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x180>)
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	099b      	lsrs	r3, r3, #6
 8008910:	2200      	movs	r2, #0
 8008912:	623b      	str	r3, [r7, #32]
 8008914:	627a      	str	r2, [r7, #36]	; 0x24
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800891c:	2100      	movs	r1, #0
 800891e:	4b47      	ldr	r3, [pc, #284]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x188>)
 8008920:	fb03 f201 	mul.w	r2, r3, r1
 8008924:	2300      	movs	r3, #0
 8008926:	fb00 f303 	mul.w	r3, r0, r3
 800892a:	4413      	add	r3, r2
 800892c:	4a43      	ldr	r2, [pc, #268]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x188>)
 800892e:	fba0 1202 	umull	r1, r2, r0, r2
 8008932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008934:	460a      	mov	r2, r1
 8008936:	62ba      	str	r2, [r7, #40]	; 0x28
 8008938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800893a:	4413      	add	r3, r2
 800893c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	2200      	movs	r2, #0
 8008942:	61bb      	str	r3, [r7, #24]
 8008944:	61fa      	str	r2, [r7, #28]
 8008946:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800894a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800894e:	f7f7 fcb7 	bl	80002c0 <__aeabi_uldivmod>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	4613      	mov	r3, r2
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800895a:	e053      	b.n	8008a04 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800895c:	4b35      	ldr	r3, [pc, #212]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x180>)
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	099b      	lsrs	r3, r3, #6
 8008962:	2200      	movs	r2, #0
 8008964:	613b      	str	r3, [r7, #16]
 8008966:	617a      	str	r2, [r7, #20]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800896e:	f04f 0b00 	mov.w	fp, #0
 8008972:	4652      	mov	r2, sl
 8008974:	465b      	mov	r3, fp
 8008976:	f04f 0000 	mov.w	r0, #0
 800897a:	f04f 0100 	mov.w	r1, #0
 800897e:	0159      	lsls	r1, r3, #5
 8008980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008984:	0150      	lsls	r0, r2, #5
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	ebb2 080a 	subs.w	r8, r2, sl
 800898e:	eb63 090b 	sbc.w	r9, r3, fp
 8008992:	f04f 0200 	mov.w	r2, #0
 8008996:	f04f 0300 	mov.w	r3, #0
 800899a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800899e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80089a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80089a6:	ebb2 0408 	subs.w	r4, r2, r8
 80089aa:	eb63 0509 	sbc.w	r5, r3, r9
 80089ae:	f04f 0200 	mov.w	r2, #0
 80089b2:	f04f 0300 	mov.w	r3, #0
 80089b6:	00eb      	lsls	r3, r5, #3
 80089b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089bc:	00e2      	lsls	r2, r4, #3
 80089be:	4614      	mov	r4, r2
 80089c0:	461d      	mov	r5, r3
 80089c2:	eb14 030a 	adds.w	r3, r4, sl
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	eb45 030b 	adc.w	r3, r5, fp
 80089cc:	607b      	str	r3, [r7, #4]
 80089ce:	f04f 0200 	mov.w	r2, #0
 80089d2:	f04f 0300 	mov.w	r3, #0
 80089d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80089da:	4629      	mov	r1, r5
 80089dc:	028b      	lsls	r3, r1, #10
 80089de:	4621      	mov	r1, r4
 80089e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80089e4:	4621      	mov	r1, r4
 80089e6:	028a      	lsls	r2, r1, #10
 80089e8:	4610      	mov	r0, r2
 80089ea:	4619      	mov	r1, r3
 80089ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ee:	2200      	movs	r2, #0
 80089f0:	60bb      	str	r3, [r7, #8]
 80089f2:	60fa      	str	r2, [r7, #12]
 80089f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089f8:	f7f7 fc62 	bl	80002c0 <__aeabi_uldivmod>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4613      	mov	r3, r2
 8008a02:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008a04:	4b0b      	ldr	r3, [pc, #44]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	0c1b      	lsrs	r3, r3, #16
 8008a0a:	f003 0303 	and.w	r3, r3, #3
 8008a0e:	3301      	adds	r3, #1
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008a14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a1e:	e002      	b.n	8008a26 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a20:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <HAL_RCC_GetSysClockFreq+0x184>)
 8008a22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3740      	adds	r7, #64	; 0x40
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a32:	bf00      	nop
 8008a34:	40023800 	.word	0x40023800
 8008a38:	00f42400 	.word	0x00f42400
 8008a3c:	017d7840 	.word	0x017d7840

08008a40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a44:	4b03      	ldr	r3, [pc, #12]	; (8008a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a46:	681b      	ldr	r3, [r3, #0]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	20000000 	.word	0x20000000

08008a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008a5c:	f7ff fff0 	bl	8008a40 <HAL_RCC_GetHCLKFreq>
 8008a60:	4602      	mov	r2, r0
 8008a62:	4b05      	ldr	r3, [pc, #20]	; (8008a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	0a9b      	lsrs	r3, r3, #10
 8008a68:	f003 0307 	and.w	r3, r3, #7
 8008a6c:	4903      	ldr	r1, [pc, #12]	; (8008a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a6e:	5ccb      	ldrb	r3, [r1, r3]
 8008a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	40023800 	.word	0x40023800
 8008a7c:	0801923c 	.word	0x0801923c

08008a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008a84:	f7ff ffdc 	bl	8008a40 <HAL_RCC_GetHCLKFreq>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	0b5b      	lsrs	r3, r3, #13
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	4903      	ldr	r1, [pc, #12]	; (8008aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a96:	5ccb      	ldrb	r3, [r1, r3]
 8008a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	40023800 	.word	0x40023800
 8008aa4:	0801923c 	.word	0x0801923c

08008aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d012      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008ad0:	4b69      	ldr	r3, [pc, #420]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	4a68      	ldr	r2, [pc, #416]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ad6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ada:	6093      	str	r3, [r2, #8]
 8008adc:	4b66      	ldr	r3, [pc, #408]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae4:	4964      	ldr	r1, [pc, #400]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008af2:	2301      	movs	r3, #1
 8008af4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d017      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b02:	4b5d      	ldr	r3, [pc, #372]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b10:	4959      	ldr	r1, [pc, #356]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b20:	d101      	bne.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008b22:	2301      	movs	r3, #1
 8008b24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d017      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008b3e:	4b4e      	ldr	r3, [pc, #312]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4c:	494a      	ldr	r1, [pc, #296]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b5c:	d101      	bne.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 808b 	beq.w	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008b8c:	4b3a      	ldr	r3, [pc, #232]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b90:	4a39      	ldr	r2, [pc, #228]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b96:	6413      	str	r3, [r2, #64]	; 0x40
 8008b98:	4b37      	ldr	r3, [pc, #220]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ba0:	60bb      	str	r3, [r7, #8]
 8008ba2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008ba4:	4b35      	ldr	r3, [pc, #212]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a34      	ldr	r2, [pc, #208]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bb0:	f7fb fb1c 	bl	80041ec <HAL_GetTick>
 8008bb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008bb6:	e008      	b.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bb8:	f7fb fb18 	bl	80041ec <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	2b64      	cmp	r3, #100	; 0x64
 8008bc4:	d901      	bls.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e357      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008bca:	4b2c      	ldr	r3, [pc, #176]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0f0      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008bd6:	4b28      	ldr	r3, [pc, #160]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d035      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d02e      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bf4:	4b20      	ldr	r3, [pc, #128]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bfc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008bfe:	4b1e      	ldr	r3, [pc, #120]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c02:	4a1d      	ldr	r2, [pc, #116]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c08:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008c0a:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0e:	4a1a      	ldr	r2, [pc, #104]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008c16:	4a18      	ldr	r2, [pc, #96]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008c1c:	4b16      	ldr	r3, [pc, #88]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d114      	bne.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c28:	f7fb fae0 	bl	80041ec <HAL_GetTick>
 8008c2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c2e:	e00a      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c30:	f7fb fadc 	bl	80041ec <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d901      	bls.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e319      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c46:	4b0c      	ldr	r3, [pc, #48]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0ee      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c5e:	d111      	bne.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008c60:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008c6e:	400b      	ands	r3, r1
 8008c70:	4901      	ldr	r1, [pc, #4]	; (8008c78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	608b      	str	r3, [r1, #8]
 8008c76:	e00b      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008c78:	40023800 	.word	0x40023800
 8008c7c:	40007000 	.word	0x40007000
 8008c80:	0ffffcff 	.word	0x0ffffcff
 8008c84:	4baa      	ldr	r3, [pc, #680]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	4aa9      	ldr	r2, [pc, #676]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008c8e:	6093      	str	r3, [r2, #8]
 8008c90:	4ba7      	ldr	r3, [pc, #668]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c9c:	49a4      	ldr	r1, [pc, #656]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0310 	and.w	r3, r3, #16
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d010      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008cae:	4ba0      	ldr	r3, [pc, #640]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cb4:	4a9e      	ldr	r2, [pc, #632]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008cbe:	4b9c      	ldr	r3, [pc, #624]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc8:	4999      	ldr	r1, [pc, #612]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00a      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008cdc:	4b94      	ldr	r3, [pc, #592]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cea:	4991      	ldr	r1, [pc, #580]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008cfe:	4b8c      	ldr	r3, [pc, #560]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d0c:	4988      	ldr	r1, [pc, #544]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00a      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d20:	4b83      	ldr	r3, [pc, #524]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d2e:	4980      	ldr	r1, [pc, #512]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d42:	4b7b      	ldr	r3, [pc, #492]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d50:	4977      	ldr	r1, [pc, #476]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00a      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d64:	4b72      	ldr	r3, [pc, #456]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d6a:	f023 0203 	bic.w	r2, r3, #3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d72:	496f      	ldr	r1, [pc, #444]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d74:	4313      	orrs	r3, r2
 8008d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d86:	4b6a      	ldr	r3, [pc, #424]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d8c:	f023 020c 	bic.w	r2, r3, #12
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d94:	4966      	ldr	r1, [pc, #408]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00a      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008da8:	4b61      	ldr	r3, [pc, #388]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db6:	495e      	ldr	r1, [pc, #376]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008dca:	4b59      	ldr	r3, [pc, #356]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd8:	4955      	ldr	r1, [pc, #340]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00a      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008dec:	4b50      	ldr	r3, [pc, #320]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dfa:	494d      	ldr	r1, [pc, #308]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008e0e:	4b48      	ldr	r3, [pc, #288]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1c:	4944      	ldr	r1, [pc, #272]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00a      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008e30:	4b3f      	ldr	r3, [pc, #252]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e3e:	493c      	ldr	r1, [pc, #240]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e40:	4313      	orrs	r3, r2
 8008e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00a      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008e52:	4b37      	ldr	r3, [pc, #220]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e60:	4933      	ldr	r1, [pc, #204]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e74:	4b2e      	ldr	r3, [pc, #184]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e82:	492b      	ldr	r1, [pc, #172]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d011      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008e96:	4b26      	ldr	r3, [pc, #152]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ea4:	4922      	ldr	r1, [pc, #136]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008eb4:	d101      	bne.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0308 	and.w	r3, r3, #8
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ed6:	4b16      	ldr	r3, [pc, #88]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008edc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ee4:	4912      	ldr	r1, [pc, #72]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008ef8:	4b0d      	ldr	r3, [pc, #52]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008efe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f08:	4909      	ldr	r1, [pc, #36]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d006      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 80d9 	beq.w	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008f24:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a01      	ldr	r2, [pc, #4]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f2e:	e001      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008f30:	40023800 	.word	0x40023800
 8008f34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f36:	f7fb f959 	bl	80041ec <HAL_GetTick>
 8008f3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f3c:	e008      	b.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008f3e:	f7fb f955 	bl	80041ec <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	2b64      	cmp	r3, #100	; 0x64
 8008f4a:	d901      	bls.n	8008f50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	e194      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f50:	4b6c      	ldr	r3, [pc, #432]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1f0      	bne.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d021      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d11d      	bne.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008f70:	4b64      	ldr	r3, [pc, #400]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f76:	0c1b      	lsrs	r3, r3, #16
 8008f78:	f003 0303 	and.w	r3, r3, #3
 8008f7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008f7e:	4b61      	ldr	r3, [pc, #388]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f84:	0e1b      	lsrs	r3, r3, #24
 8008f86:	f003 030f 	and.w	r3, r3, #15
 8008f8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	019a      	lsls	r2, r3, #6
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	041b      	lsls	r3, r3, #16
 8008f96:	431a      	orrs	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	061b      	lsls	r3, r3, #24
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	071b      	lsls	r3, r3, #28
 8008fa4:	4957      	ldr	r1, [pc, #348]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d004      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fc0:	d00a      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d02e      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fd6:	d129      	bne.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008fd8:	4b4a      	ldr	r3, [pc, #296]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fde:	0c1b      	lsrs	r3, r3, #16
 8008fe0:	f003 0303 	and.w	r3, r3, #3
 8008fe4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008fe6:	4b47      	ldr	r3, [pc, #284]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fec:	0f1b      	lsrs	r3, r3, #28
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	019a      	lsls	r2, r3, #6
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	041b      	lsls	r3, r3, #16
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	061b      	lsls	r3, r3, #24
 8009006:	431a      	orrs	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	071b      	lsls	r3, r3, #28
 800900c:	493d      	ldr	r1, [pc, #244]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800900e:	4313      	orrs	r3, r2
 8009010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009014:	4b3b      	ldr	r3, [pc, #236]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800901a:	f023 021f 	bic.w	r2, r3, #31
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	3b01      	subs	r3, #1
 8009024:	4937      	ldr	r1, [pc, #220]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009026:	4313      	orrs	r3, r2
 8009028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01d      	beq.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009038:	4b32      	ldr	r3, [pc, #200]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800903a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800903e:	0e1b      	lsrs	r3, r3, #24
 8009040:	f003 030f 	and.w	r3, r3, #15
 8009044:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009046:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800904c:	0f1b      	lsrs	r3, r3, #28
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	019a      	lsls	r2, r3, #6
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	041b      	lsls	r3, r3, #16
 8009060:	431a      	orrs	r2, r3
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	061b      	lsls	r3, r3, #24
 8009066:	431a      	orrs	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	071b      	lsls	r3, r3, #28
 800906c:	4925      	ldr	r1, [pc, #148]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800906e:	4313      	orrs	r3, r2
 8009070:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d011      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	019a      	lsls	r2, r3, #6
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	041b      	lsls	r3, r3, #16
 800908c:	431a      	orrs	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	061b      	lsls	r3, r3, #24
 8009094:	431a      	orrs	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	071b      	lsls	r3, r3, #28
 800909c:	4919      	ldr	r1, [pc, #100]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80090a4:	4b17      	ldr	r3, [pc, #92]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a16      	ldr	r2, [pc, #88]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090b0:	f7fb f89c 	bl	80041ec <HAL_GetTick>
 80090b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80090b6:	e008      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80090b8:	f7fb f898 	bl	80041ec <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	2b64      	cmp	r3, #100	; 0x64
 80090c4:	d901      	bls.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e0d7      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80090ca:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0f0      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	f040 80cd 	bne.w	8009278 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80090de:	4b09      	ldr	r3, [pc, #36]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a08      	ldr	r2, [pc, #32]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ea:	f7fb f87f 	bl	80041ec <HAL_GetTick>
 80090ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80090f0:	e00a      	b.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80090f2:	f7fb f87b 	bl	80041ec <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	2b64      	cmp	r3, #100	; 0x64
 80090fe:	d903      	bls.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e0ba      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009104:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009108:	4b5e      	ldr	r3, [pc, #376]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009114:	d0ed      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d003      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009126:	2b00      	cmp	r3, #0
 8009128:	d009      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009132:	2b00      	cmp	r3, #0
 8009134:	d02e      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913a:	2b00      	cmp	r3, #0
 800913c:	d12a      	bne.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800913e:	4b51      	ldr	r3, [pc, #324]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009144:	0c1b      	lsrs	r3, r3, #16
 8009146:	f003 0303 	and.w	r3, r3, #3
 800914a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800914c:	4b4d      	ldr	r3, [pc, #308]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800914e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009152:	0f1b      	lsrs	r3, r3, #28
 8009154:	f003 0307 	and.w	r3, r3, #7
 8009158:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	019a      	lsls	r2, r3, #6
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	041b      	lsls	r3, r3, #16
 8009164:	431a      	orrs	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	061b      	lsls	r3, r3, #24
 800916c:	431a      	orrs	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	071b      	lsls	r3, r3, #28
 8009172:	4944      	ldr	r1, [pc, #272]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009174:	4313      	orrs	r3, r2
 8009176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800917a:	4b42      	ldr	r3, [pc, #264]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800917c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009180:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009188:	3b01      	subs	r3, #1
 800918a:	021b      	lsls	r3, r3, #8
 800918c:	493d      	ldr	r1, [pc, #244]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800918e:	4313      	orrs	r3, r2
 8009190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d022      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a8:	d11d      	bne.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80091aa:	4b36      	ldr	r3, [pc, #216]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b0:	0e1b      	lsrs	r3, r3, #24
 80091b2:	f003 030f 	and.w	r3, r3, #15
 80091b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80091b8:	4b32      	ldr	r3, [pc, #200]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091be:	0f1b      	lsrs	r3, r3, #28
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	019a      	lsls	r2, r3, #6
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	041b      	lsls	r3, r3, #16
 80091d2:	431a      	orrs	r2, r3
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	061b      	lsls	r3, r3, #24
 80091d8:	431a      	orrs	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	071b      	lsls	r3, r3, #28
 80091de:	4929      	ldr	r1, [pc, #164]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0308 	and.w	r3, r3, #8
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d028      	beq.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80091f2:	4b24      	ldr	r3, [pc, #144]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80091f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f8:	0e1b      	lsrs	r3, r3, #24
 80091fa:	f003 030f 	and.w	r3, r3, #15
 80091fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009200:	4b20      	ldr	r3, [pc, #128]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009206:	0c1b      	lsrs	r3, r3, #16
 8009208:	f003 0303 	and.w	r3, r3, #3
 800920c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	019a      	lsls	r2, r3, #6
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	041b      	lsls	r3, r3, #16
 8009218:	431a      	orrs	r2, r3
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	061b      	lsls	r3, r3, #24
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	071b      	lsls	r3, r3, #28
 8009226:	4917      	ldr	r1, [pc, #92]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009228:	4313      	orrs	r3, r2
 800922a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800922e:	4b15      	ldr	r3, [pc, #84]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009234:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	4911      	ldr	r1, [pc, #68]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800923e:	4313      	orrs	r3, r2
 8009240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009244:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a0e      	ldr	r2, [pc, #56]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800924a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800924e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009250:	f7fa ffcc 	bl	80041ec <HAL_GetTick>
 8009254:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009256:	e008      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009258:	f7fa ffc8 	bl	80041ec <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	2b64      	cmp	r3, #100	; 0x64
 8009264:	d901      	bls.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e007      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800926a:	4b06      	ldr	r3, [pc, #24]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009276:	d1ef      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3720      	adds	r7, #32
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	40023800 	.word	0x40023800

08009288 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d101      	bne.n	800929c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e025      	b.n	80092e8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d106      	bne.n	80092b6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7f8 fc25 	bl	8001b00 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2202      	movs	r2, #2
 80092ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3304      	adds	r3, #4
 80092c6:	4619      	mov	r1, r3
 80092c8:	4610      	mov	r0, r2
 80092ca:	f000 fd43 	bl	8009d54 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	461a      	mov	r2, r3
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	f000 fd97 	bl	8009e0c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009302:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009304:	7dfb      	ldrb	r3, [r7, #23]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d101      	bne.n	800930e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800930a:	2302      	movs	r3, #2
 800930c:	e021      	b.n	8009352 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800930e:	7dfb      	ldrb	r3, [r7, #23]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d002      	beq.n	800931a <HAL_SDRAM_SendCommand+0x2a>
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	2b05      	cmp	r3, #5
 8009318:	d118      	bne.n	800934c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2202      	movs	r2, #2
 800931e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	68b9      	ldr	r1, [r7, #8]
 800932a:	4618      	mov	r0, r3
 800932c:	f000 fdd8 	bl	8009ee0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b02      	cmp	r3, #2
 8009336:	d104      	bne.n	8009342 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2205      	movs	r2, #5
 800933c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009340:	e006      	b.n	8009350 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800934a:	e001      	b.n	8009350 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e000      	b.n	8009352 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b082      	sub	sp, #8
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d101      	bne.n	8009374 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009370:	2302      	movs	r3, #2
 8009372:	e016      	b.n	80093a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b01      	cmp	r3, #1
 800937e:	d10f      	bne.n	80093a0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2202      	movs	r2, #2
 8009384:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fdca 	bl	8009f28 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	e000      	b.n	80093a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d101      	bne.n	80093bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e040      	b.n	800943e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d106      	bne.n	80093d2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7f8 fa95 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2224      	movs	r2, #36	; 0x24
 80093d6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0201 	bic.w	r2, r2, #1
 80093e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f8af 	bl	800954c <UART_SetConfig>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e022      	b.n	800943e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fb07 	bl	8009a14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009414:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009424:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f042 0201 	orr.w	r2, r2, #1
 8009434:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fb8e 	bl	8009b58 <UART_CheckIdleState>
 800943c:	4603      	mov	r3, r0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b08a      	sub	sp, #40	; 0x28
 800944a:	af02      	add	r7, sp, #8
 800944c:	60f8      	str	r0, [r7, #12]
 800944e:	60b9      	str	r1, [r7, #8]
 8009450:	603b      	str	r3, [r7, #0]
 8009452:	4613      	mov	r3, r2
 8009454:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800945a:	2b20      	cmp	r3, #32
 800945c:	d171      	bne.n	8009542 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <HAL_UART_Transmit+0x24>
 8009464:	88fb      	ldrh	r3, [r7, #6]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e06a      	b.n	8009544 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2221      	movs	r2, #33	; 0x21
 800947a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800947c:	f7fa feb6 	bl	80041ec <HAL_GetTick>
 8009480:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	88fa      	ldrh	r2, [r7, #6]
 8009486:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	88fa      	ldrh	r2, [r7, #6]
 800948e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800949a:	d108      	bne.n	80094ae <HAL_UART_Transmit+0x68>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d104      	bne.n	80094ae <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	61bb      	str	r3, [r7, #24]
 80094ac:	e003      	b.n	80094b6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094b2:	2300      	movs	r3, #0
 80094b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80094b6:	e02c      	b.n	8009512 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	2200      	movs	r2, #0
 80094c0:	2180      	movs	r1, #128	; 0x80
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fb7f 	bl	8009bc6 <UART_WaitOnFlagUntilTimeout>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e038      	b.n	8009544 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10b      	bne.n	80094f0 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	3302      	adds	r3, #2
 80094ec:	61bb      	str	r3, [r7, #24]
 80094ee:	e007      	b.n	8009500 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	781a      	ldrb	r2, [r3, #0]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	3301      	adds	r3, #1
 80094fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009506:	b29b      	uxth	r3, r3
 8009508:	3b01      	subs	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009518:	b29b      	uxth	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1cc      	bne.n	80094b8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2200      	movs	r2, #0
 8009526:	2140      	movs	r1, #64	; 0x40
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fb4c 	bl	8009bc6 <UART_WaitOnFlagUntilTimeout>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e005      	b.n	8009544 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2220      	movs	r2, #32
 800953c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	e000      	b.n	8009544 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009542:	2302      	movs	r3, #2
  }
}
 8009544:	4618      	mov	r0, r3
 8009546:	3720      	adds	r7, #32
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009554:	2300      	movs	r3, #0
 8009556:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	431a      	orrs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	431a      	orrs	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	4313      	orrs	r3, r2
 800956e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	4ba6      	ldr	r3, [pc, #664]	; (8009810 <UART_SetConfig+0x2c4>)
 8009578:	4013      	ands	r3, r2
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	6812      	ldr	r2, [r2, #0]
 800957e:	6979      	ldr	r1, [r7, #20]
 8009580:	430b      	orrs	r3, r1
 8009582:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68da      	ldr	r2, [r3, #12]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	430a      	orrs	r2, r1
 8009598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a1b      	ldr	r3, [r3, #32]
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a94      	ldr	r2, [pc, #592]	; (8009814 <UART_SetConfig+0x2c8>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d120      	bne.n	800960a <UART_SetConfig+0xbe>
 80095c8:	4b93      	ldr	r3, [pc, #588]	; (8009818 <UART_SetConfig+0x2cc>)
 80095ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ce:	f003 0303 	and.w	r3, r3, #3
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d816      	bhi.n	8009604 <UART_SetConfig+0xb8>
 80095d6:	a201      	add	r2, pc, #4	; (adr r2, 80095dc <UART_SetConfig+0x90>)
 80095d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095dc:	080095ed 	.word	0x080095ed
 80095e0:	080095f9 	.word	0x080095f9
 80095e4:	080095f3 	.word	0x080095f3
 80095e8:	080095ff 	.word	0x080095ff
 80095ec:	2301      	movs	r3, #1
 80095ee:	77fb      	strb	r3, [r7, #31]
 80095f0:	e150      	b.n	8009894 <UART_SetConfig+0x348>
 80095f2:	2302      	movs	r3, #2
 80095f4:	77fb      	strb	r3, [r7, #31]
 80095f6:	e14d      	b.n	8009894 <UART_SetConfig+0x348>
 80095f8:	2304      	movs	r3, #4
 80095fa:	77fb      	strb	r3, [r7, #31]
 80095fc:	e14a      	b.n	8009894 <UART_SetConfig+0x348>
 80095fe:	2308      	movs	r3, #8
 8009600:	77fb      	strb	r3, [r7, #31]
 8009602:	e147      	b.n	8009894 <UART_SetConfig+0x348>
 8009604:	2310      	movs	r3, #16
 8009606:	77fb      	strb	r3, [r7, #31]
 8009608:	e144      	b.n	8009894 <UART_SetConfig+0x348>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a83      	ldr	r2, [pc, #524]	; (800981c <UART_SetConfig+0x2d0>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d132      	bne.n	800967a <UART_SetConfig+0x12e>
 8009614:	4b80      	ldr	r3, [pc, #512]	; (8009818 <UART_SetConfig+0x2cc>)
 8009616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800961a:	f003 030c 	and.w	r3, r3, #12
 800961e:	2b0c      	cmp	r3, #12
 8009620:	d828      	bhi.n	8009674 <UART_SetConfig+0x128>
 8009622:	a201      	add	r2, pc, #4	; (adr r2, 8009628 <UART_SetConfig+0xdc>)
 8009624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009628:	0800965d 	.word	0x0800965d
 800962c:	08009675 	.word	0x08009675
 8009630:	08009675 	.word	0x08009675
 8009634:	08009675 	.word	0x08009675
 8009638:	08009669 	.word	0x08009669
 800963c:	08009675 	.word	0x08009675
 8009640:	08009675 	.word	0x08009675
 8009644:	08009675 	.word	0x08009675
 8009648:	08009663 	.word	0x08009663
 800964c:	08009675 	.word	0x08009675
 8009650:	08009675 	.word	0x08009675
 8009654:	08009675 	.word	0x08009675
 8009658:	0800966f 	.word	0x0800966f
 800965c:	2300      	movs	r3, #0
 800965e:	77fb      	strb	r3, [r7, #31]
 8009660:	e118      	b.n	8009894 <UART_SetConfig+0x348>
 8009662:	2302      	movs	r3, #2
 8009664:	77fb      	strb	r3, [r7, #31]
 8009666:	e115      	b.n	8009894 <UART_SetConfig+0x348>
 8009668:	2304      	movs	r3, #4
 800966a:	77fb      	strb	r3, [r7, #31]
 800966c:	e112      	b.n	8009894 <UART_SetConfig+0x348>
 800966e:	2308      	movs	r3, #8
 8009670:	77fb      	strb	r3, [r7, #31]
 8009672:	e10f      	b.n	8009894 <UART_SetConfig+0x348>
 8009674:	2310      	movs	r3, #16
 8009676:	77fb      	strb	r3, [r7, #31]
 8009678:	e10c      	b.n	8009894 <UART_SetConfig+0x348>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a68      	ldr	r2, [pc, #416]	; (8009820 <UART_SetConfig+0x2d4>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d120      	bne.n	80096c6 <UART_SetConfig+0x17a>
 8009684:	4b64      	ldr	r3, [pc, #400]	; (8009818 <UART_SetConfig+0x2cc>)
 8009686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800968a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800968e:	2b30      	cmp	r3, #48	; 0x30
 8009690:	d013      	beq.n	80096ba <UART_SetConfig+0x16e>
 8009692:	2b30      	cmp	r3, #48	; 0x30
 8009694:	d814      	bhi.n	80096c0 <UART_SetConfig+0x174>
 8009696:	2b20      	cmp	r3, #32
 8009698:	d009      	beq.n	80096ae <UART_SetConfig+0x162>
 800969a:	2b20      	cmp	r3, #32
 800969c:	d810      	bhi.n	80096c0 <UART_SetConfig+0x174>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d002      	beq.n	80096a8 <UART_SetConfig+0x15c>
 80096a2:	2b10      	cmp	r3, #16
 80096a4:	d006      	beq.n	80096b4 <UART_SetConfig+0x168>
 80096a6:	e00b      	b.n	80096c0 <UART_SetConfig+0x174>
 80096a8:	2300      	movs	r3, #0
 80096aa:	77fb      	strb	r3, [r7, #31]
 80096ac:	e0f2      	b.n	8009894 <UART_SetConfig+0x348>
 80096ae:	2302      	movs	r3, #2
 80096b0:	77fb      	strb	r3, [r7, #31]
 80096b2:	e0ef      	b.n	8009894 <UART_SetConfig+0x348>
 80096b4:	2304      	movs	r3, #4
 80096b6:	77fb      	strb	r3, [r7, #31]
 80096b8:	e0ec      	b.n	8009894 <UART_SetConfig+0x348>
 80096ba:	2308      	movs	r3, #8
 80096bc:	77fb      	strb	r3, [r7, #31]
 80096be:	e0e9      	b.n	8009894 <UART_SetConfig+0x348>
 80096c0:	2310      	movs	r3, #16
 80096c2:	77fb      	strb	r3, [r7, #31]
 80096c4:	e0e6      	b.n	8009894 <UART_SetConfig+0x348>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a56      	ldr	r2, [pc, #344]	; (8009824 <UART_SetConfig+0x2d8>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d120      	bne.n	8009712 <UART_SetConfig+0x1c6>
 80096d0:	4b51      	ldr	r3, [pc, #324]	; (8009818 <UART_SetConfig+0x2cc>)
 80096d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80096da:	2bc0      	cmp	r3, #192	; 0xc0
 80096dc:	d013      	beq.n	8009706 <UART_SetConfig+0x1ba>
 80096de:	2bc0      	cmp	r3, #192	; 0xc0
 80096e0:	d814      	bhi.n	800970c <UART_SetConfig+0x1c0>
 80096e2:	2b80      	cmp	r3, #128	; 0x80
 80096e4:	d009      	beq.n	80096fa <UART_SetConfig+0x1ae>
 80096e6:	2b80      	cmp	r3, #128	; 0x80
 80096e8:	d810      	bhi.n	800970c <UART_SetConfig+0x1c0>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d002      	beq.n	80096f4 <UART_SetConfig+0x1a8>
 80096ee:	2b40      	cmp	r3, #64	; 0x40
 80096f0:	d006      	beq.n	8009700 <UART_SetConfig+0x1b4>
 80096f2:	e00b      	b.n	800970c <UART_SetConfig+0x1c0>
 80096f4:	2300      	movs	r3, #0
 80096f6:	77fb      	strb	r3, [r7, #31]
 80096f8:	e0cc      	b.n	8009894 <UART_SetConfig+0x348>
 80096fa:	2302      	movs	r3, #2
 80096fc:	77fb      	strb	r3, [r7, #31]
 80096fe:	e0c9      	b.n	8009894 <UART_SetConfig+0x348>
 8009700:	2304      	movs	r3, #4
 8009702:	77fb      	strb	r3, [r7, #31]
 8009704:	e0c6      	b.n	8009894 <UART_SetConfig+0x348>
 8009706:	2308      	movs	r3, #8
 8009708:	77fb      	strb	r3, [r7, #31]
 800970a:	e0c3      	b.n	8009894 <UART_SetConfig+0x348>
 800970c:	2310      	movs	r3, #16
 800970e:	77fb      	strb	r3, [r7, #31]
 8009710:	e0c0      	b.n	8009894 <UART_SetConfig+0x348>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a44      	ldr	r2, [pc, #272]	; (8009828 <UART_SetConfig+0x2dc>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d125      	bne.n	8009768 <UART_SetConfig+0x21c>
 800971c:	4b3e      	ldr	r3, [pc, #248]	; (8009818 <UART_SetConfig+0x2cc>)
 800971e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800972a:	d017      	beq.n	800975c <UART_SetConfig+0x210>
 800972c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009730:	d817      	bhi.n	8009762 <UART_SetConfig+0x216>
 8009732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009736:	d00b      	beq.n	8009750 <UART_SetConfig+0x204>
 8009738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800973c:	d811      	bhi.n	8009762 <UART_SetConfig+0x216>
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <UART_SetConfig+0x1fe>
 8009742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009746:	d006      	beq.n	8009756 <UART_SetConfig+0x20a>
 8009748:	e00b      	b.n	8009762 <UART_SetConfig+0x216>
 800974a:	2300      	movs	r3, #0
 800974c:	77fb      	strb	r3, [r7, #31]
 800974e:	e0a1      	b.n	8009894 <UART_SetConfig+0x348>
 8009750:	2302      	movs	r3, #2
 8009752:	77fb      	strb	r3, [r7, #31]
 8009754:	e09e      	b.n	8009894 <UART_SetConfig+0x348>
 8009756:	2304      	movs	r3, #4
 8009758:	77fb      	strb	r3, [r7, #31]
 800975a:	e09b      	b.n	8009894 <UART_SetConfig+0x348>
 800975c:	2308      	movs	r3, #8
 800975e:	77fb      	strb	r3, [r7, #31]
 8009760:	e098      	b.n	8009894 <UART_SetConfig+0x348>
 8009762:	2310      	movs	r3, #16
 8009764:	77fb      	strb	r3, [r7, #31]
 8009766:	e095      	b.n	8009894 <UART_SetConfig+0x348>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a2f      	ldr	r2, [pc, #188]	; (800982c <UART_SetConfig+0x2e0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d125      	bne.n	80097be <UART_SetConfig+0x272>
 8009772:	4b29      	ldr	r3, [pc, #164]	; (8009818 <UART_SetConfig+0x2cc>)
 8009774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009778:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800977c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009780:	d017      	beq.n	80097b2 <UART_SetConfig+0x266>
 8009782:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009786:	d817      	bhi.n	80097b8 <UART_SetConfig+0x26c>
 8009788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800978c:	d00b      	beq.n	80097a6 <UART_SetConfig+0x25a>
 800978e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009792:	d811      	bhi.n	80097b8 <UART_SetConfig+0x26c>
 8009794:	2b00      	cmp	r3, #0
 8009796:	d003      	beq.n	80097a0 <UART_SetConfig+0x254>
 8009798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800979c:	d006      	beq.n	80097ac <UART_SetConfig+0x260>
 800979e:	e00b      	b.n	80097b8 <UART_SetConfig+0x26c>
 80097a0:	2301      	movs	r3, #1
 80097a2:	77fb      	strb	r3, [r7, #31]
 80097a4:	e076      	b.n	8009894 <UART_SetConfig+0x348>
 80097a6:	2302      	movs	r3, #2
 80097a8:	77fb      	strb	r3, [r7, #31]
 80097aa:	e073      	b.n	8009894 <UART_SetConfig+0x348>
 80097ac:	2304      	movs	r3, #4
 80097ae:	77fb      	strb	r3, [r7, #31]
 80097b0:	e070      	b.n	8009894 <UART_SetConfig+0x348>
 80097b2:	2308      	movs	r3, #8
 80097b4:	77fb      	strb	r3, [r7, #31]
 80097b6:	e06d      	b.n	8009894 <UART_SetConfig+0x348>
 80097b8:	2310      	movs	r3, #16
 80097ba:	77fb      	strb	r3, [r7, #31]
 80097bc:	e06a      	b.n	8009894 <UART_SetConfig+0x348>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a1b      	ldr	r2, [pc, #108]	; (8009830 <UART_SetConfig+0x2e4>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d138      	bne.n	800983a <UART_SetConfig+0x2ee>
 80097c8:	4b13      	ldr	r3, [pc, #76]	; (8009818 <UART_SetConfig+0x2cc>)
 80097ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80097d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097d6:	d017      	beq.n	8009808 <UART_SetConfig+0x2bc>
 80097d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097dc:	d82a      	bhi.n	8009834 <UART_SetConfig+0x2e8>
 80097de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e2:	d00b      	beq.n	80097fc <UART_SetConfig+0x2b0>
 80097e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e8:	d824      	bhi.n	8009834 <UART_SetConfig+0x2e8>
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <UART_SetConfig+0x2aa>
 80097ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097f2:	d006      	beq.n	8009802 <UART_SetConfig+0x2b6>
 80097f4:	e01e      	b.n	8009834 <UART_SetConfig+0x2e8>
 80097f6:	2300      	movs	r3, #0
 80097f8:	77fb      	strb	r3, [r7, #31]
 80097fa:	e04b      	b.n	8009894 <UART_SetConfig+0x348>
 80097fc:	2302      	movs	r3, #2
 80097fe:	77fb      	strb	r3, [r7, #31]
 8009800:	e048      	b.n	8009894 <UART_SetConfig+0x348>
 8009802:	2304      	movs	r3, #4
 8009804:	77fb      	strb	r3, [r7, #31]
 8009806:	e045      	b.n	8009894 <UART_SetConfig+0x348>
 8009808:	2308      	movs	r3, #8
 800980a:	77fb      	strb	r3, [r7, #31]
 800980c:	e042      	b.n	8009894 <UART_SetConfig+0x348>
 800980e:	bf00      	nop
 8009810:	efff69f3 	.word	0xefff69f3
 8009814:	40011000 	.word	0x40011000
 8009818:	40023800 	.word	0x40023800
 800981c:	40004400 	.word	0x40004400
 8009820:	40004800 	.word	0x40004800
 8009824:	40004c00 	.word	0x40004c00
 8009828:	40005000 	.word	0x40005000
 800982c:	40011400 	.word	0x40011400
 8009830:	40007800 	.word	0x40007800
 8009834:	2310      	movs	r3, #16
 8009836:	77fb      	strb	r3, [r7, #31]
 8009838:	e02c      	b.n	8009894 <UART_SetConfig+0x348>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a72      	ldr	r2, [pc, #456]	; (8009a08 <UART_SetConfig+0x4bc>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d125      	bne.n	8009890 <UART_SetConfig+0x344>
 8009844:	4b71      	ldr	r3, [pc, #452]	; (8009a0c <UART_SetConfig+0x4c0>)
 8009846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800984a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800984e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009852:	d017      	beq.n	8009884 <UART_SetConfig+0x338>
 8009854:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009858:	d817      	bhi.n	800988a <UART_SetConfig+0x33e>
 800985a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800985e:	d00b      	beq.n	8009878 <UART_SetConfig+0x32c>
 8009860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009864:	d811      	bhi.n	800988a <UART_SetConfig+0x33e>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d003      	beq.n	8009872 <UART_SetConfig+0x326>
 800986a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800986e:	d006      	beq.n	800987e <UART_SetConfig+0x332>
 8009870:	e00b      	b.n	800988a <UART_SetConfig+0x33e>
 8009872:	2300      	movs	r3, #0
 8009874:	77fb      	strb	r3, [r7, #31]
 8009876:	e00d      	b.n	8009894 <UART_SetConfig+0x348>
 8009878:	2302      	movs	r3, #2
 800987a:	77fb      	strb	r3, [r7, #31]
 800987c:	e00a      	b.n	8009894 <UART_SetConfig+0x348>
 800987e:	2304      	movs	r3, #4
 8009880:	77fb      	strb	r3, [r7, #31]
 8009882:	e007      	b.n	8009894 <UART_SetConfig+0x348>
 8009884:	2308      	movs	r3, #8
 8009886:	77fb      	strb	r3, [r7, #31]
 8009888:	e004      	b.n	8009894 <UART_SetConfig+0x348>
 800988a:	2310      	movs	r3, #16
 800988c:	77fb      	strb	r3, [r7, #31]
 800988e:	e001      	b.n	8009894 <UART_SetConfig+0x348>
 8009890:	2310      	movs	r3, #16
 8009892:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	69db      	ldr	r3, [r3, #28]
 8009898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800989c:	d15b      	bne.n	8009956 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800989e:	7ffb      	ldrb	r3, [r7, #31]
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d828      	bhi.n	80098f6 <UART_SetConfig+0x3aa>
 80098a4:	a201      	add	r2, pc, #4	; (adr r2, 80098ac <UART_SetConfig+0x360>)
 80098a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098aa:	bf00      	nop
 80098ac:	080098d1 	.word	0x080098d1
 80098b0:	080098d9 	.word	0x080098d9
 80098b4:	080098e1 	.word	0x080098e1
 80098b8:	080098f7 	.word	0x080098f7
 80098bc:	080098e7 	.word	0x080098e7
 80098c0:	080098f7 	.word	0x080098f7
 80098c4:	080098f7 	.word	0x080098f7
 80098c8:	080098f7 	.word	0x080098f7
 80098cc:	080098ef 	.word	0x080098ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098d0:	f7ff f8c2 	bl	8008a58 <HAL_RCC_GetPCLK1Freq>
 80098d4:	61b8      	str	r0, [r7, #24]
        break;
 80098d6:	e013      	b.n	8009900 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098d8:	f7ff f8d2 	bl	8008a80 <HAL_RCC_GetPCLK2Freq>
 80098dc:	61b8      	str	r0, [r7, #24]
        break;
 80098de:	e00f      	b.n	8009900 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098e0:	4b4b      	ldr	r3, [pc, #300]	; (8009a10 <UART_SetConfig+0x4c4>)
 80098e2:	61bb      	str	r3, [r7, #24]
        break;
 80098e4:	e00c      	b.n	8009900 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098e6:	f7fe ffe5 	bl	80088b4 <HAL_RCC_GetSysClockFreq>
 80098ea:	61b8      	str	r0, [r7, #24]
        break;
 80098ec:	e008      	b.n	8009900 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098f2:	61bb      	str	r3, [r7, #24]
        break;
 80098f4:	e004      	b.n	8009900 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	77bb      	strb	r3, [r7, #30]
        break;
 80098fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d074      	beq.n	80099f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	005a      	lsls	r2, r3, #1
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	085b      	lsrs	r3, r3, #1
 8009910:	441a      	add	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	fbb2 f3f3 	udiv	r3, r2, r3
 800991a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	2b0f      	cmp	r3, #15
 8009920:	d916      	bls.n	8009950 <UART_SetConfig+0x404>
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009928:	d212      	bcs.n	8009950 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	b29b      	uxth	r3, r3
 800992e:	f023 030f 	bic.w	r3, r3, #15
 8009932:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	085b      	lsrs	r3, r3, #1
 8009938:	b29b      	uxth	r3, r3
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	b29a      	uxth	r2, r3
 8009940:	89fb      	ldrh	r3, [r7, #14]
 8009942:	4313      	orrs	r3, r2
 8009944:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	89fa      	ldrh	r2, [r7, #14]
 800994c:	60da      	str	r2, [r3, #12]
 800994e:	e04f      	b.n	80099f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	77bb      	strb	r3, [r7, #30]
 8009954:	e04c      	b.n	80099f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009956:	7ffb      	ldrb	r3, [r7, #31]
 8009958:	2b08      	cmp	r3, #8
 800995a:	d828      	bhi.n	80099ae <UART_SetConfig+0x462>
 800995c:	a201      	add	r2, pc, #4	; (adr r2, 8009964 <UART_SetConfig+0x418>)
 800995e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009962:	bf00      	nop
 8009964:	08009989 	.word	0x08009989
 8009968:	08009991 	.word	0x08009991
 800996c:	08009999 	.word	0x08009999
 8009970:	080099af 	.word	0x080099af
 8009974:	0800999f 	.word	0x0800999f
 8009978:	080099af 	.word	0x080099af
 800997c:	080099af 	.word	0x080099af
 8009980:	080099af 	.word	0x080099af
 8009984:	080099a7 	.word	0x080099a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009988:	f7ff f866 	bl	8008a58 <HAL_RCC_GetPCLK1Freq>
 800998c:	61b8      	str	r0, [r7, #24]
        break;
 800998e:	e013      	b.n	80099b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009990:	f7ff f876 	bl	8008a80 <HAL_RCC_GetPCLK2Freq>
 8009994:	61b8      	str	r0, [r7, #24]
        break;
 8009996:	e00f      	b.n	80099b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009998:	4b1d      	ldr	r3, [pc, #116]	; (8009a10 <UART_SetConfig+0x4c4>)
 800999a:	61bb      	str	r3, [r7, #24]
        break;
 800999c:	e00c      	b.n	80099b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800999e:	f7fe ff89 	bl	80088b4 <HAL_RCC_GetSysClockFreq>
 80099a2:	61b8      	str	r0, [r7, #24]
        break;
 80099a4:	e008      	b.n	80099b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099aa:	61bb      	str	r3, [r7, #24]
        break;
 80099ac:	e004      	b.n	80099b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80099ae:	2300      	movs	r3, #0
 80099b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	77bb      	strb	r3, [r7, #30]
        break;
 80099b6:	bf00      	nop
    }

    if (pclk != 0U)
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d018      	beq.n	80099f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	085a      	lsrs	r2, r3, #1
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	441a      	add	r2, r3
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2b0f      	cmp	r3, #15
 80099d6:	d909      	bls.n	80099ec <UART_SetConfig+0x4a0>
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099de:	d205      	bcs.n	80099ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	60da      	str	r2, [r3, #12]
 80099ea:	e001      	b.n	80099f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80099fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3720      	adds	r7, #32
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	40007c00 	.word	0x40007c00
 8009a0c:	40023800 	.word	0x40023800
 8009a10:	00f42400 	.word	0x00f42400

08009a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00a      	beq.n	8009a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	f003 0302 	and.w	r3, r3, #2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00a      	beq.n	8009a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00a      	beq.n	8009a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	f003 0308 	and.w	r3, r3, #8
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	f003 0310 	and.w	r3, r3, #16
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00a      	beq.n	8009ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	f003 0320 	and.w	r3, r3, #32
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01a      	beq.n	8009b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b12:	d10a      	bne.n	8009b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	605a      	str	r2, [r3, #4]
  }
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af02      	add	r7, sp, #8
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b68:	f7fa fb40 	bl	80041ec <HAL_GetTick>
 8009b6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 0308 	and.w	r3, r3, #8
 8009b78:	2b08      	cmp	r3, #8
 8009b7a:	d10e      	bne.n	8009b9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f81b 	bl	8009bc6 <UART_WaitOnFlagUntilTimeout>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e011      	b.n	8009bbe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2220      	movs	r2, #32
 8009b9e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2220      	movs	r2, #32
 8009ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b09c      	sub	sp, #112	; 0x70
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	60f8      	str	r0, [r7, #12]
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	603b      	str	r3, [r7, #0]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bd6:	e0a7      	b.n	8009d28 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bde:	f000 80a3 	beq.w	8009d28 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009be2:	f7fa fb03 	bl	80041ec <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d302      	bcc.n	8009bf8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d13f      	bne.n	8009c78 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c00:	e853 3f00 	ldrex	r3, [r3]
 8009c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c0c:	667b      	str	r3, [r7, #100]	; 0x64
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c18:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e6      	bne.n	8009bf8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	3308      	adds	r3, #8
 8009c30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3c:	f023 0301 	bic.w	r3, r3, #1
 8009c40:	663b      	str	r3, [r7, #96]	; 0x60
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3308      	adds	r3, #8
 8009c48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c52:	e841 2300 	strex	r3, r2, [r1]
 8009c56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1e5      	bne.n	8009c2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2220      	movs	r2, #32
 8009c62:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2220      	movs	r2, #32
 8009c68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e068      	b.n	8009d4a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d050      	beq.n	8009d28 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c94:	d148      	bne.n	8009d28 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c9e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca8:	e853 3f00 	ldrex	r3, [r3]
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8009cc0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cc6:	e841 2300 	strex	r3, r2, [r1]
 8009cca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d1e6      	bne.n	8009ca0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3308      	adds	r3, #8
 8009cd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	e853 3f00 	ldrex	r3, [r3]
 8009ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	f023 0301 	bic.w	r3, r3, #1
 8009ce8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3308      	adds	r3, #8
 8009cf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cf2:	623a      	str	r2, [r7, #32]
 8009cf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf6:	69f9      	ldr	r1, [r7, #28]
 8009cf8:	6a3a      	ldr	r2, [r7, #32]
 8009cfa:	e841 2300 	strex	r3, r2, [r1]
 8009cfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e5      	bne.n	8009cd2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2220      	movs	r2, #32
 8009d0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2220      	movs	r2, #32
 8009d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2220      	movs	r2, #32
 8009d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e010      	b.n	8009d4a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	69da      	ldr	r2, [r3, #28]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	4013      	ands	r3, r2
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	bf0c      	ite	eq
 8009d38:	2301      	moveq	r3, #1
 8009d3a:	2300      	movne	r3, #0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	461a      	mov	r2, r3
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	f43f af48 	beq.w	8009bd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3770      	adds	r7, #112	; 0x70
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d121      	bne.n	8009daa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	4b27      	ldr	r3, [pc, #156]	; (8009e08 <FMC_SDRAM_Init+0xb4>)
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	6851      	ldr	r1, [r2, #4]
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	6892      	ldr	r2, [r2, #8]
 8009d76:	4311      	orrs	r1, r2
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	68d2      	ldr	r2, [r2, #12]
 8009d7c:	4311      	orrs	r1, r2
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	6912      	ldr	r2, [r2, #16]
 8009d82:	4311      	orrs	r1, r2
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	6952      	ldr	r2, [r2, #20]
 8009d88:	4311      	orrs	r1, r2
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	6992      	ldr	r2, [r2, #24]
 8009d8e:	4311      	orrs	r1, r2
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	69d2      	ldr	r2, [r2, #28]
 8009d94:	4311      	orrs	r1, r2
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	6a12      	ldr	r2, [r2, #32]
 8009d9a:	4311      	orrs	r1, r2
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009da0:	430a      	orrs	r2, r1
 8009da2:	431a      	orrs	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	e026      	b.n	8009df8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	69d9      	ldr	r1, [r3, #28]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	4319      	orrs	r1, r3
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	430b      	orrs	r3, r1
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	4b0e      	ldr	r3, [pc, #56]	; (8009e08 <FMC_SDRAM_Init+0xb4>)
 8009dce:	4013      	ands	r3, r2
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	6851      	ldr	r1, [r2, #4]
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	6892      	ldr	r2, [r2, #8]
 8009dd8:	4311      	orrs	r1, r2
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	68d2      	ldr	r2, [r2, #12]
 8009dde:	4311      	orrs	r1, r2
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	6912      	ldr	r2, [r2, #16]
 8009de4:	4311      	orrs	r1, r2
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	6952      	ldr	r2, [r2, #20]
 8009dea:	4311      	orrs	r1, r2
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	6992      	ldr	r2, [r2, #24]
 8009df0:	430a      	orrs	r2, r1
 8009df2:	431a      	orrs	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	ffff8000 	.word	0xffff8000

08009e0c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d128      	bne.n	8009e70 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	1e59      	subs	r1, r3, #1
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	011b      	lsls	r3, r3, #4
 8009e34:	4319      	orrs	r1, r3
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	021b      	lsls	r3, r3, #8
 8009e3e:	4319      	orrs	r1, r3
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	3b01      	subs	r3, #1
 8009e46:	031b      	lsls	r3, r3, #12
 8009e48:	4319      	orrs	r1, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	041b      	lsls	r3, r3, #16
 8009e52:	4319      	orrs	r1, r3
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	695b      	ldr	r3, [r3, #20]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	051b      	lsls	r3, r3, #20
 8009e5c:	4319      	orrs	r1, r3
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	061b      	lsls	r3, r3, #24
 8009e66:	430b      	orrs	r3, r1
 8009e68:	431a      	orrs	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	609a      	str	r2, [r3, #8]
 8009e6e:	e02d      	b.n	8009ecc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	4b19      	ldr	r3, [pc, #100]	; (8009edc <FMC_SDRAM_Timing_Init+0xd0>)
 8009e76:	4013      	ands	r3, r2
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	68d2      	ldr	r2, [r2, #12]
 8009e7c:	3a01      	subs	r2, #1
 8009e7e:	0311      	lsls	r1, r2, #12
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	6952      	ldr	r2, [r2, #20]
 8009e84:	3a01      	subs	r2, #1
 8009e86:	0512      	lsls	r2, r2, #20
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	1e59      	subs	r1, r3, #1
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	011b      	lsls	r3, r3, #4
 8009ea6:	4319      	orrs	r1, r3
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	021b      	lsls	r3, r3, #8
 8009eb0:	4319      	orrs	r1, r3
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	041b      	lsls	r3, r3, #16
 8009eba:	4319      	orrs	r1, r3
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	061b      	lsls	r3, r3, #24
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	ff0f0fff 	.word	0xff0f0fff

08009ee0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	691a      	ldr	r2, [r3, #16]
 8009ef0:	4b0c      	ldr	r3, [pc, #48]	; (8009f24 <FMC_SDRAM_SendCommand+0x44>)
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	6811      	ldr	r1, [r2, #0]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	6852      	ldr	r2, [r2, #4]
 8009efc:	4311      	orrs	r1, r2
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	6892      	ldr	r2, [r2, #8]
 8009f02:	3a01      	subs	r2, #1
 8009f04:	0152      	lsls	r2, r2, #5
 8009f06:	4311      	orrs	r1, r2
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	68d2      	ldr	r2, [r2, #12]
 8009f0c:	0252      	lsls	r2, r2, #9
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	431a      	orrs	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3714      	adds	r7, #20
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr
 8009f24:	ffc00000 	.word	0xffc00000

08009f28 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	695a      	ldr	r2, [r3, #20]
 8009f36:	4b07      	ldr	r3, [pc, #28]	; (8009f54 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009f38:	4013      	ands	r3, r2
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	0052      	lsls	r2, r2, #1
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	ffffc001 	.word	0xffffc001

08009f58 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009f5e:	4b8d      	ldr	r3, [pc, #564]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009f60:	22c0      	movs	r2, #192	; 0xc0
 8009f62:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009f64:	4b8b      	ldr	r3, [pc, #556]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009f66:	22a8      	movs	r2, #168	; 0xa8
 8009f68:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 69;
 8009f6a:	4b8a      	ldr	r3, [pc, #552]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009f6c:	2245      	movs	r2, #69	; 0x45
 8009f6e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8009f70:	4b88      	ldr	r3, [pc, #544]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009f72:	220a      	movs	r2, #10
 8009f74:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009f76:	4b88      	ldr	r3, [pc, #544]	; (800a198 <MX_LWIP_Init+0x240>)
 8009f78:	22ff      	movs	r2, #255	; 0xff
 8009f7a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009f7c:	4b86      	ldr	r3, [pc, #536]	; (800a198 <MX_LWIP_Init+0x240>)
 8009f7e:	22ff      	movs	r2, #255	; 0xff
 8009f80:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009f82:	4b85      	ldr	r3, [pc, #532]	; (800a198 <MX_LWIP_Init+0x240>)
 8009f84:	22ff      	movs	r2, #255	; 0xff
 8009f86:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009f88:	4b83      	ldr	r3, [pc, #524]	; (800a198 <MX_LWIP_Init+0x240>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8009f8e:	4b83      	ldr	r3, [pc, #524]	; (800a19c <MX_LWIP_Init+0x244>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8009f94:	4b81      	ldr	r3, [pc, #516]	; (800a19c <MX_LWIP_Init+0x244>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009f9a:	4b80      	ldr	r3, [pc, #512]	; (800a19c <MX_LWIP_Init+0x244>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8009fa0:	4b7e      	ldr	r3, [pc, #504]	; (800a19c <MX_LWIP_Init+0x244>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009fa6:	f000 fd1d 	bl	800a9e4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009faa:	4b7a      	ldr	r3, [pc, #488]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	061a      	lsls	r2, r3, #24
 8009fb0:	4b78      	ldr	r3, [pc, #480]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009fb2:	785b      	ldrb	r3, [r3, #1]
 8009fb4:	041b      	lsls	r3, r3, #16
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	4b76      	ldr	r3, [pc, #472]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009fba:	789b      	ldrb	r3, [r3, #2]
 8009fbc:	021b      	lsls	r3, r3, #8
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	4a74      	ldr	r2, [pc, #464]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009fc2:	78d2      	ldrb	r2, [r2, #3]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	061a      	lsls	r2, r3, #24
 8009fc8:	4b72      	ldr	r3, [pc, #456]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	0619      	lsls	r1, r3, #24
 8009fce:	4b71      	ldr	r3, [pc, #452]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009fd0:	785b      	ldrb	r3, [r3, #1]
 8009fd2:	041b      	lsls	r3, r3, #16
 8009fd4:	4319      	orrs	r1, r3
 8009fd6:	4b6f      	ldr	r3, [pc, #444]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009fd8:	789b      	ldrb	r3, [r3, #2]
 8009fda:	021b      	lsls	r3, r3, #8
 8009fdc:	430b      	orrs	r3, r1
 8009fde:	496d      	ldr	r1, [pc, #436]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009fe0:	78c9      	ldrb	r1, [r1, #3]
 8009fe2:	430b      	orrs	r3, r1
 8009fe4:	021b      	lsls	r3, r3, #8
 8009fe6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fea:	431a      	orrs	r2, r3
 8009fec:	4b69      	ldr	r3, [pc, #420]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	0619      	lsls	r1, r3, #24
 8009ff2:	4b68      	ldr	r3, [pc, #416]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009ff4:	785b      	ldrb	r3, [r3, #1]
 8009ff6:	041b      	lsls	r3, r3, #16
 8009ff8:	4319      	orrs	r1, r3
 8009ffa:	4b66      	ldr	r3, [pc, #408]	; (800a194 <MX_LWIP_Init+0x23c>)
 8009ffc:	789b      	ldrb	r3, [r3, #2]
 8009ffe:	021b      	lsls	r3, r3, #8
 800a000:	430b      	orrs	r3, r1
 800a002:	4964      	ldr	r1, [pc, #400]	; (800a194 <MX_LWIP_Init+0x23c>)
 800a004:	78c9      	ldrb	r1, [r1, #3]
 800a006:	430b      	orrs	r3, r1
 800a008:	0a1b      	lsrs	r3, r3, #8
 800a00a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a00e:	431a      	orrs	r2, r3
 800a010:	4b60      	ldr	r3, [pc, #384]	; (800a194 <MX_LWIP_Init+0x23c>)
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	0619      	lsls	r1, r3, #24
 800a016:	4b5f      	ldr	r3, [pc, #380]	; (800a194 <MX_LWIP_Init+0x23c>)
 800a018:	785b      	ldrb	r3, [r3, #1]
 800a01a:	041b      	lsls	r3, r3, #16
 800a01c:	4319      	orrs	r1, r3
 800a01e:	4b5d      	ldr	r3, [pc, #372]	; (800a194 <MX_LWIP_Init+0x23c>)
 800a020:	789b      	ldrb	r3, [r3, #2]
 800a022:	021b      	lsls	r3, r3, #8
 800a024:	430b      	orrs	r3, r1
 800a026:	495b      	ldr	r1, [pc, #364]	; (800a194 <MX_LWIP_Init+0x23c>)
 800a028:	78c9      	ldrb	r1, [r1, #3]
 800a02a:	430b      	orrs	r3, r1
 800a02c:	0e1b      	lsrs	r3, r3, #24
 800a02e:	4313      	orrs	r3, r2
 800a030:	4a5b      	ldr	r2, [pc, #364]	; (800a1a0 <MX_LWIP_Init+0x248>)
 800a032:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a034:	4b58      	ldr	r3, [pc, #352]	; (800a198 <MX_LWIP_Init+0x240>)
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	061a      	lsls	r2, r3, #24
 800a03a:	4b57      	ldr	r3, [pc, #348]	; (800a198 <MX_LWIP_Init+0x240>)
 800a03c:	785b      	ldrb	r3, [r3, #1]
 800a03e:	041b      	lsls	r3, r3, #16
 800a040:	431a      	orrs	r2, r3
 800a042:	4b55      	ldr	r3, [pc, #340]	; (800a198 <MX_LWIP_Init+0x240>)
 800a044:	789b      	ldrb	r3, [r3, #2]
 800a046:	021b      	lsls	r3, r3, #8
 800a048:	4313      	orrs	r3, r2
 800a04a:	4a53      	ldr	r2, [pc, #332]	; (800a198 <MX_LWIP_Init+0x240>)
 800a04c:	78d2      	ldrb	r2, [r2, #3]
 800a04e:	4313      	orrs	r3, r2
 800a050:	061a      	lsls	r2, r3, #24
 800a052:	4b51      	ldr	r3, [pc, #324]	; (800a198 <MX_LWIP_Init+0x240>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	0619      	lsls	r1, r3, #24
 800a058:	4b4f      	ldr	r3, [pc, #316]	; (800a198 <MX_LWIP_Init+0x240>)
 800a05a:	785b      	ldrb	r3, [r3, #1]
 800a05c:	041b      	lsls	r3, r3, #16
 800a05e:	4319      	orrs	r1, r3
 800a060:	4b4d      	ldr	r3, [pc, #308]	; (800a198 <MX_LWIP_Init+0x240>)
 800a062:	789b      	ldrb	r3, [r3, #2]
 800a064:	021b      	lsls	r3, r3, #8
 800a066:	430b      	orrs	r3, r1
 800a068:	494b      	ldr	r1, [pc, #300]	; (800a198 <MX_LWIP_Init+0x240>)
 800a06a:	78c9      	ldrb	r1, [r1, #3]
 800a06c:	430b      	orrs	r3, r1
 800a06e:	021b      	lsls	r3, r3, #8
 800a070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a074:	431a      	orrs	r2, r3
 800a076:	4b48      	ldr	r3, [pc, #288]	; (800a198 <MX_LWIP_Init+0x240>)
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	0619      	lsls	r1, r3, #24
 800a07c:	4b46      	ldr	r3, [pc, #280]	; (800a198 <MX_LWIP_Init+0x240>)
 800a07e:	785b      	ldrb	r3, [r3, #1]
 800a080:	041b      	lsls	r3, r3, #16
 800a082:	4319      	orrs	r1, r3
 800a084:	4b44      	ldr	r3, [pc, #272]	; (800a198 <MX_LWIP_Init+0x240>)
 800a086:	789b      	ldrb	r3, [r3, #2]
 800a088:	021b      	lsls	r3, r3, #8
 800a08a:	430b      	orrs	r3, r1
 800a08c:	4942      	ldr	r1, [pc, #264]	; (800a198 <MX_LWIP_Init+0x240>)
 800a08e:	78c9      	ldrb	r1, [r1, #3]
 800a090:	430b      	orrs	r3, r1
 800a092:	0a1b      	lsrs	r3, r3, #8
 800a094:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a098:	431a      	orrs	r2, r3
 800a09a:	4b3f      	ldr	r3, [pc, #252]	; (800a198 <MX_LWIP_Init+0x240>)
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	0619      	lsls	r1, r3, #24
 800a0a0:	4b3d      	ldr	r3, [pc, #244]	; (800a198 <MX_LWIP_Init+0x240>)
 800a0a2:	785b      	ldrb	r3, [r3, #1]
 800a0a4:	041b      	lsls	r3, r3, #16
 800a0a6:	4319      	orrs	r1, r3
 800a0a8:	4b3b      	ldr	r3, [pc, #236]	; (800a198 <MX_LWIP_Init+0x240>)
 800a0aa:	789b      	ldrb	r3, [r3, #2]
 800a0ac:	021b      	lsls	r3, r3, #8
 800a0ae:	430b      	orrs	r3, r1
 800a0b0:	4939      	ldr	r1, [pc, #228]	; (800a198 <MX_LWIP_Init+0x240>)
 800a0b2:	78c9      	ldrb	r1, [r1, #3]
 800a0b4:	430b      	orrs	r3, r1
 800a0b6:	0e1b      	lsrs	r3, r3, #24
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	4a3a      	ldr	r2, [pc, #232]	; (800a1a4 <MX_LWIP_Init+0x24c>)
 800a0bc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a0be:	4b37      	ldr	r3, [pc, #220]	; (800a19c <MX_LWIP_Init+0x244>)
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	061a      	lsls	r2, r3, #24
 800a0c4:	4b35      	ldr	r3, [pc, #212]	; (800a19c <MX_LWIP_Init+0x244>)
 800a0c6:	785b      	ldrb	r3, [r3, #1]
 800a0c8:	041b      	lsls	r3, r3, #16
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	4b33      	ldr	r3, [pc, #204]	; (800a19c <MX_LWIP_Init+0x244>)
 800a0ce:	789b      	ldrb	r3, [r3, #2]
 800a0d0:	021b      	lsls	r3, r3, #8
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	4a31      	ldr	r2, [pc, #196]	; (800a19c <MX_LWIP_Init+0x244>)
 800a0d6:	78d2      	ldrb	r2, [r2, #3]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	061a      	lsls	r2, r3, #24
 800a0dc:	4b2f      	ldr	r3, [pc, #188]	; (800a19c <MX_LWIP_Init+0x244>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	0619      	lsls	r1, r3, #24
 800a0e2:	4b2e      	ldr	r3, [pc, #184]	; (800a19c <MX_LWIP_Init+0x244>)
 800a0e4:	785b      	ldrb	r3, [r3, #1]
 800a0e6:	041b      	lsls	r3, r3, #16
 800a0e8:	4319      	orrs	r1, r3
 800a0ea:	4b2c      	ldr	r3, [pc, #176]	; (800a19c <MX_LWIP_Init+0x244>)
 800a0ec:	789b      	ldrb	r3, [r3, #2]
 800a0ee:	021b      	lsls	r3, r3, #8
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	492a      	ldr	r1, [pc, #168]	; (800a19c <MX_LWIP_Init+0x244>)
 800a0f4:	78c9      	ldrb	r1, [r1, #3]
 800a0f6:	430b      	orrs	r3, r1
 800a0f8:	021b      	lsls	r3, r3, #8
 800a0fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0fe:	431a      	orrs	r2, r3
 800a100:	4b26      	ldr	r3, [pc, #152]	; (800a19c <MX_LWIP_Init+0x244>)
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	0619      	lsls	r1, r3, #24
 800a106:	4b25      	ldr	r3, [pc, #148]	; (800a19c <MX_LWIP_Init+0x244>)
 800a108:	785b      	ldrb	r3, [r3, #1]
 800a10a:	041b      	lsls	r3, r3, #16
 800a10c:	4319      	orrs	r1, r3
 800a10e:	4b23      	ldr	r3, [pc, #140]	; (800a19c <MX_LWIP_Init+0x244>)
 800a110:	789b      	ldrb	r3, [r3, #2]
 800a112:	021b      	lsls	r3, r3, #8
 800a114:	430b      	orrs	r3, r1
 800a116:	4921      	ldr	r1, [pc, #132]	; (800a19c <MX_LWIP_Init+0x244>)
 800a118:	78c9      	ldrb	r1, [r1, #3]
 800a11a:	430b      	orrs	r3, r1
 800a11c:	0a1b      	lsrs	r3, r3, #8
 800a11e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a122:	431a      	orrs	r2, r3
 800a124:	4b1d      	ldr	r3, [pc, #116]	; (800a19c <MX_LWIP_Init+0x244>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	0619      	lsls	r1, r3, #24
 800a12a:	4b1c      	ldr	r3, [pc, #112]	; (800a19c <MX_LWIP_Init+0x244>)
 800a12c:	785b      	ldrb	r3, [r3, #1]
 800a12e:	041b      	lsls	r3, r3, #16
 800a130:	4319      	orrs	r1, r3
 800a132:	4b1a      	ldr	r3, [pc, #104]	; (800a19c <MX_LWIP_Init+0x244>)
 800a134:	789b      	ldrb	r3, [r3, #2]
 800a136:	021b      	lsls	r3, r3, #8
 800a138:	430b      	orrs	r3, r1
 800a13a:	4918      	ldr	r1, [pc, #96]	; (800a19c <MX_LWIP_Init+0x244>)
 800a13c:	78c9      	ldrb	r1, [r1, #3]
 800a13e:	430b      	orrs	r3, r1
 800a140:	0e1b      	lsrs	r3, r3, #24
 800a142:	4313      	orrs	r3, r2
 800a144:	4a18      	ldr	r2, [pc, #96]	; (800a1a8 <MX_LWIP_Init+0x250>)
 800a146:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a148:	4b18      	ldr	r3, [pc, #96]	; (800a1ac <MX_LWIP_Init+0x254>)
 800a14a:	9302      	str	r3, [sp, #8]
 800a14c:	4b18      	ldr	r3, [pc, #96]	; (800a1b0 <MX_LWIP_Init+0x258>)
 800a14e:	9301      	str	r3, [sp, #4]
 800a150:	2300      	movs	r3, #0
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <MX_LWIP_Init+0x250>)
 800a156:	4a13      	ldr	r2, [pc, #76]	; (800a1a4 <MX_LWIP_Init+0x24c>)
 800a158:	4911      	ldr	r1, [pc, #68]	; (800a1a0 <MX_LWIP_Init+0x248>)
 800a15a:	4816      	ldr	r0, [pc, #88]	; (800a1b4 <MX_LWIP_Init+0x25c>)
 800a15c:	f001 f92e 	bl	800b3bc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a160:	4814      	ldr	r0, [pc, #80]	; (800a1b4 <MX_LWIP_Init+0x25c>)
 800a162:	f001 fadd 	bl	800b720 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a166:	4b13      	ldr	r3, [pc, #76]	; (800a1b4 <MX_LWIP_Init+0x25c>)
 800a168:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a16c:	089b      	lsrs	r3, r3, #2
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b00      	cmp	r3, #0
 800a176:	d003      	beq.n	800a180 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a178:	480e      	ldr	r0, [pc, #56]	; (800a1b4 <MX_LWIP_Init+0x25c>)
 800a17a:	f001 fae1 	bl	800b740 <netif_set_up>
 800a17e:	e002      	b.n	800a186 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a180:	480c      	ldr	r0, [pc, #48]	; (800a1b4 <MX_LWIP_Init+0x25c>)
 800a182:	f001 fb49 	bl	800b818 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a186:	490c      	ldr	r1, [pc, #48]	; (800a1b8 <MX_LWIP_Init+0x260>)
 800a188:	480a      	ldr	r0, [pc, #40]	; (800a1b4 <MX_LWIP_Init+0x25c>)
 800a18a:	f001 fbdb 	bl	800b944 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a18e:	bf00      	nop
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20000b90 	.word	0x20000b90
 800a198:	20000b94 	.word	0x20000b94
 800a19c:	20000b98 	.word	0x20000b98
 800a1a0:	20000b84 	.word	0x20000b84
 800a1a4:	20000b88 	.word	0x20000b88
 800a1a8:	20000b8c 	.word	0x20000b8c
 800a1ac:	08015221 	.word	0x08015221
 800a1b0:	0800a521 	.word	0x0800a521
 800a1b4:	20000b50 	.word	0x20000b50
 800a1b8:	0800a20d 	.word	0x0800a20d

0800a1bc <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800a1c4:	f7fa f812 	bl	80041ec <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	4b08      	ldr	r3, [pc, #32]	; (800a1ec <Ethernet_Link_Periodic_Handle+0x30>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	2b63      	cmp	r3, #99	; 0x63
 800a1d2:	d907      	bls.n	800a1e4 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800a1d4:	f7fa f80a 	bl	80041ec <HAL_GetTick>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	4a04      	ldr	r2, [pc, #16]	; (800a1ec <Ethernet_Link_Periodic_Handle+0x30>)
 800a1dc:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fad4 	bl	800a78c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20000b4c 	.word	0x20000b4c

0800a1f0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800a1f4:	4804      	ldr	r0, [pc, #16]	; (800a208 <MX_LWIP_Process+0x18>)
 800a1f6:	f000 f973 	bl	800a4e0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800a1fa:	f008 fc25 	bl	8012a48 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800a1fe:	4802      	ldr	r0, [pc, #8]	; (800a208 <MX_LWIP_Process+0x18>)
 800a200:	f7ff ffdc 	bl	800a1bc <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800a204:	bf00      	nop
 800a206:	bd80      	pop	{r7, pc}
 800a208:	20000b50 	.word	0x20000b50

0800a20c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <SCB_InvalidateDCache_by_Addr>:
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a232:	2320      	movs	r3, #32
 800a234:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a236:	f3bf 8f4f 	dsb	sy
}
 800a23a:	bf00      	nop
    while (op_size > 0) {
 800a23c:	e00b      	b.n	800a256 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800a23e:	4a0d      	ldr	r2, [pc, #52]	; (800a274 <SCB_InvalidateDCache_by_Addr+0x54>)
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	4413      	add	r3, r2
 800a24c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dcf0      	bgt.n	800a23e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800a25c:	f3bf 8f4f 	dsb	sy
}
 800a260:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a262:	f3bf 8f6f 	isb	sy
}
 800a266:	bf00      	nop
}
 800a268:	bf00      	nop
 800a26a:	371c      	adds	r7, #28
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	e000ed00 	.word	0xe000ed00

0800a278 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a284:	4b40      	ldr	r3, [pc, #256]	; (800a388 <low_level_init+0x110>)
 800a286:	4a41      	ldr	r2, [pc, #260]	; (800a38c <low_level_init+0x114>)
 800a288:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a28a:	2300      	movs	r3, #0
 800a28c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a28e:	2380      	movs	r3, #128	; 0x80
 800a290:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a292:	23e1      	movs	r3, #225	; 0xe1
 800a294:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a296:	2300      	movs	r3, #0
 800a298:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a29a:	2300      	movs	r3, #0
 800a29c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x44;
 800a29e:	2344      	movs	r3, #68	; 0x44
 800a2a0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a2a2:	4a39      	ldr	r2, [pc, #228]	; (800a388 <low_level_init+0x110>)
 800a2a4:	f107 0308 	add.w	r3, r7, #8
 800a2a8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a2aa:	4b37      	ldr	r3, [pc, #220]	; (800a388 <low_level_init+0x110>)
 800a2ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a2b0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a2b2:	4b35      	ldr	r3, [pc, #212]	; (800a388 <low_level_init+0x110>)
 800a2b4:	4a36      	ldr	r2, [pc, #216]	; (800a390 <low_level_init+0x118>)
 800a2b6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a2b8:	4b33      	ldr	r3, [pc, #204]	; (800a388 <low_level_init+0x110>)
 800a2ba:	4a36      	ldr	r2, [pc, #216]	; (800a394 <low_level_init+0x11c>)
 800a2bc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a2be:	4b32      	ldr	r3, [pc, #200]	; (800a388 <low_level_init+0x110>)
 800a2c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a2c4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a2c6:	4830      	ldr	r0, [pc, #192]	; (800a388 <low_level_init+0x110>)
 800a2c8:	f7fa fd8c 	bl	8004de4 <HAL_ETH_Init>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a2d0:	2238      	movs	r2, #56	; 0x38
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4830      	ldr	r0, [pc, #192]	; (800a398 <low_level_init+0x120>)
 800a2d6:	f00b f8bb 	bl	8015450 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a2da:	4b2f      	ldr	r3, [pc, #188]	; (800a398 <low_level_init+0x120>)
 800a2dc:	2221      	movs	r2, #33	; 0x21
 800a2de:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a2e0:	4b2d      	ldr	r3, [pc, #180]	; (800a398 <low_level_init+0x120>)
 800a2e2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800a2e6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a2e8:	4b2b      	ldr	r3, [pc, #172]	; (800a398 <low_level_init+0x120>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a2ee:	482b      	ldr	r0, [pc, #172]	; (800a39c <low_level_init+0x124>)
 800a2f0:	f000 ff2c 	bl	800b14c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2206      	movs	r2, #6
 800a2f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a2fc:	4b22      	ldr	r3, [pc, #136]	; (800a388 <low_level_init+0x110>)
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	781a      	ldrb	r2, [r3, #0]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a308:	4b1f      	ldr	r3, [pc, #124]	; (800a388 <low_level_init+0x110>)
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	785a      	ldrb	r2, [r3, #1]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a314:	4b1c      	ldr	r3, [pc, #112]	; (800a388 <low_level_init+0x110>)
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	789a      	ldrb	r2, [r3, #2]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a320:	4b19      	ldr	r3, [pc, #100]	; (800a388 <low_level_init+0x110>)
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	78da      	ldrb	r2, [r3, #3]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a32c:	4b16      	ldr	r3, [pc, #88]	; (800a388 <low_level_init+0x110>)
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	791a      	ldrb	r2, [r3, #4]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a338:	4b13      	ldr	r3, [pc, #76]	; (800a388 <low_level_init+0x110>)
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	795a      	ldrb	r2, [r3, #5]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a34a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a352:	f043 030a 	orr.w	r3, r3, #10
 800a356:	b2da      	uxtb	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a35e:	4910      	ldr	r1, [pc, #64]	; (800a3a0 <low_level_init+0x128>)
 800a360:	4810      	ldr	r0, [pc, #64]	; (800a3a4 <low_level_init+0x12c>)
 800a362:	f7f7 fcd4 	bl	8001d0e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a366:	480f      	ldr	r0, [pc, #60]	; (800a3a4 <low_level_init+0x12c>)
 800a368:	f7f7 fd03 	bl	8001d72 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d103      	bne.n	800a37a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fa0a 	bl	800a78c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a378:	e001      	b.n	800a37e <low_level_init+0x106>
    Error_Handler();
 800a37a:	f7f7 f8c3 	bl	8001504 <Error_Handler>
}
 800a37e:	bf00      	nop
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20005528 	.word	0x20005528
 800a38c:	40028000 	.word	0x40028000
 800a390:	2000016c 	.word	0x2000016c
 800a394:	200000cc 	.word	0x200000cc
 800a398:	200055d8 	.word	0x200055d8
 800a39c:	0801b178 	.word	0x0801b178
 800a3a0:	20000048 	.word	0x20000048
 800a3a4:	20005610 	.word	0x20005610

0800a3a8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b092      	sub	sp, #72	; 0x48
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a3c0:	f107 030c 	add.w	r3, r7, #12
 800a3c4:	2230      	movs	r2, #48	; 0x30
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f00b f841 	bl	8015450 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a3ce:	f107 030c 	add.w	r3, r7, #12
 800a3d2:	2230      	movs	r2, #48	; 0x30
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f00b f83a 	bl	8015450 <memset>

  for(q = p; q != NULL; q = q->next)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	643b      	str	r3, [r7, #64]	; 0x40
 800a3e0:	e045      	b.n	800a46e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a3e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d902      	bls.n	800a3ee <low_level_output+0x46>
      return ERR_IF;
 800a3e8:	f06f 030b 	mvn.w	r3, #11
 800a3ec:	e055      	b.n	800a49a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800a3ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3f0:	6859      	ldr	r1, [r3, #4]
 800a3f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	4413      	add	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	3348      	adds	r3, #72	; 0x48
 800a3fe:	443b      	add	r3, r7
 800a400:	3b3c      	subs	r3, #60	; 0x3c
 800a402:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a406:	895b      	ldrh	r3, [r3, #10]
 800a408:	4619      	mov	r1, r3
 800a40a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a40c:	4613      	mov	r3, r2
 800a40e:	005b      	lsls	r3, r3, #1
 800a410:	4413      	add	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	3348      	adds	r3, #72	; 0x48
 800a416:	443b      	add	r3, r7
 800a418:	3b38      	subs	r3, #56	; 0x38
 800a41a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a41c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d011      	beq.n	800a446 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a424:	1e5a      	subs	r2, r3, #1
 800a426:	f107 000c 	add.w	r0, r7, #12
 800a42a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a42c:	460b      	mov	r3, r1
 800a42e:	005b      	lsls	r3, r3, #1
 800a430:	440b      	add	r3, r1
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	18c1      	adds	r1, r0, r3
 800a436:	4613      	mov	r3, r2
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	4413      	add	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	3348      	adds	r3, #72	; 0x48
 800a440:	443b      	add	r3, r7
 800a442:	3b34      	subs	r3, #52	; 0x34
 800a444:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d109      	bne.n	800a462 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a44e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a450:	4613      	mov	r3, r2
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	4413      	add	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	3348      	adds	r3, #72	; 0x48
 800a45a:	443b      	add	r3, r7
 800a45c:	3b34      	subs	r3, #52	; 0x34
 800a45e:	2200      	movs	r2, #0
 800a460:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a464:	3301      	adds	r3, #1
 800a466:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	643b      	str	r3, [r7, #64]	; 0x40
 800a46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1b6      	bne.n	800a3e2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	891b      	ldrh	r3, [r3, #8]
 800a478:	461a      	mov	r2, r3
 800a47a:	4b0a      	ldr	r3, [pc, #40]	; (800a4a4 <low_level_output+0xfc>)
 800a47c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a47e:	4a09      	ldr	r2, [pc, #36]	; (800a4a4 <low_level_output+0xfc>)
 800a480:	f107 030c 	add.w	r3, r7, #12
 800a484:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a486:	4a07      	ldr	r2, [pc, #28]	; (800a4a4 <low_level_output+0xfc>)
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a48c:	2214      	movs	r2, #20
 800a48e:	4905      	ldr	r1, [pc, #20]	; (800a4a4 <low_level_output+0xfc>)
 800a490:	4805      	ldr	r0, [pc, #20]	; (800a4a8 <low_level_output+0x100>)
 800a492:	f7fa fddb 	bl	800504c <HAL_ETH_Transmit>

  return errval;
 800a496:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3748      	adds	r7, #72	; 0x48
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	200055d8 	.word	0x200055d8
 800a4a8:	20005528 	.word	0x20005528

0800a4ac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a4b8:	4b07      	ldr	r3, [pc, #28]	; (800a4d8 <low_level_input+0x2c>)
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d105      	bne.n	800a4cc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a4c0:	f107 030c 	add.w	r3, r7, #12
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4805      	ldr	r0, [pc, #20]	; (800a4dc <low_level_input+0x30>)
 800a4c8:	f7fa fe54 	bl	8005174 <HAL_ETH_ReadData>
  }

  return p;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	20005524 	.word	0x20005524
 800a4dc:	20005528 	.word	0x20005528

0800a4e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff ffdd 	bl	800a4ac <low_level_input>
 800a4f2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00a      	beq.n	800a510 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	4798      	blx	r3
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d002      	beq.n	800a510 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f001 fd9a 	bl	800c044 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1ea      	bne.n	800a4ec <ethernetif_input+0xc>
}
 800a516:	bf00      	nop
 800a518:	bf00      	nop
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <ethernetif_init+0x1c>
 800a52e:	4b0e      	ldr	r3, [pc, #56]	; (800a568 <ethernetif_init+0x48>)
 800a530:	f240 127b 	movw	r2, #379	; 0x17b
 800a534:	490d      	ldr	r1, [pc, #52]	; (800a56c <ethernetif_init+0x4c>)
 800a536:	480e      	ldr	r0, [pc, #56]	; (800a570 <ethernetif_init+0x50>)
 800a538:	f00a ff92 	bl	8015460 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2273      	movs	r2, #115	; 0x73
 800a540:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2274      	movs	r2, #116	; 0x74
 800a548:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a09      	ldr	r2, [pc, #36]	; (800a574 <ethernetif_init+0x54>)
 800a550:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a08      	ldr	r2, [pc, #32]	; (800a578 <ethernetif_init+0x58>)
 800a556:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff fe8d 	bl	800a278 <low_level_init>

  return ERR_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	0801684c 	.word	0x0801684c
 800a56c:	08016868 	.word	0x08016868
 800a570:	08016878 	.word	0x08016878
 800a574:	080136d9 	.word	0x080136d9
 800a578:	0800a3a9 	.word	0x0800a3a9

0800a57c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a588:	68f9      	ldr	r1, [r7, #12]
 800a58a:	4807      	ldr	r0, [pc, #28]	; (800a5a8 <pbuf_free_custom+0x2c>)
 800a58c:	f000 fec0 	bl	800b310 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a590:	4b06      	ldr	r3, [pc, #24]	; (800a5ac <pbuf_free_custom+0x30>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d102      	bne.n	800a59e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a598:	4b04      	ldr	r3, [pc, #16]	; (800a5ac <pbuf_free_custom+0x30>)
 800a59a:	2200      	movs	r2, #0
 800a59c:	701a      	strb	r2, [r3, #0]
  }
}
 800a59e:	bf00      	nop
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	0801b178 	.word	0x0801b178
 800a5ac:	20005524 	.word	0x20005524

0800a5b0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a5b4:	f7f9 fe1a 	bl	80041ec <HAL_GetTick>
 800a5b8:	4603      	mov	r3, r0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	bd80      	pop	{r7, pc}
	...

0800a5c0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b08e      	sub	sp, #56	; 0x38
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	605a      	str	r2, [r3, #4]
 800a5d2:	609a      	str	r2, [r3, #8]
 800a5d4:	60da      	str	r2, [r3, #12]
 800a5d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a3f      	ldr	r2, [pc, #252]	; (800a6dc <HAL_ETH_MspInit+0x11c>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d178      	bne.n	800a6d4 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a5e2:	4b3f      	ldr	r3, [pc, #252]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e6:	4a3e      	ldr	r2, [pc, #248]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a5e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a5ec:	6313      	str	r3, [r2, #48]	; 0x30
 800a5ee:	4b3c      	ldr	r3, [pc, #240]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5f6:	623b      	str	r3, [r7, #32]
 800a5f8:	6a3b      	ldr	r3, [r7, #32]
 800a5fa:	4b39      	ldr	r3, [pc, #228]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fe:	4a38      	ldr	r2, [pc, #224]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a600:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a604:	6313      	str	r3, [r2, #48]	; 0x30
 800a606:	4b36      	ldr	r3, [pc, #216]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a60e:	61fb      	str	r3, [r7, #28]
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	4b33      	ldr	r3, [pc, #204]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a616:	4a32      	ldr	r2, [pc, #200]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a618:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a61c:	6313      	str	r3, [r2, #48]	; 0x30
 800a61e:	4b30      	ldr	r3, [pc, #192]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a626:	61bb      	str	r3, [r7, #24]
 800a628:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a62a:	4b2d      	ldr	r3, [pc, #180]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62e:	4a2c      	ldr	r2, [pc, #176]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a634:	6313      	str	r3, [r2, #48]	; 0x30
 800a636:	4b2a      	ldr	r3, [pc, #168]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a63e:	617b      	str	r3, [r7, #20]
 800a640:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a642:	4b27      	ldr	r3, [pc, #156]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a646:	4a26      	ldr	r2, [pc, #152]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a648:	f043 0304 	orr.w	r3, r3, #4
 800a64c:	6313      	str	r3, [r2, #48]	; 0x30
 800a64e:	4b24      	ldr	r3, [pc, #144]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	613b      	str	r3, [r7, #16]
 800a658:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a65a:	4b21      	ldr	r3, [pc, #132]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	4a20      	ldr	r2, [pc, #128]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a660:	f043 0301 	orr.w	r3, r3, #1
 800a664:	6313      	str	r3, [r2, #48]	; 0x30
 800a666:	4b1e      	ldr	r3, [pc, #120]	; (800a6e0 <HAL_ETH_MspInit+0x120>)
 800a668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 800a672:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800a676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a678:	2302      	movs	r3, #2
 800a67a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a680:	2303      	movs	r3, #3
 800a682:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a684:	230b      	movs	r3, #11
 800a686:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a68c:	4619      	mov	r1, r3
 800a68e:	4815      	ldr	r0, [pc, #84]	; (800a6e4 <HAL_ETH_MspInit+0x124>)
 800a690:	f7fb fc9a 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a694:	2332      	movs	r3, #50	; 0x32
 800a696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a698:	2302      	movs	r3, #2
 800a69a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a69c:	2300      	movs	r3, #0
 800a69e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a6a4:	230b      	movs	r3, #11
 800a6a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	480e      	ldr	r0, [pc, #56]	; (800a6e8 <HAL_ETH_MspInit+0x128>)
 800a6b0:	f7fb fc8a 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a6b4:	2386      	movs	r3, #134	; 0x86
 800a6b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a6c4:	230b      	movs	r3, #11
 800a6c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	4807      	ldr	r0, [pc, #28]	; (800a6ec <HAL_ETH_MspInit+0x12c>)
 800a6d0:	f7fb fc7a 	bl	8005fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a6d4:	bf00      	nop
 800a6d6:	3738      	adds	r7, #56	; 0x38
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	40028000 	.word	0x40028000
 800a6e0:	40023800 	.word	0x40023800
 800a6e4:	40021800 	.word	0x40021800
 800a6e8:	40020800 	.word	0x40020800
 800a6ec:	40020000 	.word	0x40020000

0800a6f0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a6f4:	4802      	ldr	r0, [pc, #8]	; (800a700 <ETH_PHY_IO_Init+0x10>)
 800a6f6:	f7fb f80d 	bl	8005714 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	20005528 	.word	0x20005528

0800a704 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a704:	b480      	push	{r7}
 800a706:	af00      	add	r7, sp, #0
  return 0;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	68f9      	ldr	r1, [r7, #12]
 800a726:	4807      	ldr	r0, [pc, #28]	; (800a744 <ETH_PHY_IO_ReadReg+0x30>)
 800a728:	f7fa fe5c 	bl	80053e4 <HAL_ETH_ReadPHYRegister>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d002      	beq.n	800a738 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a732:	f04f 33ff 	mov.w	r3, #4294967295
 800a736:	e000      	b.n	800a73a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20005528 	.word	0x20005528

0800a748 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	68f9      	ldr	r1, [r7, #12]
 800a75a:	4807      	ldr	r0, [pc, #28]	; (800a778 <ETH_PHY_IO_WriteReg+0x30>)
 800a75c:	f7fa fe8d 	bl	800547a <HAL_ETH_WritePHYRegister>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d002      	beq.n	800a76c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a766:	f04f 33ff 	mov.w	r3, #4294967295
 800a76a:	e000      	b.n	800a76e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20005528 	.word	0x20005528

0800a77c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a780:	f7f9 fd34 	bl	80041ec <HAL_GetTick>
 800a784:	4603      	mov	r3, r0
}
 800a786:	4618      	mov	r0, r3
 800a788:	bd80      	pop	{r7, pc}
	...

0800a78c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b0a0      	sub	sp, #128	; 0x80
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a794:	f107 030c 	add.w	r3, r7, #12
 800a798:	2264      	movs	r2, #100	; 0x64
 800a79a:	2100      	movs	r1, #0
 800a79c:	4618      	mov	r0, r3
 800a79e:	f00a fe57 	bl	8015450 <memset>
  int32_t PHYLinkState = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a7b2:	483a      	ldr	r0, [pc, #232]	; (800a89c <ethernet_link_check_state+0x110>)
 800a7b4:	f7f7 fb85 	bl	8001ec2 <LAN8742_GetLinkState>
 800a7b8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a7c0:	089b      	lsrs	r3, r3, #2
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00c      	beq.n	800a7e6 <ethernet_link_check_state+0x5a>
 800a7cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	dc09      	bgt.n	800a7e6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a7d2:	4833      	ldr	r0, [pc, #204]	; (800a8a0 <ethernet_link_check_state+0x114>)
 800a7d4:	f7fa fbe1 	bl	8004f9a <HAL_ETH_Stop>
    netif_set_down(netif);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 f81d 	bl	800b818 <netif_set_down>
    netif_set_link_down(netif);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f001 f880 	bl	800b8e4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a7e4:	e055      	b.n	800a892 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d14e      	bne.n	800a892 <ethernet_link_check_state+0x106>
 800a7f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	dd4b      	ble.n	800a892 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800a7fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7fc:	3b02      	subs	r3, #2
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	d82a      	bhi.n	800a858 <ethernet_link_check_state+0xcc>
 800a802:	a201      	add	r2, pc, #4	; (adr r2, 800a808 <ethernet_link_check_state+0x7c>)
 800a804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a808:	0800a819 	.word	0x0800a819
 800a80c:	0800a82b 	.word	0x0800a82b
 800a810:	0800a83b 	.word	0x0800a83b
 800a814:	0800a84b 	.word	0x0800a84b
      duplex = ETH_FULLDUPLEX_MODE;
 800a818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a81c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a81e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a822:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a824:	2301      	movs	r3, #1
 800a826:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a828:	e017      	b.n	800a85a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a82a:	2300      	movs	r3, #0
 800a82c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800a82e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a832:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a834:	2301      	movs	r3, #1
 800a836:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a838:	e00f      	b.n	800a85a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800a83a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a83e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a840:	2300      	movs	r3, #0
 800a842:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a844:	2301      	movs	r3, #1
 800a846:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a848:	e007      	b.n	800a85a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a84a:	2300      	movs	r3, #0
 800a84c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800a84e:	2300      	movs	r3, #0
 800a850:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800a852:	2301      	movs	r3, #1
 800a854:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800a856:	e000      	b.n	800a85a <ethernet_link_check_state+0xce>
      break;
 800a858:	bf00      	nop
    if(linkchanged)
 800a85a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d018      	beq.n	800a892 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a860:	f107 030c 	add.w	r3, r7, #12
 800a864:	4619      	mov	r1, r3
 800a866:	480e      	ldr	r0, [pc, #56]	; (800a8a0 <ethernet_link_check_state+0x114>)
 800a868:	f7fa fe50 	bl	800550c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a86c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a86e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800a870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a872:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a874:	f107 030c 	add.w	r3, r7, #12
 800a878:	4619      	mov	r1, r3
 800a87a:	4809      	ldr	r0, [pc, #36]	; (800a8a0 <ethernet_link_check_state+0x114>)
 800a87c:	f7fa ff30 	bl	80056e0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a880:	4807      	ldr	r0, [pc, #28]	; (800a8a0 <ethernet_link_check_state+0x114>)
 800a882:	f7fa fb2b 	bl	8004edc <HAL_ETH_Start>
      netif_set_up(netif);
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 ff5a 	bl	800b740 <netif_set_up>
      netif_set_link_up(netif);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fff5 	bl	800b87c <netif_set_link_up>
}
 800a892:	bf00      	nop
 800a894:	3780      	adds	r7, #128	; 0x80
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	20005610 	.word	0x20005610
 800a8a0:	20005528 	.word	0x20005528

0800a8a4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a8ac:	4812      	ldr	r0, [pc, #72]	; (800a8f8 <HAL_ETH_RxAllocateCallback+0x54>)
 800a8ae:	f000 fcc1 	bl	800b234 <memp_malloc_pool>
 800a8b2:	60f8      	str	r0, [r7, #12]
  if (p)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d014      	beq.n	800a8e4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f103 0220 	add.w	r2, r3, #32
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4a0d      	ldr	r2, [pc, #52]	; (800a8fc <HAL_ETH_RxAllocateCallback+0x58>)
 800a8c8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800a8d2:	9201      	str	r2, [sp, #4]
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2241      	movs	r2, #65	; 0x41
 800a8da:	2100      	movs	r1, #0
 800a8dc:	2000      	movs	r0, #0
 800a8de:	f001 f9f7 	bl	800bcd0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a8e2:	e005      	b.n	800a8f0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a8e4:	4b06      	ldr	r3, [pc, #24]	; (800a900 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]
}
 800a8f0:	bf00      	nop
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	0801b178 	.word	0x0801b178
 800a8fc:	0800a57d 	.word	0x0800a57d
 800a900:	20005524 	.word	0x20005524

0800a904 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b088      	sub	sp, #32
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	3b20      	subs	r3, #32
 800a922:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	2200      	movs	r2, #0
 800a928:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	2200      	movs	r2, #0
 800a92e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	887a      	ldrh	r2, [r7, #2]
 800a934:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d103      	bne.n	800a946 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	69fa      	ldr	r2, [r7, #28]
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	e003      	b.n	800a94e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	69fa      	ldr	r2, [r7, #28]
 800a94c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	69fa      	ldr	r2, [r7, #28]
 800a952:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	61fb      	str	r3, [r7, #28]
 800a95a:	e009      	b.n	800a970 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	891a      	ldrh	r2, [r3, #8]
 800a960:	887b      	ldrh	r3, [r7, #2]
 800a962:	4413      	add	r3, r2
 800a964:	b29a      	uxth	r2, r3
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	61fb      	str	r3, [r7, #28]
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1f2      	bne.n	800a95c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800a976:	887b      	ldrh	r3, [r7, #2]
 800a978:	4619      	mov	r1, r3
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7ff fc50 	bl	800a220 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a980:	bf00      	nop
 800a982:	3720      	adds	r7, #32
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}

0800a988 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	4603      	mov	r3, r0
 800a990:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a992:	88fb      	ldrh	r3, [r7, #6]
 800a994:	021b      	lsls	r3, r3, #8
 800a996:	b21a      	sxth	r2, r3
 800a998:	88fb      	ldrh	r3, [r7, #6]
 800a99a:	0a1b      	lsrs	r3, r3, #8
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	b21b      	sxth	r3, r3
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	b21b      	sxth	r3, r3
 800a9a4:	b29b      	uxth	r3, r3
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	061a      	lsls	r2, r3, #24
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	021b      	lsls	r3, r3, #8
 800a9c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a9c6:	431a      	orrs	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	0a1b      	lsrs	r3, r3, #8
 800a9cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	0e1b      	lsrs	r3, r3, #24
 800a9d6:	4313      	orrs	r3, r2
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a9ee:	f000 f8d5 	bl	800ab9c <mem_init>
  memp_init();
 800a9f2:	f000 fbdb 	bl	800b1ac <memp_init>
  pbuf_init();
  netif_init();
 800a9f6:	f000 fcd9 	bl	800b3ac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a9fa:	f008 f867 	bl	8012acc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a9fe:	f001 fdaf 	bl	800c560 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800aa02:	f007 ffd9 	bl	80129b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800aa06:	bf00      	nop
 800aa08:	3708      	adds	r7, #8
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
	...

0800aa10 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800aa1a:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <ptr_to_mem+0x20>)
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	88fb      	ldrh	r3, [r7, #6]
 800aa20:	4413      	add	r3, r2
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	370c      	adds	r7, #12
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20005c9c 	.word	0x20005c9c

0800aa34 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <mem_to_ptr+0x20>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	b29b      	uxth	r3, r3
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	370c      	adds	r7, #12
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	20005c9c 	.word	0x20005c9c

0800aa58 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800aa58:	b590      	push	{r4, r7, lr}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800aa60:	4b45      	ldr	r3, [pc, #276]	; (800ab78 <plug_holes+0x120>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d206      	bcs.n	800aa78 <plug_holes+0x20>
 800aa6a:	4b44      	ldr	r3, [pc, #272]	; (800ab7c <plug_holes+0x124>)
 800aa6c:	f240 12df 	movw	r2, #479	; 0x1df
 800aa70:	4943      	ldr	r1, [pc, #268]	; (800ab80 <plug_holes+0x128>)
 800aa72:	4844      	ldr	r0, [pc, #272]	; (800ab84 <plug_holes+0x12c>)
 800aa74:	f00a fcf4 	bl	8015460 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800aa78:	4b43      	ldr	r3, [pc, #268]	; (800ab88 <plug_holes+0x130>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d306      	bcc.n	800aa90 <plug_holes+0x38>
 800aa82:	4b3e      	ldr	r3, [pc, #248]	; (800ab7c <plug_holes+0x124>)
 800aa84:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800aa88:	4940      	ldr	r1, [pc, #256]	; (800ab8c <plug_holes+0x134>)
 800aa8a:	483e      	ldr	r0, [pc, #248]	; (800ab84 <plug_holes+0x12c>)
 800aa8c:	f00a fce8 	bl	8015460 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	791b      	ldrb	r3, [r3, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d006      	beq.n	800aaa6 <plug_holes+0x4e>
 800aa98:	4b38      	ldr	r3, [pc, #224]	; (800ab7c <plug_holes+0x124>)
 800aa9a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800aa9e:	493c      	ldr	r1, [pc, #240]	; (800ab90 <plug_holes+0x138>)
 800aaa0:	4838      	ldr	r0, [pc, #224]	; (800ab84 <plug_holes+0x12c>)
 800aaa2:	f00a fcdd 	bl	8015460 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aaae:	d906      	bls.n	800aabe <plug_holes+0x66>
 800aab0:	4b32      	ldr	r3, [pc, #200]	; (800ab7c <plug_holes+0x124>)
 800aab2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800aab6:	4937      	ldr	r1, [pc, #220]	; (800ab94 <plug_holes+0x13c>)
 800aab8:	4832      	ldr	r0, [pc, #200]	; (800ab84 <plug_holes+0x12c>)
 800aaba:	f00a fcd1 	bl	8015460 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	881b      	ldrh	r3, [r3, #0]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff ffa4 	bl	800aa10 <ptr_to_mem>
 800aac8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d024      	beq.n	800ab1c <plug_holes+0xc4>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	791b      	ldrb	r3, [r3, #4]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d120      	bne.n	800ab1c <plug_holes+0xc4>
 800aada:	4b2b      	ldr	r3, [pc, #172]	; (800ab88 <plug_holes+0x130>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d01b      	beq.n	800ab1c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800aae4:	4b2c      	ldr	r3, [pc, #176]	; (800ab98 <plug_holes+0x140>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d102      	bne.n	800aaf4 <plug_holes+0x9c>
      lfree = mem;
 800aaee:	4a2a      	ldr	r2, [pc, #168]	; (800ab98 <plug_holes+0x140>)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	881a      	ldrh	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	881b      	ldrh	r3, [r3, #0]
 800ab00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab04:	d00a      	beq.n	800ab1c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff ff80 	bl	800aa10 <ptr_to_mem>
 800ab10:	4604      	mov	r4, r0
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7ff ff8e 	bl	800aa34 <mem_to_ptr>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	885b      	ldrh	r3, [r3, #2]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff ff75 	bl	800aa10 <ptr_to_mem>
 800ab26:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d01f      	beq.n	800ab70 <plug_holes+0x118>
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	791b      	ldrb	r3, [r3, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d11b      	bne.n	800ab70 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ab38:	4b17      	ldr	r3, [pc, #92]	; (800ab98 <plug_holes+0x140>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d102      	bne.n	800ab48 <plug_holes+0xf0>
      lfree = pmem;
 800ab42:	4a15      	ldr	r2, [pc, #84]	; (800ab98 <plug_holes+0x140>)
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	881a      	ldrh	r2, [r3, #0]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab58:	d00a      	beq.n	800ab70 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff ff56 	bl	800aa10 <ptr_to_mem>
 800ab64:	4604      	mov	r4, r0
 800ab66:	68b8      	ldr	r0, [r7, #8]
 800ab68:	f7ff ff64 	bl	800aa34 <mem_to_ptr>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ab70:	bf00      	nop
 800ab72:	3714      	adds	r7, #20
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd90      	pop	{r4, r7, pc}
 800ab78:	20005c9c 	.word	0x20005c9c
 800ab7c:	080168a0 	.word	0x080168a0
 800ab80:	080168d0 	.word	0x080168d0
 800ab84:	080168e8 	.word	0x080168e8
 800ab88:	20005ca0 	.word	0x20005ca0
 800ab8c:	08016910 	.word	0x08016910
 800ab90:	0801692c 	.word	0x0801692c
 800ab94:	08016948 	.word	0x08016948
 800ab98:	20005ca4 	.word	0x20005ca4

0800ab9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800aba2:	4b18      	ldr	r3, [pc, #96]	; (800ac04 <mem_init+0x68>)
 800aba4:	3303      	adds	r3, #3
 800aba6:	f023 0303 	bic.w	r3, r3, #3
 800abaa:	461a      	mov	r2, r3
 800abac:	4b16      	ldr	r3, [pc, #88]	; (800ac08 <mem_init+0x6c>)
 800abae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800abb0:	4b15      	ldr	r3, [pc, #84]	; (800ac08 <mem_init+0x6c>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800abbc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800abca:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800abce:	f7ff ff1f 	bl	800aa10 <ptr_to_mem>
 800abd2:	4603      	mov	r3, r0
 800abd4:	4a0d      	ldr	r2, [pc, #52]	; (800ac0c <mem_init+0x70>)
 800abd6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800abd8:	4b0c      	ldr	r3, [pc, #48]	; (800ac0c <mem_init+0x70>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2201      	movs	r2, #1
 800abde:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800abe0:	4b0a      	ldr	r3, [pc, #40]	; (800ac0c <mem_init+0x70>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800abe8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800abea:	4b08      	ldr	r3, [pc, #32]	; (800ac0c <mem_init+0x70>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800abf2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800abf4:	4b04      	ldr	r3, [pc, #16]	; (800ac08 <mem_init+0x6c>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a05      	ldr	r2, [pc, #20]	; (800ac10 <mem_init+0x74>)
 800abfa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800abfc:	bf00      	nop
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	20005648 	.word	0x20005648
 800ac08:	20005c9c 	.word	0x20005c9c
 800ac0c:	20005ca0 	.word	0x20005ca0
 800ac10:	20005ca4 	.word	0x20005ca4

0800ac14 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7ff ff09 	bl	800aa34 <mem_to_ptr>
 800ac22:	4603      	mov	r3, r0
 800ac24:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	881b      	ldrh	r3, [r3, #0]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff fef0 	bl	800aa10 <ptr_to_mem>
 800ac30:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	885b      	ldrh	r3, [r3, #2]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff feea 	bl	800aa10 <ptr_to_mem>
 800ac3c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	881b      	ldrh	r3, [r3, #0]
 800ac42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac46:	d818      	bhi.n	800ac7a <mem_link_valid+0x66>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	885b      	ldrh	r3, [r3, #2]
 800ac4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac50:	d813      	bhi.n	800ac7a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ac56:	8afa      	ldrh	r2, [r7, #22]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d004      	beq.n	800ac66 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	8afa      	ldrh	r2, [r7, #22]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d109      	bne.n	800ac7a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ac66:	4b08      	ldr	r3, [pc, #32]	; (800ac88 <mem_link_valid+0x74>)
 800ac68:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d006      	beq.n	800ac7e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	885b      	ldrh	r3, [r3, #2]
 800ac74:	8afa      	ldrh	r2, [r7, #22]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d001      	beq.n	800ac7e <mem_link_valid+0x6a>
    return 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	e000      	b.n	800ac80 <mem_link_valid+0x6c>
  }
  return 1;
 800ac7e:	2301      	movs	r3, #1
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3718      	adds	r7, #24
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	20005ca0 	.word	0x20005ca0

0800ac8c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d04c      	beq.n	800ad34 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f003 0303 	and.w	r3, r3, #3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d007      	beq.n	800acb4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800aca4:	4b25      	ldr	r3, [pc, #148]	; (800ad3c <mem_free+0xb0>)
 800aca6:	f240 2273 	movw	r2, #627	; 0x273
 800acaa:	4925      	ldr	r1, [pc, #148]	; (800ad40 <mem_free+0xb4>)
 800acac:	4825      	ldr	r0, [pc, #148]	; (800ad44 <mem_free+0xb8>)
 800acae:	f00a fbd7 	bl	8015460 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800acb2:	e040      	b.n	800ad36 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3b08      	subs	r3, #8
 800acb8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800acba:	4b23      	ldr	r3, [pc, #140]	; (800ad48 <mem_free+0xbc>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d306      	bcc.n	800acd2 <mem_free+0x46>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f103 020c 	add.w	r2, r3, #12
 800acca:	4b20      	ldr	r3, [pc, #128]	; (800ad4c <mem_free+0xc0>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d907      	bls.n	800ace2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800acd2:	4b1a      	ldr	r3, [pc, #104]	; (800ad3c <mem_free+0xb0>)
 800acd4:	f240 227f 	movw	r2, #639	; 0x27f
 800acd8:	491d      	ldr	r1, [pc, #116]	; (800ad50 <mem_free+0xc4>)
 800acda:	481a      	ldr	r0, [pc, #104]	; (800ad44 <mem_free+0xb8>)
 800acdc:	f00a fbc0 	bl	8015460 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ace0:	e029      	b.n	800ad36 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	791b      	ldrb	r3, [r3, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d107      	bne.n	800acfa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800acea:	4b14      	ldr	r3, [pc, #80]	; (800ad3c <mem_free+0xb0>)
 800acec:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800acf0:	4918      	ldr	r1, [pc, #96]	; (800ad54 <mem_free+0xc8>)
 800acf2:	4814      	ldr	r0, [pc, #80]	; (800ad44 <mem_free+0xb8>)
 800acf4:	f00a fbb4 	bl	8015460 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800acf8:	e01d      	b.n	800ad36 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f7ff ff8a 	bl	800ac14 <mem_link_valid>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d107      	bne.n	800ad16 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ad06:	4b0d      	ldr	r3, [pc, #52]	; (800ad3c <mem_free+0xb0>)
 800ad08:	f240 2295 	movw	r2, #661	; 0x295
 800ad0c:	4912      	ldr	r1, [pc, #72]	; (800ad58 <mem_free+0xcc>)
 800ad0e:	480d      	ldr	r0, [pc, #52]	; (800ad44 <mem_free+0xb8>)
 800ad10:	f00a fba6 	bl	8015460 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ad14:	e00f      	b.n	800ad36 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ad1c:	4b0f      	ldr	r3, [pc, #60]	; (800ad5c <mem_free+0xd0>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d202      	bcs.n	800ad2c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ad26:	4a0d      	ldr	r2, [pc, #52]	; (800ad5c <mem_free+0xd0>)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7ff fe93 	bl	800aa58 <plug_holes>
 800ad32:	e000      	b.n	800ad36 <mem_free+0xaa>
    return;
 800ad34:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}
 800ad3c:	080168a0 	.word	0x080168a0
 800ad40:	08016974 	.word	0x08016974
 800ad44:	080168e8 	.word	0x080168e8
 800ad48:	20005c9c 	.word	0x20005c9c
 800ad4c:	20005ca0 	.word	0x20005ca0
 800ad50:	08016998 	.word	0x08016998
 800ad54:	080169b4 	.word	0x080169b4
 800ad58:	080169dc 	.word	0x080169dc
 800ad5c:	20005ca4 	.word	0x20005ca4

0800ad60 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b088      	sub	sp, #32
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ad6c:	887b      	ldrh	r3, [r7, #2]
 800ad6e:	3303      	adds	r3, #3
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	f023 0303 	bic.w	r3, r3, #3
 800ad76:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ad78:	8bfb      	ldrh	r3, [r7, #30]
 800ad7a:	2b0b      	cmp	r3, #11
 800ad7c:	d801      	bhi.n	800ad82 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ad7e:	230c      	movs	r3, #12
 800ad80:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ad82:	8bfb      	ldrh	r3, [r7, #30]
 800ad84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad88:	d803      	bhi.n	800ad92 <mem_trim+0x32>
 800ad8a:	8bfa      	ldrh	r2, [r7, #30]
 800ad8c:	887b      	ldrh	r3, [r7, #2]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d201      	bcs.n	800ad96 <mem_trim+0x36>
    return NULL;
 800ad92:	2300      	movs	r3, #0
 800ad94:	e0cc      	b.n	800af30 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ad96:	4b68      	ldr	r3, [pc, #416]	; (800af38 <mem_trim+0x1d8>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d304      	bcc.n	800adaa <mem_trim+0x4a>
 800ada0:	4b66      	ldr	r3, [pc, #408]	; (800af3c <mem_trim+0x1dc>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d306      	bcc.n	800adb8 <mem_trim+0x58>
 800adaa:	4b65      	ldr	r3, [pc, #404]	; (800af40 <mem_trim+0x1e0>)
 800adac:	f240 22d1 	movw	r2, #721	; 0x2d1
 800adb0:	4964      	ldr	r1, [pc, #400]	; (800af44 <mem_trim+0x1e4>)
 800adb2:	4865      	ldr	r0, [pc, #404]	; (800af48 <mem_trim+0x1e8>)
 800adb4:	f00a fb54 	bl	8015460 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800adb8:	4b5f      	ldr	r3, [pc, #380]	; (800af38 <mem_trim+0x1d8>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d304      	bcc.n	800adcc <mem_trim+0x6c>
 800adc2:	4b5e      	ldr	r3, [pc, #376]	; (800af3c <mem_trim+0x1dc>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d301      	bcc.n	800add0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	e0af      	b.n	800af30 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	3b08      	subs	r3, #8
 800add4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800add6:	69b8      	ldr	r0, [r7, #24]
 800add8:	f7ff fe2c 	bl	800aa34 <mem_to_ptr>
 800addc:	4603      	mov	r3, r0
 800adde:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	881a      	ldrh	r2, [r3, #0]
 800ade4:	8afb      	ldrh	r3, [r7, #22]
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	b29b      	uxth	r3, r3
 800adea:	3b08      	subs	r3, #8
 800adec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800adee:	8bfa      	ldrh	r2, [r7, #30]
 800adf0:	8abb      	ldrh	r3, [r7, #20]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d906      	bls.n	800ae04 <mem_trim+0xa4>
 800adf6:	4b52      	ldr	r3, [pc, #328]	; (800af40 <mem_trim+0x1e0>)
 800adf8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800adfc:	4953      	ldr	r1, [pc, #332]	; (800af4c <mem_trim+0x1ec>)
 800adfe:	4852      	ldr	r0, [pc, #328]	; (800af48 <mem_trim+0x1e8>)
 800ae00:	f00a fb2e 	bl	8015460 <iprintf>
  if (newsize > size) {
 800ae04:	8bfa      	ldrh	r2, [r7, #30]
 800ae06:	8abb      	ldrh	r3, [r7, #20]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d901      	bls.n	800ae10 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	e08f      	b.n	800af30 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800ae10:	8bfa      	ldrh	r2, [r7, #30]
 800ae12:	8abb      	ldrh	r3, [r7, #20]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d101      	bne.n	800ae1c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	e089      	b.n	800af30 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ae1c:	69bb      	ldr	r3, [r7, #24]
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff fdf5 	bl	800aa10 <ptr_to_mem>
 800ae26:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	791b      	ldrb	r3, [r3, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d13f      	bne.n	800aeb0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	881b      	ldrh	r3, [r3, #0]
 800ae34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae38:	d106      	bne.n	800ae48 <mem_trim+0xe8>
 800ae3a:	4b41      	ldr	r3, [pc, #260]	; (800af40 <mem_trim+0x1e0>)
 800ae3c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ae40:	4943      	ldr	r1, [pc, #268]	; (800af50 <mem_trim+0x1f0>)
 800ae42:	4841      	ldr	r0, [pc, #260]	; (800af48 <mem_trim+0x1e8>)
 800ae44:	f00a fb0c 	bl	8015460 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ae4e:	8afa      	ldrh	r2, [r7, #22]
 800ae50:	8bfb      	ldrh	r3, [r7, #30]
 800ae52:	4413      	add	r3, r2
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	3308      	adds	r3, #8
 800ae58:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ae5a:	4b3e      	ldr	r3, [pc, #248]	; (800af54 <mem_trim+0x1f4>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d106      	bne.n	800ae72 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800ae64:	89fb      	ldrh	r3, [r7, #14]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff fdd2 	bl	800aa10 <ptr_to_mem>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	4a39      	ldr	r2, [pc, #228]	; (800af54 <mem_trim+0x1f4>)
 800ae70:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ae72:	89fb      	ldrh	r3, [r7, #14]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7ff fdcb 	bl	800aa10 <ptr_to_mem>
 800ae7a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	89ba      	ldrh	r2, [r7, #12]
 800ae86:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	8afa      	ldrh	r2, [r7, #22]
 800ae8c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	89fa      	ldrh	r2, [r7, #14]
 800ae92:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae9c:	d047      	beq.n	800af2e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff fdb4 	bl	800aa10 <ptr_to_mem>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	89fb      	ldrh	r3, [r7, #14]
 800aeac:	8053      	strh	r3, [r2, #2]
 800aeae:	e03e      	b.n	800af2e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aeb0:	8bfb      	ldrh	r3, [r7, #30]
 800aeb2:	f103 0214 	add.w	r2, r3, #20
 800aeb6:	8abb      	ldrh	r3, [r7, #20]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d838      	bhi.n	800af2e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aebc:	8afa      	ldrh	r2, [r7, #22]
 800aebe:	8bfb      	ldrh	r3, [r7, #30]
 800aec0:	4413      	add	r3, r2
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	3308      	adds	r3, #8
 800aec6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	881b      	ldrh	r3, [r3, #0]
 800aecc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aed0:	d106      	bne.n	800aee0 <mem_trim+0x180>
 800aed2:	4b1b      	ldr	r3, [pc, #108]	; (800af40 <mem_trim+0x1e0>)
 800aed4:	f240 3216 	movw	r2, #790	; 0x316
 800aed8:	491d      	ldr	r1, [pc, #116]	; (800af50 <mem_trim+0x1f0>)
 800aeda:	481b      	ldr	r0, [pc, #108]	; (800af48 <mem_trim+0x1e8>)
 800aedc:	f00a fac0 	bl	8015460 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800aee0:	89fb      	ldrh	r3, [r7, #14]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7ff fd94 	bl	800aa10 <ptr_to_mem>
 800aee8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800aeea:	4b1a      	ldr	r3, [pc, #104]	; (800af54 <mem_trim+0x1f4>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	693a      	ldr	r2, [r7, #16]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d202      	bcs.n	800aefa <mem_trim+0x19a>
      lfree = mem2;
 800aef4:	4a17      	ldr	r2, [pc, #92]	; (800af54 <mem_trim+0x1f4>)
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	2200      	movs	r2, #0
 800aefe:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	881a      	ldrh	r2, [r3, #0]
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	8afa      	ldrh	r2, [r7, #22]
 800af0c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	89fa      	ldrh	r2, [r7, #14]
 800af12:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	881b      	ldrh	r3, [r3, #0]
 800af18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af1c:	d007      	beq.n	800af2e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	881b      	ldrh	r3, [r3, #0]
 800af22:	4618      	mov	r0, r3
 800af24:	f7ff fd74 	bl	800aa10 <ptr_to_mem>
 800af28:	4602      	mov	r2, r0
 800af2a:	89fb      	ldrh	r3, [r7, #14]
 800af2c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800af2e:	687b      	ldr	r3, [r7, #4]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3720      	adds	r7, #32
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	20005c9c 	.word	0x20005c9c
 800af3c:	20005ca0 	.word	0x20005ca0
 800af40:	080168a0 	.word	0x080168a0
 800af44:	08016a10 	.word	0x08016a10
 800af48:	080168e8 	.word	0x080168e8
 800af4c:	08016a28 	.word	0x08016a28
 800af50:	08016a48 	.word	0x08016a48
 800af54:	20005ca4 	.word	0x20005ca4

0800af58 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800af62:	88fb      	ldrh	r3, [r7, #6]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <mem_malloc+0x14>
    return NULL;
 800af68:	2300      	movs	r3, #0
 800af6a:	e0d9      	b.n	800b120 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800af6c:	88fb      	ldrh	r3, [r7, #6]
 800af6e:	3303      	adds	r3, #3
 800af70:	b29b      	uxth	r3, r3
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800af78:	8bbb      	ldrh	r3, [r7, #28]
 800af7a:	2b0b      	cmp	r3, #11
 800af7c:	d801      	bhi.n	800af82 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800af7e:	230c      	movs	r3, #12
 800af80:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800af82:	8bbb      	ldrh	r3, [r7, #28]
 800af84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af88:	d803      	bhi.n	800af92 <mem_malloc+0x3a>
 800af8a:	8bba      	ldrh	r2, [r7, #28]
 800af8c:	88fb      	ldrh	r3, [r7, #6]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d201      	bcs.n	800af96 <mem_malloc+0x3e>
    return NULL;
 800af92:	2300      	movs	r3, #0
 800af94:	e0c4      	b.n	800b120 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800af96:	4b64      	ldr	r3, [pc, #400]	; (800b128 <mem_malloc+0x1d0>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7ff fd4a 	bl	800aa34 <mem_to_ptr>
 800afa0:	4603      	mov	r3, r0
 800afa2:	83fb      	strh	r3, [r7, #30]
 800afa4:	e0b4      	b.n	800b110 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800afa6:	8bfb      	ldrh	r3, [r7, #30]
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7ff fd31 	bl	800aa10 <ptr_to_mem>
 800afae:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	791b      	ldrb	r3, [r3, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f040 80a4 	bne.w	800b102 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	8bfb      	ldrh	r3, [r7, #30]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	f1a3 0208 	sub.w	r2, r3, #8
 800afc8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800afca:	429a      	cmp	r2, r3
 800afcc:	f0c0 8099 	bcc.w	800b102 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	461a      	mov	r2, r3
 800afd6:	8bfb      	ldrh	r3, [r7, #30]
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	f1a3 0208 	sub.w	r2, r3, #8
 800afde:	8bbb      	ldrh	r3, [r7, #28]
 800afe0:	3314      	adds	r3, #20
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d333      	bcc.n	800b04e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800afe6:	8bfa      	ldrh	r2, [r7, #30]
 800afe8:	8bbb      	ldrh	r3, [r7, #28]
 800afea:	4413      	add	r3, r2
 800afec:	b29b      	uxth	r3, r3
 800afee:	3308      	adds	r3, #8
 800aff0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aff2:	8a7b      	ldrh	r3, [r7, #18]
 800aff4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aff8:	d106      	bne.n	800b008 <mem_malloc+0xb0>
 800affa:	4b4c      	ldr	r3, [pc, #304]	; (800b12c <mem_malloc+0x1d4>)
 800affc:	f240 3287 	movw	r2, #903	; 0x387
 800b000:	494b      	ldr	r1, [pc, #300]	; (800b130 <mem_malloc+0x1d8>)
 800b002:	484c      	ldr	r0, [pc, #304]	; (800b134 <mem_malloc+0x1dc>)
 800b004:	f00a fa2c 	bl	8015460 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b008:	8a7b      	ldrh	r3, [r7, #18]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff fd00 	bl	800aa10 <ptr_to_mem>
 800b010:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	881a      	ldrh	r2, [r3, #0]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	8bfa      	ldrh	r2, [r7, #30]
 800b024:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	8a7a      	ldrh	r2, [r7, #18]
 800b02a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2201      	movs	r2, #1
 800b030:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	881b      	ldrh	r3, [r3, #0]
 800b036:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b03a:	d00b      	beq.n	800b054 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	881b      	ldrh	r3, [r3, #0]
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff fce5 	bl	800aa10 <ptr_to_mem>
 800b046:	4602      	mov	r2, r0
 800b048:	8a7b      	ldrh	r3, [r7, #18]
 800b04a:	8053      	strh	r3, [r2, #2]
 800b04c:	e002      	b.n	800b054 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	2201      	movs	r2, #1
 800b052:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b054:	4b34      	ldr	r3, [pc, #208]	; (800b128 <mem_malloc+0x1d0>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d127      	bne.n	800b0ae <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b05e:	4b32      	ldr	r3, [pc, #200]	; (800b128 <mem_malloc+0x1d0>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b064:	e005      	b.n	800b072 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	881b      	ldrh	r3, [r3, #0]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fcd0 	bl	800aa10 <ptr_to_mem>
 800b070:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	791b      	ldrb	r3, [r3, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d004      	beq.n	800b084 <mem_malloc+0x12c>
 800b07a:	4b2f      	ldr	r3, [pc, #188]	; (800b138 <mem_malloc+0x1e0>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	69ba      	ldr	r2, [r7, #24]
 800b080:	429a      	cmp	r2, r3
 800b082:	d1f0      	bne.n	800b066 <mem_malloc+0x10e>
          }
          lfree = cur;
 800b084:	4a28      	ldr	r2, [pc, #160]	; (800b128 <mem_malloc+0x1d0>)
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b08a:	4b27      	ldr	r3, [pc, #156]	; (800b128 <mem_malloc+0x1d0>)
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	4b2a      	ldr	r3, [pc, #168]	; (800b138 <mem_malloc+0x1e0>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	429a      	cmp	r2, r3
 800b094:	d00b      	beq.n	800b0ae <mem_malloc+0x156>
 800b096:	4b24      	ldr	r3, [pc, #144]	; (800b128 <mem_malloc+0x1d0>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	791b      	ldrb	r3, [r3, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d006      	beq.n	800b0ae <mem_malloc+0x156>
 800b0a0:	4b22      	ldr	r3, [pc, #136]	; (800b12c <mem_malloc+0x1d4>)
 800b0a2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b0a6:	4925      	ldr	r1, [pc, #148]	; (800b13c <mem_malloc+0x1e4>)
 800b0a8:	4822      	ldr	r0, [pc, #136]	; (800b134 <mem_malloc+0x1dc>)
 800b0aa:	f00a f9d9 	bl	8015460 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b0ae:	8bba      	ldrh	r2, [r7, #28]
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	4a20      	ldr	r2, [pc, #128]	; (800b138 <mem_malloc+0x1e0>)
 800b0b8:	6812      	ldr	r2, [r2, #0]
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d906      	bls.n	800b0cc <mem_malloc+0x174>
 800b0be:	4b1b      	ldr	r3, [pc, #108]	; (800b12c <mem_malloc+0x1d4>)
 800b0c0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b0c4:	491e      	ldr	r1, [pc, #120]	; (800b140 <mem_malloc+0x1e8>)
 800b0c6:	481b      	ldr	r0, [pc, #108]	; (800b134 <mem_malloc+0x1dc>)
 800b0c8:	f00a f9ca 	bl	8015460 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f003 0303 	and.w	r3, r3, #3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d006      	beq.n	800b0e4 <mem_malloc+0x18c>
 800b0d6:	4b15      	ldr	r3, [pc, #84]	; (800b12c <mem_malloc+0x1d4>)
 800b0d8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b0dc:	4919      	ldr	r1, [pc, #100]	; (800b144 <mem_malloc+0x1ec>)
 800b0de:	4815      	ldr	r0, [pc, #84]	; (800b134 <mem_malloc+0x1dc>)
 800b0e0:	f00a f9be 	bl	8015460 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d006      	beq.n	800b0fc <mem_malloc+0x1a4>
 800b0ee:	4b0f      	ldr	r3, [pc, #60]	; (800b12c <mem_malloc+0x1d4>)
 800b0f0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b0f4:	4914      	ldr	r1, [pc, #80]	; (800b148 <mem_malloc+0x1f0>)
 800b0f6:	480f      	ldr	r0, [pc, #60]	; (800b134 <mem_malloc+0x1dc>)
 800b0f8:	f00a f9b2 	bl	8015460 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	3308      	adds	r3, #8
 800b100:	e00e      	b.n	800b120 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b102:	8bfb      	ldrh	r3, [r7, #30]
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff fc83 	bl	800aa10 <ptr_to_mem>
 800b10a:	4603      	mov	r3, r0
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b110:	8bfa      	ldrh	r2, [r7, #30]
 800b112:	8bbb      	ldrh	r3, [r7, #28]
 800b114:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b118:	429a      	cmp	r2, r3
 800b11a:	f4ff af44 	bcc.w	800afa6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3720      	adds	r7, #32
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	20005ca4 	.word	0x20005ca4
 800b12c:	080168a0 	.word	0x080168a0
 800b130:	08016a48 	.word	0x08016a48
 800b134:	080168e8 	.word	0x080168e8
 800b138:	20005ca0 	.word	0x20005ca0
 800b13c:	08016a5c 	.word	0x08016a5c
 800b140:	08016a78 	.word	0x08016a78
 800b144:	08016aa8 	.word	0x08016aa8
 800b148:	08016ad8 	.word	0x08016ad8

0800b14c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	2200      	movs	r2, #0
 800b15a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	3303      	adds	r3, #3
 800b162:	f023 0303 	bic.w	r3, r3, #3
 800b166:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b168:	2300      	movs	r3, #0
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	e011      	b.n	800b192 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	881b      	ldrh	r3, [r3, #0]
 800b184:	461a      	mov	r2, r3
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	4413      	add	r3, r2
 800b18a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3301      	adds	r3, #1
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	885b      	ldrh	r3, [r3, #2]
 800b196:	461a      	mov	r2, r3
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	4293      	cmp	r3, r2
 800b19c:	dbe7      	blt.n	800b16e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b19e:	bf00      	nop
 800b1a0:	bf00      	nop
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	80fb      	strh	r3, [r7, #6]
 800b1b6:	e009      	b.n	800b1cc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b1b8:	88fb      	ldrh	r3, [r7, #6]
 800b1ba:	4a08      	ldr	r2, [pc, #32]	; (800b1dc <memp_init+0x30>)
 800b1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff ffc3 	bl	800b14c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b1c6:	88fb      	ldrh	r3, [r7, #6]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	80fb      	strh	r3, [r7, #6]
 800b1cc:	88fb      	ldrh	r3, [r7, #6]
 800b1ce:	2b08      	cmp	r3, #8
 800b1d0:	d9f2      	bls.n	800b1b8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	0801b1f0 	.word	0x0801b1f0

0800b1e0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d012      	beq.n	800b21c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	6812      	ldr	r2, [r2, #0]
 800b1fe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f003 0303 	and.w	r3, r3, #3
 800b206:	2b00      	cmp	r3, #0
 800b208:	d006      	beq.n	800b218 <do_memp_malloc_pool+0x38>
 800b20a:	4b07      	ldr	r3, [pc, #28]	; (800b228 <do_memp_malloc_pool+0x48>)
 800b20c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b210:	4906      	ldr	r1, [pc, #24]	; (800b22c <do_memp_malloc_pool+0x4c>)
 800b212:	4807      	ldr	r0, [pc, #28]	; (800b230 <do_memp_malloc_pool+0x50>)
 800b214:	f00a f924 	bl	8015460 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	e000      	b.n	800b21e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	08016afc 	.word	0x08016afc
 800b22c:	08016b2c 	.word	0x08016b2c
 800b230:	08016b50 	.word	0x08016b50

0800b234 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d106      	bne.n	800b250 <memp_malloc_pool+0x1c>
 800b242:	4b0a      	ldr	r3, [pc, #40]	; (800b26c <memp_malloc_pool+0x38>)
 800b244:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b248:	4909      	ldr	r1, [pc, #36]	; (800b270 <memp_malloc_pool+0x3c>)
 800b24a:	480a      	ldr	r0, [pc, #40]	; (800b274 <memp_malloc_pool+0x40>)
 800b24c:	f00a f908 	bl	8015460 <iprintf>
  if (desc == NULL) {
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <memp_malloc_pool+0x26>
    return NULL;
 800b256:	2300      	movs	r3, #0
 800b258:	e003      	b.n	800b262 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff ffc0 	bl	800b1e0 <do_memp_malloc_pool>
 800b260:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b262:	4618      	mov	r0, r3
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	08016afc 	.word	0x08016afc
 800b270:	08016b78 	.word	0x08016b78
 800b274:	08016b50 	.word	0x08016b50

0800b278 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	4603      	mov	r3, r0
 800b280:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b282:	79fb      	ldrb	r3, [r7, #7]
 800b284:	2b08      	cmp	r3, #8
 800b286:	d908      	bls.n	800b29a <memp_malloc+0x22>
 800b288:	4b0a      	ldr	r3, [pc, #40]	; (800b2b4 <memp_malloc+0x3c>)
 800b28a:	f240 1257 	movw	r2, #343	; 0x157
 800b28e:	490a      	ldr	r1, [pc, #40]	; (800b2b8 <memp_malloc+0x40>)
 800b290:	480a      	ldr	r0, [pc, #40]	; (800b2bc <memp_malloc+0x44>)
 800b292:	f00a f8e5 	bl	8015460 <iprintf>
 800b296:	2300      	movs	r3, #0
 800b298:	e008      	b.n	800b2ac <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b29a:	79fb      	ldrb	r3, [r7, #7]
 800b29c:	4a08      	ldr	r2, [pc, #32]	; (800b2c0 <memp_malloc+0x48>)
 800b29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff ff9c 	bl	800b1e0 <do_memp_malloc_pool>
 800b2a8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	08016afc 	.word	0x08016afc
 800b2b8:	08016b8c 	.word	0x08016b8c
 800b2bc:	08016b50 	.word	0x08016b50
 800b2c0:	0801b1f0 	.word	0x0801b1f0

0800b2c4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b084      	sub	sp, #16
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	f003 0303 	and.w	r3, r3, #3
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d006      	beq.n	800b2e6 <do_memp_free_pool+0x22>
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	; (800b304 <do_memp_free_pool+0x40>)
 800b2da:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b2de:	490a      	ldr	r1, [pc, #40]	; (800b308 <do_memp_free_pool+0x44>)
 800b2e0:	480a      	ldr	r0, [pc, #40]	; (800b30c <do_memp_free_pool+0x48>)
 800b2e2:	f00a f8bd 	bl	8015460 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	689b      	ldr	r3, [r3, #8]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b2fc:	bf00      	nop
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	08016afc 	.word	0x08016afc
 800b308:	08016bac 	.word	0x08016bac
 800b30c:	08016b50 	.word	0x08016b50

0800b310 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d106      	bne.n	800b32e <memp_free_pool+0x1e>
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <memp_free_pool+0x3c>)
 800b322:	f240 1295 	movw	r2, #405	; 0x195
 800b326:	490a      	ldr	r1, [pc, #40]	; (800b350 <memp_free_pool+0x40>)
 800b328:	480a      	ldr	r0, [pc, #40]	; (800b354 <memp_free_pool+0x44>)
 800b32a:	f00a f899 	bl	8015460 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d007      	beq.n	800b344 <memp_free_pool+0x34>
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d004      	beq.n	800b344 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7ff ffc1 	bl	800b2c4 <do_memp_free_pool>
 800b342:	e000      	b.n	800b346 <memp_free_pool+0x36>
    return;
 800b344:	bf00      	nop
}
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	08016afc 	.word	0x08016afc
 800b350:	08016b78 	.word	0x08016b78
 800b354:	08016b50 	.word	0x08016b50

0800b358 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	4603      	mov	r3, r0
 800b360:	6039      	str	r1, [r7, #0]
 800b362:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b364:	79fb      	ldrb	r3, [r7, #7]
 800b366:	2b08      	cmp	r3, #8
 800b368:	d907      	bls.n	800b37a <memp_free+0x22>
 800b36a:	4b0c      	ldr	r3, [pc, #48]	; (800b39c <memp_free+0x44>)
 800b36c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b370:	490b      	ldr	r1, [pc, #44]	; (800b3a0 <memp_free+0x48>)
 800b372:	480c      	ldr	r0, [pc, #48]	; (800b3a4 <memp_free+0x4c>)
 800b374:	f00a f874 	bl	8015460 <iprintf>
 800b378:	e00c      	b.n	800b394 <memp_free+0x3c>

  if (mem == NULL) {
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d008      	beq.n	800b392 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b380:	79fb      	ldrb	r3, [r7, #7]
 800b382:	4a09      	ldr	r2, [pc, #36]	; (800b3a8 <memp_free+0x50>)
 800b384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff ff9a 	bl	800b2c4 <do_memp_free_pool>
 800b390:	e000      	b.n	800b394 <memp_free+0x3c>
    return;
 800b392:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b394:	3708      	adds	r7, #8
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	08016afc 	.word	0x08016afc
 800b3a0:	08016bcc 	.word	0x08016bcc
 800b3a4:	08016b50 	.word	0x08016b50
 800b3a8:	0801b1f0 	.word	0x0801b1f0

0800b3ac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b3b0:	bf00      	nop
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
	...

0800b3bc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d108      	bne.n	800b3e2 <netif_add+0x26>
 800b3d0:	4b57      	ldr	r3, [pc, #348]	; (800b530 <netif_add+0x174>)
 800b3d2:	f240 1227 	movw	r2, #295	; 0x127
 800b3d6:	4957      	ldr	r1, [pc, #348]	; (800b534 <netif_add+0x178>)
 800b3d8:	4857      	ldr	r0, [pc, #348]	; (800b538 <netif_add+0x17c>)
 800b3da:	f00a f841 	bl	8015460 <iprintf>
 800b3de:	2300      	movs	r3, #0
 800b3e0:	e0a2      	b.n	800b528 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d108      	bne.n	800b3fa <netif_add+0x3e>
 800b3e8:	4b51      	ldr	r3, [pc, #324]	; (800b530 <netif_add+0x174>)
 800b3ea:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b3ee:	4953      	ldr	r1, [pc, #332]	; (800b53c <netif_add+0x180>)
 800b3f0:	4851      	ldr	r0, [pc, #324]	; (800b538 <netif_add+0x17c>)
 800b3f2:	f00a f835 	bl	8015460 <iprintf>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	e096      	b.n	800b528 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b400:	4b4f      	ldr	r3, [pc, #316]	; (800b540 <netif_add+0x184>)
 800b402:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b40a:	4b4d      	ldr	r3, [pc, #308]	; (800b540 <netif_add+0x184>)
 800b40c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b414:	4b4a      	ldr	r3, [pc, #296]	; (800b540 <netif_add+0x184>)
 800b416:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	4a45      	ldr	r2, [pc, #276]	; (800b544 <netif_add+0x188>)
 800b42e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2200      	movs	r2, #0
 800b442:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6a3a      	ldr	r2, [r7, #32]
 800b448:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b44a:	4b3f      	ldr	r3, [pc, #252]	; (800b548 <netif_add+0x18c>)
 800b44c:	781a      	ldrb	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b458:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	68b9      	ldr	r1, [r7, #8]
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f000 f913 	bl	800b68c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	4798      	blx	r3
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <netif_add+0xba>
    return NULL;
 800b472:	2300      	movs	r3, #0
 800b474:	e058      	b.n	800b528 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b47c:	2bff      	cmp	r3, #255	; 0xff
 800b47e:	d103      	bne.n	800b488 <netif_add+0xcc>
        netif->num = 0;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b48c:	4b2f      	ldr	r3, [pc, #188]	; (800b54c <netif_add+0x190>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	e02b      	b.n	800b4ec <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d106      	bne.n	800b4aa <netif_add+0xee>
 800b49c:	4b24      	ldr	r3, [pc, #144]	; (800b530 <netif_add+0x174>)
 800b49e:	f240 128b 	movw	r2, #395	; 0x18b
 800b4a2:	492b      	ldr	r1, [pc, #172]	; (800b550 <netif_add+0x194>)
 800b4a4:	4824      	ldr	r0, [pc, #144]	; (800b538 <netif_add+0x17c>)
 800b4a6:	f009 ffdb 	bl	8015460 <iprintf>
        num_netifs++;
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	2bff      	cmp	r3, #255	; 0xff
 800b4b4:	dd06      	ble.n	800b4c4 <netif_add+0x108>
 800b4b6:	4b1e      	ldr	r3, [pc, #120]	; (800b530 <netif_add+0x174>)
 800b4b8:	f240 128d 	movw	r2, #397	; 0x18d
 800b4bc:	4925      	ldr	r1, [pc, #148]	; (800b554 <netif_add+0x198>)
 800b4be:	481e      	ldr	r0, [pc, #120]	; (800b538 <netif_add+0x17c>)
 800b4c0:	f009 ffce 	bl	8015460 <iprintf>
        if (netif2->num == netif->num) {
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d108      	bne.n	800b4e6 <netif_add+0x12a>
          netif->num++;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b4da:	3301      	adds	r3, #1
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b4e4:	e005      	b.n	800b4f2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1d0      	bne.n	800b494 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1be      	bne.n	800b476 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b4fe:	2bfe      	cmp	r3, #254	; 0xfe
 800b500:	d103      	bne.n	800b50a <netif_add+0x14e>
    netif_num = 0;
 800b502:	4b11      	ldr	r3, [pc, #68]	; (800b548 <netif_add+0x18c>)
 800b504:	2200      	movs	r2, #0
 800b506:	701a      	strb	r2, [r3, #0]
 800b508:	e006      	b.n	800b518 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b510:	3301      	adds	r3, #1
 800b512:	b2da      	uxtb	r2, r3
 800b514:	4b0c      	ldr	r3, [pc, #48]	; (800b548 <netif_add+0x18c>)
 800b516:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b518:	4b0c      	ldr	r3, [pc, #48]	; (800b54c <netif_add+0x190>)
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b520:	4a0a      	ldr	r2, [pc, #40]	; (800b54c <netif_add+0x190>)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b526:	68fb      	ldr	r3, [r7, #12]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	08016be8 	.word	0x08016be8
 800b534:	08016c7c 	.word	0x08016c7c
 800b538:	08016c38 	.word	0x08016c38
 800b53c:	08016c98 	.word	0x08016c98
 800b540:	0801b254 	.word	0x0801b254
 800b544:	0800b967 	.word	0x0800b967
 800b548:	20008b9c 	.word	0x20008b9c
 800b54c:	20008b94 	.word	0x20008b94
 800b550:	08016cbc 	.word	0x08016cbc
 800b554:	08016cd0 	.word	0x08016cd0

0800b558 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f002 fefb 	bl	800e360 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f007 fc37 	bl	8012de0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b572:	bf00      	nop
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
	...

0800b57c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d106      	bne.n	800b59c <netif_do_set_ipaddr+0x20>
 800b58e:	4b1d      	ldr	r3, [pc, #116]	; (800b604 <netif_do_set_ipaddr+0x88>)
 800b590:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b594:	491c      	ldr	r1, [pc, #112]	; (800b608 <netif_do_set_ipaddr+0x8c>)
 800b596:	481d      	ldr	r0, [pc, #116]	; (800b60c <netif_do_set_ipaddr+0x90>)
 800b598:	f009 ff62 	bl	8015460 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d106      	bne.n	800b5b0 <netif_do_set_ipaddr+0x34>
 800b5a2:	4b18      	ldr	r3, [pc, #96]	; (800b604 <netif_do_set_ipaddr+0x88>)
 800b5a4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b5a8:	4917      	ldr	r1, [pc, #92]	; (800b608 <netif_do_set_ipaddr+0x8c>)
 800b5aa:	4818      	ldr	r0, [pc, #96]	; (800b60c <netif_do_set_ipaddr+0x90>)
 800b5ac:	f009 ff58 	bl	8015460 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d01c      	beq.n	800b5f8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	681a      	ldr	r2, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b5ce:	f107 0314 	add.w	r3, r7, #20
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7ff ffbf 	bl	800b558 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <netif_do_set_ipaddr+0x6a>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	e000      	b.n	800b5e8 <netif_do_set_ipaddr+0x6c>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f000 f8d2 	bl	800b798 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e000      	b.n	800b5fa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3718      	adds	r7, #24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	08016be8 	.word	0x08016be8
 800b608:	08016d00 	.word	0x08016d00
 800b60c:	08016c38 	.word	0x08016c38

0800b610 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	3308      	adds	r3, #8
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	429a      	cmp	r2, r3
 800b628:	d00a      	beq.n	800b640 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <netif_do_set_netmask+0x26>
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	e000      	b.n	800b638 <netif_do_set_netmask+0x28>
 800b636:	2300      	movs	r3, #0
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b63c:	2301      	movs	r3, #1
 800b63e:	e000      	b.n	800b642 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr

0800b64e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b64e:	b480      	push	{r7}
 800b650:	b085      	sub	sp, #20
 800b652:	af00      	add	r7, sp, #0
 800b654:	60f8      	str	r0, [r7, #12]
 800b656:	60b9      	str	r1, [r7, #8]
 800b658:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	330c      	adds	r3, #12
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d00a      	beq.n	800b67e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d002      	beq.n	800b674 <netif_do_set_gw+0x26>
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	e000      	b.n	800b676 <netif_do_set_gw+0x28>
 800b674:	2300      	movs	r3, #0
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b67a:	2301      	movs	r3, #1
 800b67c:	e000      	b.n	800b680 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b088      	sub	sp, #32
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
 800b698:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b69a:	2300      	movs	r3, #0
 800b69c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b6a8:	4b1c      	ldr	r3, [pc, #112]	; (800b71c <netif_set_addr+0x90>)
 800b6aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d101      	bne.n	800b6b6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b6b2:	4b1a      	ldr	r3, [pc, #104]	; (800b71c <netif_set_addr+0x90>)
 800b6b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b6bc:	4b17      	ldr	r3, [pc, #92]	; (800b71c <netif_set_addr+0x90>)
 800b6be:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <netif_set_addr+0x42>
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <netif_set_addr+0x46>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e000      	b.n	800b6d4 <netif_set_addr+0x48>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d006      	beq.n	800b6ea <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b6dc:	f107 0310 	add.w	r3, r7, #16
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	68b9      	ldr	r1, [r7, #8]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f7ff ff49 	bl	800b57c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b6ea:	69fa      	ldr	r2, [r7, #28]
 800b6ec:	6879      	ldr	r1, [r7, #4]
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f7ff ff8e 	bl	800b610 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	6839      	ldr	r1, [r7, #0]
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f7ff ffa8 	bl	800b64e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d106      	bne.n	800b712 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b704:	f107 0310 	add.w	r3, r7, #16
 800b708:	461a      	mov	r2, r3
 800b70a:	68b9      	ldr	r1, [r7, #8]
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f7ff ff35 	bl	800b57c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b712:	bf00      	nop
 800b714:	3720      	adds	r7, #32
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	0801b254 	.word	0x0801b254

0800b720 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b728:	4a04      	ldr	r2, [pc, #16]	; (800b73c <netif_set_default+0x1c>)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b72e:	bf00      	nop
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	20008b98 	.word	0x20008b98

0800b740 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d107      	bne.n	800b75e <netif_set_up+0x1e>
 800b74e:	4b0f      	ldr	r3, [pc, #60]	; (800b78c <netif_set_up+0x4c>)
 800b750:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b754:	490e      	ldr	r1, [pc, #56]	; (800b790 <netif_set_up+0x50>)
 800b756:	480f      	ldr	r0, [pc, #60]	; (800b794 <netif_set_up+0x54>)
 800b758:	f009 fe82 	bl	8015460 <iprintf>
 800b75c:	e013      	b.n	800b786 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b764:	f003 0301 	and.w	r3, r3, #1
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10c      	bne.n	800b786 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b772:	f043 0301 	orr.w	r3, r3, #1
 800b776:	b2da      	uxtb	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b77e:	2103      	movs	r1, #3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f809 	bl	800b798 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	08016be8 	.word	0x08016be8
 800b790:	08016d70 	.word	0x08016d70
 800b794:	08016c38 	.word	0x08016c38

0800b798 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d106      	bne.n	800b7b8 <netif_issue_reports+0x20>
 800b7aa:	4b18      	ldr	r3, [pc, #96]	; (800b80c <netif_issue_reports+0x74>)
 800b7ac:	f240 326d 	movw	r2, #877	; 0x36d
 800b7b0:	4917      	ldr	r1, [pc, #92]	; (800b810 <netif_issue_reports+0x78>)
 800b7b2:	4818      	ldr	r0, [pc, #96]	; (800b814 <netif_issue_reports+0x7c>)
 800b7b4:	f009 fe54 	bl	8015460 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b7be:	f003 0304 	and.w	r3, r3, #4
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d01e      	beq.n	800b804 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b7cc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d017      	beq.n	800b804 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b7d4:	78fb      	ldrb	r3, [r7, #3]
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d013      	beq.n	800b806 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00e      	beq.n	800b806 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b7ee:	f003 0308 	and.w	r3, r3, #8
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d007      	beq.n	800b806 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f008 fa59 	bl	8013cb4 <etharp_request>
 800b802:	e000      	b.n	800b806 <netif_issue_reports+0x6e>
    return;
 800b804:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b806:	3708      	adds	r7, #8
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	08016be8 	.word	0x08016be8
 800b810:	08016d8c 	.word	0x08016d8c
 800b814:	08016c38 	.word	0x08016c38

0800b818 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d107      	bne.n	800b836 <netif_set_down+0x1e>
 800b826:	4b12      	ldr	r3, [pc, #72]	; (800b870 <netif_set_down+0x58>)
 800b828:	f240 329b 	movw	r2, #923	; 0x39b
 800b82c:	4911      	ldr	r1, [pc, #68]	; (800b874 <netif_set_down+0x5c>)
 800b82e:	4812      	ldr	r0, [pc, #72]	; (800b878 <netif_set_down+0x60>)
 800b830:	f009 fe16 	bl	8015460 <iprintf>
 800b834:	e019      	b.n	800b86a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b83c:	f003 0301 	and.w	r3, r3, #1
 800b840:	2b00      	cmp	r3, #0
 800b842:	d012      	beq.n	800b86a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b84a:	f023 0301 	bic.w	r3, r3, #1
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b85c:	f003 0308 	and.w	r3, r3, #8
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f007 fde3 	bl	8013430 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	08016be8 	.word	0x08016be8
 800b874:	08016db0 	.word	0x08016db0
 800b878:	08016c38 	.word	0x08016c38

0800b87c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d107      	bne.n	800b89a <netif_set_link_up+0x1e>
 800b88a:	4b13      	ldr	r3, [pc, #76]	; (800b8d8 <netif_set_link_up+0x5c>)
 800b88c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b890:	4912      	ldr	r1, [pc, #72]	; (800b8dc <netif_set_link_up+0x60>)
 800b892:	4813      	ldr	r0, [pc, #76]	; (800b8e0 <netif_set_link_up+0x64>)
 800b894:	f009 fde4 	bl	8015460 <iprintf>
 800b898:	e01b      	b.n	800b8d2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8a0:	f003 0304 	and.w	r3, r3, #4
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d114      	bne.n	800b8d2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8ae:	f043 0304 	orr.w	r3, r3, #4
 800b8b2:	b2da      	uxtb	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b8ba:	2103      	movs	r1, #3
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7ff ff6b 	bl	800b798 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	69db      	ldr	r3, [r3, #28]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d003      	beq.n	800b8d2 <netif_set_link_up+0x56>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	08016be8 	.word	0x08016be8
 800b8dc:	08016dd0 	.word	0x08016dd0
 800b8e0:	08016c38 	.word	0x08016c38

0800b8e4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d107      	bne.n	800b902 <netif_set_link_down+0x1e>
 800b8f2:	4b11      	ldr	r3, [pc, #68]	; (800b938 <netif_set_link_down+0x54>)
 800b8f4:	f240 4206 	movw	r2, #1030	; 0x406
 800b8f8:	4910      	ldr	r1, [pc, #64]	; (800b93c <netif_set_link_down+0x58>)
 800b8fa:	4811      	ldr	r0, [pc, #68]	; (800b940 <netif_set_link_down+0x5c>)
 800b8fc:	f009 fdb0 	bl	8015460 <iprintf>
 800b900:	e017      	b.n	800b932 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b908:	f003 0304 	and.w	r3, r3, #4
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d010      	beq.n	800b932 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b916:	f023 0304 	bic.w	r3, r3, #4
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	69db      	ldr	r3, [r3, #28]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d003      	beq.n	800b932 <netif_set_link_down+0x4e>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	08016be8 	.word	0x08016be8
 800b93c:	08016df4 	.word	0x08016df4
 800b940:	08016c38 	.word	0x08016c38

0800b944 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d002      	beq.n	800b95a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	61da      	str	r2, [r3, #28]
  }
}
 800b95a:	bf00      	nop
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b966:	b480      	push	{r7}
 800b968:	b085      	sub	sp, #20
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	60f8      	str	r0, [r7, #12]
 800b96e:	60b9      	str	r1, [r7, #8]
 800b970:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b972:	f06f 030b 	mvn.w	r3, #11
}
 800b976:	4618      	mov	r0, r3
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
	...

0800b984 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	4603      	mov	r3, r0
 800b98c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b98e:	79fb      	ldrb	r3, [r7, #7]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d013      	beq.n	800b9bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b994:	4b0d      	ldr	r3, [pc, #52]	; (800b9cc <netif_get_by_index+0x48>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	60fb      	str	r3, [r7, #12]
 800b99a:	e00c      	b.n	800b9b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	79fa      	ldrb	r2, [r7, #7]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d101      	bne.n	800b9b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	e006      	b.n	800b9be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	60fb      	str	r3, [r7, #12]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d1ef      	bne.n	800b99c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	20008b94 	.word	0x20008b94

0800b9d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ba08 <pbuf_free_ooseq+0x38>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b9dc:	4b0b      	ldr	r3, [pc, #44]	; (800ba0c <pbuf_free_ooseq+0x3c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	607b      	str	r3, [r7, #4]
 800b9e2:	e00a      	b.n	800b9fa <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d003      	beq.n	800b9f4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f002 fcf5 	bl	800e3dc <tcp_free_ooseq>
      return;
 800b9f2:	e005      	b.n	800ba00 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	607b      	str	r3, [r7, #4]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1f1      	bne.n	800b9e4 <pbuf_free_ooseq+0x14>
    }
  }
}
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20008b9d 	.word	0x20008b9d
 800ba0c:	20008bac 	.word	0x20008bac

0800ba10 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ba10:	b480      	push	{r7}
 800ba12:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800ba14:	4b03      	ldr	r3, [pc, #12]	; (800ba24 <pbuf_pool_is_empty+0x14>)
 800ba16:	2201      	movs	r2, #1
 800ba18:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ba1a:	bf00      	nop
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	20008b9d 	.word	0x20008b9d

0800ba28 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	4611      	mov	r1, r2
 800ba34:	461a      	mov	r2, r3
 800ba36:	460b      	mov	r3, r1
 800ba38:	80fb      	strh	r3, [r7, #6]
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	88fa      	ldrh	r2, [r7, #6]
 800ba4e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	88ba      	ldrh	r2, [r7, #4]
 800ba54:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ba56:	8b3b      	ldrh	r3, [r7, #24]
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	7f3a      	ldrb	r2, [r7, #28]
 800ba62:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2201      	movs	r2, #1
 800ba68:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	73da      	strb	r2, [r3, #15]
}
 800ba70:	bf00      	nop
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08c      	sub	sp, #48	; 0x30
 800ba80:	af02      	add	r7, sp, #8
 800ba82:	4603      	mov	r3, r0
 800ba84:	71fb      	strb	r3, [r7, #7]
 800ba86:	460b      	mov	r3, r1
 800ba88:	80bb      	strh	r3, [r7, #4]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ba8e:	79fb      	ldrb	r3, [r7, #7]
 800ba90:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ba92:	887b      	ldrh	r3, [r7, #2]
 800ba94:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ba98:	d07f      	beq.n	800bb9a <pbuf_alloc+0x11e>
 800ba9a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ba9e:	f300 80c8 	bgt.w	800bc32 <pbuf_alloc+0x1b6>
 800baa2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800baa6:	d010      	beq.n	800baca <pbuf_alloc+0x4e>
 800baa8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800baac:	f300 80c1 	bgt.w	800bc32 <pbuf_alloc+0x1b6>
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d002      	beq.n	800baba <pbuf_alloc+0x3e>
 800bab4:	2b41      	cmp	r3, #65	; 0x41
 800bab6:	f040 80bc 	bne.w	800bc32 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800baba:	887a      	ldrh	r2, [r7, #2]
 800babc:	88bb      	ldrh	r3, [r7, #4]
 800babe:	4619      	mov	r1, r3
 800bac0:	2000      	movs	r0, #0
 800bac2:	f000 f8d1 	bl	800bc68 <pbuf_alloc_reference>
 800bac6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bac8:	e0bd      	b.n	800bc46 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800baca:	2300      	movs	r3, #0
 800bacc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bace:	2300      	movs	r3, #0
 800bad0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bad2:	88bb      	ldrh	r3, [r7, #4]
 800bad4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bad6:	2008      	movs	r0, #8
 800bad8:	f7ff fbce 	bl	800b278 <memp_malloc>
 800badc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d109      	bne.n	800baf8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bae4:	f7ff ff94 	bl	800ba10 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baea:	2b00      	cmp	r3, #0
 800baec:	d002      	beq.n	800baf4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800baee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baf0:	f000 faa8 	bl	800c044 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800baf4:	2300      	movs	r3, #0
 800baf6:	e0a7      	b.n	800bc48 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800baf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bafa:	3303      	adds	r3, #3
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	f023 0303 	bic.w	r3, r3, #3
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	8b7a      	ldrh	r2, [r7, #26]
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	bf28      	it	cs
 800bb10:	4613      	movcs	r3, r2
 800bb12:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bb14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb16:	3310      	adds	r3, #16
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	3303      	adds	r3, #3
 800bb1e:	f023 0303 	bic.w	r3, r3, #3
 800bb22:	4618      	mov	r0, r3
 800bb24:	89f9      	ldrh	r1, [r7, #14]
 800bb26:	8b7a      	ldrh	r2, [r7, #26]
 800bb28:	2300      	movs	r3, #0
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	887b      	ldrh	r3, [r7, #2]
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	460b      	mov	r3, r1
 800bb32:	4601      	mov	r1, r0
 800bb34:	6938      	ldr	r0, [r7, #16]
 800bb36:	f7ff ff77 	bl	800ba28 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	f003 0303 	and.w	r3, r3, #3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d006      	beq.n	800bb54 <pbuf_alloc+0xd8>
 800bb46:	4b42      	ldr	r3, [pc, #264]	; (800bc50 <pbuf_alloc+0x1d4>)
 800bb48:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb4c:	4941      	ldr	r1, [pc, #260]	; (800bc54 <pbuf_alloc+0x1d8>)
 800bb4e:	4842      	ldr	r0, [pc, #264]	; (800bc58 <pbuf_alloc+0x1dc>)
 800bb50:	f009 fc86 	bl	8015460 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bb54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb56:	3303      	adds	r3, #3
 800bb58:	f023 0303 	bic.w	r3, r3, #3
 800bb5c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bb60:	d106      	bne.n	800bb70 <pbuf_alloc+0xf4>
 800bb62:	4b3b      	ldr	r3, [pc, #236]	; (800bc50 <pbuf_alloc+0x1d4>)
 800bb64:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bb68:	493c      	ldr	r1, [pc, #240]	; (800bc5c <pbuf_alloc+0x1e0>)
 800bb6a:	483b      	ldr	r0, [pc, #236]	; (800bc58 <pbuf_alloc+0x1dc>)
 800bb6c:	f009 fc78 	bl	8015460 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d102      	bne.n	800bb7c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	627b      	str	r3, [r7, #36]	; 0x24
 800bb7a:	e002      	b.n	800bb82 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bb86:	8b7a      	ldrh	r2, [r7, #26]
 800bb88:	89fb      	ldrh	r3, [r7, #14]
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bb92:	8b7b      	ldrh	r3, [r7, #26]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d19e      	bne.n	800bad6 <pbuf_alloc+0x5a>
      break;
 800bb98:	e055      	b.n	800bc46 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bb9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb9c:	3303      	adds	r3, #3
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	f023 0303 	bic.w	r3, r3, #3
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	88bb      	ldrh	r3, [r7, #4]
 800bba8:	3303      	adds	r3, #3
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	f023 0303 	bic.w	r3, r3, #3
 800bbb0:	b29b      	uxth	r3, r3
 800bbb2:	4413      	add	r3, r2
 800bbb4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bbb6:	8b3b      	ldrh	r3, [r7, #24]
 800bbb8:	3310      	adds	r3, #16
 800bbba:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bbbc:	8b3a      	ldrh	r2, [r7, #24]
 800bbbe:	88bb      	ldrh	r3, [r7, #4]
 800bbc0:	3303      	adds	r3, #3
 800bbc2:	f023 0303 	bic.w	r3, r3, #3
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d306      	bcc.n	800bbd8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bbca:	8afa      	ldrh	r2, [r7, #22]
 800bbcc:	88bb      	ldrh	r3, [r7, #4]
 800bbce:	3303      	adds	r3, #3
 800bbd0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d201      	bcs.n	800bbdc <pbuf_alloc+0x160>
        return NULL;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	e035      	b.n	800bc48 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bbdc:	8afb      	ldrh	r3, [r7, #22]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff f9ba 	bl	800af58 <mem_malloc>
 800bbe4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d101      	bne.n	800bbf0 <pbuf_alloc+0x174>
        return NULL;
 800bbec:	2300      	movs	r3, #0
 800bbee:	e02b      	b.n	800bc48 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bbf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbf2:	3310      	adds	r3, #16
 800bbf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf6:	4413      	add	r3, r2
 800bbf8:	3303      	adds	r3, #3
 800bbfa:	f023 0303 	bic.w	r3, r3, #3
 800bbfe:	4618      	mov	r0, r3
 800bc00:	88b9      	ldrh	r1, [r7, #4]
 800bc02:	88ba      	ldrh	r2, [r7, #4]
 800bc04:	2300      	movs	r3, #0
 800bc06:	9301      	str	r3, [sp, #4]
 800bc08:	887b      	ldrh	r3, [r7, #2]
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4601      	mov	r1, r0
 800bc10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc12:	f7ff ff09 	bl	800ba28 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	f003 0303 	and.w	r3, r3, #3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d010      	beq.n	800bc44 <pbuf_alloc+0x1c8>
 800bc22:	4b0b      	ldr	r3, [pc, #44]	; (800bc50 <pbuf_alloc+0x1d4>)
 800bc24:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bc28:	490d      	ldr	r1, [pc, #52]	; (800bc60 <pbuf_alloc+0x1e4>)
 800bc2a:	480b      	ldr	r0, [pc, #44]	; (800bc58 <pbuf_alloc+0x1dc>)
 800bc2c:	f009 fc18 	bl	8015460 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bc30:	e008      	b.n	800bc44 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bc32:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <pbuf_alloc+0x1d4>)
 800bc34:	f240 1227 	movw	r2, #295	; 0x127
 800bc38:	490a      	ldr	r1, [pc, #40]	; (800bc64 <pbuf_alloc+0x1e8>)
 800bc3a:	4807      	ldr	r0, [pc, #28]	; (800bc58 <pbuf_alloc+0x1dc>)
 800bc3c:	f009 fc10 	bl	8015460 <iprintf>
      return NULL;
 800bc40:	2300      	movs	r3, #0
 800bc42:	e001      	b.n	800bc48 <pbuf_alloc+0x1cc>
      break;
 800bc44:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3728      	adds	r7, #40	; 0x28
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	08016e18 	.word	0x08016e18
 800bc54:	08016e48 	.word	0x08016e48
 800bc58:	08016e78 	.word	0x08016e78
 800bc5c:	08016ea0 	.word	0x08016ea0
 800bc60:	08016ed4 	.word	0x08016ed4
 800bc64:	08016f00 	.word	0x08016f00

0800bc68 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af02      	add	r7, sp, #8
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	807b      	strh	r3, [r7, #2]
 800bc74:	4613      	mov	r3, r2
 800bc76:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bc78:	883b      	ldrh	r3, [r7, #0]
 800bc7a:	2b41      	cmp	r3, #65	; 0x41
 800bc7c:	d009      	beq.n	800bc92 <pbuf_alloc_reference+0x2a>
 800bc7e:	883b      	ldrh	r3, [r7, #0]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d006      	beq.n	800bc92 <pbuf_alloc_reference+0x2a>
 800bc84:	4b0f      	ldr	r3, [pc, #60]	; (800bcc4 <pbuf_alloc_reference+0x5c>)
 800bc86:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bc8a:	490f      	ldr	r1, [pc, #60]	; (800bcc8 <pbuf_alloc_reference+0x60>)
 800bc8c:	480f      	ldr	r0, [pc, #60]	; (800bccc <pbuf_alloc_reference+0x64>)
 800bc8e:	f009 fbe7 	bl	8015460 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bc92:	2007      	movs	r0, #7
 800bc94:	f7ff faf0 	bl	800b278 <memp_malloc>
 800bc98:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d101      	bne.n	800bca4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bca0:	2300      	movs	r3, #0
 800bca2:	e00b      	b.n	800bcbc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bca4:	8879      	ldrh	r1, [r7, #2]
 800bca6:	887a      	ldrh	r2, [r7, #2]
 800bca8:	2300      	movs	r3, #0
 800bcaa:	9301      	str	r3, [sp, #4]
 800bcac:	883b      	ldrh	r3, [r7, #0]
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	6879      	ldr	r1, [r7, #4]
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f7ff feb7 	bl	800ba28 <pbuf_init_alloced_pbuf>
  return p;
 800bcba:	68fb      	ldr	r3, [r7, #12]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	08016e18 	.word	0x08016e18
 800bcc8:	08016f1c 	.word	0x08016f1c
 800bccc:	08016e78 	.word	0x08016e78

0800bcd0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af02      	add	r7, sp, #8
 800bcd6:	607b      	str	r3, [r7, #4]
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73fb      	strb	r3, [r7, #15]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	81bb      	strh	r3, [r7, #12]
 800bce0:	4613      	mov	r3, r2
 800bce2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
 800bce6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bce8:	8a7b      	ldrh	r3, [r7, #18]
 800bcea:	3303      	adds	r3, #3
 800bcec:	f023 0203 	bic.w	r2, r3, #3
 800bcf0:	89bb      	ldrh	r3, [r7, #12]
 800bcf2:	441a      	add	r2, r3
 800bcf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d901      	bls.n	800bcfe <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	e018      	b.n	800bd30 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bcfe:	6a3b      	ldr	r3, [r7, #32]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d007      	beq.n	800bd14 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bd04:	8a7b      	ldrh	r3, [r7, #18]
 800bd06:	3303      	adds	r3, #3
 800bd08:	f023 0303 	bic.w	r3, r3, #3
 800bd0c:	6a3a      	ldr	r2, [r7, #32]
 800bd0e:	4413      	add	r3, r2
 800bd10:	617b      	str	r3, [r7, #20]
 800bd12:	e001      	b.n	800bd18 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bd14:	2300      	movs	r3, #0
 800bd16:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	89b9      	ldrh	r1, [r7, #12]
 800bd1c:	89ba      	ldrh	r2, [r7, #12]
 800bd1e:	2302      	movs	r3, #2
 800bd20:	9301      	str	r3, [sp, #4]
 800bd22:	897b      	ldrh	r3, [r7, #10]
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	460b      	mov	r3, r1
 800bd28:	6979      	ldr	r1, [r7, #20]
 800bd2a:	f7ff fe7d 	bl	800ba28 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bd2e:	687b      	ldr	r3, [r7, #4]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3718      	adds	r7, #24
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d106      	bne.n	800bd58 <pbuf_realloc+0x20>
 800bd4a:	4b3a      	ldr	r3, [pc, #232]	; (800be34 <pbuf_realloc+0xfc>)
 800bd4c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bd50:	4939      	ldr	r1, [pc, #228]	; (800be38 <pbuf_realloc+0x100>)
 800bd52:	483a      	ldr	r0, [pc, #232]	; (800be3c <pbuf_realloc+0x104>)
 800bd54:	f009 fb84 	bl	8015460 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	891b      	ldrh	r3, [r3, #8]
 800bd5c:	887a      	ldrh	r2, [r7, #2]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d263      	bcs.n	800be2a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	891a      	ldrh	r2, [r3, #8]
 800bd66:	887b      	ldrh	r3, [r7, #2]
 800bd68:	1ad3      	subs	r3, r2, r3
 800bd6a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bd6c:	887b      	ldrh	r3, [r7, #2]
 800bd6e:	817b      	strh	r3, [r7, #10]
  q = p;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bd74:	e018      	b.n	800bda8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	895b      	ldrh	r3, [r3, #10]
 800bd7a:	897a      	ldrh	r2, [r7, #10]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	891a      	ldrh	r2, [r3, #8]
 800bd84:	893b      	ldrh	r3, [r7, #8]
 800bd86:	1ad3      	subs	r3, r2, r3
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d106      	bne.n	800bda8 <pbuf_realloc+0x70>
 800bd9a:	4b26      	ldr	r3, [pc, #152]	; (800be34 <pbuf_realloc+0xfc>)
 800bd9c:	f240 12af 	movw	r2, #431	; 0x1af
 800bda0:	4927      	ldr	r1, [pc, #156]	; (800be40 <pbuf_realloc+0x108>)
 800bda2:	4826      	ldr	r0, [pc, #152]	; (800be3c <pbuf_realloc+0x104>)
 800bda4:	f009 fb5c 	bl	8015460 <iprintf>
  while (rem_len > q->len) {
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	895b      	ldrh	r3, [r3, #10]
 800bdac:	897a      	ldrh	r2, [r7, #10]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d8e1      	bhi.n	800bd76 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	7b1b      	ldrb	r3, [r3, #12]
 800bdb6:	f003 030f 	and.w	r3, r3, #15
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d121      	bne.n	800be02 <pbuf_realloc+0xca>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	895b      	ldrh	r3, [r3, #10]
 800bdc2:	897a      	ldrh	r2, [r7, #10]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d01c      	beq.n	800be02 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	7b5b      	ldrb	r3, [r3, #13]
 800bdcc:	f003 0302 	and.w	r3, r3, #2
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d116      	bne.n	800be02 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	685a      	ldr	r2, [r3, #4]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	897b      	ldrh	r3, [r7, #10]
 800bde0:	4413      	add	r3, r2
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	4619      	mov	r1, r3
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f7fe ffba 	bl	800ad60 <mem_trim>
 800bdec:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d106      	bne.n	800be02 <pbuf_realloc+0xca>
 800bdf4:	4b0f      	ldr	r3, [pc, #60]	; (800be34 <pbuf_realloc+0xfc>)
 800bdf6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bdfa:	4912      	ldr	r1, [pc, #72]	; (800be44 <pbuf_realloc+0x10c>)
 800bdfc:	480f      	ldr	r0, [pc, #60]	; (800be3c <pbuf_realloc+0x104>)
 800bdfe:	f009 fb2f 	bl	8015460 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	897a      	ldrh	r2, [r7, #10]
 800be06:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	895a      	ldrh	r2, [r3, #10]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d004      	beq.n	800be22 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 f911 	bl	800c044 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	601a      	str	r2, [r3, #0]
 800be28:	e000      	b.n	800be2c <pbuf_realloc+0xf4>
    return;
 800be2a:	bf00      	nop

}
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	08016e18 	.word	0x08016e18
 800be38:	08016f30 	.word	0x08016f30
 800be3c:	08016e78 	.word	0x08016e78
 800be40:	08016f48 	.word	0x08016f48
 800be44:	08016f60 	.word	0x08016f60

0800be48 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	4613      	mov	r3, r2
 800be54:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d106      	bne.n	800be6a <pbuf_add_header_impl+0x22>
 800be5c:	4b2b      	ldr	r3, [pc, #172]	; (800bf0c <pbuf_add_header_impl+0xc4>)
 800be5e:	f240 12df 	movw	r2, #479	; 0x1df
 800be62:	492b      	ldr	r1, [pc, #172]	; (800bf10 <pbuf_add_header_impl+0xc8>)
 800be64:	482b      	ldr	r0, [pc, #172]	; (800bf14 <pbuf_add_header_impl+0xcc>)
 800be66:	f009 fafb 	bl	8015460 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d003      	beq.n	800be78 <pbuf_add_header_impl+0x30>
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be76:	d301      	bcc.n	800be7c <pbuf_add_header_impl+0x34>
    return 1;
 800be78:	2301      	movs	r3, #1
 800be7a:	e043      	b.n	800bf04 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d101      	bne.n	800be86 <pbuf_add_header_impl+0x3e>
    return 0;
 800be82:	2300      	movs	r3, #0
 800be84:	e03e      	b.n	800bf04 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	891a      	ldrh	r2, [r3, #8]
 800be8e:	8a7b      	ldrh	r3, [r7, #18]
 800be90:	4413      	add	r3, r2
 800be92:	b29b      	uxth	r3, r3
 800be94:	8a7a      	ldrh	r2, [r7, #18]
 800be96:	429a      	cmp	r2, r3
 800be98:	d901      	bls.n	800be9e <pbuf_add_header_impl+0x56>
    return 1;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e032      	b.n	800bf04 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	7b1b      	ldrb	r3, [r3, #12]
 800bea2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bea4:	8a3b      	ldrh	r3, [r7, #16]
 800bea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00c      	beq.n	800bec8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	685a      	ldr	r2, [r3, #4]
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	425b      	negs	r3, r3
 800beb6:	4413      	add	r3, r2
 800beb8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3310      	adds	r3, #16
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d20d      	bcs.n	800bee0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bec4:	2301      	movs	r3, #1
 800bec6:	e01d      	b.n	800bf04 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bec8:	79fb      	ldrb	r3, [r7, #7]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d006      	beq.n	800bedc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	685a      	ldr	r2, [r3, #4]
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	425b      	negs	r3, r3
 800bed6:	4413      	add	r3, r2
 800bed8:	617b      	str	r3, [r7, #20]
 800beda:	e001      	b.n	800bee0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bedc:	2301      	movs	r3, #1
 800bede:	e011      	b.n	800bf04 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	697a      	ldr	r2, [r7, #20]
 800bee4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	895a      	ldrh	r2, [r3, #10]
 800beea:	8a7b      	ldrh	r3, [r7, #18]
 800beec:	4413      	add	r3, r2
 800beee:	b29a      	uxth	r2, r3
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	891a      	ldrh	r2, [r3, #8]
 800bef8:	8a7b      	ldrh	r3, [r7, #18]
 800befa:	4413      	add	r3, r2
 800befc:	b29a      	uxth	r2, r3
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	811a      	strh	r2, [r3, #8]


  return 0;
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3718      	adds	r7, #24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	08016e18 	.word	0x08016e18
 800bf10:	08016f7c 	.word	0x08016f7c
 800bf14:	08016e78 	.word	0x08016e78

0800bf18 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bf22:	2200      	movs	r2, #0
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff ff8e 	bl	800be48 <pbuf_add_header_impl>
 800bf2c:	4603      	mov	r3, r0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
	...

0800bf38 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d106      	bne.n	800bf56 <pbuf_remove_header+0x1e>
 800bf48:	4b20      	ldr	r3, [pc, #128]	; (800bfcc <pbuf_remove_header+0x94>)
 800bf4a:	f240 224b 	movw	r2, #587	; 0x24b
 800bf4e:	4920      	ldr	r1, [pc, #128]	; (800bfd0 <pbuf_remove_header+0x98>)
 800bf50:	4820      	ldr	r0, [pc, #128]	; (800bfd4 <pbuf_remove_header+0x9c>)
 800bf52:	f009 fa85 	bl	8015460 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d003      	beq.n	800bf64 <pbuf_remove_header+0x2c>
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf62:	d301      	bcc.n	800bf68 <pbuf_remove_header+0x30>
    return 1;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e02c      	b.n	800bfc2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d101      	bne.n	800bf72 <pbuf_remove_header+0x3a>
    return 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	e027      	b.n	800bfc2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	895b      	ldrh	r3, [r3, #10]
 800bf7a:	89fa      	ldrh	r2, [r7, #14]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d908      	bls.n	800bf92 <pbuf_remove_header+0x5a>
 800bf80:	4b12      	ldr	r3, [pc, #72]	; (800bfcc <pbuf_remove_header+0x94>)
 800bf82:	f240 2255 	movw	r2, #597	; 0x255
 800bf86:	4914      	ldr	r1, [pc, #80]	; (800bfd8 <pbuf_remove_header+0xa0>)
 800bf88:	4812      	ldr	r0, [pc, #72]	; (800bfd4 <pbuf_remove_header+0x9c>)
 800bf8a:	f009 fa69 	bl	8015460 <iprintf>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e017      	b.n	800bfc2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685a      	ldr	r2, [r3, #4]
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	441a      	add	r2, r3
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	895a      	ldrh	r2, [r3, #10]
 800bfa8:	89fb      	ldrh	r3, [r7, #14]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	891a      	ldrh	r2, [r3, #8]
 800bfb6:	89fb      	ldrh	r3, [r7, #14]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	08016e18 	.word	0x08016e18
 800bfd0:	08016f7c 	.word	0x08016f7c
 800bfd4:	08016e78 	.word	0x08016e78
 800bfd8:	08016f88 	.word	0x08016f88

0800bfdc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	807b      	strh	r3, [r7, #2]
 800bfe8:	4613      	mov	r3, r2
 800bfea:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bfec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	da08      	bge.n	800c006 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bff8:	425b      	negs	r3, r3
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7ff ff9b 	bl	800bf38 <pbuf_remove_header>
 800c002:	4603      	mov	r3, r0
 800c004:	e007      	b.n	800c016 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c006:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c00a:	787a      	ldrb	r2, [r7, #1]
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f7ff ff1a 	bl	800be48 <pbuf_add_header_impl>
 800c014:	4603      	mov	r3, r0
  }
}
 800c016:	4618      	mov	r0, r3
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b082      	sub	sp, #8
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	460b      	mov	r3, r1
 800c028:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c02a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c02e:	2201      	movs	r2, #1
 800c030:	4619      	mov	r1, r3
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f7ff ffd2 	bl	800bfdc <pbuf_header_impl>
 800c038:	4603      	mov	r3, r0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
	...

0800c044 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10b      	bne.n	800c06a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d106      	bne.n	800c066 <pbuf_free+0x22>
 800c058:	4b38      	ldr	r3, [pc, #224]	; (800c13c <pbuf_free+0xf8>)
 800c05a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c05e:	4938      	ldr	r1, [pc, #224]	; (800c140 <pbuf_free+0xfc>)
 800c060:	4838      	ldr	r0, [pc, #224]	; (800c144 <pbuf_free+0x100>)
 800c062:	f009 f9fd 	bl	8015460 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c066:	2300      	movs	r3, #0
 800c068:	e063      	b.n	800c132 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c06e:	e05c      	b.n	800c12a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7b9b      	ldrb	r3, [r3, #14]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d106      	bne.n	800c086 <pbuf_free+0x42>
 800c078:	4b30      	ldr	r3, [pc, #192]	; (800c13c <pbuf_free+0xf8>)
 800c07a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c07e:	4932      	ldr	r1, [pc, #200]	; (800c148 <pbuf_free+0x104>)
 800c080:	4830      	ldr	r0, [pc, #192]	; (800c144 <pbuf_free+0x100>)
 800c082:	f009 f9ed 	bl	8015460 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	7b9b      	ldrb	r3, [r3, #14]
 800c08a:	3b01      	subs	r3, #1
 800c08c:	b2da      	uxtb	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	739a      	strb	r2, [r3, #14]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	7b9b      	ldrb	r3, [r3, #14]
 800c096:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c098:	7dbb      	ldrb	r3, [r7, #22]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d143      	bne.n	800c126 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7b1b      	ldrb	r3, [r3, #12]
 800c0a8:	f003 030f 	and.w	r3, r3, #15
 800c0ac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	7b5b      	ldrb	r3, [r3, #13]
 800c0b2:	f003 0302 	and.w	r3, r3, #2
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d011      	beq.n	800c0de <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d106      	bne.n	800c0d4 <pbuf_free+0x90>
 800c0c6:	4b1d      	ldr	r3, [pc, #116]	; (800c13c <pbuf_free+0xf8>)
 800c0c8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c0cc:	491f      	ldr	r1, [pc, #124]	; (800c14c <pbuf_free+0x108>)
 800c0ce:	481d      	ldr	r0, [pc, #116]	; (800c144 <pbuf_free+0x100>)
 800c0d0:	f009 f9c6 	bl	8015460 <iprintf>
        pc->custom_free_function(p);
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	4798      	blx	r3
 800c0dc:	e01d      	b.n	800c11a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d104      	bne.n	800c0ee <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c0e4:	6879      	ldr	r1, [r7, #4]
 800c0e6:	2008      	movs	r0, #8
 800c0e8:	f7ff f936 	bl	800b358 <memp_free>
 800c0ec:	e015      	b.n	800c11a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d104      	bne.n	800c0fe <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c0f4:	6879      	ldr	r1, [r7, #4]
 800c0f6:	2007      	movs	r0, #7
 800c0f8:	f7ff f92e 	bl	800b358 <memp_free>
 800c0fc:	e00d      	b.n	800c11a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d103      	bne.n	800c10c <pbuf_free+0xc8>
          mem_free(p);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7fe fdc1 	bl	800ac8c <mem_free>
 800c10a:	e006      	b.n	800c11a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c10c:	4b0b      	ldr	r3, [pc, #44]	; (800c13c <pbuf_free+0xf8>)
 800c10e:	f240 320f 	movw	r2, #783	; 0x30f
 800c112:	490f      	ldr	r1, [pc, #60]	; (800c150 <pbuf_free+0x10c>)
 800c114:	480b      	ldr	r0, [pc, #44]	; (800c144 <pbuf_free+0x100>)
 800c116:	f009 f9a3 	bl	8015460 <iprintf>
        }
      }
      count++;
 800c11a:	7dfb      	ldrb	r3, [r7, #23]
 800c11c:	3301      	adds	r3, #1
 800c11e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	607b      	str	r3, [r7, #4]
 800c124:	e001      	b.n	800c12a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c126:	2300      	movs	r3, #0
 800c128:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d19f      	bne.n	800c070 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c130:	7dfb      	ldrb	r3, [r7, #23]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	08016e18 	.word	0x08016e18
 800c140:	08016f7c 	.word	0x08016f7c
 800c144:	08016e78 	.word	0x08016e78
 800c148:	08016fa8 	.word	0x08016fa8
 800c14c:	08016fc0 	.word	0x08016fc0
 800c150:	08016fe4 	.word	0x08016fe4

0800c154 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c154:	b480      	push	{r7}
 800c156:	b085      	sub	sp, #20
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c160:	e005      	b.n	800c16e <pbuf_clen+0x1a>
    ++len;
 800c162:	89fb      	ldrh	r3, [r7, #14]
 800c164:	3301      	adds	r3, #1
 800c166:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1f6      	bne.n	800c162 <pbuf_clen+0xe>
  }
  return len;
 800c174:	89fb      	ldrh	r3, [r7, #14]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
	...

0800c184 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d010      	beq.n	800c1b4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	7b9b      	ldrb	r3, [r3, #14]
 800c196:	3301      	adds	r3, #1
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	7b9b      	ldrb	r3, [r3, #14]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d106      	bne.n	800c1b4 <pbuf_ref+0x30>
 800c1a6:	4b05      	ldr	r3, [pc, #20]	; (800c1bc <pbuf_ref+0x38>)
 800c1a8:	f240 3242 	movw	r2, #834	; 0x342
 800c1ac:	4904      	ldr	r1, [pc, #16]	; (800c1c0 <pbuf_ref+0x3c>)
 800c1ae:	4805      	ldr	r0, [pc, #20]	; (800c1c4 <pbuf_ref+0x40>)
 800c1b0:	f009 f956 	bl	8015460 <iprintf>
  }
}
 800c1b4:	bf00      	nop
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	08016e18 	.word	0x08016e18
 800c1c0:	08016ff8 	.word	0x08016ff8
 800c1c4:	08016e78 	.word	0x08016e78

0800c1c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d002      	beq.n	800c1de <pbuf_cat+0x16>
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d107      	bne.n	800c1ee <pbuf_cat+0x26>
 800c1de:	4b20      	ldr	r3, [pc, #128]	; (800c260 <pbuf_cat+0x98>)
 800c1e0:	f240 3259 	movw	r2, #857	; 0x359
 800c1e4:	491f      	ldr	r1, [pc, #124]	; (800c264 <pbuf_cat+0x9c>)
 800c1e6:	4820      	ldr	r0, [pc, #128]	; (800c268 <pbuf_cat+0xa0>)
 800c1e8:	f009 f93a 	bl	8015460 <iprintf>
 800c1ec:	e034      	b.n	800c258 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	60fb      	str	r3, [r7, #12]
 800c1f2:	e00a      	b.n	800c20a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	891a      	ldrh	r2, [r3, #8]
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	891b      	ldrh	r3, [r3, #8]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	60fb      	str	r3, [r7, #12]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1f0      	bne.n	800c1f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	891a      	ldrh	r2, [r3, #8]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	895b      	ldrh	r3, [r3, #10]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d006      	beq.n	800c22c <pbuf_cat+0x64>
 800c21e:	4b10      	ldr	r3, [pc, #64]	; (800c260 <pbuf_cat+0x98>)
 800c220:	f240 3262 	movw	r2, #866	; 0x362
 800c224:	4911      	ldr	r1, [pc, #68]	; (800c26c <pbuf_cat+0xa4>)
 800c226:	4810      	ldr	r0, [pc, #64]	; (800c268 <pbuf_cat+0xa0>)
 800c228:	f009 f91a 	bl	8015460 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d006      	beq.n	800c242 <pbuf_cat+0x7a>
 800c234:	4b0a      	ldr	r3, [pc, #40]	; (800c260 <pbuf_cat+0x98>)
 800c236:	f240 3263 	movw	r2, #867	; 0x363
 800c23a:	490d      	ldr	r1, [pc, #52]	; (800c270 <pbuf_cat+0xa8>)
 800c23c:	480a      	ldr	r0, [pc, #40]	; (800c268 <pbuf_cat+0xa0>)
 800c23e:	f009 f90f 	bl	8015460 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	891a      	ldrh	r2, [r3, #8]
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	891b      	ldrh	r3, [r3, #8]
 800c24a:	4413      	add	r3, r2
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	08016e18 	.word	0x08016e18
 800c264:	0801700c 	.word	0x0801700c
 800c268:	08016e78 	.word	0x08016e78
 800c26c:	08017044 	.word	0x08017044
 800c270:	08017074 	.word	0x08017074

0800c274 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c27e:	2300      	movs	r3, #0
 800c280:	617b      	str	r3, [r7, #20]
 800c282:	2300      	movs	r3, #0
 800c284:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d008      	beq.n	800c29e <pbuf_copy+0x2a>
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d005      	beq.n	800c29e <pbuf_copy+0x2a>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	891a      	ldrh	r2, [r3, #8]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	891b      	ldrh	r3, [r3, #8]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d209      	bcs.n	800c2b2 <pbuf_copy+0x3e>
 800c29e:	4b57      	ldr	r3, [pc, #348]	; (800c3fc <pbuf_copy+0x188>)
 800c2a0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c2a4:	4956      	ldr	r1, [pc, #344]	; (800c400 <pbuf_copy+0x18c>)
 800c2a6:	4857      	ldr	r0, [pc, #348]	; (800c404 <pbuf_copy+0x190>)
 800c2a8:	f009 f8da 	bl	8015460 <iprintf>
 800c2ac:	f06f 030f 	mvn.w	r3, #15
 800c2b0:	e09f      	b.n	800c3f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	895b      	ldrh	r3, [r3, #10]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	1ad2      	subs	r2, r2, r3
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	895b      	ldrh	r3, [r3, #10]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	1acb      	subs	r3, r1, r3
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d306      	bcc.n	800c2d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	895b      	ldrh	r3, [r3, #10]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	e005      	b.n	800c2e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	895b      	ldrh	r3, [r3, #10]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	18d0      	adds	r0, r2, r3
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	f009 f89c 	bl	8015434 <memcpy>
    offset_to += len;
 800c2fc:	697a      	ldr	r2, [r7, #20]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4413      	add	r3, r2
 800c302:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4413      	add	r3, r2
 800c30a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	895b      	ldrh	r3, [r3, #10]
 800c310:	461a      	mov	r2, r3
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	4293      	cmp	r3, r2
 800c316:	d906      	bls.n	800c326 <pbuf_copy+0xb2>
 800c318:	4b38      	ldr	r3, [pc, #224]	; (800c3fc <pbuf_copy+0x188>)
 800c31a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c31e:	493a      	ldr	r1, [pc, #232]	; (800c408 <pbuf_copy+0x194>)
 800c320:	4838      	ldr	r0, [pc, #224]	; (800c404 <pbuf_copy+0x190>)
 800c322:	f009 f89d 	bl	8015460 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	895b      	ldrh	r3, [r3, #10]
 800c32a:	461a      	mov	r2, r3
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	4293      	cmp	r3, r2
 800c330:	d906      	bls.n	800c340 <pbuf_copy+0xcc>
 800c332:	4b32      	ldr	r3, [pc, #200]	; (800c3fc <pbuf_copy+0x188>)
 800c334:	f240 32da 	movw	r2, #986	; 0x3da
 800c338:	4934      	ldr	r1, [pc, #208]	; (800c40c <pbuf_copy+0x198>)
 800c33a:	4832      	ldr	r0, [pc, #200]	; (800c404 <pbuf_copy+0x190>)
 800c33c:	f009 f890 	bl	8015460 <iprintf>
    if (offset_from >= p_from->len) {
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	895b      	ldrh	r3, [r3, #10]
 800c344:	461a      	mov	r2, r3
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	4293      	cmp	r3, r2
 800c34a:	d304      	bcc.n	800c356 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	895b      	ldrh	r3, [r3, #10]
 800c35a:	461a      	mov	r2, r3
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	4293      	cmp	r3, r2
 800c360:	d114      	bne.n	800c38c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10c      	bne.n	800c38c <pbuf_copy+0x118>
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d009      	beq.n	800c38c <pbuf_copy+0x118>
 800c378:	4b20      	ldr	r3, [pc, #128]	; (800c3fc <pbuf_copy+0x188>)
 800c37a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c37e:	4924      	ldr	r1, [pc, #144]	; (800c410 <pbuf_copy+0x19c>)
 800c380:	4820      	ldr	r0, [pc, #128]	; (800c404 <pbuf_copy+0x190>)
 800c382:	f009 f86d 	bl	8015460 <iprintf>
 800c386:	f06f 030f 	mvn.w	r3, #15
 800c38a:	e032      	b.n	800c3f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d013      	beq.n	800c3ba <pbuf_copy+0x146>
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	895a      	ldrh	r2, [r3, #10]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	891b      	ldrh	r3, [r3, #8]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d10d      	bne.n	800c3ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d009      	beq.n	800c3ba <pbuf_copy+0x146>
 800c3a6:	4b15      	ldr	r3, [pc, #84]	; (800c3fc <pbuf_copy+0x188>)
 800c3a8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c3ac:	4919      	ldr	r1, [pc, #100]	; (800c414 <pbuf_copy+0x1a0>)
 800c3ae:	4815      	ldr	r0, [pc, #84]	; (800c404 <pbuf_copy+0x190>)
 800c3b0:	f009 f856 	bl	8015460 <iprintf>
 800c3b4:	f06f 0305 	mvn.w	r3, #5
 800c3b8:	e01b      	b.n	800c3f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d013      	beq.n	800c3e8 <pbuf_copy+0x174>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	895a      	ldrh	r2, [r3, #10]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	891b      	ldrh	r3, [r3, #8]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d10d      	bne.n	800c3e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d009      	beq.n	800c3e8 <pbuf_copy+0x174>
 800c3d4:	4b09      	ldr	r3, [pc, #36]	; (800c3fc <pbuf_copy+0x188>)
 800c3d6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c3da:	490e      	ldr	r1, [pc, #56]	; (800c414 <pbuf_copy+0x1a0>)
 800c3dc:	4809      	ldr	r0, [pc, #36]	; (800c404 <pbuf_copy+0x190>)
 800c3de:	f009 f83f 	bl	8015460 <iprintf>
 800c3e2:	f06f 0305 	mvn.w	r3, #5
 800c3e6:	e004      	b.n	800c3f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f47f af61 	bne.w	800c2b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c3f0:	2300      	movs	r3, #0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	08016e18 	.word	0x08016e18
 800c400:	080170c0 	.word	0x080170c0
 800c404:	08016e78 	.word	0x08016e78
 800c408:	080170f0 	.word	0x080170f0
 800c40c:	08017108 	.word	0x08017108
 800c410:	08017124 	.word	0x08017124
 800c414:	08017134 	.word	0x08017134

0800c418 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b088      	sub	sp, #32
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	4611      	mov	r1, r2
 800c424:	461a      	mov	r2, r3
 800c426:	460b      	mov	r3, r1
 800c428:	80fb      	strh	r3, [r7, #6]
 800c42a:	4613      	mov	r3, r2
 800c42c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d108      	bne.n	800c44e <pbuf_copy_partial+0x36>
 800c43c:	4b2b      	ldr	r3, [pc, #172]	; (800c4ec <pbuf_copy_partial+0xd4>)
 800c43e:	f240 420a 	movw	r2, #1034	; 0x40a
 800c442:	492b      	ldr	r1, [pc, #172]	; (800c4f0 <pbuf_copy_partial+0xd8>)
 800c444:	482b      	ldr	r0, [pc, #172]	; (800c4f4 <pbuf_copy_partial+0xdc>)
 800c446:	f009 f80b 	bl	8015460 <iprintf>
 800c44a:	2300      	movs	r3, #0
 800c44c:	e04a      	b.n	800c4e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d108      	bne.n	800c466 <pbuf_copy_partial+0x4e>
 800c454:	4b25      	ldr	r3, [pc, #148]	; (800c4ec <pbuf_copy_partial+0xd4>)
 800c456:	f240 420b 	movw	r2, #1035	; 0x40b
 800c45a:	4927      	ldr	r1, [pc, #156]	; (800c4f8 <pbuf_copy_partial+0xe0>)
 800c45c:	4825      	ldr	r0, [pc, #148]	; (800c4f4 <pbuf_copy_partial+0xdc>)
 800c45e:	f008 ffff 	bl	8015460 <iprintf>
 800c462:	2300      	movs	r3, #0
 800c464:	e03e      	b.n	800c4e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	61fb      	str	r3, [r7, #28]
 800c46a:	e034      	b.n	800c4d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c46c:	88bb      	ldrh	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00a      	beq.n	800c488 <pbuf_copy_partial+0x70>
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	895b      	ldrh	r3, [r3, #10]
 800c476:	88ba      	ldrh	r2, [r7, #4]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d305      	bcc.n	800c488 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	895b      	ldrh	r3, [r3, #10]
 800c480:	88ba      	ldrh	r2, [r7, #4]
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	80bb      	strh	r3, [r7, #4]
 800c486:	e023      	b.n	800c4d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	895a      	ldrh	r2, [r3, #10]
 800c48c:	88bb      	ldrh	r3, [r7, #4]
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c492:	8b3a      	ldrh	r2, [r7, #24]
 800c494:	88fb      	ldrh	r3, [r7, #6]
 800c496:	429a      	cmp	r2, r3
 800c498:	d901      	bls.n	800c49e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c49a:	88fb      	ldrh	r3, [r7, #6]
 800c49c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c49e:	8b7b      	ldrh	r3, [r7, #26]
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	18d0      	adds	r0, r2, r3
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	685a      	ldr	r2, [r3, #4]
 800c4a8:	88bb      	ldrh	r3, [r7, #4]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	8b3a      	ldrh	r2, [r7, #24]
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	f008 ffc0 	bl	8015434 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c4b4:	8afa      	ldrh	r2, [r7, #22]
 800c4b6:	8b3b      	ldrh	r3, [r7, #24]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c4bc:	8b7a      	ldrh	r2, [r7, #26]
 800c4be:	8b3b      	ldrh	r3, [r7, #24]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c4c4:	88fa      	ldrh	r2, [r7, #6]
 800c4c6:	8b3b      	ldrh	r3, [r7, #24]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	61fb      	str	r3, [r7, #28]
 800c4d6:	88fb      	ldrh	r3, [r7, #6]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <pbuf_copy_partial+0xca>
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1c4      	bne.n	800c46c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c4e2:	8afb      	ldrh	r3, [r7, #22]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3720      	adds	r7, #32
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	08016e18 	.word	0x08016e18
 800c4f0:	08017160 	.word	0x08017160
 800c4f4:	08016e78 	.word	0x08016e78
 800c4f8:	08017180 	.word	0x08017180

0800c4fc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	603a      	str	r2, [r7, #0]
 800c506:	71fb      	strb	r3, [r7, #7]
 800c508:	460b      	mov	r3, r1
 800c50a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	8919      	ldrh	r1, [r3, #8]
 800c510:	88ba      	ldrh	r2, [r7, #4]
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	4618      	mov	r0, r3
 800c516:	f7ff fab1 	bl	800ba7c <pbuf_alloc>
 800c51a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d101      	bne.n	800c526 <pbuf_clone+0x2a>
    return NULL;
 800c522:	2300      	movs	r3, #0
 800c524:	e011      	b.n	800c54a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c526:	6839      	ldr	r1, [r7, #0]
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f7ff fea3 	bl	800c274 <pbuf_copy>
 800c52e:	4603      	mov	r3, r0
 800c530:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c532:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d006      	beq.n	800c548 <pbuf_clone+0x4c>
 800c53a:	4b06      	ldr	r3, [pc, #24]	; (800c554 <pbuf_clone+0x58>)
 800c53c:	f240 5224 	movw	r2, #1316	; 0x524
 800c540:	4905      	ldr	r1, [pc, #20]	; (800c558 <pbuf_clone+0x5c>)
 800c542:	4806      	ldr	r0, [pc, #24]	; (800c55c <pbuf_clone+0x60>)
 800c544:	f008 ff8c 	bl	8015460 <iprintf>
  return q;
 800c548:	68fb      	ldr	r3, [r7, #12]
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	08016e18 	.word	0x08016e18
 800c558:	0801728c 	.word	0x0801728c
 800c55c:	08016e78 	.word	0x08016e78

0800c560 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c564:	f009 f80a 	bl	801557c <rand>
 800c568:	4603      	mov	r3, r0
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c570:	b29b      	uxth	r3, r3
 800c572:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c576:	b29a      	uxth	r2, r3
 800c578:	4b01      	ldr	r3, [pc, #4]	; (800c580 <tcp_init+0x20>)
 800c57a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c57c:	bf00      	nop
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	2000005c 	.word	0x2000005c

0800c584 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	7d1b      	ldrb	r3, [r3, #20]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d105      	bne.n	800c5a0 <tcp_free+0x1c>
 800c594:	4b06      	ldr	r3, [pc, #24]	; (800c5b0 <tcp_free+0x2c>)
 800c596:	22d4      	movs	r2, #212	; 0xd4
 800c598:	4906      	ldr	r1, [pc, #24]	; (800c5b4 <tcp_free+0x30>)
 800c59a:	4807      	ldr	r0, [pc, #28]	; (800c5b8 <tcp_free+0x34>)
 800c59c:	f008 ff60 	bl	8015460 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c5a0:	6879      	ldr	r1, [r7, #4]
 800c5a2:	2001      	movs	r0, #1
 800c5a4:	f7fe fed8 	bl	800b358 <memp_free>
}
 800c5a8:	bf00      	nop
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	08017318 	.word	0x08017318
 800c5b4:	08017348 	.word	0x08017348
 800c5b8:	0801735c 	.word	0x0801735c

0800c5bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	7d1b      	ldrb	r3, [r3, #20]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d105      	bne.n	800c5d8 <tcp_free_listen+0x1c>
 800c5cc:	4b06      	ldr	r3, [pc, #24]	; (800c5e8 <tcp_free_listen+0x2c>)
 800c5ce:	22df      	movs	r2, #223	; 0xdf
 800c5d0:	4906      	ldr	r1, [pc, #24]	; (800c5ec <tcp_free_listen+0x30>)
 800c5d2:	4807      	ldr	r0, [pc, #28]	; (800c5f0 <tcp_free_listen+0x34>)
 800c5d4:	f008 ff44 	bl	8015460 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	2002      	movs	r0, #2
 800c5dc:	f7fe febc 	bl	800b358 <memp_free>
}
 800c5e0:	bf00      	nop
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	08017318 	.word	0x08017318
 800c5ec:	08017384 	.word	0x08017384
 800c5f0:	0801735c 	.word	0x0801735c

0800c5f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c5f8:	f001 f974 	bl	800d8e4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c5fc:	4b07      	ldr	r3, [pc, #28]	; (800c61c <tcp_tmr+0x28>)
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	3301      	adds	r3, #1
 800c602:	b2da      	uxtb	r2, r3
 800c604:	4b05      	ldr	r3, [pc, #20]	; (800c61c <tcp_tmr+0x28>)
 800c606:	701a      	strb	r2, [r3, #0]
 800c608:	4b04      	ldr	r3, [pc, #16]	; (800c61c <tcp_tmr+0x28>)
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	f003 0301 	and.w	r3, r3, #1
 800c610:	2b00      	cmp	r3, #0
 800c612:	d001      	beq.n	800c618 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c614:	f000 fe26 	bl	800d264 <tcp_slowtmr>
  }
}
 800c618:	bf00      	nop
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	20008bb5 	.word	0x20008bb5

0800c620 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d105      	bne.n	800c63c <tcp_remove_listener+0x1c>
 800c630:	4b0d      	ldr	r3, [pc, #52]	; (800c668 <tcp_remove_listener+0x48>)
 800c632:	22ff      	movs	r2, #255	; 0xff
 800c634:	490d      	ldr	r1, [pc, #52]	; (800c66c <tcp_remove_listener+0x4c>)
 800c636:	480e      	ldr	r0, [pc, #56]	; (800c670 <tcp_remove_listener+0x50>)
 800c638:	f008 ff12 	bl	8015460 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	60fb      	str	r3, [r7, #12]
 800c640:	e00a      	b.n	800c658 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c646:	683a      	ldr	r2, [r7, #0]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d102      	bne.n	800c652 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2200      	movs	r2, #0
 800c650:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d1f1      	bne.n	800c642 <tcp_remove_listener+0x22>
    }
  }
}
 800c65e:	bf00      	nop
 800c660:	bf00      	nop
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	08017318 	.word	0x08017318
 800c66c:	080173a0 	.word	0x080173a0
 800c670:	0801735c 	.word	0x0801735c

0800c674 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d106      	bne.n	800c690 <tcp_listen_closed+0x1c>
 800c682:	4b14      	ldr	r3, [pc, #80]	; (800c6d4 <tcp_listen_closed+0x60>)
 800c684:	f240 1211 	movw	r2, #273	; 0x111
 800c688:	4913      	ldr	r1, [pc, #76]	; (800c6d8 <tcp_listen_closed+0x64>)
 800c68a:	4814      	ldr	r0, [pc, #80]	; (800c6dc <tcp_listen_closed+0x68>)
 800c68c:	f008 fee8 	bl	8015460 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7d1b      	ldrb	r3, [r3, #20]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d006      	beq.n	800c6a6 <tcp_listen_closed+0x32>
 800c698:	4b0e      	ldr	r3, [pc, #56]	; (800c6d4 <tcp_listen_closed+0x60>)
 800c69a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c69e:	4910      	ldr	r1, [pc, #64]	; (800c6e0 <tcp_listen_closed+0x6c>)
 800c6a0:	480e      	ldr	r0, [pc, #56]	; (800c6dc <tcp_listen_closed+0x68>)
 800c6a2:	f008 fedd 	bl	8015460 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	60fb      	str	r3, [r7, #12]
 800c6aa:	e00b      	b.n	800c6c4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c6ac:	4a0d      	ldr	r2, [pc, #52]	; (800c6e4 <tcp_listen_closed+0x70>)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	6879      	ldr	r1, [r7, #4]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7ff ffb1 	bl	800c620 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d9f0      	bls.n	800c6ac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c6ca:	bf00      	nop
 800c6cc:	bf00      	nop
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	08017318 	.word	0x08017318
 800c6d8:	080173c8 	.word	0x080173c8
 800c6dc:	0801735c 	.word	0x0801735c
 800c6e0:	080173d4 	.word	0x080173d4
 800c6e4:	0801b22c 	.word	0x0801b22c

0800c6e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c6e8:	b5b0      	push	{r4, r5, r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af04      	add	r7, sp, #16
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d106      	bne.n	800c708 <tcp_close_shutdown+0x20>
 800c6fa:	4b63      	ldr	r3, [pc, #396]	; (800c888 <tcp_close_shutdown+0x1a0>)
 800c6fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c700:	4962      	ldr	r1, [pc, #392]	; (800c88c <tcp_close_shutdown+0x1a4>)
 800c702:	4863      	ldr	r0, [pc, #396]	; (800c890 <tcp_close_shutdown+0x1a8>)
 800c704:	f008 feac 	bl	8015460 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c708:	78fb      	ldrb	r3, [r7, #3]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d066      	beq.n	800c7dc <tcp_close_shutdown+0xf4>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	7d1b      	ldrb	r3, [r3, #20]
 800c712:	2b04      	cmp	r3, #4
 800c714:	d003      	beq.n	800c71e <tcp_close_shutdown+0x36>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	7d1b      	ldrb	r3, [r3, #20]
 800c71a:	2b07      	cmp	r3, #7
 800c71c:	d15e      	bne.n	800c7dc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c722:	2b00      	cmp	r3, #0
 800c724:	d104      	bne.n	800c730 <tcp_close_shutdown+0x48>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c72a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c72e:	d055      	beq.n	800c7dc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	8b5b      	ldrh	r3, [r3, #26]
 800c734:	f003 0310 	and.w	r3, r3, #16
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d106      	bne.n	800c74a <tcp_close_shutdown+0x62>
 800c73c:	4b52      	ldr	r3, [pc, #328]	; (800c888 <tcp_close_shutdown+0x1a0>)
 800c73e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c742:	4954      	ldr	r1, [pc, #336]	; (800c894 <tcp_close_shutdown+0x1ac>)
 800c744:	4852      	ldr	r0, [pc, #328]	; (800c890 <tcp_close_shutdown+0x1a8>)
 800c746:	f008 fe8b 	bl	8015460 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c752:	687d      	ldr	r5, [r7, #4]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	3304      	adds	r3, #4
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	8ad2      	ldrh	r2, [r2, #22]
 800c75c:	6879      	ldr	r1, [r7, #4]
 800c75e:	8b09      	ldrh	r1, [r1, #24]
 800c760:	9102      	str	r1, [sp, #8]
 800c762:	9201      	str	r2, [sp, #4]
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	462b      	mov	r3, r5
 800c768:	4622      	mov	r2, r4
 800c76a:	4601      	mov	r1, r0
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f005 fea1 	bl	80124b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f001 fc7e 	bl	800e074 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c778:	4b47      	ldr	r3, [pc, #284]	; (800c898 <tcp_close_shutdown+0x1b0>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d105      	bne.n	800c78e <tcp_close_shutdown+0xa6>
 800c782:	4b45      	ldr	r3, [pc, #276]	; (800c898 <tcp_close_shutdown+0x1b0>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	4a43      	ldr	r2, [pc, #268]	; (800c898 <tcp_close_shutdown+0x1b0>)
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	e013      	b.n	800c7b6 <tcp_close_shutdown+0xce>
 800c78e:	4b42      	ldr	r3, [pc, #264]	; (800c898 <tcp_close_shutdown+0x1b0>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	60fb      	str	r3, [r7, #12]
 800c794:	e00c      	b.n	800c7b0 <tcp_close_shutdown+0xc8>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d104      	bne.n	800c7aa <tcp_close_shutdown+0xc2>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	68da      	ldr	r2, [r3, #12]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	60da      	str	r2, [r3, #12]
 800c7a8:	e005      	b.n	800c7b6 <tcp_close_shutdown+0xce>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	60fb      	str	r3, [r7, #12]
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1ef      	bne.n	800c796 <tcp_close_shutdown+0xae>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	60da      	str	r2, [r3, #12]
 800c7bc:	4b37      	ldr	r3, [pc, #220]	; (800c89c <tcp_close_shutdown+0x1b4>)
 800c7be:	2201      	movs	r2, #1
 800c7c0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c7c2:	4b37      	ldr	r3, [pc, #220]	; (800c8a0 <tcp_close_shutdown+0x1b8>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d102      	bne.n	800c7d2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c7cc:	f004 f916 	bl	80109fc <tcp_trigger_input_pcb_close>
 800c7d0:	e002      	b.n	800c7d8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff fed6 	bl	800c584 <tcp_free>
      }
      return ERR_OK;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e050      	b.n	800c87e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	7d1b      	ldrb	r3, [r3, #20]
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d03b      	beq.n	800c85c <tcp_close_shutdown+0x174>
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	dc44      	bgt.n	800c872 <tcp_close_shutdown+0x18a>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <tcp_close_shutdown+0x10a>
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d02a      	beq.n	800c846 <tcp_close_shutdown+0x15e>
 800c7f0:	e03f      	b.n	800c872 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	8adb      	ldrh	r3, [r3, #22]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d021      	beq.n	800c83e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c7fa:	4b2a      	ldr	r3, [pc, #168]	; (800c8a4 <tcp_close_shutdown+0x1bc>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	429a      	cmp	r2, r3
 800c802:	d105      	bne.n	800c810 <tcp_close_shutdown+0x128>
 800c804:	4b27      	ldr	r3, [pc, #156]	; (800c8a4 <tcp_close_shutdown+0x1bc>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	4a26      	ldr	r2, [pc, #152]	; (800c8a4 <tcp_close_shutdown+0x1bc>)
 800c80c:	6013      	str	r3, [r2, #0]
 800c80e:	e013      	b.n	800c838 <tcp_close_shutdown+0x150>
 800c810:	4b24      	ldr	r3, [pc, #144]	; (800c8a4 <tcp_close_shutdown+0x1bc>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	60bb      	str	r3, [r7, #8]
 800c816:	e00c      	b.n	800c832 <tcp_close_shutdown+0x14a>
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d104      	bne.n	800c82c <tcp_close_shutdown+0x144>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	68da      	ldr	r2, [r3, #12]
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	60da      	str	r2, [r3, #12]
 800c82a:	e005      	b.n	800c838 <tcp_close_shutdown+0x150>
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	60bb      	str	r3, [r7, #8]
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d1ef      	bne.n	800c818 <tcp_close_shutdown+0x130>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff fea0 	bl	800c584 <tcp_free>
      break;
 800c844:	e01a      	b.n	800c87c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7ff ff14 	bl	800c674 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c84c:	6879      	ldr	r1, [r7, #4]
 800c84e:	4816      	ldr	r0, [pc, #88]	; (800c8a8 <tcp_close_shutdown+0x1c0>)
 800c850:	f001 fc60 	bl	800e114 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff feb1 	bl	800c5bc <tcp_free_listen>
      break;
 800c85a:	e00f      	b.n	800c87c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c85c:	6879      	ldr	r1, [r7, #4]
 800c85e:	480e      	ldr	r0, [pc, #56]	; (800c898 <tcp_close_shutdown+0x1b0>)
 800c860:	f001 fc58 	bl	800e114 <tcp_pcb_remove>
 800c864:	4b0d      	ldr	r3, [pc, #52]	; (800c89c <tcp_close_shutdown+0x1b4>)
 800c866:	2201      	movs	r2, #1
 800c868:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7ff fe8a 	bl	800c584 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c870:	e004      	b.n	800c87c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f81a 	bl	800c8ac <tcp_close_shutdown_fin>
 800c878:	4603      	mov	r3, r0
 800c87a:	e000      	b.n	800c87e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bdb0      	pop	{r4, r5, r7, pc}
 800c886:	bf00      	nop
 800c888:	08017318 	.word	0x08017318
 800c88c:	080173ec 	.word	0x080173ec
 800c890:	0801735c 	.word	0x0801735c
 800c894:	0801740c 	.word	0x0801740c
 800c898:	20008bac 	.word	0x20008bac
 800c89c:	20008bb4 	.word	0x20008bb4
 800c8a0:	20008bec 	.word	0x20008bec
 800c8a4:	20008ba4 	.word	0x20008ba4
 800c8a8:	20008ba8 	.word	0x20008ba8

0800c8ac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d106      	bne.n	800c8c8 <tcp_close_shutdown_fin+0x1c>
 800c8ba:	4b2e      	ldr	r3, [pc, #184]	; (800c974 <tcp_close_shutdown_fin+0xc8>)
 800c8bc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c8c0:	492d      	ldr	r1, [pc, #180]	; (800c978 <tcp_close_shutdown_fin+0xcc>)
 800c8c2:	482e      	ldr	r0, [pc, #184]	; (800c97c <tcp_close_shutdown_fin+0xd0>)
 800c8c4:	f008 fdcc 	bl	8015460 <iprintf>

  switch (pcb->state) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	7d1b      	ldrb	r3, [r3, #20]
 800c8cc:	2b07      	cmp	r3, #7
 800c8ce:	d020      	beq.n	800c912 <tcp_close_shutdown_fin+0x66>
 800c8d0:	2b07      	cmp	r3, #7
 800c8d2:	dc2b      	bgt.n	800c92c <tcp_close_shutdown_fin+0x80>
 800c8d4:	2b03      	cmp	r3, #3
 800c8d6:	d002      	beq.n	800c8de <tcp_close_shutdown_fin+0x32>
 800c8d8:	2b04      	cmp	r3, #4
 800c8da:	d00d      	beq.n	800c8f8 <tcp_close_shutdown_fin+0x4c>
 800c8dc:	e026      	b.n	800c92c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f004 fef6 	bl	80116d0 <tcp_send_fin>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c8e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d11f      	bne.n	800c930 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2205      	movs	r2, #5
 800c8f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c8f6:	e01b      	b.n	800c930 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f004 fee9 	bl	80116d0 <tcp_send_fin>
 800c8fe:	4603      	mov	r3, r0
 800c900:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d114      	bne.n	800c934 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2205      	movs	r2, #5
 800c90e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c910:	e010      	b.n	800c934 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f004 fedc 	bl	80116d0 <tcp_send_fin>
 800c918:	4603      	mov	r3, r0
 800c91a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c91c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d109      	bne.n	800c938 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2209      	movs	r2, #9
 800c928:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c92a:	e005      	b.n	800c938 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	e01c      	b.n	800c96a <tcp_close_shutdown_fin+0xbe>
      break;
 800c930:	bf00      	nop
 800c932:	e002      	b.n	800c93a <tcp_close_shutdown_fin+0x8e>
      break;
 800c934:	bf00      	nop
 800c936:	e000      	b.n	800c93a <tcp_close_shutdown_fin+0x8e>
      break;
 800c938:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c93a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d103      	bne.n	800c94a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f005 f802 	bl	801194c <tcp_output>
 800c948:	e00d      	b.n	800c966 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c952:	d108      	bne.n	800c966 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	8b5b      	ldrh	r3, [r3, #26]
 800c958:	f043 0308 	orr.w	r3, r3, #8
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c962:	2300      	movs	r3, #0
 800c964:	e001      	b.n	800c96a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c966:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	08017318 	.word	0x08017318
 800c978:	080173c8 	.word	0x080173c8
 800c97c:	0801735c 	.word	0x0801735c

0800c980 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d109      	bne.n	800c9a2 <tcp_close+0x22>
 800c98e:	4b0f      	ldr	r3, [pc, #60]	; (800c9cc <tcp_close+0x4c>)
 800c990:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c994:	490e      	ldr	r1, [pc, #56]	; (800c9d0 <tcp_close+0x50>)
 800c996:	480f      	ldr	r0, [pc, #60]	; (800c9d4 <tcp_close+0x54>)
 800c998:	f008 fd62 	bl	8015460 <iprintf>
 800c99c:	f06f 030f 	mvn.w	r3, #15
 800c9a0:	e00f      	b.n	800c9c2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	7d1b      	ldrb	r3, [r3, #20]
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d006      	beq.n	800c9b8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	8b5b      	ldrh	r3, [r3, #26]
 800c9ae:	f043 0310 	orr.w	r3, r3, #16
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c9b8:	2101      	movs	r1, #1
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f7ff fe94 	bl	800c6e8 <tcp_close_shutdown>
 800c9c0:	4603      	mov	r3, r0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	08017318 	.word	0x08017318
 800c9d0:	08017428 	.word	0x08017428
 800c9d4:	0801735c 	.word	0x0801735c

0800c9d8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b08e      	sub	sp, #56	; 0x38
 800c9dc:	af04      	add	r7, sp, #16
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d107      	bne.n	800c9f8 <tcp_abandon+0x20>
 800c9e8:	4b52      	ldr	r3, [pc, #328]	; (800cb34 <tcp_abandon+0x15c>)
 800c9ea:	f240 223d 	movw	r2, #573	; 0x23d
 800c9ee:	4952      	ldr	r1, [pc, #328]	; (800cb38 <tcp_abandon+0x160>)
 800c9f0:	4852      	ldr	r0, [pc, #328]	; (800cb3c <tcp_abandon+0x164>)
 800c9f2:	f008 fd35 	bl	8015460 <iprintf>
 800c9f6:	e099      	b.n	800cb2c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	7d1b      	ldrb	r3, [r3, #20]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d106      	bne.n	800ca0e <tcp_abandon+0x36>
 800ca00:	4b4c      	ldr	r3, [pc, #304]	; (800cb34 <tcp_abandon+0x15c>)
 800ca02:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ca06:	494e      	ldr	r1, [pc, #312]	; (800cb40 <tcp_abandon+0x168>)
 800ca08:	484c      	ldr	r0, [pc, #304]	; (800cb3c <tcp_abandon+0x164>)
 800ca0a:	f008 fd29 	bl	8015460 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	7d1b      	ldrb	r3, [r3, #20]
 800ca12:	2b0a      	cmp	r3, #10
 800ca14:	d107      	bne.n	800ca26 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ca16:	6879      	ldr	r1, [r7, #4]
 800ca18:	484a      	ldr	r0, [pc, #296]	; (800cb44 <tcp_abandon+0x16c>)
 800ca1a:	f001 fb7b 	bl	800e114 <tcp_pcb_remove>
    tcp_free(pcb);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f7ff fdb0 	bl	800c584 <tcp_free>
 800ca24:	e082      	b.n	800cb2c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca32:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca38:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca40:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	7d1b      	ldrb	r3, [r3, #20]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d126      	bne.n	800ca9e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	8adb      	ldrh	r3, [r3, #22]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d02e      	beq.n	800cab6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ca58:	4b3b      	ldr	r3, [pc, #236]	; (800cb48 <tcp_abandon+0x170>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d105      	bne.n	800ca6e <tcp_abandon+0x96>
 800ca62:	4b39      	ldr	r3, [pc, #228]	; (800cb48 <tcp_abandon+0x170>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	4a37      	ldr	r2, [pc, #220]	; (800cb48 <tcp_abandon+0x170>)
 800ca6a:	6013      	str	r3, [r2, #0]
 800ca6c:	e013      	b.n	800ca96 <tcp_abandon+0xbe>
 800ca6e:	4b36      	ldr	r3, [pc, #216]	; (800cb48 <tcp_abandon+0x170>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	61fb      	str	r3, [r7, #28]
 800ca74:	e00c      	b.n	800ca90 <tcp_abandon+0xb8>
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d104      	bne.n	800ca8a <tcp_abandon+0xb2>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	68da      	ldr	r2, [r3, #12]
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	60da      	str	r2, [r3, #12]
 800ca88:	e005      	b.n	800ca96 <tcp_abandon+0xbe>
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	61fb      	str	r3, [r7, #28]
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1ef      	bne.n	800ca76 <tcp_abandon+0x9e>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	60da      	str	r2, [r3, #12]
 800ca9c:	e00b      	b.n	800cab6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	8adb      	ldrh	r3, [r3, #22]
 800caa6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800caa8:	6879      	ldr	r1, [r7, #4]
 800caaa:	4828      	ldr	r0, [pc, #160]	; (800cb4c <tcp_abandon+0x174>)
 800caac:	f001 fb32 	bl	800e114 <tcp_pcb_remove>
 800cab0:	4b27      	ldr	r3, [pc, #156]	; (800cb50 <tcp_abandon+0x178>)
 800cab2:	2201      	movs	r2, #1
 800cab4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d004      	beq.n	800cac8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 ffee 	bl	800daa4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d004      	beq.n	800cada <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cad4:	4618      	mov	r0, r3
 800cad6:	f000 ffe5 	bl	800daa4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d004      	beq.n	800caec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 ffdc 	bl	800daa4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00e      	beq.n	800cb10 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800caf2:	6879      	ldr	r1, [r7, #4]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	3304      	adds	r3, #4
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	8b12      	ldrh	r2, [r2, #24]
 800cafc:	9202      	str	r2, [sp, #8]
 800cafe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb00:	9201      	str	r2, [sp, #4]
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	460b      	mov	r3, r1
 800cb06:	697a      	ldr	r2, [r7, #20]
 800cb08:	69b9      	ldr	r1, [r7, #24]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f005 fcd2 	bl	80124b4 <tcp_rst>
    }
    last_state = pcb->state;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	7d1b      	ldrb	r3, [r3, #20]
 800cb14:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f7ff fd34 	bl	800c584 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d004      	beq.n	800cb2c <tcp_abandon+0x154>
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	f06f 010c 	mvn.w	r1, #12
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	4798      	blx	r3
  }
}
 800cb2c:	3728      	adds	r7, #40	; 0x28
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	08017318 	.word	0x08017318
 800cb38:	0801745c 	.word	0x0801745c
 800cb3c:	0801735c 	.word	0x0801735c
 800cb40:	08017478 	.word	0x08017478
 800cb44:	20008bb0 	.word	0x20008bb0
 800cb48:	20008ba4 	.word	0x20008ba4
 800cb4c:	20008bac 	.word	0x20008bac
 800cb50:	20008bb4 	.word	0x20008bb4

0800cb54 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cb5c:	2101      	movs	r1, #1
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7ff ff3a 	bl	800c9d8 <tcp_abandon>
}
 800cb64:	bf00      	nop
 800cb66:	3708      	adds	r7, #8
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b088      	sub	sp, #32
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	4613      	mov	r3, r2
 800cb78:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cb7a:	2304      	movs	r3, #4
 800cb7c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d101      	bne.n	800cb88 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cb84:	4b3e      	ldr	r3, [pc, #248]	; (800cc80 <tcp_bind+0x114>)
 800cb86:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d109      	bne.n	800cba2 <tcp_bind+0x36>
 800cb8e:	4b3d      	ldr	r3, [pc, #244]	; (800cc84 <tcp_bind+0x118>)
 800cb90:	f240 22a9 	movw	r2, #681	; 0x2a9
 800cb94:	493c      	ldr	r1, [pc, #240]	; (800cc88 <tcp_bind+0x11c>)
 800cb96:	483d      	ldr	r0, [pc, #244]	; (800cc8c <tcp_bind+0x120>)
 800cb98:	f008 fc62 	bl	8015460 <iprintf>
 800cb9c:	f06f 030f 	mvn.w	r3, #15
 800cba0:	e06a      	b.n	800cc78 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	7d1b      	ldrb	r3, [r3, #20]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d009      	beq.n	800cbbe <tcp_bind+0x52>
 800cbaa:	4b36      	ldr	r3, [pc, #216]	; (800cc84 <tcp_bind+0x118>)
 800cbac:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cbb0:	4937      	ldr	r1, [pc, #220]	; (800cc90 <tcp_bind+0x124>)
 800cbb2:	4836      	ldr	r0, [pc, #216]	; (800cc8c <tcp_bind+0x120>)
 800cbb4:	f008 fc54 	bl	8015460 <iprintf>
 800cbb8:	f06f 0305 	mvn.w	r3, #5
 800cbbc:	e05c      	b.n	800cc78 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800cbbe:	88fb      	ldrh	r3, [r7, #6]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d109      	bne.n	800cbd8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800cbc4:	f000 f9f0 	bl	800cfa8 <tcp_new_port>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cbcc:	88fb      	ldrh	r3, [r7, #6]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d135      	bne.n	800cc3e <tcp_bind+0xd2>
      return ERR_BUF;
 800cbd2:	f06f 0301 	mvn.w	r3, #1
 800cbd6:	e04f      	b.n	800cc78 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800cbd8:	2300      	movs	r3, #0
 800cbda:	61fb      	str	r3, [r7, #28]
 800cbdc:	e02b      	b.n	800cc36 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cbde:	4a2d      	ldr	r2, [pc, #180]	; (800cc94 <tcp_bind+0x128>)
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	61bb      	str	r3, [r7, #24]
 800cbea:	e01e      	b.n	800cc2a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	8adb      	ldrh	r3, [r3, #22]
 800cbf0:	88fa      	ldrh	r2, [r7, #6]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d116      	bne.n	800cc24 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800cbf6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d010      	beq.n	800cc1e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00c      	beq.n	800cc1e <tcp_bind+0xb2>
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d009      	beq.n	800cc1e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d005      	beq.n	800cc1e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d102      	bne.n	800cc24 <tcp_bind+0xb8>
              return ERR_USE;
 800cc1e:	f06f 0307 	mvn.w	r3, #7
 800cc22:	e029      	b.n	800cc78 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	61bb      	str	r3, [r7, #24]
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1dd      	bne.n	800cbec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	3301      	adds	r3, #1
 800cc34:	61fb      	str	r3, [r7, #28]
 800cc36:	69fa      	ldr	r2, [r7, #28]
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	dbcf      	blt.n	800cbde <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00c      	beq.n	800cc5e <tcp_bind+0xf2>
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d008      	beq.n	800cc5e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d002      	beq.n	800cc58 <tcp_bind+0xec>
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	e000      	b.n	800cc5a <tcp_bind+0xee>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	88fa      	ldrh	r2, [r7, #6]
 800cc62:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cc64:	4b0c      	ldr	r3, [pc, #48]	; (800cc98 <tcp_bind+0x12c>)
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	60da      	str	r2, [r3, #12]
 800cc6c:	4a0a      	ldr	r2, [pc, #40]	; (800cc98 <tcp_bind+0x12c>)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6013      	str	r3, [r2, #0]
 800cc72:	f005 fde1 	bl	8012838 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3720      	adds	r7, #32
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	0801b254 	.word	0x0801b254
 800cc84:	08017318 	.word	0x08017318
 800cc88:	080174ac 	.word	0x080174ac
 800cc8c:	0801735c 	.word	0x0801735c
 800cc90:	080174c4 	.word	0x080174c4
 800cc94:	0801b22c 	.word	0x0801b22c
 800cc98:	20008ba4 	.word	0x20008ba4

0800cc9c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	60b9      	str	r1, [r7, #8]
 800cca6:	4613      	mov	r3, r2
 800cca8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d106      	bne.n	800ccbe <tcp_accept_null+0x22>
 800ccb0:	4b07      	ldr	r3, [pc, #28]	; (800ccd0 <tcp_accept_null+0x34>)
 800ccb2:	f240 320f 	movw	r2, #783	; 0x30f
 800ccb6:	4907      	ldr	r1, [pc, #28]	; (800ccd4 <tcp_accept_null+0x38>)
 800ccb8:	4807      	ldr	r0, [pc, #28]	; (800ccd8 <tcp_accept_null+0x3c>)
 800ccba:	f008 fbd1 	bl	8015460 <iprintf>

  tcp_abort(pcb);
 800ccbe:	68b8      	ldr	r0, [r7, #8]
 800ccc0:	f7ff ff48 	bl	800cb54 <tcp_abort>

  return ERR_ABRT;
 800ccc4:	f06f 030c 	mvn.w	r3, #12
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	08017318 	.word	0x08017318
 800ccd4:	080174ec 	.word	0x080174ec
 800ccd8:	0801735c 	.word	0x0801735c

0800ccdc <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	460b      	mov	r3, r1
 800cce6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cce8:	78fb      	ldrb	r3, [r7, #3]
 800ccea:	2200      	movs	r2, #0
 800ccec:	4619      	mov	r1, r3
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f806 	bl	800cd00 <tcp_listen_with_backlog_and_err>
 800ccf4:	4603      	mov	r3, r0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
	...

0800cd00 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b088      	sub	sp, #32
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	607a      	str	r2, [r7, #4]
 800cd0c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d109      	bne.n	800cd2c <tcp_listen_with_backlog_and_err+0x2c>
 800cd18:	4b47      	ldr	r3, [pc, #284]	; (800ce38 <tcp_listen_with_backlog_and_err+0x138>)
 800cd1a:	f240 3259 	movw	r2, #857	; 0x359
 800cd1e:	4947      	ldr	r1, [pc, #284]	; (800ce3c <tcp_listen_with_backlog_and_err+0x13c>)
 800cd20:	4847      	ldr	r0, [pc, #284]	; (800ce40 <tcp_listen_with_backlog_and_err+0x140>)
 800cd22:	f008 fb9d 	bl	8015460 <iprintf>
 800cd26:	23f0      	movs	r3, #240	; 0xf0
 800cd28:	76fb      	strb	r3, [r7, #27]
 800cd2a:	e079      	b.n	800ce20 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	7d1b      	ldrb	r3, [r3, #20]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d009      	beq.n	800cd48 <tcp_listen_with_backlog_and_err+0x48>
 800cd34:	4b40      	ldr	r3, [pc, #256]	; (800ce38 <tcp_listen_with_backlog_and_err+0x138>)
 800cd36:	f240 325a 	movw	r2, #858	; 0x35a
 800cd3a:	4942      	ldr	r1, [pc, #264]	; (800ce44 <tcp_listen_with_backlog_and_err+0x144>)
 800cd3c:	4840      	ldr	r0, [pc, #256]	; (800ce40 <tcp_listen_with_backlog_and_err+0x140>)
 800cd3e:	f008 fb8f 	bl	8015460 <iprintf>
 800cd42:	23f1      	movs	r3, #241	; 0xf1
 800cd44:	76fb      	strb	r3, [r7, #27]
 800cd46:	e06b      	b.n	800ce20 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	7d1b      	ldrb	r3, [r3, #20]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d104      	bne.n	800cd5a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cd54:	23f7      	movs	r3, #247	; 0xf7
 800cd56:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cd58:	e062      	b.n	800ce20 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cd5a:	2002      	movs	r0, #2
 800cd5c:	f7fe fa8c 	bl	800b278 <memp_malloc>
 800cd60:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d102      	bne.n	800cd6e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800cd68:	23ff      	movs	r3, #255	; 0xff
 800cd6a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cd6c:	e058      	b.n	800ce20 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	691a      	ldr	r2, [r3, #16]
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	8ada      	ldrh	r2, [r3, #22]
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	2201      	movs	r2, #1
 800cd82:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	7d5a      	ldrb	r2, [r3, #21]
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	7a5a      	ldrb	r2, [r3, #9]
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	2200      	movs	r2, #0
 800cd98:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	7ada      	ldrb	r2, [r3, #11]
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	7a9a      	ldrb	r2, [r3, #10]
 800cda6:	69fb      	ldr	r3, [r7, #28]
 800cda8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	8adb      	ldrh	r3, [r3, #22]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d021      	beq.n	800cdfe <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cdba:	4b23      	ldr	r3, [pc, #140]	; (800ce48 <tcp_listen_with_backlog_and_err+0x148>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	68fa      	ldr	r2, [r7, #12]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d105      	bne.n	800cdd0 <tcp_listen_with_backlog_and_err+0xd0>
 800cdc4:	4b20      	ldr	r3, [pc, #128]	; (800ce48 <tcp_listen_with_backlog_and_err+0x148>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	4a1f      	ldr	r2, [pc, #124]	; (800ce48 <tcp_listen_with_backlog_and_err+0x148>)
 800cdcc:	6013      	str	r3, [r2, #0]
 800cdce:	e013      	b.n	800cdf8 <tcp_listen_with_backlog_and_err+0xf8>
 800cdd0:	4b1d      	ldr	r3, [pc, #116]	; (800ce48 <tcp_listen_with_backlog_and_err+0x148>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	617b      	str	r3, [r7, #20]
 800cdd6:	e00c      	b.n	800cdf2 <tcp_listen_with_backlog_and_err+0xf2>
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d104      	bne.n	800cdec <tcp_listen_with_backlog_and_err+0xec>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	68da      	ldr	r2, [r3, #12]
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	60da      	str	r2, [r3, #12]
 800cdea:	e005      	b.n	800cdf8 <tcp_listen_with_backlog_and_err+0xf8>
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	617b      	str	r3, [r7, #20]
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1ef      	bne.n	800cdd8 <tcp_listen_with_backlog_and_err+0xd8>
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f7ff fbc0 	bl	800c584 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ce04:	69fb      	ldr	r3, [r7, #28]
 800ce06:	4a11      	ldr	r2, [pc, #68]	; (800ce4c <tcp_listen_with_backlog_and_err+0x14c>)
 800ce08:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ce0a:	4b11      	ldr	r3, [pc, #68]	; (800ce50 <tcp_listen_with_backlog_and_err+0x150>)
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	69fb      	ldr	r3, [r7, #28]
 800ce10:	60da      	str	r2, [r3, #12]
 800ce12:	4a0f      	ldr	r2, [pc, #60]	; (800ce50 <tcp_listen_with_backlog_and_err+0x150>)
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	6013      	str	r3, [r2, #0]
 800ce18:	f005 fd0e 	bl	8012838 <tcp_timer_needed>
  res = ERR_OK;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d002      	beq.n	800ce2c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	7efa      	ldrb	r2, [r7, #27]
 800ce2a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ce2c:	69fb      	ldr	r3, [r7, #28]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3720      	adds	r7, #32
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	08017318 	.word	0x08017318
 800ce3c:	0801750c 	.word	0x0801750c
 800ce40:	0801735c 	.word	0x0801735c
 800ce44:	0801753c 	.word	0x0801753c
 800ce48:	20008ba4 	.word	0x20008ba4
 800ce4c:	0800cc9d 	.word	0x0800cc9d
 800ce50:	20008ba8 	.word	0x20008ba8

0800ce54 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <tcp_update_rcv_ann_wnd+0x1c>
 800ce62:	4b25      	ldr	r3, [pc, #148]	; (800cef8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ce64:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ce68:	4924      	ldr	r1, [pc, #144]	; (800cefc <tcp_update_rcv_ann_wnd+0xa8>)
 800ce6a:	4825      	ldr	r0, [pc, #148]	; (800cf00 <tcp_update_rcv_ann_wnd+0xac>)
 800ce6c:	f008 faf8 	bl	8015460 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ce78:	4413      	add	r3, r2
 800ce7a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ce84:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ce88:	bf28      	it	cs
 800ce8a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ce8e:	b292      	uxth	r2, r2
 800ce90:	4413      	add	r3, r2
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	db08      	blt.n	800ceac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea6:	68fa      	ldr	r2, [r7, #12]
 800cea8:	1ad3      	subs	r3, r2, r3
 800ceaa:	e020      	b.n	800ceee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb4:	1ad3      	subs	r3, r2, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	dd03      	ble.n	800cec2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cec0:	e014      	b.n	800ceec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ced4:	d306      	bcc.n	800cee4 <tcp_update_rcv_ann_wnd+0x90>
 800ced6:	4b08      	ldr	r3, [pc, #32]	; (800cef8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ced8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cedc:	4909      	ldr	r1, [pc, #36]	; (800cf04 <tcp_update_rcv_ann_wnd+0xb0>)
 800cede:	4808      	ldr	r0, [pc, #32]	; (800cf00 <tcp_update_rcv_ann_wnd+0xac>)
 800cee0:	f008 fabe 	bl	8015460 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	b29a      	uxth	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ceec:	2300      	movs	r3, #0
  }
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	08017318 	.word	0x08017318
 800cefc:	08017574 	.word	0x08017574
 800cf00:	0801735c 	.word	0x0801735c
 800cf04:	08017598 	.word	0x08017598

0800cf08 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d107      	bne.n	800cf2a <tcp_recved+0x22>
 800cf1a:	4b1f      	ldr	r3, [pc, #124]	; (800cf98 <tcp_recved+0x90>)
 800cf1c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cf20:	491e      	ldr	r1, [pc, #120]	; (800cf9c <tcp_recved+0x94>)
 800cf22:	481f      	ldr	r0, [pc, #124]	; (800cfa0 <tcp_recved+0x98>)
 800cf24:	f008 fa9c 	bl	8015460 <iprintf>
 800cf28:	e032      	b.n	800cf90 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	7d1b      	ldrb	r3, [r3, #20]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d106      	bne.n	800cf40 <tcp_recved+0x38>
 800cf32:	4b19      	ldr	r3, [pc, #100]	; (800cf98 <tcp_recved+0x90>)
 800cf34:	f240 32d2 	movw	r2, #978	; 0x3d2
 800cf38:	491a      	ldr	r1, [pc, #104]	; (800cfa4 <tcp_recved+0x9c>)
 800cf3a:	4819      	ldr	r0, [pc, #100]	; (800cfa0 <tcp_recved+0x98>)
 800cf3c:	f008 fa90 	bl	8015460 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf44:	887b      	ldrh	r3, [r7, #2]
 800cf46:	4413      	add	r3, r2
 800cf48:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cf4a:	89fb      	ldrh	r3, [r7, #14]
 800cf4c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cf50:	d804      	bhi.n	800cf5c <tcp_recved+0x54>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf56:	89fa      	ldrh	r2, [r7, #14]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d204      	bcs.n	800cf66 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cf62:	851a      	strh	r2, [r3, #40]	; 0x28
 800cf64:	e002      	b.n	800cf6c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	89fa      	ldrh	r2, [r7, #14]
 800cf6a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7ff ff71 	bl	800ce54 <tcp_update_rcv_ann_wnd>
 800cf72:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cf7a:	d309      	bcc.n	800cf90 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	8b5b      	ldrh	r3, [r3, #26]
 800cf80:	f043 0302 	orr.w	r3, r3, #2
 800cf84:	b29a      	uxth	r2, r3
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f004 fcde 	bl	801194c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	08017318 	.word	0x08017318
 800cf9c:	080175b4 	.word	0x080175b4
 800cfa0:	0801735c 	.word	0x0801735c
 800cfa4:	080175cc 	.word	0x080175cc

0800cfa8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cfb2:	4b1e      	ldr	r3, [pc, #120]	; (800d02c <tcp_new_port+0x84>)
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	4b1c      	ldr	r3, [pc, #112]	; (800d02c <tcp_new_port+0x84>)
 800cfbc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cfbe:	4b1b      	ldr	r3, [pc, #108]	; (800d02c <tcp_new_port+0x84>)
 800cfc0:	881b      	ldrh	r3, [r3, #0]
 800cfc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d103      	bne.n	800cfd2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cfca:	4b18      	ldr	r3, [pc, #96]	; (800d02c <tcp_new_port+0x84>)
 800cfcc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cfd0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	71fb      	strb	r3, [r7, #7]
 800cfd6:	e01e      	b.n	800d016 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	4a15      	ldr	r2, [pc, #84]	; (800d030 <tcp_new_port+0x88>)
 800cfdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	603b      	str	r3, [r7, #0]
 800cfe4:	e011      	b.n	800d00a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	8ada      	ldrh	r2, [r3, #22]
 800cfea:	4b10      	ldr	r3, [pc, #64]	; (800d02c <tcp_new_port+0x84>)
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d108      	bne.n	800d004 <tcp_new_port+0x5c>
        n++;
 800cff2:	88bb      	ldrh	r3, [r7, #4]
 800cff4:	3301      	adds	r3, #1
 800cff6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cff8:	88bb      	ldrh	r3, [r7, #4]
 800cffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cffe:	d3d8      	bcc.n	800cfb2 <tcp_new_port+0xa>
          return 0;
 800d000:	2300      	movs	r3, #0
 800d002:	e00d      	b.n	800d020 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	603b      	str	r3, [r7, #0]
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d1ea      	bne.n	800cfe6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d010:	79fb      	ldrb	r3, [r7, #7]
 800d012:	3301      	adds	r3, #1
 800d014:	71fb      	strb	r3, [r7, #7]
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	2b03      	cmp	r3, #3
 800d01a:	d9dd      	bls.n	800cfd8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d01c:	4b03      	ldr	r3, [pc, #12]	; (800d02c <tcp_new_port+0x84>)
 800d01e:	881b      	ldrh	r3, [r3, #0]
}
 800d020:	4618      	mov	r0, r3
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr
 800d02c:	2000005c 	.word	0x2000005c
 800d030:	0801b22c 	.word	0x0801b22c

0800d034 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b08a      	sub	sp, #40	; 0x28
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	603b      	str	r3, [r7, #0]
 800d040:	4613      	mov	r3, r2
 800d042:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800d044:	2300      	movs	r3, #0
 800d046:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d109      	bne.n	800d062 <tcp_connect+0x2e>
 800d04e:	4b7d      	ldr	r3, [pc, #500]	; (800d244 <tcp_connect+0x210>)
 800d050:	f240 4235 	movw	r2, #1077	; 0x435
 800d054:	497c      	ldr	r1, [pc, #496]	; (800d248 <tcp_connect+0x214>)
 800d056:	487d      	ldr	r0, [pc, #500]	; (800d24c <tcp_connect+0x218>)
 800d058:	f008 fa02 	bl	8015460 <iprintf>
 800d05c:	f06f 030f 	mvn.w	r3, #15
 800d060:	e0ec      	b.n	800d23c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d109      	bne.n	800d07c <tcp_connect+0x48>
 800d068:	4b76      	ldr	r3, [pc, #472]	; (800d244 <tcp_connect+0x210>)
 800d06a:	f240 4236 	movw	r2, #1078	; 0x436
 800d06e:	4978      	ldr	r1, [pc, #480]	; (800d250 <tcp_connect+0x21c>)
 800d070:	4876      	ldr	r0, [pc, #472]	; (800d24c <tcp_connect+0x218>)
 800d072:	f008 f9f5 	bl	8015460 <iprintf>
 800d076:	f06f 030f 	mvn.w	r3, #15
 800d07a:	e0df      	b.n	800d23c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	7d1b      	ldrb	r3, [r3, #20]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d009      	beq.n	800d098 <tcp_connect+0x64>
 800d084:	4b6f      	ldr	r3, [pc, #444]	; (800d244 <tcp_connect+0x210>)
 800d086:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800d08a:	4972      	ldr	r1, [pc, #456]	; (800d254 <tcp_connect+0x220>)
 800d08c:	486f      	ldr	r0, [pc, #444]	; (800d24c <tcp_connect+0x218>)
 800d08e:	f008 f9e7 	bl	8015460 <iprintf>
 800d092:	f06f 0309 	mvn.w	r3, #9
 800d096:	e0d1      	b.n	800d23c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d002      	beq.n	800d0a4 <tcp_connect+0x70>
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	e000      	b.n	800d0a6 <tcp_connect+0x72>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	68fa      	ldr	r2, [r7, #12]
 800d0a8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	88fa      	ldrh	r2, [r7, #6]
 800d0ae:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	7a1b      	ldrb	r3, [r3, #8]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d006      	beq.n	800d0c6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	7a1b      	ldrb	r3, [r3, #8]
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fe fc61 	bl	800b984 <netif_get_by_index>
 800d0c2:	6278      	str	r0, [r7, #36]	; 0x24
 800d0c4:	e005      	b.n	800d0d2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3304      	adds	r3, #4
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f006 ff92 	bl	8013ff4 <ip4_route>
 800d0d0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d102      	bne.n	800d0de <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800d0d8:	f06f 0303 	mvn.w	r3, #3
 800d0dc:	e0ae      	b.n	800d23c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d003      	beq.n	800d0ec <tcp_connect+0xb8>
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d111      	bne.n	800d110 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d002      	beq.n	800d0f8 <tcp_connect+0xc4>
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	e000      	b.n	800d0fa <tcp_connect+0xc6>
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d102      	bne.n	800d108 <tcp_connect+0xd4>
      return ERR_RTE;
 800d102:	f06f 0303 	mvn.w	r3, #3
 800d106:	e099      	b.n	800d23c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	8adb      	ldrh	r3, [r3, #22]
 800d114:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	8adb      	ldrh	r3, [r3, #22]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d10c      	bne.n	800d138 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800d11e:	f7ff ff43 	bl	800cfa8 <tcp_new_port>
 800d122:	4603      	mov	r3, r0
 800d124:	461a      	mov	r2, r3
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	8adb      	ldrh	r3, [r3, #22]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d102      	bne.n	800d138 <tcp_connect+0x104>
      return ERR_BUF;
 800d132:	f06f 0301 	mvn.w	r3, #1
 800d136:	e081      	b.n	800d23c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f001 f87f 	bl	800e23c <tcp_next_iss>
 800d13e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	697a      	ldr	r2, [r7, #20]
 800d14a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	1e5a      	subs	r2, r3, #1
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	1e5a      	subs	r2, r3, #1
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	1e5a      	subs	r2, r3, #1
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d16a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d182:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d18c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	3304      	adds	r3, #4
 800d196:	461a      	mov	r2, r3
 800d198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d19a:	f001 f875 	bl	800e288 <tcp_eff_send_mss_netif>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	683a      	ldr	r2, [r7, #0]
 800d1b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d1b6:	2102      	movs	r1, #2
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f004 fad9 	bl	8011770 <tcp_enqueue_flags>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d1c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d136      	bne.n	800d238 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2202      	movs	r2, #2
 800d1ce:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d1d0:	8b7b      	ldrh	r3, [r7, #26]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d021      	beq.n	800d21a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d1d6:	4b20      	ldr	r3, [pc, #128]	; (800d258 <tcp_connect+0x224>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d105      	bne.n	800d1ec <tcp_connect+0x1b8>
 800d1e0:	4b1d      	ldr	r3, [pc, #116]	; (800d258 <tcp_connect+0x224>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	4a1c      	ldr	r2, [pc, #112]	; (800d258 <tcp_connect+0x224>)
 800d1e8:	6013      	str	r3, [r2, #0]
 800d1ea:	e013      	b.n	800d214 <tcp_connect+0x1e0>
 800d1ec:	4b1a      	ldr	r3, [pc, #104]	; (800d258 <tcp_connect+0x224>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	623b      	str	r3, [r7, #32]
 800d1f2:	e00c      	b.n	800d20e <tcp_connect+0x1da>
 800d1f4:	6a3b      	ldr	r3, [r7, #32]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d104      	bne.n	800d208 <tcp_connect+0x1d4>
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	68da      	ldr	r2, [r3, #12]
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	60da      	str	r2, [r3, #12]
 800d206:	e005      	b.n	800d214 <tcp_connect+0x1e0>
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	623b      	str	r3, [r7, #32]
 800d20e:	6a3b      	ldr	r3, [r7, #32]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d1ef      	bne.n	800d1f4 <tcp_connect+0x1c0>
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d21a:	4b10      	ldr	r3, [pc, #64]	; (800d25c <tcp_connect+0x228>)
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	60da      	str	r2, [r3, #12]
 800d222:	4a0e      	ldr	r2, [pc, #56]	; (800d25c <tcp_connect+0x228>)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6013      	str	r3, [r2, #0]
 800d228:	f005 fb06 	bl	8012838 <tcp_timer_needed>
 800d22c:	4b0c      	ldr	r3, [pc, #48]	; (800d260 <tcp_connect+0x22c>)
 800d22e:	2201      	movs	r2, #1
 800d230:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d232:	68f8      	ldr	r0, [r7, #12]
 800d234:	f004 fb8a 	bl	801194c <tcp_output>
  }
  return ret;
 800d238:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3728      	adds	r7, #40	; 0x28
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	08017318 	.word	0x08017318
 800d248:	080175f4 	.word	0x080175f4
 800d24c:	0801735c 	.word	0x0801735c
 800d250:	08017610 	.word	0x08017610
 800d254:	0801762c 	.word	0x0801762c
 800d258:	20008ba4 	.word	0x20008ba4
 800d25c:	20008bac 	.word	0x20008bac
 800d260:	20008bb4 	.word	0x20008bb4

0800d264 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d264:	b5b0      	push	{r4, r5, r7, lr}
 800d266:	b090      	sub	sp, #64	; 0x40
 800d268:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d26a:	2300      	movs	r3, #0
 800d26c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d270:	4b94      	ldr	r3, [pc, #592]	; (800d4c4 <tcp_slowtmr+0x260>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	3301      	adds	r3, #1
 800d276:	4a93      	ldr	r2, [pc, #588]	; (800d4c4 <tcp_slowtmr+0x260>)
 800d278:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d27a:	4b93      	ldr	r3, [pc, #588]	; (800d4c8 <tcp_slowtmr+0x264>)
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	3301      	adds	r3, #1
 800d280:	b2da      	uxtb	r2, r3
 800d282:	4b91      	ldr	r3, [pc, #580]	; (800d4c8 <tcp_slowtmr+0x264>)
 800d284:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d286:	2300      	movs	r3, #0
 800d288:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d28a:	4b90      	ldr	r3, [pc, #576]	; (800d4cc <tcp_slowtmr+0x268>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d290:	e29d      	b.n	800d7ce <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d294:	7d1b      	ldrb	r3, [r3, #20]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d106      	bne.n	800d2a8 <tcp_slowtmr+0x44>
 800d29a:	4b8d      	ldr	r3, [pc, #564]	; (800d4d0 <tcp_slowtmr+0x26c>)
 800d29c:	f240 42be 	movw	r2, #1214	; 0x4be
 800d2a0:	498c      	ldr	r1, [pc, #560]	; (800d4d4 <tcp_slowtmr+0x270>)
 800d2a2:	488d      	ldr	r0, [pc, #564]	; (800d4d8 <tcp_slowtmr+0x274>)
 800d2a4:	f008 f8dc 	bl	8015460 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2aa:	7d1b      	ldrb	r3, [r3, #20]
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d106      	bne.n	800d2be <tcp_slowtmr+0x5a>
 800d2b0:	4b87      	ldr	r3, [pc, #540]	; (800d4d0 <tcp_slowtmr+0x26c>)
 800d2b2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d2b6:	4989      	ldr	r1, [pc, #548]	; (800d4dc <tcp_slowtmr+0x278>)
 800d2b8:	4887      	ldr	r0, [pc, #540]	; (800d4d8 <tcp_slowtmr+0x274>)
 800d2ba:	f008 f8d1 	bl	8015460 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c0:	7d1b      	ldrb	r3, [r3, #20]
 800d2c2:	2b0a      	cmp	r3, #10
 800d2c4:	d106      	bne.n	800d2d4 <tcp_slowtmr+0x70>
 800d2c6:	4b82      	ldr	r3, [pc, #520]	; (800d4d0 <tcp_slowtmr+0x26c>)
 800d2c8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d2cc:	4984      	ldr	r1, [pc, #528]	; (800d4e0 <tcp_slowtmr+0x27c>)
 800d2ce:	4882      	ldr	r0, [pc, #520]	; (800d4d8 <tcp_slowtmr+0x274>)
 800d2d0:	f008 f8c6 	bl	8015460 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d6:	7f9a      	ldrb	r2, [r3, #30]
 800d2d8:	4b7b      	ldr	r3, [pc, #492]	; (800d4c8 <tcp_slowtmr+0x264>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d105      	bne.n	800d2ec <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d2ea:	e270      	b.n	800d7ce <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d2ec:	4b76      	ldr	r3, [pc, #472]	; (800d4c8 <tcp_slowtmr+0x264>)
 800d2ee:	781a      	ldrb	r2, [r3, #0]
 800d2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	7d1b      	ldrb	r3, [r3, #20]
 800d304:	2b02      	cmp	r3, #2
 800d306:	d10a      	bne.n	800d31e <tcp_slowtmr+0xba>
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d30e:	2b05      	cmp	r3, #5
 800d310:	d905      	bls.n	800d31e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d316:	3301      	adds	r3, #1
 800d318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d31c:	e11e      	b.n	800d55c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d320:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d324:	2b0b      	cmp	r3, #11
 800d326:	d905      	bls.n	800d334 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d32c:	3301      	adds	r3, #1
 800d32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d332:	e113      	b.n	800d55c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d336:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d075      	beq.n	800d42a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d342:	2b00      	cmp	r3, #0
 800d344:	d006      	beq.n	800d354 <tcp_slowtmr+0xf0>
 800d346:	4b62      	ldr	r3, [pc, #392]	; (800d4d0 <tcp_slowtmr+0x26c>)
 800d348:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d34c:	4965      	ldr	r1, [pc, #404]	; (800d4e4 <tcp_slowtmr+0x280>)
 800d34e:	4862      	ldr	r0, [pc, #392]	; (800d4d8 <tcp_slowtmr+0x274>)
 800d350:	f008 f886 	bl	8015460 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d106      	bne.n	800d36a <tcp_slowtmr+0x106>
 800d35c:	4b5c      	ldr	r3, [pc, #368]	; (800d4d0 <tcp_slowtmr+0x26c>)
 800d35e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d362:	4961      	ldr	r1, [pc, #388]	; (800d4e8 <tcp_slowtmr+0x284>)
 800d364:	485c      	ldr	r0, [pc, #368]	; (800d4d8 <tcp_slowtmr+0x274>)
 800d366:	f008 f87b 	bl	8015460 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d370:	2b0b      	cmp	r3, #11
 800d372:	d905      	bls.n	800d380 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d378:	3301      	adds	r3, #1
 800d37a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d37e:	e0ed      	b.n	800d55c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d382:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d386:	3b01      	subs	r3, #1
 800d388:	4a58      	ldr	r2, [pc, #352]	; (800d4ec <tcp_slowtmr+0x288>)
 800d38a:	5cd3      	ldrb	r3, [r2, r3]
 800d38c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d390:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d394:	7c7a      	ldrb	r2, [r7, #17]
 800d396:	429a      	cmp	r2, r3
 800d398:	d907      	bls.n	800d3aa <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d3b0:	7c7a      	ldrb	r2, [r7, #17]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	f200 80d2 	bhi.w	800d55c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d108      	bne.n	800d3d8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d3c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3c8:	f005 f968 	bl	801269c <tcp_zero_window_probe>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d014      	beq.n	800d3fc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	623b      	str	r3, [r7, #32]
 800d3d6:	e011      	b.n	800d3fc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3e2:	f004 f82d 	bl	8011440 <tcp_split_unsent_seg>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d107      	bne.n	800d3fc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d3ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ee:	f004 faad 	bl	801194c <tcp_output>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d3fc:	6a3b      	ldr	r3, [r7, #32]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 80ac 	beq.w	800d55c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d406:	2200      	movs	r2, #0
 800d408:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d412:	2b06      	cmp	r3, #6
 800d414:	f200 80a2 	bhi.w	800d55c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d41e:	3301      	adds	r3, #1
 800d420:	b2da      	uxtb	r2, r3
 800d422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d424:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d428:	e098      	b.n	800d55c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d430:	2b00      	cmp	r3, #0
 800d432:	db0f      	blt.n	800d454 <tcp_slowtmr+0x1f0>
 800d434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d436:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d43a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d43e:	4293      	cmp	r3, r2
 800d440:	d008      	beq.n	800d454 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d444:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d448:	b29b      	uxth	r3, r3
 800d44a:	3301      	adds	r3, #1
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	b21a      	sxth	r2, r3
 800d450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d452:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d456:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d460:	429a      	cmp	r2, r3
 800d462:	db7b      	blt.n	800d55c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d466:	f004 fd63 	bl	8011f30 <tcp_rexmit_rto_prepare>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d007      	beq.n	800d480 <tcp_slowtmr+0x21c>
 800d470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d474:	2b00      	cmp	r3, #0
 800d476:	d171      	bne.n	800d55c <tcp_slowtmr+0x2f8>
 800d478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d06d      	beq.n	800d55c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d482:	7d1b      	ldrb	r3, [r3, #20]
 800d484:	2b02      	cmp	r3, #2
 800d486:	d03a      	beq.n	800d4fe <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d48e:	2b0c      	cmp	r3, #12
 800d490:	bf28      	it	cs
 800d492:	230c      	movcs	r3, #12
 800d494:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d498:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d49c:	10db      	asrs	r3, r3, #3
 800d49e:	b21b      	sxth	r3, r3
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d4a8:	4413      	add	r3, r2
 800d4aa:	7efa      	ldrb	r2, [r7, #27]
 800d4ac:	4910      	ldr	r1, [pc, #64]	; (800d4f0 <tcp_slowtmr+0x28c>)
 800d4ae:	5c8a      	ldrb	r2, [r1, r2]
 800d4b0:	4093      	lsls	r3, r2
 800d4b2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	dc1a      	bgt.n	800d4f4 <tcp_slowtmr+0x290>
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	b21a      	sxth	r2, r3
 800d4c2:	e019      	b.n	800d4f8 <tcp_slowtmr+0x294>
 800d4c4:	20008ba0 	.word	0x20008ba0
 800d4c8:	20008bb6 	.word	0x20008bb6
 800d4cc:	20008bac 	.word	0x20008bac
 800d4d0:	08017318 	.word	0x08017318
 800d4d4:	0801765c 	.word	0x0801765c
 800d4d8:	0801735c 	.word	0x0801735c
 800d4dc:	08017688 	.word	0x08017688
 800d4e0:	080176b4 	.word	0x080176b4
 800d4e4:	080176e4 	.word	0x080176e4
 800d4e8:	08017718 	.word	0x08017718
 800d4ec:	0801b224 	.word	0x0801b224
 800d4f0:	0801b214 	.word	0x0801b214
 800d4f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	2200      	movs	r2, #0
 800d502:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d506:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d510:	4293      	cmp	r3, r2
 800d512:	bf28      	it	cs
 800d514:	4613      	movcs	r3, r2
 800d516:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d518:	8a7b      	ldrh	r3, [r7, #18]
 800d51a:	085b      	lsrs	r3, r3, #1
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d520:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d526:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	b29b      	uxth	r3, r3
 800d532:	429a      	cmp	r2, r3
 800d534:	d206      	bcs.n	800d544 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d53a:	005b      	lsls	r3, r3, #1
 800d53c:	b29a      	uxth	r2, r3
 800d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d540:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d550:	2200      	movs	r2, #0
 800d552:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d558:	f004 fd5a 	bl	8012010 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	7d1b      	ldrb	r3, [r3, #20]
 800d560:	2b06      	cmp	r3, #6
 800d562:	d111      	bne.n	800d588 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d566:	8b5b      	ldrh	r3, [r3, #26]
 800d568:	f003 0310 	and.w	r3, r3, #16
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00b      	beq.n	800d588 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d570:	4b9c      	ldr	r3, [pc, #624]	; (800d7e4 <tcp_slowtmr+0x580>)
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d576:	6a1b      	ldr	r3, [r3, #32]
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	2b28      	cmp	r3, #40	; 0x28
 800d57c:	d904      	bls.n	800d588 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d57e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d582:	3301      	adds	r3, #1
 800d584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58a:	7a5b      	ldrb	r3, [r3, #9]
 800d58c:	f003 0308 	and.w	r3, r3, #8
 800d590:	2b00      	cmp	r3, #0
 800d592:	d04a      	beq.n	800d62a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d596:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d598:	2b04      	cmp	r3, #4
 800d59a:	d003      	beq.n	800d5a4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d5a0:	2b07      	cmp	r3, #7
 800d5a2:	d142      	bne.n	800d62a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5a4:	4b8f      	ldr	r3, [pc, #572]	; (800d7e4 <tcp_slowtmr+0x580>)
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5aa:	6a1b      	ldr	r3, [r3, #32]
 800d5ac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d5b4:	4b8c      	ldr	r3, [pc, #560]	; (800d7e8 <tcp_slowtmr+0x584>)
 800d5b6:	440b      	add	r3, r1
 800d5b8:	498c      	ldr	r1, [pc, #560]	; (800d7ec <tcp_slowtmr+0x588>)
 800d5ba:	fba1 1303 	umull	r1, r3, r1, r3
 800d5be:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d90a      	bls.n	800d5da <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d5ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d5d8:	e027      	b.n	800d62a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5da:	4b82      	ldr	r3, [pc, #520]	; (800d7e4 <tcp_slowtmr+0x580>)
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e0:	6a1b      	ldr	r3, [r3, #32]
 800d5e2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	4b7f      	ldr	r3, [pc, #508]	; (800d7f0 <tcp_slowtmr+0x58c>)
 800d5f4:	fb00 f303 	mul.w	r3, r0, r3
 800d5f8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d5fa:	497c      	ldr	r1, [pc, #496]	; (800d7ec <tcp_slowtmr+0x588>)
 800d5fc:	fba1 1303 	umull	r1, r3, r1, r3
 800d600:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d602:	429a      	cmp	r2, r3
 800d604:	d911      	bls.n	800d62a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d608:	f005 f808 	bl	801261c <tcp_keepalive>
 800d60c:	4603      	mov	r3, r0
 800d60e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d612:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d616:	2b00      	cmp	r3, #0
 800d618:	d107      	bne.n	800d62a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d620:	3301      	adds	r3, #1
 800d622:	b2da      	uxtb	r2, r3
 800d624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d626:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d011      	beq.n	800d656 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d632:	4b6c      	ldr	r3, [pc, #432]	; (800d7e4 <tcp_slowtmr+0x580>)
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d638:	6a1b      	ldr	r3, [r3, #32]
 800d63a:	1ad2      	subs	r2, r2, r3
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d642:	4619      	mov	r1, r3
 800d644:	460b      	mov	r3, r1
 800d646:	005b      	lsls	r3, r3, #1
 800d648:	440b      	add	r3, r1
 800d64a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d302      	bcc.n	800d656 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d652:	f000 fec3 	bl	800e3dc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d658:	7d1b      	ldrb	r3, [r3, #20]
 800d65a:	2b03      	cmp	r3, #3
 800d65c:	d10b      	bne.n	800d676 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d65e:	4b61      	ldr	r3, [pc, #388]	; (800d7e4 <tcp_slowtmr+0x580>)
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d664:	6a1b      	ldr	r3, [r3, #32]
 800d666:	1ad3      	subs	r3, r2, r3
 800d668:	2b28      	cmp	r3, #40	; 0x28
 800d66a:	d904      	bls.n	800d676 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d670:	3301      	adds	r3, #1
 800d672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d678:	7d1b      	ldrb	r3, [r3, #20]
 800d67a:	2b09      	cmp	r3, #9
 800d67c:	d10b      	bne.n	800d696 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d67e:	4b59      	ldr	r3, [pc, #356]	; (800d7e4 <tcp_slowtmr+0x580>)
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d684:	6a1b      	ldr	r3, [r3, #32]
 800d686:	1ad3      	subs	r3, r2, r3
 800d688:	2bf0      	cmp	r3, #240	; 0xf0
 800d68a:	d904      	bls.n	800d696 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d690:	3301      	adds	r3, #1
 800d692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d696:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d060      	beq.n	800d760 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6a4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d6a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6a8:	f000 fce4 	bl	800e074 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d010      	beq.n	800d6d4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d6b2:	4b50      	ldr	r3, [pc, #320]	; (800d7f4 <tcp_slowtmr+0x590>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d106      	bne.n	800d6ca <tcp_slowtmr+0x466>
 800d6bc:	4b4e      	ldr	r3, [pc, #312]	; (800d7f8 <tcp_slowtmr+0x594>)
 800d6be:	f240 526d 	movw	r2, #1389	; 0x56d
 800d6c2:	494e      	ldr	r1, [pc, #312]	; (800d7fc <tcp_slowtmr+0x598>)
 800d6c4:	484e      	ldr	r0, [pc, #312]	; (800d800 <tcp_slowtmr+0x59c>)
 800d6c6:	f007 fecb 	bl	8015460 <iprintf>
        prev->next = pcb->next;
 800d6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6cc:	68da      	ldr	r2, [r3, #12]
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	60da      	str	r2, [r3, #12]
 800d6d2:	e00f      	b.n	800d6f4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d6d4:	4b47      	ldr	r3, [pc, #284]	; (800d7f4 <tcp_slowtmr+0x590>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d006      	beq.n	800d6ec <tcp_slowtmr+0x488>
 800d6de:	4b46      	ldr	r3, [pc, #280]	; (800d7f8 <tcp_slowtmr+0x594>)
 800d6e0:	f240 5271 	movw	r2, #1393	; 0x571
 800d6e4:	4947      	ldr	r1, [pc, #284]	; (800d804 <tcp_slowtmr+0x5a0>)
 800d6e6:	4846      	ldr	r0, [pc, #280]	; (800d800 <tcp_slowtmr+0x59c>)
 800d6e8:	f007 feba 	bl	8015460 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	4a40      	ldr	r2, [pc, #256]	; (800d7f4 <tcp_slowtmr+0x590>)
 800d6f2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d6f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d013      	beq.n	800d724 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d702:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d704:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d708:	3304      	adds	r3, #4
 800d70a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d70c:	8ad2      	ldrh	r2, [r2, #22]
 800d70e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d710:	8b09      	ldrh	r1, [r1, #24]
 800d712:	9102      	str	r1, [sp, #8]
 800d714:	9201      	str	r2, [sp, #4]
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	462b      	mov	r3, r5
 800d71a:	4622      	mov	r2, r4
 800d71c:	4601      	mov	r1, r0
 800d71e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d720:	f004 fec8 	bl	80124b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d726:	691b      	ldr	r3, [r3, #16]
 800d728:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72c:	7d1b      	ldrb	r3, [r3, #20]
 800d72e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d732:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d73a:	6838      	ldr	r0, [r7, #0]
 800d73c:	f7fe ff22 	bl	800c584 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d740:	4b31      	ldr	r3, [pc, #196]	; (800d808 <tcp_slowtmr+0x5a4>)
 800d742:	2200      	movs	r2, #0
 800d744:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d004      	beq.n	800d756 <tcp_slowtmr+0x4f2>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f06f 010c 	mvn.w	r1, #12
 800d752:	68b8      	ldr	r0, [r7, #8]
 800d754:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d756:	4b2c      	ldr	r3, [pc, #176]	; (800d808 <tcp_slowtmr+0x5a4>)
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d037      	beq.n	800d7ce <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d75e:	e592      	b.n	800d286 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d762:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76c:	7f1b      	ldrb	r3, [r3, #28]
 800d76e:	3301      	adds	r3, #1
 800d770:	b2da      	uxtb	r2, r3
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d778:	7f1a      	ldrb	r2, [r3, #28]
 800d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77c:	7f5b      	ldrb	r3, [r3, #29]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d325      	bcc.n	800d7ce <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d784:	2200      	movs	r2, #0
 800d786:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d788:	4b1f      	ldr	r3, [pc, #124]	; (800d808 <tcp_slowtmr+0x5a4>)
 800d78a:	2200      	movs	r2, #0
 800d78c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00b      	beq.n	800d7b0 <tcp_slowtmr+0x54c>
 800d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d79e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7a0:	6912      	ldr	r2, [r2, #16]
 800d7a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7a4:	4610      	mov	r0, r2
 800d7a6:	4798      	blx	r3
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d7ae:	e002      	b.n	800d7b6 <tcp_slowtmr+0x552>
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d7b6:	4b14      	ldr	r3, [pc, #80]	; (800d808 <tcp_slowtmr+0x5a4>)
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d000      	beq.n	800d7c0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d7be:	e562      	b.n	800d286 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d7c0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d102      	bne.n	800d7ce <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7ca:	f004 f8bf 	bl	801194c <tcp_output>
  while (pcb != NULL) {
 800d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f47f ad5e 	bne.w	800d292 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d7da:	4b0c      	ldr	r3, [pc, #48]	; (800d80c <tcp_slowtmr+0x5a8>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d7e0:	e069      	b.n	800d8b6 <tcp_slowtmr+0x652>
 800d7e2:	bf00      	nop
 800d7e4:	20008ba0 	.word	0x20008ba0
 800d7e8:	000a4cb8 	.word	0x000a4cb8
 800d7ec:	10624dd3 	.word	0x10624dd3
 800d7f0:	000124f8 	.word	0x000124f8
 800d7f4:	20008bac 	.word	0x20008bac
 800d7f8:	08017318 	.word	0x08017318
 800d7fc:	08017750 	.word	0x08017750
 800d800:	0801735c 	.word	0x0801735c
 800d804:	0801777c 	.word	0x0801777c
 800d808:	20008bb4 	.word	0x20008bb4
 800d80c:	20008bb0 	.word	0x20008bb0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d812:	7d1b      	ldrb	r3, [r3, #20]
 800d814:	2b0a      	cmp	r3, #10
 800d816:	d006      	beq.n	800d826 <tcp_slowtmr+0x5c2>
 800d818:	4b2b      	ldr	r3, [pc, #172]	; (800d8c8 <tcp_slowtmr+0x664>)
 800d81a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d81e:	492b      	ldr	r1, [pc, #172]	; (800d8cc <tcp_slowtmr+0x668>)
 800d820:	482b      	ldr	r0, [pc, #172]	; (800d8d0 <tcp_slowtmr+0x66c>)
 800d822:	f007 fe1d 	bl	8015460 <iprintf>
    pcb_remove = 0;
 800d826:	2300      	movs	r3, #0
 800d828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d82c:	4b29      	ldr	r3, [pc, #164]	; (800d8d4 <tcp_slowtmr+0x670>)
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d832:	6a1b      	ldr	r3, [r3, #32]
 800d834:	1ad3      	subs	r3, r2, r3
 800d836:	2bf0      	cmp	r3, #240	; 0xf0
 800d838:	d904      	bls.n	800d844 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d83a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d83e:	3301      	adds	r3, #1
 800d840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d02f      	beq.n	800d8ac <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d84c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d84e:	f000 fc11 	bl	800e074 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d854:	2b00      	cmp	r3, #0
 800d856:	d010      	beq.n	800d87a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d858:	4b1f      	ldr	r3, [pc, #124]	; (800d8d8 <tcp_slowtmr+0x674>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d85e:	429a      	cmp	r2, r3
 800d860:	d106      	bne.n	800d870 <tcp_slowtmr+0x60c>
 800d862:	4b19      	ldr	r3, [pc, #100]	; (800d8c8 <tcp_slowtmr+0x664>)
 800d864:	f240 52af 	movw	r2, #1455	; 0x5af
 800d868:	491c      	ldr	r1, [pc, #112]	; (800d8dc <tcp_slowtmr+0x678>)
 800d86a:	4819      	ldr	r0, [pc, #100]	; (800d8d0 <tcp_slowtmr+0x66c>)
 800d86c:	f007 fdf8 	bl	8015460 <iprintf>
        prev->next = pcb->next;
 800d870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d872:	68da      	ldr	r2, [r3, #12]
 800d874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d876:	60da      	str	r2, [r3, #12]
 800d878:	e00f      	b.n	800d89a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d87a:	4b17      	ldr	r3, [pc, #92]	; (800d8d8 <tcp_slowtmr+0x674>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d880:	429a      	cmp	r2, r3
 800d882:	d006      	beq.n	800d892 <tcp_slowtmr+0x62e>
 800d884:	4b10      	ldr	r3, [pc, #64]	; (800d8c8 <tcp_slowtmr+0x664>)
 800d886:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d88a:	4915      	ldr	r1, [pc, #84]	; (800d8e0 <tcp_slowtmr+0x67c>)
 800d88c:	4810      	ldr	r0, [pc, #64]	; (800d8d0 <tcp_slowtmr+0x66c>)
 800d88e:	f007 fde7 	bl	8015460 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d894:	68db      	ldr	r3, [r3, #12]
 800d896:	4a10      	ldr	r2, [pc, #64]	; (800d8d8 <tcp_slowtmr+0x674>)
 800d898:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d8a4:	69f8      	ldr	r0, [r7, #28]
 800d8a6:	f7fe fe6d 	bl	800c584 <tcp_free>
 800d8aa:	e004      	b.n	800d8b6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1a9      	bne.n	800d810 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d8bc:	bf00      	nop
 800d8be:	bf00      	nop
 800d8c0:	3730      	adds	r7, #48	; 0x30
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bdb0      	pop	{r4, r5, r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	08017318 	.word	0x08017318
 800d8cc:	080177a8 	.word	0x080177a8
 800d8d0:	0801735c 	.word	0x0801735c
 800d8d4:	20008ba0 	.word	0x20008ba0
 800d8d8:	20008bb0 	.word	0x20008bb0
 800d8dc:	080177d8 	.word	0x080177d8
 800d8e0:	08017800 	.word	0x08017800

0800d8e4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d8ea:	4b2d      	ldr	r3, [pc, #180]	; (800d9a0 <tcp_fasttmr+0xbc>)
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	4b2b      	ldr	r3, [pc, #172]	; (800d9a0 <tcp_fasttmr+0xbc>)
 800d8f4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d8f6:	4b2b      	ldr	r3, [pc, #172]	; (800d9a4 <tcp_fasttmr+0xc0>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d8fc:	e048      	b.n	800d990 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	7f9a      	ldrb	r2, [r3, #30]
 800d902:	4b27      	ldr	r3, [pc, #156]	; (800d9a0 <tcp_fasttmr+0xbc>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	429a      	cmp	r2, r3
 800d908:	d03f      	beq.n	800d98a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d90a:	4b25      	ldr	r3, [pc, #148]	; (800d9a0 <tcp_fasttmr+0xbc>)
 800d90c:	781a      	ldrb	r2, [r3, #0]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	8b5b      	ldrh	r3, [r3, #26]
 800d916:	f003 0301 	and.w	r3, r3, #1
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d010      	beq.n	800d940 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	8b5b      	ldrh	r3, [r3, #26]
 800d922:	f043 0302 	orr.w	r3, r3, #2
 800d926:	b29a      	uxth	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f004 f80d 	bl	801194c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	8b5b      	ldrh	r3, [r3, #26]
 800d936:	f023 0303 	bic.w	r3, r3, #3
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	8b5b      	ldrh	r3, [r3, #26]
 800d944:	f003 0308 	and.w	r3, r3, #8
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d009      	beq.n	800d960 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	8b5b      	ldrh	r3, [r3, #26]
 800d950:	f023 0308 	bic.w	r3, r3, #8
 800d954:	b29a      	uxth	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7fe ffa6 	bl	800c8ac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00a      	beq.n	800d984 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d96e:	4b0e      	ldr	r3, [pc, #56]	; (800d9a8 <tcp_fasttmr+0xc4>)
 800d970:	2200      	movs	r2, #0
 800d972:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 f819 	bl	800d9ac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d97a:	4b0b      	ldr	r3, [pc, #44]	; (800d9a8 <tcp_fasttmr+0xc4>)
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d000      	beq.n	800d984 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d982:	e7b8      	b.n	800d8f6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	607b      	str	r3, [r7, #4]
 800d988:	e002      	b.n	800d990 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1b3      	bne.n	800d8fe <tcp_fasttmr+0x1a>
    }
  }
}
 800d996:	bf00      	nop
 800d998:	bf00      	nop
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	20008bb6 	.word	0x20008bb6
 800d9a4:	20008bac 	.word	0x20008bac
 800d9a8:	20008bb4 	.word	0x20008bb4

0800d9ac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d9ac:	b590      	push	{r4, r7, lr}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d109      	bne.n	800d9ce <tcp_process_refused_data+0x22>
 800d9ba:	4b37      	ldr	r3, [pc, #220]	; (800da98 <tcp_process_refused_data+0xec>)
 800d9bc:	f240 6209 	movw	r2, #1545	; 0x609
 800d9c0:	4936      	ldr	r1, [pc, #216]	; (800da9c <tcp_process_refused_data+0xf0>)
 800d9c2:	4837      	ldr	r0, [pc, #220]	; (800daa0 <tcp_process_refused_data+0xf4>)
 800d9c4:	f007 fd4c 	bl	8015460 <iprintf>
 800d9c8:	f06f 030f 	mvn.w	r3, #15
 800d9cc:	e060      	b.n	800da90 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9d2:	7b5b      	ldrb	r3, [r3, #13]
 800d9d4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9da:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00b      	beq.n	800da04 <tcp_process_refused_data+0x58>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6918      	ldr	r0, [r3, #16]
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	68ba      	ldr	r2, [r7, #8]
 800d9fa:	6879      	ldr	r1, [r7, #4]
 800d9fc:	47a0      	blx	r4
 800d9fe:	4603      	mov	r3, r0
 800da00:	73fb      	strb	r3, [r7, #15]
 800da02:	e007      	b.n	800da14 <tcp_process_refused_data+0x68>
 800da04:	2300      	movs	r3, #0
 800da06:	68ba      	ldr	r2, [r7, #8]
 800da08:	6879      	ldr	r1, [r7, #4]
 800da0a:	2000      	movs	r0, #0
 800da0c:	f000 f8c2 	bl	800db94 <tcp_recv_null>
 800da10:	4603      	mov	r3, r0
 800da12:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800da14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d12a      	bne.n	800da72 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800da1c:	7bbb      	ldrb	r3, [r7, #14]
 800da1e:	f003 0320 	and.w	r3, r3, #32
 800da22:	2b00      	cmp	r3, #0
 800da24:	d033      	beq.n	800da8e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da2a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800da2e:	d005      	beq.n	800da3c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da34:	3301      	adds	r3, #1
 800da36:	b29a      	uxth	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00b      	beq.n	800da5e <tcp_process_refused_data+0xb2>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6918      	ldr	r0, [r3, #16]
 800da50:	2300      	movs	r3, #0
 800da52:	2200      	movs	r2, #0
 800da54:	6879      	ldr	r1, [r7, #4]
 800da56:	47a0      	blx	r4
 800da58:	4603      	mov	r3, r0
 800da5a:	73fb      	strb	r3, [r7, #15]
 800da5c:	e001      	b.n	800da62 <tcp_process_refused_data+0xb6>
 800da5e:	2300      	movs	r3, #0
 800da60:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800da62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da66:	f113 0f0d 	cmn.w	r3, #13
 800da6a:	d110      	bne.n	800da8e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800da6c:	f06f 030c 	mvn.w	r3, #12
 800da70:	e00e      	b.n	800da90 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800da72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da76:	f113 0f0d 	cmn.w	r3, #13
 800da7a:	d102      	bne.n	800da82 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800da7c:	f06f 030c 	mvn.w	r3, #12
 800da80:	e006      	b.n	800da90 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	68ba      	ldr	r2, [r7, #8]
 800da86:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800da88:	f06f 0304 	mvn.w	r3, #4
 800da8c:	e000      	b.n	800da90 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800da8e:	2300      	movs	r3, #0
}
 800da90:	4618      	mov	r0, r3
 800da92:	3714      	adds	r7, #20
 800da94:	46bd      	mov	sp, r7
 800da96:	bd90      	pop	{r4, r7, pc}
 800da98:	08017318 	.word	0x08017318
 800da9c:	08017828 	.word	0x08017828
 800daa0:	0801735c 	.word	0x0801735c

0800daa4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800daac:	e007      	b.n	800dabe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f80a 	bl	800dace <tcp_seg_free>
    seg = next;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1f4      	bne.n	800daae <tcp_segs_free+0xa>
  }
}
 800dac4:	bf00      	nop
 800dac6:	bf00      	nop
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b082      	sub	sp, #8
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d00c      	beq.n	800daf6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d004      	beq.n	800daee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fe faab 	bl	800c044 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800daee:	6879      	ldr	r1, [r7, #4]
 800daf0:	2003      	movs	r0, #3
 800daf2:	f7fd fc31 	bl	800b358 <memp_free>
  }
}
 800daf6:	bf00      	nop
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
	...

0800db00 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	460b      	mov	r3, r1
 800db0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d107      	bne.n	800db22 <tcp_setprio+0x22>
 800db12:	4b07      	ldr	r3, [pc, #28]	; (800db30 <tcp_setprio+0x30>)
 800db14:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800db18:	4906      	ldr	r1, [pc, #24]	; (800db34 <tcp_setprio+0x34>)
 800db1a:	4807      	ldr	r0, [pc, #28]	; (800db38 <tcp_setprio+0x38>)
 800db1c:	f007 fca0 	bl	8015460 <iprintf>
 800db20:	e002      	b.n	800db28 <tcp_setprio+0x28>

  pcb->prio = prio;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	78fa      	ldrb	r2, [r7, #3]
 800db26:	755a      	strb	r2, [r3, #21]
}
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	08017318 	.word	0x08017318
 800db34:	08017850 	.word	0x08017850
 800db38:	0801735c 	.word	0x0801735c

0800db3c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d106      	bne.n	800db58 <tcp_seg_copy+0x1c>
 800db4a:	4b0f      	ldr	r3, [pc, #60]	; (800db88 <tcp_seg_copy+0x4c>)
 800db4c:	f240 6282 	movw	r2, #1666	; 0x682
 800db50:	490e      	ldr	r1, [pc, #56]	; (800db8c <tcp_seg_copy+0x50>)
 800db52:	480f      	ldr	r0, [pc, #60]	; (800db90 <tcp_seg_copy+0x54>)
 800db54:	f007 fc84 	bl	8015460 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800db58:	2003      	movs	r0, #3
 800db5a:	f7fd fb8d 	bl	800b278 <memp_malloc>
 800db5e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d101      	bne.n	800db6a <tcp_seg_copy+0x2e>
    return NULL;
 800db66:	2300      	movs	r3, #0
 800db68:	e00a      	b.n	800db80 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800db6a:	2210      	movs	r2, #16
 800db6c:	6879      	ldr	r1, [r7, #4]
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	f007 fc60 	bl	8015434 <memcpy>
  pbuf_ref(cseg->p);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fe fb03 	bl	800c184 <pbuf_ref>
  return cseg;
 800db7e:	68fb      	ldr	r3, [r7, #12]
}
 800db80:	4618      	mov	r0, r3
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}
 800db88:	08017318 	.word	0x08017318
 800db8c:	0801786c 	.word	0x0801786c
 800db90:	0801735c 	.word	0x0801735c

0800db94 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
 800dba0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d109      	bne.n	800dbbc <tcp_recv_null+0x28>
 800dba8:	4b12      	ldr	r3, [pc, #72]	; (800dbf4 <tcp_recv_null+0x60>)
 800dbaa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dbae:	4912      	ldr	r1, [pc, #72]	; (800dbf8 <tcp_recv_null+0x64>)
 800dbb0:	4812      	ldr	r0, [pc, #72]	; (800dbfc <tcp_recv_null+0x68>)
 800dbb2:	f007 fc55 	bl	8015460 <iprintf>
 800dbb6:	f06f 030f 	mvn.w	r3, #15
 800dbba:	e016      	b.n	800dbea <tcp_recv_null+0x56>

  if (p != NULL) {
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d009      	beq.n	800dbd6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	891b      	ldrh	r3, [r3, #8]
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	68b8      	ldr	r0, [r7, #8]
 800dbca:	f7ff f99d 	bl	800cf08 <tcp_recved>
    pbuf_free(p);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7fe fa38 	bl	800c044 <pbuf_free>
 800dbd4:	e008      	b.n	800dbe8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dbd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d104      	bne.n	800dbe8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dbde:	68b8      	ldr	r0, [r7, #8]
 800dbe0:	f7fe fece 	bl	800c980 <tcp_close>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	e000      	b.n	800dbea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dbe8:	2300      	movs	r3, #0
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	08017318 	.word	0x08017318
 800dbf8:	08017888 	.word	0x08017888
 800dbfc:	0801735c 	.word	0x0801735c

0800dc00 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b086      	sub	sp, #24
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	4603      	mov	r3, r0
 800dc08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dc0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	db01      	blt.n	800dc16 <tcp_kill_prio+0x16>
 800dc12:	79fb      	ldrb	r3, [r7, #7]
 800dc14:	e000      	b.n	800dc18 <tcp_kill_prio+0x18>
 800dc16:	237f      	movs	r3, #127	; 0x7f
 800dc18:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dc1a:	7afb      	ldrb	r3, [r7, #11]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d034      	beq.n	800dc8a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dc20:	7afb      	ldrb	r3, [r7, #11]
 800dc22:	3b01      	subs	r3, #1
 800dc24:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dc26:	2300      	movs	r3, #0
 800dc28:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc2e:	4b19      	ldr	r3, [pc, #100]	; (800dc94 <tcp_kill_prio+0x94>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	617b      	str	r3, [r7, #20]
 800dc34:	e01f      	b.n	800dc76 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	7d5b      	ldrb	r3, [r3, #21]
 800dc3a:	7afa      	ldrb	r2, [r7, #11]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d80c      	bhi.n	800dc5a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dc44:	7afa      	ldrb	r2, [r7, #11]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d112      	bne.n	800dc70 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dc4a:	4b13      	ldr	r3, [pc, #76]	; (800dc98 <tcp_kill_prio+0x98>)
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	6a1b      	ldr	r3, [r3, #32]
 800dc52:	1ad3      	subs	r3, r2, r3
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d80a      	bhi.n	800dc70 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dc5a:	4b0f      	ldr	r3, [pc, #60]	; (800dc98 <tcp_kill_prio+0x98>)
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	6a1b      	ldr	r3, [r3, #32]
 800dc62:	1ad3      	subs	r3, r2, r3
 800dc64:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	7d5b      	ldrb	r3, [r3, #21]
 800dc6e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	617b      	str	r3, [r7, #20]
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1dc      	bne.n	800dc36 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d004      	beq.n	800dc8c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dc82:	6938      	ldr	r0, [r7, #16]
 800dc84:	f7fe ff66 	bl	800cb54 <tcp_abort>
 800dc88:	e000      	b.n	800dc8c <tcp_kill_prio+0x8c>
    return;
 800dc8a:	bf00      	nop
  }
}
 800dc8c:	3718      	adds	r7, #24
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	20008bac 	.word	0x20008bac
 800dc98:	20008ba0 	.word	0x20008ba0

0800dc9c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b086      	sub	sp, #24
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	4603      	mov	r3, r0
 800dca4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dca6:	79fb      	ldrb	r3, [r7, #7]
 800dca8:	2b08      	cmp	r3, #8
 800dcaa:	d009      	beq.n	800dcc0 <tcp_kill_state+0x24>
 800dcac:	79fb      	ldrb	r3, [r7, #7]
 800dcae:	2b09      	cmp	r3, #9
 800dcb0:	d006      	beq.n	800dcc0 <tcp_kill_state+0x24>
 800dcb2:	4b1a      	ldr	r3, [pc, #104]	; (800dd1c <tcp_kill_state+0x80>)
 800dcb4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800dcb8:	4919      	ldr	r1, [pc, #100]	; (800dd20 <tcp_kill_state+0x84>)
 800dcba:	481a      	ldr	r0, [pc, #104]	; (800dd24 <tcp_kill_state+0x88>)
 800dcbc:	f007 fbd0 	bl	8015460 <iprintf>

  inactivity = 0;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcc8:	4b17      	ldr	r3, [pc, #92]	; (800dd28 <tcp_kill_state+0x8c>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	617b      	str	r3, [r7, #20]
 800dcce:	e017      	b.n	800dd00 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	7d1b      	ldrb	r3, [r3, #20]
 800dcd4:	79fa      	ldrb	r2, [r7, #7]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d10f      	bne.n	800dcfa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dcda:	4b14      	ldr	r3, [pc, #80]	; (800dd2c <tcp_kill_state+0x90>)
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	6a1b      	ldr	r3, [r3, #32]
 800dce2:	1ad3      	subs	r3, r2, r3
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d807      	bhi.n	800dcfa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dcea:	4b10      	ldr	r3, [pc, #64]	; (800dd2c <tcp_kill_state+0x90>)
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	6a1b      	ldr	r3, [r3, #32]
 800dcf2:	1ad3      	subs	r3, r2, r3
 800dcf4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	617b      	str	r3, [r7, #20]
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1e4      	bne.n	800dcd0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d003      	beq.n	800dd14 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	6938      	ldr	r0, [r7, #16]
 800dd10:	f7fe fe62 	bl	800c9d8 <tcp_abandon>
  }
}
 800dd14:	bf00      	nop
 800dd16:	3718      	adds	r7, #24
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	08017318 	.word	0x08017318
 800dd20:	080178a4 	.word	0x080178a4
 800dd24:	0801735c 	.word	0x0801735c
 800dd28:	20008bac 	.word	0x20008bac
 800dd2c:	20008ba0 	.word	0x20008ba0

0800dd30 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dd36:	2300      	movs	r3, #0
 800dd38:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd3e:	4b12      	ldr	r3, [pc, #72]	; (800dd88 <tcp_kill_timewait+0x58>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	60fb      	str	r3, [r7, #12]
 800dd44:	e012      	b.n	800dd6c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd46:	4b11      	ldr	r3, [pc, #68]	; (800dd8c <tcp_kill_timewait+0x5c>)
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	6a1b      	ldr	r3, [r3, #32]
 800dd4e:	1ad3      	subs	r3, r2, r3
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d807      	bhi.n	800dd66 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dd56:	4b0d      	ldr	r3, [pc, #52]	; (800dd8c <tcp_kill_timewait+0x5c>)
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6a1b      	ldr	r3, [r3, #32]
 800dd5e:	1ad3      	subs	r3, r2, r3
 800dd60:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	60fb      	str	r3, [r7, #12]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d1e9      	bne.n	800dd46 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d002      	beq.n	800dd7e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dd78:	68b8      	ldr	r0, [r7, #8]
 800dd7a:	f7fe feeb 	bl	800cb54 <tcp_abort>
  }
}
 800dd7e:	bf00      	nop
 800dd80:	3710      	adds	r7, #16
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	20008bb0 	.word	0x20008bb0
 800dd8c:	20008ba0 	.word	0x20008ba0

0800dd90 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dd96:	4b10      	ldr	r3, [pc, #64]	; (800ddd8 <tcp_handle_closepend+0x48>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dd9c:	e014      	b.n	800ddc8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	8b5b      	ldrh	r3, [r3, #26]
 800dda8:	f003 0308 	and.w	r3, r3, #8
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d009      	beq.n	800ddc4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	8b5b      	ldrh	r3, [r3, #26]
 800ddb4:	f023 0308 	bic.w	r3, r3, #8
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f7fe fd74 	bl	800c8ac <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d1e7      	bne.n	800dd9e <tcp_handle_closepend+0xe>
  }
}
 800ddce:	bf00      	nop
 800ddd0:	bf00      	nop
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	20008bac 	.word	0x20008bac

0800dddc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	4603      	mov	r3, r0
 800dde4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dde6:	2001      	movs	r0, #1
 800dde8:	f7fd fa46 	bl	800b278 <memp_malloc>
 800ddec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d126      	bne.n	800de42 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ddf4:	f7ff ffcc 	bl	800dd90 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ddf8:	f7ff ff9a 	bl	800dd30 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddfc:	2001      	movs	r0, #1
 800ddfe:	f7fd fa3b 	bl	800b278 <memp_malloc>
 800de02:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d11b      	bne.n	800de42 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800de0a:	2009      	movs	r0, #9
 800de0c:	f7ff ff46 	bl	800dc9c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de10:	2001      	movs	r0, #1
 800de12:	f7fd fa31 	bl	800b278 <memp_malloc>
 800de16:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d111      	bne.n	800de42 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800de1e:	2008      	movs	r0, #8
 800de20:	f7ff ff3c 	bl	800dc9c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de24:	2001      	movs	r0, #1
 800de26:	f7fd fa27 	bl	800b278 <memp_malloc>
 800de2a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d107      	bne.n	800de42 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800de32:	79fb      	ldrb	r3, [r7, #7]
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fee3 	bl	800dc00 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de3a:	2001      	movs	r0, #1
 800de3c:	f7fd fa1c 	bl	800b278 <memp_malloc>
 800de40:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d03f      	beq.n	800dec8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800de48:	229c      	movs	r2, #156	; 0x9c
 800de4a:	2100      	movs	r1, #0
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f007 faff 	bl	8015450 <memset>
    pcb->prio = prio;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	79fa      	ldrb	r2, [r7, #7]
 800de56:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800de5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800de68:	855a      	strh	r2, [r3, #42]	; 0x2a
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	22ff      	movs	r2, #255	; 0xff
 800de76:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800de7e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2206      	movs	r2, #6
 800de84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2206      	movs	r2, #6
 800de8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de94:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2201      	movs	r2, #1
 800de9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800de9e:	4b0d      	ldr	r3, [pc, #52]	; (800ded4 <tcp_alloc+0xf8>)
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dea6:	4b0c      	ldr	r3, [pc, #48]	; (800ded8 <tcp_alloc+0xfc>)
 800dea8:	781a      	ldrb	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800deb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	4a08      	ldr	r2, [pc, #32]	; (800dedc <tcp_alloc+0x100>)
 800debc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	4a07      	ldr	r2, [pc, #28]	; (800dee0 <tcp_alloc+0x104>)
 800dec4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dec8:	68fb      	ldr	r3, [r7, #12]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	20008ba0 	.word	0x20008ba0
 800ded8:	20008bb6 	.word	0x20008bb6
 800dedc:	0800db95 	.word	0x0800db95
 800dee0:	006ddd00 	.word	0x006ddd00

0800dee4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800dee8:	2040      	movs	r0, #64	; 0x40
 800deea:	f7ff ff77 	bl	800dddc <tcp_alloc>
 800deee:	4603      	mov	r3, r0
}
 800def0:	4618      	mov	r0, r3
 800def2:	bd80      	pop	{r7, pc}

0800def4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	683a      	ldr	r2, [r7, #0]
 800df08:	611a      	str	r2, [r3, #16]
  }
}
 800df0a:	bf00      	nop
 800df0c:	370c      	adds	r7, #12
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
	...

0800df18 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00e      	beq.n	800df46 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	7d1b      	ldrb	r3, [r3, #20]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d106      	bne.n	800df3e <tcp_recv+0x26>
 800df30:	4b07      	ldr	r3, [pc, #28]	; (800df50 <tcp_recv+0x38>)
 800df32:	f240 72df 	movw	r2, #2015	; 0x7df
 800df36:	4907      	ldr	r1, [pc, #28]	; (800df54 <tcp_recv+0x3c>)
 800df38:	4807      	ldr	r0, [pc, #28]	; (800df58 <tcp_recv+0x40>)
 800df3a:	f007 fa91 	bl	8015460 <iprintf>
    pcb->recv = recv;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	683a      	ldr	r2, [r7, #0]
 800df42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800df46:	bf00      	nop
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	08017318 	.word	0x08017318
 800df54:	080178b4 	.word	0x080178b4
 800df58:	0801735c 	.word	0x0801735c

0800df5c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d00e      	beq.n	800df8a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	7d1b      	ldrb	r3, [r3, #20]
 800df70:	2b01      	cmp	r3, #1
 800df72:	d106      	bne.n	800df82 <tcp_sent+0x26>
 800df74:	4b07      	ldr	r3, [pc, #28]	; (800df94 <tcp_sent+0x38>)
 800df76:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800df7a:	4907      	ldr	r1, [pc, #28]	; (800df98 <tcp_sent+0x3c>)
 800df7c:	4807      	ldr	r0, [pc, #28]	; (800df9c <tcp_sent+0x40>)
 800df7e:	f007 fa6f 	bl	8015460 <iprintf>
    pcb->sent = sent;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	683a      	ldr	r2, [r7, #0]
 800df86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800df8a:	bf00      	nop
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	08017318 	.word	0x08017318
 800df98:	080178dc 	.word	0x080178dc
 800df9c:	0801735c 	.word	0x0801735c

0800dfa0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00e      	beq.n	800dfce <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	7d1b      	ldrb	r3, [r3, #20]
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d106      	bne.n	800dfc6 <tcp_err+0x26>
 800dfb8:	4b07      	ldr	r3, [pc, #28]	; (800dfd8 <tcp_err+0x38>)
 800dfba:	f640 020d 	movw	r2, #2061	; 0x80d
 800dfbe:	4907      	ldr	r1, [pc, #28]	; (800dfdc <tcp_err+0x3c>)
 800dfc0:	4807      	ldr	r0, [pc, #28]	; (800dfe0 <tcp_err+0x40>)
 800dfc2:	f007 fa4d 	bl	8015460 <iprintf>
    pcb->errf = err;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	683a      	ldr	r2, [r7, #0]
 800dfca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800dfce:	bf00      	nop
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	08017318 	.word	0x08017318
 800dfdc:	08017904 	.word	0x08017904
 800dfe0:	0801735c 	.word	0x0801735c

0800dfe4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d008      	beq.n	800e006 <tcp_accept+0x22>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	7d1b      	ldrb	r3, [r3, #20]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d104      	bne.n	800e006 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	683a      	ldr	r2, [r7, #0]
 800e004:	619a      	str	r2, [r3, #24]
  }
}
 800e006:	bf00      	nop
 800e008:	3714      	adds	r7, #20
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr
	...

0800e014 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	60b9      	str	r1, [r7, #8]
 800e01e:	4613      	mov	r3, r2
 800e020:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d107      	bne.n	800e038 <tcp_poll+0x24>
 800e028:	4b0e      	ldr	r3, [pc, #56]	; (800e064 <tcp_poll+0x50>)
 800e02a:	f640 023d 	movw	r2, #2109	; 0x83d
 800e02e:	490e      	ldr	r1, [pc, #56]	; (800e068 <tcp_poll+0x54>)
 800e030:	480e      	ldr	r0, [pc, #56]	; (800e06c <tcp_poll+0x58>)
 800e032:	f007 fa15 	bl	8015460 <iprintf>
 800e036:	e011      	b.n	800e05c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	7d1b      	ldrb	r3, [r3, #20]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d106      	bne.n	800e04e <tcp_poll+0x3a>
 800e040:	4b08      	ldr	r3, [pc, #32]	; (800e064 <tcp_poll+0x50>)
 800e042:	f640 023e 	movw	r2, #2110	; 0x83e
 800e046:	490a      	ldr	r1, [pc, #40]	; (800e070 <tcp_poll+0x5c>)
 800e048:	4808      	ldr	r0, [pc, #32]	; (800e06c <tcp_poll+0x58>)
 800e04a:	f007 fa09 	bl	8015460 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	68ba      	ldr	r2, [r7, #8]
 800e052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	79fa      	ldrb	r2, [r7, #7]
 800e05a:	775a      	strb	r2, [r3, #29]
}
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	08017318 	.word	0x08017318
 800e068:	0801792c 	.word	0x0801792c
 800e06c:	0801735c 	.word	0x0801735c
 800e070:	08017944 	.word	0x08017944

0800e074 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d107      	bne.n	800e092 <tcp_pcb_purge+0x1e>
 800e082:	4b21      	ldr	r3, [pc, #132]	; (800e108 <tcp_pcb_purge+0x94>)
 800e084:	f640 0251 	movw	r2, #2129	; 0x851
 800e088:	4920      	ldr	r1, [pc, #128]	; (800e10c <tcp_pcb_purge+0x98>)
 800e08a:	4821      	ldr	r0, [pc, #132]	; (800e110 <tcp_pcb_purge+0x9c>)
 800e08c:	f007 f9e8 	bl	8015460 <iprintf>
 800e090:	e037      	b.n	800e102 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	7d1b      	ldrb	r3, [r3, #20]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d033      	beq.n	800e102 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e09e:	2b0a      	cmp	r3, #10
 800e0a0:	d02f      	beq.n	800e102 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d02b      	beq.n	800e102 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d007      	beq.n	800e0c2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fd ffc4 	bl	800c044 <pbuf_free>
      pcb->refused_data = NULL;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d002      	beq.n	800e0d0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 f986 	bl	800e3dc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0d6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff fce1 	bl	800daa4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7ff fcdc 	bl	800daa4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	66da      	str	r2, [r3, #108]	; 0x6c
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e102:	3708      	adds	r7, #8
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	08017318 	.word	0x08017318
 800e10c:	08017964 	.word	0x08017964
 800e110:	0801735c 	.word	0x0801735c

0800e114 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d106      	bne.n	800e132 <tcp_pcb_remove+0x1e>
 800e124:	4b3e      	ldr	r3, [pc, #248]	; (800e220 <tcp_pcb_remove+0x10c>)
 800e126:	f640 0283 	movw	r2, #2179	; 0x883
 800e12a:	493e      	ldr	r1, [pc, #248]	; (800e224 <tcp_pcb_remove+0x110>)
 800e12c:	483e      	ldr	r0, [pc, #248]	; (800e228 <tcp_pcb_remove+0x114>)
 800e12e:	f007 f997 	bl	8015460 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d106      	bne.n	800e146 <tcp_pcb_remove+0x32>
 800e138:	4b39      	ldr	r3, [pc, #228]	; (800e220 <tcp_pcb_remove+0x10c>)
 800e13a:	f640 0284 	movw	r2, #2180	; 0x884
 800e13e:	493b      	ldr	r1, [pc, #236]	; (800e22c <tcp_pcb_remove+0x118>)
 800e140:	4839      	ldr	r0, [pc, #228]	; (800e228 <tcp_pcb_remove+0x114>)
 800e142:	f007 f98d 	bl	8015460 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	683a      	ldr	r2, [r7, #0]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d105      	bne.n	800e15c <tcp_pcb_remove+0x48>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	68da      	ldr	r2, [r3, #12]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	601a      	str	r2, [r3, #0]
 800e15a:	e013      	b.n	800e184 <tcp_pcb_remove+0x70>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	60fb      	str	r3, [r7, #12]
 800e162:	e00c      	b.n	800e17e <tcp_pcb_remove+0x6a>
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	683a      	ldr	r2, [r7, #0]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d104      	bne.n	800e178 <tcp_pcb_remove+0x64>
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	68da      	ldr	r2, [r3, #12]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	60da      	str	r2, [r3, #12]
 800e176:	e005      	b.n	800e184 <tcp_pcb_remove+0x70>
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	68db      	ldr	r3, [r3, #12]
 800e17c:	60fb      	str	r3, [r7, #12]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d1ef      	bne.n	800e164 <tcp_pcb_remove+0x50>
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	2200      	movs	r2, #0
 800e188:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e18a:	6838      	ldr	r0, [r7, #0]
 800e18c:	f7ff ff72 	bl	800e074 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	7d1b      	ldrb	r3, [r3, #20]
 800e194:	2b0a      	cmp	r3, #10
 800e196:	d013      	beq.n	800e1c0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d00f      	beq.n	800e1c0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	8b5b      	ldrh	r3, [r3, #26]
 800e1a4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d009      	beq.n	800e1c0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	8b5b      	ldrh	r3, [r3, #26]
 800e1b0:	f043 0302 	orr.w	r3, r3, #2
 800e1b4:	b29a      	uxth	r2, r3
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e1ba:	6838      	ldr	r0, [r7, #0]
 800e1bc:	f003 fbc6 	bl	801194c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	7d1b      	ldrb	r3, [r3, #20]
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d020      	beq.n	800e20a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d006      	beq.n	800e1de <tcp_pcb_remove+0xca>
 800e1d0:	4b13      	ldr	r3, [pc, #76]	; (800e220 <tcp_pcb_remove+0x10c>)
 800e1d2:	f640 0293 	movw	r2, #2195	; 0x893
 800e1d6:	4916      	ldr	r1, [pc, #88]	; (800e230 <tcp_pcb_remove+0x11c>)
 800e1d8:	4813      	ldr	r0, [pc, #76]	; (800e228 <tcp_pcb_remove+0x114>)
 800e1da:	f007 f941 	bl	8015460 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d006      	beq.n	800e1f4 <tcp_pcb_remove+0xe0>
 800e1e6:	4b0e      	ldr	r3, [pc, #56]	; (800e220 <tcp_pcb_remove+0x10c>)
 800e1e8:	f640 0294 	movw	r2, #2196	; 0x894
 800e1ec:	4911      	ldr	r1, [pc, #68]	; (800e234 <tcp_pcb_remove+0x120>)
 800e1ee:	480e      	ldr	r0, [pc, #56]	; (800e228 <tcp_pcb_remove+0x114>)
 800e1f0:	f007 f936 	bl	8015460 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d006      	beq.n	800e20a <tcp_pcb_remove+0xf6>
 800e1fc:	4b08      	ldr	r3, [pc, #32]	; (800e220 <tcp_pcb_remove+0x10c>)
 800e1fe:	f640 0296 	movw	r2, #2198	; 0x896
 800e202:	490d      	ldr	r1, [pc, #52]	; (800e238 <tcp_pcb_remove+0x124>)
 800e204:	4808      	ldr	r0, [pc, #32]	; (800e228 <tcp_pcb_remove+0x114>)
 800e206:	f007 f92b 	bl	8015460 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	2200      	movs	r2, #0
 800e20e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	2200      	movs	r2, #0
 800e214:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e216:	bf00      	nop
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	08017318 	.word	0x08017318
 800e224:	08017980 	.word	0x08017980
 800e228:	0801735c 	.word	0x0801735c
 800e22c:	0801799c 	.word	0x0801799c
 800e230:	080179bc 	.word	0x080179bc
 800e234:	080179d4 	.word	0x080179d4
 800e238:	080179f0 	.word	0x080179f0

0800e23c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d106      	bne.n	800e258 <tcp_next_iss+0x1c>
 800e24a:	4b0a      	ldr	r3, [pc, #40]	; (800e274 <tcp_next_iss+0x38>)
 800e24c:	f640 02af 	movw	r2, #2223	; 0x8af
 800e250:	4909      	ldr	r1, [pc, #36]	; (800e278 <tcp_next_iss+0x3c>)
 800e252:	480a      	ldr	r0, [pc, #40]	; (800e27c <tcp_next_iss+0x40>)
 800e254:	f007 f904 	bl	8015460 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e258:	4b09      	ldr	r3, [pc, #36]	; (800e280 <tcp_next_iss+0x44>)
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	4b09      	ldr	r3, [pc, #36]	; (800e284 <tcp_next_iss+0x48>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4413      	add	r3, r2
 800e262:	4a07      	ldr	r2, [pc, #28]	; (800e280 <tcp_next_iss+0x44>)
 800e264:	6013      	str	r3, [r2, #0]
  return iss;
 800e266:	4b06      	ldr	r3, [pc, #24]	; (800e280 <tcp_next_iss+0x44>)
 800e268:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3708      	adds	r7, #8
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	08017318 	.word	0x08017318
 800e278:	08017a08 	.word	0x08017a08
 800e27c:	0801735c 	.word	0x0801735c
 800e280:	20000060 	.word	0x20000060
 800e284:	20008ba0 	.word	0x20008ba0

0800e288 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b086      	sub	sp, #24
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
 800e294:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d106      	bne.n	800e2aa <tcp_eff_send_mss_netif+0x22>
 800e29c:	4b14      	ldr	r3, [pc, #80]	; (800e2f0 <tcp_eff_send_mss_netif+0x68>)
 800e29e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e2a2:	4914      	ldr	r1, [pc, #80]	; (800e2f4 <tcp_eff_send_mss_netif+0x6c>)
 800e2a4:	4814      	ldr	r0, [pc, #80]	; (800e2f8 <tcp_eff_send_mss_netif+0x70>)
 800e2a6:	f007 f8db 	bl	8015460 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d101      	bne.n	800e2b4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e2b0:	89fb      	ldrh	r3, [r7, #14]
 800e2b2:	e019      	b.n	800e2e8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e2b8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e2ba:	8afb      	ldrh	r3, [r7, #22]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d012      	beq.n	800e2e6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e2c0:	2328      	movs	r3, #40	; 0x28
 800e2c2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e2c4:	8afa      	ldrh	r2, [r7, #22]
 800e2c6:	8abb      	ldrh	r3, [r7, #20]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d904      	bls.n	800e2d6 <tcp_eff_send_mss_netif+0x4e>
 800e2cc:	8afa      	ldrh	r2, [r7, #22]
 800e2ce:	8abb      	ldrh	r3, [r7, #20]
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	e000      	b.n	800e2d8 <tcp_eff_send_mss_netif+0x50>
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e2da:	8a7a      	ldrh	r2, [r7, #18]
 800e2dc:	89fb      	ldrh	r3, [r7, #14]
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	bf28      	it	cs
 800e2e2:	4613      	movcs	r3, r2
 800e2e4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e2e6:	89fb      	ldrh	r3, [r7, #14]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3718      	adds	r7, #24
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	08017318 	.word	0x08017318
 800e2f4:	08017a24 	.word	0x08017a24
 800e2f8:	0801735c 	.word	0x0801735c

0800e2fc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d119      	bne.n	800e344 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e310:	4b10      	ldr	r3, [pc, #64]	; (800e354 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e312:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e316:	4910      	ldr	r1, [pc, #64]	; (800e358 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e318:	4810      	ldr	r0, [pc, #64]	; (800e35c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e31a:	f007 f8a1 	bl	8015460 <iprintf>

  while (pcb != NULL) {
 800e31e:	e011      	b.n	800e344 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d108      	bne.n	800e33e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	f7fe fc0e 	bl	800cb54 <tcp_abort>
      pcb = next;
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	60fb      	str	r3, [r7, #12]
 800e33c:	e002      	b.n	800e344 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	68db      	ldr	r3, [r3, #12]
 800e342:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1ea      	bne.n	800e320 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e34a:	bf00      	nop
 800e34c:	bf00      	nop
 800e34e:	3710      	adds	r7, #16
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	08017318 	.word	0x08017318
 800e358:	08017a4c 	.word	0x08017a4c
 800e35c:	0801735c 	.word	0x0801735c

0800e360 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d02a      	beq.n	800e3c6 <tcp_netif_ip_addr_changed+0x66>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d026      	beq.n	800e3c6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e378:	4b15      	ldr	r3, [pc, #84]	; (800e3d0 <tcp_netif_ip_addr_changed+0x70>)
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4619      	mov	r1, r3
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7ff ffbc 	bl	800e2fc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e384:	4b13      	ldr	r3, [pc, #76]	; (800e3d4 <tcp_netif_ip_addr_changed+0x74>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4619      	mov	r1, r3
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f7ff ffb6 	bl	800e2fc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d017      	beq.n	800e3c6 <tcp_netif_ip_addr_changed+0x66>
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d013      	beq.n	800e3c6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e39e:	4b0e      	ldr	r3, [pc, #56]	; (800e3d8 <tcp_netif_ip_addr_changed+0x78>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	60fb      	str	r3, [r7, #12]
 800e3a4:	e00c      	b.n	800e3c0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	d103      	bne.n	800e3ba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	60fb      	str	r3, [r7, #12]
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1ef      	bne.n	800e3a6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e3c6:	bf00      	nop
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	20008bac 	.word	0x20008bac
 800e3d4:	20008ba4 	.word	0x20008ba4
 800e3d8:	20008ba8 	.word	0x20008ba8

0800e3dc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d007      	beq.n	800e3fc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7ff fb57 	bl	800daa4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e3fc:	bf00      	nop
 800e3fe:	3708      	adds	r7, #8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e404:	b590      	push	{r4, r7, lr}
 800e406:	b08d      	sub	sp, #52	; 0x34
 800e408:	af04      	add	r7, sp, #16
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d105      	bne.n	800e420 <tcp_input+0x1c>
 800e414:	4b9b      	ldr	r3, [pc, #620]	; (800e684 <tcp_input+0x280>)
 800e416:	2283      	movs	r2, #131	; 0x83
 800e418:	499b      	ldr	r1, [pc, #620]	; (800e688 <tcp_input+0x284>)
 800e41a:	489c      	ldr	r0, [pc, #624]	; (800e68c <tcp_input+0x288>)
 800e41c:	f007 f820 	bl	8015460 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	4a9a      	ldr	r2, [pc, #616]	; (800e690 <tcp_input+0x28c>)
 800e426:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	895b      	ldrh	r3, [r3, #10]
 800e42c:	2b13      	cmp	r3, #19
 800e42e:	f240 83d1 	bls.w	800ebd4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e432:	4b98      	ldr	r3, [pc, #608]	; (800e694 <tcp_input+0x290>)
 800e434:	695b      	ldr	r3, [r3, #20]
 800e436:	4a97      	ldr	r2, [pc, #604]	; (800e694 <tcp_input+0x290>)
 800e438:	6812      	ldr	r2, [r2, #0]
 800e43a:	4611      	mov	r1, r2
 800e43c:	4618      	mov	r0, r3
 800e43e:	f006 f86f 	bl	8014520 <ip4_addr_isbroadcast_u32>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	f040 83c7 	bne.w	800ebd8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e44a:	4b92      	ldr	r3, [pc, #584]	; (800e694 <tcp_input+0x290>)
 800e44c:	695b      	ldr	r3, [r3, #20]
 800e44e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e452:	2be0      	cmp	r3, #224	; 0xe0
 800e454:	f000 83c0 	beq.w	800ebd8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e458:	4b8d      	ldr	r3, [pc, #564]	; (800e690 <tcp_input+0x28c>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	899b      	ldrh	r3, [r3, #12]
 800e45e:	b29b      	uxth	r3, r3
 800e460:	4618      	mov	r0, r3
 800e462:	f7fc fa91 	bl	800a988 <lwip_htons>
 800e466:	4603      	mov	r3, r0
 800e468:	0b1b      	lsrs	r3, r3, #12
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e472:	7cbb      	ldrb	r3, [r7, #18]
 800e474:	2b13      	cmp	r3, #19
 800e476:	f240 83b1 	bls.w	800ebdc <tcp_input+0x7d8>
 800e47a:	7cbb      	ldrb	r3, [r7, #18]
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	891b      	ldrh	r3, [r3, #8]
 800e482:	429a      	cmp	r2, r3
 800e484:	f200 83aa 	bhi.w	800ebdc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e488:	7cbb      	ldrb	r3, [r7, #18]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	3b14      	subs	r3, #20
 800e48e:	b29a      	uxth	r2, r3
 800e490:	4b81      	ldr	r3, [pc, #516]	; (800e698 <tcp_input+0x294>)
 800e492:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e494:	4b81      	ldr	r3, [pc, #516]	; (800e69c <tcp_input+0x298>)
 800e496:	2200      	movs	r2, #0
 800e498:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	895a      	ldrh	r2, [r3, #10]
 800e49e:	7cbb      	ldrb	r3, [r7, #18]
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d309      	bcc.n	800e4ba <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e4a6:	4b7c      	ldr	r3, [pc, #496]	; (800e698 <tcp_input+0x294>)
 800e4a8:	881a      	ldrh	r2, [r3, #0]
 800e4aa:	4b7d      	ldr	r3, [pc, #500]	; (800e6a0 <tcp_input+0x29c>)
 800e4ac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e4ae:	7cbb      	ldrb	r3, [r7, #18]
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f7fd fd40 	bl	800bf38 <pbuf_remove_header>
 800e4b8:	e04e      	b.n	800e558 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d105      	bne.n	800e4ce <tcp_input+0xca>
 800e4c2:	4b70      	ldr	r3, [pc, #448]	; (800e684 <tcp_input+0x280>)
 800e4c4:	22c2      	movs	r2, #194	; 0xc2
 800e4c6:	4977      	ldr	r1, [pc, #476]	; (800e6a4 <tcp_input+0x2a0>)
 800e4c8:	4870      	ldr	r0, [pc, #448]	; (800e68c <tcp_input+0x288>)
 800e4ca:	f006 ffc9 	bl	8015460 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e4ce:	2114      	movs	r1, #20
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f7fd fd31 	bl	800bf38 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	895a      	ldrh	r2, [r3, #10]
 800e4da:	4b71      	ldr	r3, [pc, #452]	; (800e6a0 <tcp_input+0x29c>)
 800e4dc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e4de:	4b6e      	ldr	r3, [pc, #440]	; (800e698 <tcp_input+0x294>)
 800e4e0:	881a      	ldrh	r2, [r3, #0]
 800e4e2:	4b6f      	ldr	r3, [pc, #444]	; (800e6a0 <tcp_input+0x29c>)
 800e4e4:	881b      	ldrh	r3, [r3, #0]
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e4ea:	4b6d      	ldr	r3, [pc, #436]	; (800e6a0 <tcp_input+0x29c>)
 800e4ec:	881b      	ldrh	r3, [r3, #0]
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7fd fd21 	bl	800bf38 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	895b      	ldrh	r3, [r3, #10]
 800e4fc:	8a3a      	ldrh	r2, [r7, #16]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	f200 836e 	bhi.w	800ebe0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	4a64      	ldr	r2, [pc, #400]	; (800e69c <tcp_input+0x298>)
 800e50c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	8a3a      	ldrh	r2, [r7, #16]
 800e514:	4611      	mov	r1, r2
 800e516:	4618      	mov	r0, r3
 800e518:	f7fd fd0e 	bl	800bf38 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	891a      	ldrh	r2, [r3, #8]
 800e520:	8a3b      	ldrh	r3, [r7, #16]
 800e522:	1ad3      	subs	r3, r2, r3
 800e524:	b29a      	uxth	r2, r3
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	895b      	ldrh	r3, [r3, #10]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d005      	beq.n	800e53e <tcp_input+0x13a>
 800e532:	4b54      	ldr	r3, [pc, #336]	; (800e684 <tcp_input+0x280>)
 800e534:	22df      	movs	r2, #223	; 0xdf
 800e536:	495c      	ldr	r1, [pc, #368]	; (800e6a8 <tcp_input+0x2a4>)
 800e538:	4854      	ldr	r0, [pc, #336]	; (800e68c <tcp_input+0x288>)
 800e53a:	f006 ff91 	bl	8015460 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	891a      	ldrh	r2, [r3, #8]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	891b      	ldrh	r3, [r3, #8]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d005      	beq.n	800e558 <tcp_input+0x154>
 800e54c:	4b4d      	ldr	r3, [pc, #308]	; (800e684 <tcp_input+0x280>)
 800e54e:	22e0      	movs	r2, #224	; 0xe0
 800e550:	4956      	ldr	r1, [pc, #344]	; (800e6ac <tcp_input+0x2a8>)
 800e552:	484e      	ldr	r0, [pc, #312]	; (800e68c <tcp_input+0x288>)
 800e554:	f006 ff84 	bl	8015460 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e558:	4b4d      	ldr	r3, [pc, #308]	; (800e690 <tcp_input+0x28c>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	881b      	ldrh	r3, [r3, #0]
 800e55e:	b29b      	uxth	r3, r3
 800e560:	4a4b      	ldr	r2, [pc, #300]	; (800e690 <tcp_input+0x28c>)
 800e562:	6814      	ldr	r4, [r2, #0]
 800e564:	4618      	mov	r0, r3
 800e566:	f7fc fa0f 	bl	800a988 <lwip_htons>
 800e56a:	4603      	mov	r3, r0
 800e56c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e56e:	4b48      	ldr	r3, [pc, #288]	; (800e690 <tcp_input+0x28c>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	885b      	ldrh	r3, [r3, #2]
 800e574:	b29b      	uxth	r3, r3
 800e576:	4a46      	ldr	r2, [pc, #280]	; (800e690 <tcp_input+0x28c>)
 800e578:	6814      	ldr	r4, [r2, #0]
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fc fa04 	bl	800a988 <lwip_htons>
 800e580:	4603      	mov	r3, r0
 800e582:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e584:	4b42      	ldr	r3, [pc, #264]	; (800e690 <tcp_input+0x28c>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	4a41      	ldr	r2, [pc, #260]	; (800e690 <tcp_input+0x28c>)
 800e58c:	6814      	ldr	r4, [r2, #0]
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fc fa0f 	bl	800a9b2 <lwip_htonl>
 800e594:	4603      	mov	r3, r0
 800e596:	6063      	str	r3, [r4, #4]
 800e598:	6863      	ldr	r3, [r4, #4]
 800e59a:	4a45      	ldr	r2, [pc, #276]	; (800e6b0 <tcp_input+0x2ac>)
 800e59c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e59e:	4b3c      	ldr	r3, [pc, #240]	; (800e690 <tcp_input+0x28c>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	689b      	ldr	r3, [r3, #8]
 800e5a4:	4a3a      	ldr	r2, [pc, #232]	; (800e690 <tcp_input+0x28c>)
 800e5a6:	6814      	ldr	r4, [r2, #0]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7fc fa02 	bl	800a9b2 <lwip_htonl>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	60a3      	str	r3, [r4, #8]
 800e5b2:	68a3      	ldr	r3, [r4, #8]
 800e5b4:	4a3f      	ldr	r2, [pc, #252]	; (800e6b4 <tcp_input+0x2b0>)
 800e5b6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e5b8:	4b35      	ldr	r3, [pc, #212]	; (800e690 <tcp_input+0x28c>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	89db      	ldrh	r3, [r3, #14]
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	4a33      	ldr	r2, [pc, #204]	; (800e690 <tcp_input+0x28c>)
 800e5c2:	6814      	ldr	r4, [r2, #0]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fc f9df 	bl	800a988 <lwip_htons>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e5ce:	4b30      	ldr	r3, [pc, #192]	; (800e690 <tcp_input+0x28c>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	899b      	ldrh	r3, [r3, #12]
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fc f9d6 	bl	800a988 <lwip_htons>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	4b34      	ldr	r3, [pc, #208]	; (800e6b8 <tcp_input+0x2b4>)
 800e5e8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	891a      	ldrh	r2, [r3, #8]
 800e5ee:	4b33      	ldr	r3, [pc, #204]	; (800e6bc <tcp_input+0x2b8>)
 800e5f0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e5f2:	4b31      	ldr	r3, [pc, #196]	; (800e6b8 <tcp_input+0x2b4>)
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	f003 0303 	and.w	r3, r3, #3
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d00c      	beq.n	800e618 <tcp_input+0x214>
    tcplen++;
 800e5fe:	4b2f      	ldr	r3, [pc, #188]	; (800e6bc <tcp_input+0x2b8>)
 800e600:	881b      	ldrh	r3, [r3, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	b29a      	uxth	r2, r3
 800e606:	4b2d      	ldr	r3, [pc, #180]	; (800e6bc <tcp_input+0x2b8>)
 800e608:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	891a      	ldrh	r2, [r3, #8]
 800e60e:	4b2b      	ldr	r3, [pc, #172]	; (800e6bc <tcp_input+0x2b8>)
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	429a      	cmp	r2, r3
 800e614:	f200 82e6 	bhi.w	800ebe4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e618:	2300      	movs	r3, #0
 800e61a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e61c:	4b28      	ldr	r3, [pc, #160]	; (800e6c0 <tcp_input+0x2bc>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	61fb      	str	r3, [r7, #28]
 800e622:	e09d      	b.n	800e760 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e624:	69fb      	ldr	r3, [r7, #28]
 800e626:	7d1b      	ldrb	r3, [r3, #20]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d105      	bne.n	800e638 <tcp_input+0x234>
 800e62c:	4b15      	ldr	r3, [pc, #84]	; (800e684 <tcp_input+0x280>)
 800e62e:	22fb      	movs	r2, #251	; 0xfb
 800e630:	4924      	ldr	r1, [pc, #144]	; (800e6c4 <tcp_input+0x2c0>)
 800e632:	4816      	ldr	r0, [pc, #88]	; (800e68c <tcp_input+0x288>)
 800e634:	f006 ff14 	bl	8015460 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	7d1b      	ldrb	r3, [r3, #20]
 800e63c:	2b0a      	cmp	r3, #10
 800e63e:	d105      	bne.n	800e64c <tcp_input+0x248>
 800e640:	4b10      	ldr	r3, [pc, #64]	; (800e684 <tcp_input+0x280>)
 800e642:	22fc      	movs	r2, #252	; 0xfc
 800e644:	4920      	ldr	r1, [pc, #128]	; (800e6c8 <tcp_input+0x2c4>)
 800e646:	4811      	ldr	r0, [pc, #68]	; (800e68c <tcp_input+0x288>)
 800e648:	f006 ff0a 	bl	8015460 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	7d1b      	ldrb	r3, [r3, #20]
 800e650:	2b01      	cmp	r3, #1
 800e652:	d105      	bne.n	800e660 <tcp_input+0x25c>
 800e654:	4b0b      	ldr	r3, [pc, #44]	; (800e684 <tcp_input+0x280>)
 800e656:	22fd      	movs	r2, #253	; 0xfd
 800e658:	491c      	ldr	r1, [pc, #112]	; (800e6cc <tcp_input+0x2c8>)
 800e65a:	480c      	ldr	r0, [pc, #48]	; (800e68c <tcp_input+0x288>)
 800e65c:	f006 ff00 	bl	8015460 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	7a1b      	ldrb	r3, [r3, #8]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d033      	beq.n	800e6d0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	7a1a      	ldrb	r2, [r3, #8]
 800e66c:	4b09      	ldr	r3, [pc, #36]	; (800e694 <tcp_input+0x290>)
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e674:	3301      	adds	r3, #1
 800e676:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e678:	429a      	cmp	r2, r3
 800e67a:	d029      	beq.n	800e6d0 <tcp_input+0x2cc>
      prev = pcb;
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	61bb      	str	r3, [r7, #24]
      continue;
 800e680:	e06b      	b.n	800e75a <tcp_input+0x356>
 800e682:	bf00      	nop
 800e684:	08017a80 	.word	0x08017a80
 800e688:	08017ab4 	.word	0x08017ab4
 800e68c:	08017acc 	.word	0x08017acc
 800e690:	20008bc8 	.word	0x20008bc8
 800e694:	20005630 	.word	0x20005630
 800e698:	20008bcc 	.word	0x20008bcc
 800e69c:	20008bd0 	.word	0x20008bd0
 800e6a0:	20008bce 	.word	0x20008bce
 800e6a4:	08017af4 	.word	0x08017af4
 800e6a8:	08017b04 	.word	0x08017b04
 800e6ac:	08017b10 	.word	0x08017b10
 800e6b0:	20008bd8 	.word	0x20008bd8
 800e6b4:	20008bdc 	.word	0x20008bdc
 800e6b8:	20008be4 	.word	0x20008be4
 800e6bc:	20008be2 	.word	0x20008be2
 800e6c0:	20008bac 	.word	0x20008bac
 800e6c4:	08017b30 	.word	0x08017b30
 800e6c8:	08017b58 	.word	0x08017b58
 800e6cc:	08017b84 	.word	0x08017b84
    }

    if (pcb->remote_port == tcphdr->src &&
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	8b1a      	ldrh	r2, [r3, #24]
 800e6d4:	4b72      	ldr	r3, [pc, #456]	; (800e8a0 <tcp_input+0x49c>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	881b      	ldrh	r3, [r3, #0]
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d13a      	bne.n	800e756 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	8ada      	ldrh	r2, [r3, #22]
 800e6e4:	4b6e      	ldr	r3, [pc, #440]	; (800e8a0 <tcp_input+0x49c>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	885b      	ldrh	r3, [r3, #2]
 800e6ea:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d132      	bne.n	800e756 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	685a      	ldr	r2, [r3, #4]
 800e6f4:	4b6b      	ldr	r3, [pc, #428]	; (800e8a4 <tcp_input+0x4a0>)
 800e6f6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d12c      	bne.n	800e756 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	4b68      	ldr	r3, [pc, #416]	; (800e8a4 <tcp_input+0x4a0>)
 800e702:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e704:	429a      	cmp	r2, r3
 800e706:	d126      	bne.n	800e756 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	69fa      	ldr	r2, [r7, #28]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d106      	bne.n	800e720 <tcp_input+0x31c>
 800e712:	4b65      	ldr	r3, [pc, #404]	; (800e8a8 <tcp_input+0x4a4>)
 800e714:	f240 120d 	movw	r2, #269	; 0x10d
 800e718:	4964      	ldr	r1, [pc, #400]	; (800e8ac <tcp_input+0x4a8>)
 800e71a:	4865      	ldr	r0, [pc, #404]	; (800e8b0 <tcp_input+0x4ac>)
 800e71c:	f006 fea0 	bl	8015460 <iprintf>
      if (prev != NULL) {
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00a      	beq.n	800e73c <tcp_input+0x338>
        prev->next = pcb->next;
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	68da      	ldr	r2, [r3, #12]
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e72e:	4b61      	ldr	r3, [pc, #388]	; (800e8b4 <tcp_input+0x4b0>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e736:	4a5f      	ldr	r2, [pc, #380]	; (800e8b4 <tcp_input+0x4b0>)
 800e738:	69fb      	ldr	r3, [r7, #28]
 800e73a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	69fa      	ldr	r2, [r7, #28]
 800e742:	429a      	cmp	r2, r3
 800e744:	d111      	bne.n	800e76a <tcp_input+0x366>
 800e746:	4b58      	ldr	r3, [pc, #352]	; (800e8a8 <tcp_input+0x4a4>)
 800e748:	f240 1215 	movw	r2, #277	; 0x115
 800e74c:	495a      	ldr	r1, [pc, #360]	; (800e8b8 <tcp_input+0x4b4>)
 800e74e:	4858      	ldr	r0, [pc, #352]	; (800e8b0 <tcp_input+0x4ac>)
 800e750:	f006 fe86 	bl	8015460 <iprintf>
      break;
 800e754:	e009      	b.n	800e76a <tcp_input+0x366>
    }
    prev = pcb;
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	68db      	ldr	r3, [r3, #12]
 800e75e:	61fb      	str	r3, [r7, #28]
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	2b00      	cmp	r3, #0
 800e764:	f47f af5e 	bne.w	800e624 <tcp_input+0x220>
 800e768:	e000      	b.n	800e76c <tcp_input+0x368>
      break;
 800e76a:	bf00      	nop
  }

  if (pcb == NULL) {
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f040 80aa 	bne.w	800e8c8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e774:	4b51      	ldr	r3, [pc, #324]	; (800e8bc <tcp_input+0x4b8>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	61fb      	str	r3, [r7, #28]
 800e77a:	e03f      	b.n	800e7fc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	7d1b      	ldrb	r3, [r3, #20]
 800e780:	2b0a      	cmp	r3, #10
 800e782:	d006      	beq.n	800e792 <tcp_input+0x38e>
 800e784:	4b48      	ldr	r3, [pc, #288]	; (800e8a8 <tcp_input+0x4a4>)
 800e786:	f240 121f 	movw	r2, #287	; 0x11f
 800e78a:	494d      	ldr	r1, [pc, #308]	; (800e8c0 <tcp_input+0x4bc>)
 800e78c:	4848      	ldr	r0, [pc, #288]	; (800e8b0 <tcp_input+0x4ac>)
 800e78e:	f006 fe67 	bl	8015460 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	7a1b      	ldrb	r3, [r3, #8]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d009      	beq.n	800e7ae <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	7a1a      	ldrb	r2, [r3, #8]
 800e79e:	4b41      	ldr	r3, [pc, #260]	; (800e8a4 <tcp_input+0x4a0>)
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d122      	bne.n	800e7f4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	8b1a      	ldrh	r2, [r3, #24]
 800e7b2:	4b3b      	ldr	r3, [pc, #236]	; (800e8a0 <tcp_input+0x49c>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	881b      	ldrh	r3, [r3, #0]
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d11b      	bne.n	800e7f6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	8ada      	ldrh	r2, [r3, #22]
 800e7c2:	4b37      	ldr	r3, [pc, #220]	; (800e8a0 <tcp_input+0x49c>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	885b      	ldrh	r3, [r3, #2]
 800e7c8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d113      	bne.n	800e7f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	685a      	ldr	r2, [r3, #4]
 800e7d2:	4b34      	ldr	r3, [pc, #208]	; (800e8a4 <tcp_input+0x4a0>)
 800e7d4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d10d      	bne.n	800e7f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	4b31      	ldr	r3, [pc, #196]	; (800e8a4 <tcp_input+0x4a0>)
 800e7e0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d107      	bne.n	800e7f6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e7e6:	69f8      	ldr	r0, [r7, #28]
 800e7e8:	f000 fb56 	bl	800ee98 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f7fd fc29 	bl	800c044 <pbuf_free>
        return;
 800e7f2:	e1fd      	b.n	800ebf0 <tcp_input+0x7ec>
        continue;
 800e7f4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7f6:	69fb      	ldr	r3, [r7, #28]
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	61fb      	str	r3, [r7, #28]
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d1bc      	bne.n	800e77c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e802:	2300      	movs	r3, #0
 800e804:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e806:	4b2f      	ldr	r3, [pc, #188]	; (800e8c4 <tcp_input+0x4c0>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	617b      	str	r3, [r7, #20]
 800e80c:	e02a      	b.n	800e864 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	7a1b      	ldrb	r3, [r3, #8]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00c      	beq.n	800e830 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	7a1a      	ldrb	r2, [r3, #8]
 800e81a:	4b22      	ldr	r3, [pc, #136]	; (800e8a4 <tcp_input+0x4a0>)
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e822:	3301      	adds	r3, #1
 800e824:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e826:	429a      	cmp	r2, r3
 800e828:	d002      	beq.n	800e830 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	61bb      	str	r3, [r7, #24]
        continue;
 800e82e:	e016      	b.n	800e85e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	8ada      	ldrh	r2, [r3, #22]
 800e834:	4b1a      	ldr	r3, [pc, #104]	; (800e8a0 <tcp_input+0x49c>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	885b      	ldrh	r3, [r3, #2]
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d10c      	bne.n	800e85a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	4b17      	ldr	r3, [pc, #92]	; (800e8a4 <tcp_input+0x4a0>)
 800e846:	695b      	ldr	r3, [r3, #20]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d00f      	beq.n	800e86c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d00d      	beq.n	800e86e <tcp_input+0x46a>
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d009      	beq.n	800e86e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	617b      	str	r3, [r7, #20]
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d1d1      	bne.n	800e80e <tcp_input+0x40a>
 800e86a:	e000      	b.n	800e86e <tcp_input+0x46a>
            break;
 800e86c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d029      	beq.n	800e8c8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00a      	beq.n	800e890 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	68da      	ldr	r2, [r3, #12]
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e882:	4b10      	ldr	r3, [pc, #64]	; (800e8c4 <tcp_input+0x4c0>)
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e88a:	4a0e      	ldr	r2, [pc, #56]	; (800e8c4 <tcp_input+0x4c0>)
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e890:	6978      	ldr	r0, [r7, #20]
 800e892:	f000 fa03 	bl	800ec9c <tcp_listen_input>
      }
      pbuf_free(p);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7fd fbd4 	bl	800c044 <pbuf_free>
      return;
 800e89c:	e1a8      	b.n	800ebf0 <tcp_input+0x7ec>
 800e89e:	bf00      	nop
 800e8a0:	20008bc8 	.word	0x20008bc8
 800e8a4:	20005630 	.word	0x20005630
 800e8a8:	08017a80 	.word	0x08017a80
 800e8ac:	08017bac 	.word	0x08017bac
 800e8b0:	08017acc 	.word	0x08017acc
 800e8b4:	20008bac 	.word	0x20008bac
 800e8b8:	08017bd8 	.word	0x08017bd8
 800e8bc:	20008bb0 	.word	0x20008bb0
 800e8c0:	08017c04 	.word	0x08017c04
 800e8c4:	20008ba8 	.word	0x20008ba8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	f000 8158 	beq.w	800eb80 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e8d0:	4b95      	ldr	r3, [pc, #596]	; (800eb28 <tcp_input+0x724>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	891a      	ldrh	r2, [r3, #8]
 800e8da:	4b93      	ldr	r3, [pc, #588]	; (800eb28 <tcp_input+0x724>)
 800e8dc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e8de:	4a92      	ldr	r2, [pc, #584]	; (800eb28 <tcp_input+0x724>)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e8e4:	4b91      	ldr	r3, [pc, #580]	; (800eb2c <tcp_input+0x728>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a8f      	ldr	r2, [pc, #572]	; (800eb28 <tcp_input+0x724>)
 800e8ea:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e8ec:	4b90      	ldr	r3, [pc, #576]	; (800eb30 <tcp_input+0x72c>)
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e8f2:	4b90      	ldr	r3, [pc, #576]	; (800eb34 <tcp_input+0x730>)
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e8f8:	4b8f      	ldr	r3, [pc, #572]	; (800eb38 <tcp_input+0x734>)
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e8fe:	4b8f      	ldr	r3, [pc, #572]	; (800eb3c <tcp_input+0x738>)
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	f003 0308 	and.w	r3, r3, #8
 800e906:	2b00      	cmp	r3, #0
 800e908:	d006      	beq.n	800e918 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	7b5b      	ldrb	r3, [r3, #13]
 800e90e:	f043 0301 	orr.w	r3, r3, #1
 800e912:	b2da      	uxtb	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d017      	beq.n	800e950 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e920:	69f8      	ldr	r0, [r7, #28]
 800e922:	f7ff f843 	bl	800d9ac <tcp_process_refused_data>
 800e926:	4603      	mov	r3, r0
 800e928:	f113 0f0d 	cmn.w	r3, #13
 800e92c:	d007      	beq.n	800e93e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00c      	beq.n	800e950 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e936:	4b82      	ldr	r3, [pc, #520]	; (800eb40 <tcp_input+0x73c>)
 800e938:	881b      	ldrh	r3, [r3, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d008      	beq.n	800e950 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e942:	2b00      	cmp	r3, #0
 800e944:	f040 80e3 	bne.w	800eb0e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e948:	69f8      	ldr	r0, [r7, #28]
 800e94a:	f003 fe05 	bl	8012558 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e94e:	e0de      	b.n	800eb0e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e950:	4a7c      	ldr	r2, [pc, #496]	; (800eb44 <tcp_input+0x740>)
 800e952:	69fb      	ldr	r3, [r7, #28]
 800e954:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e956:	69f8      	ldr	r0, [r7, #28]
 800e958:	f000 fb18 	bl	800ef8c <tcp_process>
 800e95c:	4603      	mov	r3, r0
 800e95e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e960:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e964:	f113 0f0d 	cmn.w	r3, #13
 800e968:	f000 80d3 	beq.w	800eb12 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e96c:	4b71      	ldr	r3, [pc, #452]	; (800eb34 <tcp_input+0x730>)
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	f003 0308 	and.w	r3, r3, #8
 800e974:	2b00      	cmp	r3, #0
 800e976:	d015      	beq.n	800e9a4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d008      	beq.n	800e994 <tcp_input+0x590>
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e988:	69fa      	ldr	r2, [r7, #28]
 800e98a:	6912      	ldr	r2, [r2, #16]
 800e98c:	f06f 010d 	mvn.w	r1, #13
 800e990:	4610      	mov	r0, r2
 800e992:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e994:	69f9      	ldr	r1, [r7, #28]
 800e996:	486c      	ldr	r0, [pc, #432]	; (800eb48 <tcp_input+0x744>)
 800e998:	f7ff fbbc 	bl	800e114 <tcp_pcb_remove>
        tcp_free(pcb);
 800e99c:	69f8      	ldr	r0, [r7, #28]
 800e99e:	f7fd fdf1 	bl	800c584 <tcp_free>
 800e9a2:	e0da      	b.n	800eb5a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e9a8:	4b63      	ldr	r3, [pc, #396]	; (800eb38 <tcp_input+0x734>)
 800e9aa:	881b      	ldrh	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d01d      	beq.n	800e9ec <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e9b0:	4b61      	ldr	r3, [pc, #388]	; (800eb38 <tcp_input+0x734>)
 800e9b2:	881b      	ldrh	r3, [r3, #0]
 800e9b4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00a      	beq.n	800e9d6 <tcp_input+0x5d2>
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9c6:	69fa      	ldr	r2, [r7, #28]
 800e9c8:	6910      	ldr	r0, [r2, #16]
 800e9ca:	89fa      	ldrh	r2, [r7, #14]
 800e9cc:	69f9      	ldr	r1, [r7, #28]
 800e9ce:	4798      	blx	r3
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	74fb      	strb	r3, [r7, #19]
 800e9d4:	e001      	b.n	800e9da <tcp_input+0x5d6>
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e9da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9de:	f113 0f0d 	cmn.w	r3, #13
 800e9e2:	f000 8098 	beq.w	800eb16 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e9e6:	4b54      	ldr	r3, [pc, #336]	; (800eb38 <tcp_input+0x734>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e9ec:	69f8      	ldr	r0, [r7, #28]
 800e9ee:	f000 f915 	bl	800ec1c <tcp_input_delayed_close>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	f040 8090 	bne.w	800eb1a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e9fa:	4b4d      	ldr	r3, [pc, #308]	; (800eb30 <tcp_input+0x72c>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d041      	beq.n	800ea86 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ea02:	69fb      	ldr	r3, [r7, #28]
 800ea04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d006      	beq.n	800ea18 <tcp_input+0x614>
 800ea0a:	4b50      	ldr	r3, [pc, #320]	; (800eb4c <tcp_input+0x748>)
 800ea0c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ea10:	494f      	ldr	r1, [pc, #316]	; (800eb50 <tcp_input+0x74c>)
 800ea12:	4850      	ldr	r0, [pc, #320]	; (800eb54 <tcp_input+0x750>)
 800ea14:	f006 fd24 	bl	8015460 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	8b5b      	ldrh	r3, [r3, #26]
 800ea1c:	f003 0310 	and.w	r3, r3, #16
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d008      	beq.n	800ea36 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ea24:	4b42      	ldr	r3, [pc, #264]	; (800eb30 <tcp_input+0x72c>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f7fd fb0b 	bl	800c044 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ea2e:	69f8      	ldr	r0, [r7, #28]
 800ea30:	f7fe f890 	bl	800cb54 <tcp_abort>
            goto aborted;
 800ea34:	e091      	b.n	800eb5a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d00c      	beq.n	800ea5a <tcp_input+0x656>
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea46:	69fb      	ldr	r3, [r7, #28]
 800ea48:	6918      	ldr	r0, [r3, #16]
 800ea4a:	4b39      	ldr	r3, [pc, #228]	; (800eb30 <tcp_input+0x72c>)
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	69f9      	ldr	r1, [r7, #28]
 800ea52:	47a0      	blx	r4
 800ea54:	4603      	mov	r3, r0
 800ea56:	74fb      	strb	r3, [r7, #19]
 800ea58:	e008      	b.n	800ea6c <tcp_input+0x668>
 800ea5a:	4b35      	ldr	r3, [pc, #212]	; (800eb30 <tcp_input+0x72c>)
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	2300      	movs	r3, #0
 800ea60:	69f9      	ldr	r1, [r7, #28]
 800ea62:	2000      	movs	r0, #0
 800ea64:	f7ff f896 	bl	800db94 <tcp_recv_null>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ea6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea70:	f113 0f0d 	cmn.w	r3, #13
 800ea74:	d053      	beq.n	800eb1e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ea76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d003      	beq.n	800ea86 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ea7e:	4b2c      	ldr	r3, [pc, #176]	; (800eb30 <tcp_input+0x72c>)
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ea86:	4b2b      	ldr	r3, [pc, #172]	; (800eb34 <tcp_input+0x730>)
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	f003 0320 	and.w	r3, r3, #32
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d030      	beq.n	800eaf4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d009      	beq.n	800eaae <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea9e:	7b5a      	ldrb	r2, [r3, #13]
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaa4:	f042 0220 	orr.w	r2, r2, #32
 800eaa8:	b2d2      	uxtb	r2, r2
 800eaaa:	735a      	strb	r2, [r3, #13]
 800eaac:	e022      	b.n	800eaf4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eab2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eab6:	d005      	beq.n	800eac4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eabc:	3301      	adds	r3, #1
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00b      	beq.n	800eae6 <tcp_input+0x6e2>
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	6918      	ldr	r0, [r3, #16]
 800ead8:	2300      	movs	r3, #0
 800eada:	2200      	movs	r2, #0
 800eadc:	69f9      	ldr	r1, [r7, #28]
 800eade:	47a0      	blx	r4
 800eae0:	4603      	mov	r3, r0
 800eae2:	74fb      	strb	r3, [r7, #19]
 800eae4:	e001      	b.n	800eaea <tcp_input+0x6e6>
 800eae6:	2300      	movs	r3, #0
 800eae8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eaea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eaee:	f113 0f0d 	cmn.w	r3, #13
 800eaf2:	d016      	beq.n	800eb22 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800eaf4:	4b13      	ldr	r3, [pc, #76]	; (800eb44 <tcp_input+0x740>)
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800eafa:	69f8      	ldr	r0, [r7, #28]
 800eafc:	f000 f88e 	bl	800ec1c <tcp_input_delayed_close>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d128      	bne.n	800eb58 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800eb06:	69f8      	ldr	r0, [r7, #28]
 800eb08:	f002 ff20 	bl	801194c <tcp_output>
 800eb0c:	e025      	b.n	800eb5a <tcp_input+0x756>
        goto aborted;
 800eb0e:	bf00      	nop
 800eb10:	e023      	b.n	800eb5a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800eb12:	bf00      	nop
 800eb14:	e021      	b.n	800eb5a <tcp_input+0x756>
              goto aborted;
 800eb16:	bf00      	nop
 800eb18:	e01f      	b.n	800eb5a <tcp_input+0x756>
          goto aborted;
 800eb1a:	bf00      	nop
 800eb1c:	e01d      	b.n	800eb5a <tcp_input+0x756>
            goto aborted;
 800eb1e:	bf00      	nop
 800eb20:	e01b      	b.n	800eb5a <tcp_input+0x756>
              goto aborted;
 800eb22:	bf00      	nop
 800eb24:	e019      	b.n	800eb5a <tcp_input+0x756>
 800eb26:	bf00      	nop
 800eb28:	20008bb8 	.word	0x20008bb8
 800eb2c:	20008bc8 	.word	0x20008bc8
 800eb30:	20008be8 	.word	0x20008be8
 800eb34:	20008be5 	.word	0x20008be5
 800eb38:	20008be0 	.word	0x20008be0
 800eb3c:	20008be4 	.word	0x20008be4
 800eb40:	20008be2 	.word	0x20008be2
 800eb44:	20008bec 	.word	0x20008bec
 800eb48:	20008bac 	.word	0x20008bac
 800eb4c:	08017a80 	.word	0x08017a80
 800eb50:	08017c34 	.word	0x08017c34
 800eb54:	08017acc 	.word	0x08017acc
          goto aborted;
 800eb58:	bf00      	nop
    tcp_input_pcb = NULL;
 800eb5a:	4b27      	ldr	r3, [pc, #156]	; (800ebf8 <tcp_input+0x7f4>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800eb60:	4b26      	ldr	r3, [pc, #152]	; (800ebfc <tcp_input+0x7f8>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800eb66:	4b26      	ldr	r3, [pc, #152]	; (800ec00 <tcp_input+0x7fc>)
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d03f      	beq.n	800ebee <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800eb6e:	4b24      	ldr	r3, [pc, #144]	; (800ec00 <tcp_input+0x7fc>)
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fd fa66 	bl	800c044 <pbuf_free>
      inseg.p = NULL;
 800eb78:	4b21      	ldr	r3, [pc, #132]	; (800ec00 <tcp_input+0x7fc>)
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800eb7e:	e036      	b.n	800ebee <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eb80:	4b20      	ldr	r3, [pc, #128]	; (800ec04 <tcp_input+0x800>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	899b      	ldrh	r3, [r3, #12]
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fb fefd 	bl	800a988 <lwip_htons>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	f003 0304 	and.w	r3, r3, #4
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d118      	bne.n	800ebcc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb9a:	4b1b      	ldr	r3, [pc, #108]	; (800ec08 <tcp_input+0x804>)
 800eb9c:	6819      	ldr	r1, [r3, #0]
 800eb9e:	4b1b      	ldr	r3, [pc, #108]	; (800ec0c <tcp_input+0x808>)
 800eba0:	881b      	ldrh	r3, [r3, #0]
 800eba2:	461a      	mov	r2, r3
 800eba4:	4b1a      	ldr	r3, [pc, #104]	; (800ec10 <tcp_input+0x80c>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebaa:	4b16      	ldr	r3, [pc, #88]	; (800ec04 <tcp_input+0x800>)
 800ebac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebae:	885b      	ldrh	r3, [r3, #2]
 800ebb0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebb2:	4a14      	ldr	r2, [pc, #80]	; (800ec04 <tcp_input+0x800>)
 800ebb4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebb6:	8812      	ldrh	r2, [r2, #0]
 800ebb8:	b292      	uxth	r2, r2
 800ebba:	9202      	str	r2, [sp, #8]
 800ebbc:	9301      	str	r3, [sp, #4]
 800ebbe:	4b15      	ldr	r3, [pc, #84]	; (800ec14 <tcp_input+0x810>)
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <tcp_input+0x814>)
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	f003 fc74 	bl	80124b4 <tcp_rst>
    pbuf_free(p);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7fd fa39 	bl	800c044 <pbuf_free>
  return;
 800ebd2:	e00c      	b.n	800ebee <tcp_input+0x7ea>
    goto dropped;
 800ebd4:	bf00      	nop
 800ebd6:	e006      	b.n	800ebe6 <tcp_input+0x7e2>
    goto dropped;
 800ebd8:	bf00      	nop
 800ebda:	e004      	b.n	800ebe6 <tcp_input+0x7e2>
    goto dropped;
 800ebdc:	bf00      	nop
 800ebde:	e002      	b.n	800ebe6 <tcp_input+0x7e2>
      goto dropped;
 800ebe0:	bf00      	nop
 800ebe2:	e000      	b.n	800ebe6 <tcp_input+0x7e2>
      goto dropped;
 800ebe4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7fd fa2c 	bl	800c044 <pbuf_free>
 800ebec:	e000      	b.n	800ebf0 <tcp_input+0x7ec>
  return;
 800ebee:	bf00      	nop
}
 800ebf0:	3724      	adds	r7, #36	; 0x24
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd90      	pop	{r4, r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	20008bec 	.word	0x20008bec
 800ebfc:	20008be8 	.word	0x20008be8
 800ec00:	20008bb8 	.word	0x20008bb8
 800ec04:	20008bc8 	.word	0x20008bc8
 800ec08:	20008bdc 	.word	0x20008bdc
 800ec0c:	20008be2 	.word	0x20008be2
 800ec10:	20008bd8 	.word	0x20008bd8
 800ec14:	20005640 	.word	0x20005640
 800ec18:	20005644 	.word	0x20005644

0800ec1c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d106      	bne.n	800ec38 <tcp_input_delayed_close+0x1c>
 800ec2a:	4b17      	ldr	r3, [pc, #92]	; (800ec88 <tcp_input_delayed_close+0x6c>)
 800ec2c:	f240 225a 	movw	r2, #602	; 0x25a
 800ec30:	4916      	ldr	r1, [pc, #88]	; (800ec8c <tcp_input_delayed_close+0x70>)
 800ec32:	4817      	ldr	r0, [pc, #92]	; (800ec90 <tcp_input_delayed_close+0x74>)
 800ec34:	f006 fc14 	bl	8015460 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ec38:	4b16      	ldr	r3, [pc, #88]	; (800ec94 <tcp_input_delayed_close+0x78>)
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	f003 0310 	and.w	r3, r3, #16
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d01c      	beq.n	800ec7e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	8b5b      	ldrh	r3, [r3, #26]
 800ec48:	f003 0310 	and.w	r3, r3, #16
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d10d      	bne.n	800ec6c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d008      	beq.n	800ec6c <tcp_input_delayed_close+0x50>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	6912      	ldr	r2, [r2, #16]
 800ec64:	f06f 010e 	mvn.w	r1, #14
 800ec68:	4610      	mov	r0, r2
 800ec6a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ec6c:	6879      	ldr	r1, [r7, #4]
 800ec6e:	480a      	ldr	r0, [pc, #40]	; (800ec98 <tcp_input_delayed_close+0x7c>)
 800ec70:	f7ff fa50 	bl	800e114 <tcp_pcb_remove>
    tcp_free(pcb);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7fd fc85 	bl	800c584 <tcp_free>
    return 1;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e000      	b.n	800ec80 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3708      	adds	r7, #8
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	08017a80 	.word	0x08017a80
 800ec8c:	08017c50 	.word	0x08017c50
 800ec90:	08017acc 	.word	0x08017acc
 800ec94:	20008be5 	.word	0x20008be5
 800ec98:	20008bac 	.word	0x20008bac

0800ec9c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ec9c:	b590      	push	{r4, r7, lr}
 800ec9e:	b08b      	sub	sp, #44	; 0x2c
 800eca0:	af04      	add	r7, sp, #16
 800eca2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eca4:	4b6f      	ldr	r3, [pc, #444]	; (800ee64 <tcp_listen_input+0x1c8>)
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	f003 0304 	and.w	r3, r3, #4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f040 80d2 	bne.w	800ee56 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d106      	bne.n	800ecc6 <tcp_listen_input+0x2a>
 800ecb8:	4b6b      	ldr	r3, [pc, #428]	; (800ee68 <tcp_listen_input+0x1cc>)
 800ecba:	f240 2281 	movw	r2, #641	; 0x281
 800ecbe:	496b      	ldr	r1, [pc, #428]	; (800ee6c <tcp_listen_input+0x1d0>)
 800ecc0:	486b      	ldr	r0, [pc, #428]	; (800ee70 <tcp_listen_input+0x1d4>)
 800ecc2:	f006 fbcd 	bl	8015460 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ecc6:	4b67      	ldr	r3, [pc, #412]	; (800ee64 <tcp_listen_input+0x1c8>)
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	f003 0310 	and.w	r3, r3, #16
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d019      	beq.n	800ed06 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecd2:	4b68      	ldr	r3, [pc, #416]	; (800ee74 <tcp_listen_input+0x1d8>)
 800ecd4:	6819      	ldr	r1, [r3, #0]
 800ecd6:	4b68      	ldr	r3, [pc, #416]	; (800ee78 <tcp_listen_input+0x1dc>)
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	461a      	mov	r2, r3
 800ecdc:	4b67      	ldr	r3, [pc, #412]	; (800ee7c <tcp_listen_input+0x1e0>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ece2:	4b67      	ldr	r3, [pc, #412]	; (800ee80 <tcp_listen_input+0x1e4>)
 800ece4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ece6:	885b      	ldrh	r3, [r3, #2]
 800ece8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecea:	4a65      	ldr	r2, [pc, #404]	; (800ee80 <tcp_listen_input+0x1e4>)
 800ecec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecee:	8812      	ldrh	r2, [r2, #0]
 800ecf0:	b292      	uxth	r2, r2
 800ecf2:	9202      	str	r2, [sp, #8]
 800ecf4:	9301      	str	r3, [sp, #4]
 800ecf6:	4b63      	ldr	r3, [pc, #396]	; (800ee84 <tcp_listen_input+0x1e8>)
 800ecf8:	9300      	str	r3, [sp, #0]
 800ecfa:	4b63      	ldr	r3, [pc, #396]	; (800ee88 <tcp_listen_input+0x1ec>)
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f003 fbd8 	bl	80124b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ed04:	e0a9      	b.n	800ee5a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ed06:	4b57      	ldr	r3, [pc, #348]	; (800ee64 <tcp_listen_input+0x1c8>)
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	f003 0302 	and.w	r3, r3, #2
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f000 80a3 	beq.w	800ee5a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	7d5b      	ldrb	r3, [r3, #21]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7ff f85f 	bl	800dddc <tcp_alloc>
 800ed1e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d111      	bne.n	800ed4a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	699b      	ldr	r3, [r3, #24]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00a      	beq.n	800ed44 <tcp_listen_input+0xa8>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	699b      	ldr	r3, [r3, #24]
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	6910      	ldr	r0, [r2, #16]
 800ed36:	f04f 32ff 	mov.w	r2, #4294967295
 800ed3a:	2100      	movs	r1, #0
 800ed3c:	4798      	blx	r3
 800ed3e:	4603      	mov	r3, r0
 800ed40:	73bb      	strb	r3, [r7, #14]
      return;
 800ed42:	e08b      	b.n	800ee5c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ed44:	23f0      	movs	r3, #240	; 0xf0
 800ed46:	73bb      	strb	r3, [r7, #14]
      return;
 800ed48:	e088      	b.n	800ee5c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ed4a:	4b50      	ldr	r3, [pc, #320]	; (800ee8c <tcp_listen_input+0x1f0>)
 800ed4c:	695a      	ldr	r2, [r3, #20]
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ed52:	4b4e      	ldr	r3, [pc, #312]	; (800ee8c <tcp_listen_input+0x1f0>)
 800ed54:	691a      	ldr	r2, [r3, #16]
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	8ada      	ldrh	r2, [r3, #22]
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ed62:	4b47      	ldr	r3, [pc, #284]	; (800ee80 <tcp_listen_input+0x1e4>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	881b      	ldrh	r3, [r3, #0]
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	2203      	movs	r2, #3
 800ed72:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ed74:	4b41      	ldr	r3, [pc, #260]	; (800ee7c <tcp_listen_input+0x1e0>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	1c5a      	adds	r2, r3, #1
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ed86:	6978      	ldr	r0, [r7, #20]
 800ed88:	f7ff fa58 	bl	800e23c <tcp_next_iss>
 800ed8c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	693a      	ldr	r2, [r7, #16]
 800ed92:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	693a      	ldr	r2, [r7, #16]
 800ed98:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	693a      	ldr	r2, [r7, #16]
 800ed9e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	693a      	ldr	r2, [r7, #16]
 800eda4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800eda6:	4b35      	ldr	r3, [pc, #212]	; (800ee7c <tcp_listen_input+0x1e0>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	1e5a      	subs	r2, r3, #1
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	691a      	ldr	r2, [r3, #16]
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800edb8:	697b      	ldr	r3, [r7, #20]
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	7a5b      	ldrb	r3, [r3, #9]
 800edc2:	f003 030c 	and.w	r3, r3, #12
 800edc6:	b2da      	uxtb	r2, r3
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	7a1a      	ldrb	r2, [r3, #8]
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800edd4:	4b2e      	ldr	r3, [pc, #184]	; (800ee90 <tcp_listen_input+0x1f4>)
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	60da      	str	r2, [r3, #12]
 800eddc:	4a2c      	ldr	r2, [pc, #176]	; (800ee90 <tcp_listen_input+0x1f4>)
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	6013      	str	r3, [r2, #0]
 800ede2:	f003 fd29 	bl	8012838 <tcp_timer_needed>
 800ede6:	4b2b      	ldr	r3, [pc, #172]	; (800ee94 <tcp_listen_input+0x1f8>)
 800ede8:	2201      	movs	r2, #1
 800edea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800edec:	6978      	ldr	r0, [r7, #20]
 800edee:	f001 fd8f 	bl	8010910 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800edf2:	4b23      	ldr	r3, [pc, #140]	; (800ee80 <tcp_listen_input+0x1e4>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	89db      	ldrh	r3, [r3, #14]
 800edf8:	b29a      	uxth	r2, r3
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	3304      	adds	r3, #4
 800ee14:	4618      	mov	r0, r3
 800ee16:	f005 f8ed 	bl	8013ff4 <ip4_route>
 800ee1a:	4601      	mov	r1, r0
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	3304      	adds	r3, #4
 800ee20:	461a      	mov	r2, r3
 800ee22:	4620      	mov	r0, r4
 800ee24:	f7ff fa30 	bl	800e288 <tcp_eff_send_mss_netif>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ee30:	2112      	movs	r1, #18
 800ee32:	6978      	ldr	r0, [r7, #20]
 800ee34:	f002 fc9c 	bl	8011770 <tcp_enqueue_flags>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ee3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d004      	beq.n	800ee4e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ee44:	2100      	movs	r1, #0
 800ee46:	6978      	ldr	r0, [r7, #20]
 800ee48:	f7fd fdc6 	bl	800c9d8 <tcp_abandon>
      return;
 800ee4c:	e006      	b.n	800ee5c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ee4e:	6978      	ldr	r0, [r7, #20]
 800ee50:	f002 fd7c 	bl	801194c <tcp_output>
  return;
 800ee54:	e001      	b.n	800ee5a <tcp_listen_input+0x1be>
    return;
 800ee56:	bf00      	nop
 800ee58:	e000      	b.n	800ee5c <tcp_listen_input+0x1c0>
  return;
 800ee5a:	bf00      	nop
}
 800ee5c:	371c      	adds	r7, #28
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd90      	pop	{r4, r7, pc}
 800ee62:	bf00      	nop
 800ee64:	20008be4 	.word	0x20008be4
 800ee68:	08017a80 	.word	0x08017a80
 800ee6c:	08017c78 	.word	0x08017c78
 800ee70:	08017acc 	.word	0x08017acc
 800ee74:	20008bdc 	.word	0x20008bdc
 800ee78:	20008be2 	.word	0x20008be2
 800ee7c:	20008bd8 	.word	0x20008bd8
 800ee80:	20008bc8 	.word	0x20008bc8
 800ee84:	20005640 	.word	0x20005640
 800ee88:	20005644 	.word	0x20005644
 800ee8c:	20005630 	.word	0x20005630
 800ee90:	20008bac 	.word	0x20008bac
 800ee94:	20008bb4 	.word	0x20008bb4

0800ee98 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af04      	add	r7, sp, #16
 800ee9e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800eea0:	4b2f      	ldr	r3, [pc, #188]	; (800ef60 <tcp_timewait_input+0xc8>)
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	f003 0304 	and.w	r3, r3, #4
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d153      	bne.n	800ef54 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d106      	bne.n	800eec0 <tcp_timewait_input+0x28>
 800eeb2:	4b2c      	ldr	r3, [pc, #176]	; (800ef64 <tcp_timewait_input+0xcc>)
 800eeb4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800eeb8:	492b      	ldr	r1, [pc, #172]	; (800ef68 <tcp_timewait_input+0xd0>)
 800eeba:	482c      	ldr	r0, [pc, #176]	; (800ef6c <tcp_timewait_input+0xd4>)
 800eebc:	f006 fad0 	bl	8015460 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eec0:	4b27      	ldr	r3, [pc, #156]	; (800ef60 <tcp_timewait_input+0xc8>)
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	f003 0302 	and.w	r3, r3, #2
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d02a      	beq.n	800ef22 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eecc:	4b28      	ldr	r3, [pc, #160]	; (800ef70 <tcp_timewait_input+0xd8>)
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed4:	1ad3      	subs	r3, r2, r3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	db2d      	blt.n	800ef36 <tcp_timewait_input+0x9e>
 800eeda:	4b25      	ldr	r3, [pc, #148]	; (800ef70 <tcp_timewait_input+0xd8>)
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee2:	6879      	ldr	r1, [r7, #4]
 800eee4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eee6:	440b      	add	r3, r1
 800eee8:	1ad3      	subs	r3, r2, r3
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	dc23      	bgt.n	800ef36 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeee:	4b21      	ldr	r3, [pc, #132]	; (800ef74 <tcp_timewait_input+0xdc>)
 800eef0:	6819      	ldr	r1, [r3, #0]
 800eef2:	4b21      	ldr	r3, [pc, #132]	; (800ef78 <tcp_timewait_input+0xe0>)
 800eef4:	881b      	ldrh	r3, [r3, #0]
 800eef6:	461a      	mov	r2, r3
 800eef8:	4b1d      	ldr	r3, [pc, #116]	; (800ef70 <tcp_timewait_input+0xd8>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eefe:	4b1f      	ldr	r3, [pc, #124]	; (800ef7c <tcp_timewait_input+0xe4>)
 800ef00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef02:	885b      	ldrh	r3, [r3, #2]
 800ef04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef06:	4a1d      	ldr	r2, [pc, #116]	; (800ef7c <tcp_timewait_input+0xe4>)
 800ef08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef0a:	8812      	ldrh	r2, [r2, #0]
 800ef0c:	b292      	uxth	r2, r2
 800ef0e:	9202      	str	r2, [sp, #8]
 800ef10:	9301      	str	r3, [sp, #4]
 800ef12:	4b1b      	ldr	r3, [pc, #108]	; (800ef80 <tcp_timewait_input+0xe8>)
 800ef14:	9300      	str	r3, [sp, #0]
 800ef16:	4b1b      	ldr	r3, [pc, #108]	; (800ef84 <tcp_timewait_input+0xec>)
 800ef18:	4602      	mov	r2, r0
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f003 faca 	bl	80124b4 <tcp_rst>
      return;
 800ef20:	e01b      	b.n	800ef5a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ef22:	4b0f      	ldr	r3, [pc, #60]	; (800ef60 <tcp_timewait_input+0xc8>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	f003 0301 	and.w	r3, r3, #1
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d003      	beq.n	800ef36 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ef2e:	4b16      	ldr	r3, [pc, #88]	; (800ef88 <tcp_timewait_input+0xf0>)
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ef36:	4b10      	ldr	r3, [pc, #64]	; (800ef78 <tcp_timewait_input+0xe0>)
 800ef38:	881b      	ldrh	r3, [r3, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d00c      	beq.n	800ef58 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	8b5b      	ldrh	r3, [r3, #26]
 800ef42:	f043 0302 	orr.w	r3, r3, #2
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f002 fcfd 	bl	801194c <tcp_output>
  }
  return;
 800ef52:	e001      	b.n	800ef58 <tcp_timewait_input+0xc0>
    return;
 800ef54:	bf00      	nop
 800ef56:	e000      	b.n	800ef5a <tcp_timewait_input+0xc2>
  return;
 800ef58:	bf00      	nop
}
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	20008be4 	.word	0x20008be4
 800ef64:	08017a80 	.word	0x08017a80
 800ef68:	08017c98 	.word	0x08017c98
 800ef6c:	08017acc 	.word	0x08017acc
 800ef70:	20008bd8 	.word	0x20008bd8
 800ef74:	20008bdc 	.word	0x20008bdc
 800ef78:	20008be2 	.word	0x20008be2
 800ef7c:	20008bc8 	.word	0x20008bc8
 800ef80:	20005640 	.word	0x20005640
 800ef84:	20005644 	.word	0x20005644
 800ef88:	20008ba0 	.word	0x20008ba0

0800ef8c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ef8c:	b590      	push	{r4, r7, lr}
 800ef8e:	b08d      	sub	sp, #52	; 0x34
 800ef90:	af04      	add	r7, sp, #16
 800ef92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ef94:	2300      	movs	r3, #0
 800ef96:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d106      	bne.n	800efb0 <tcp_process+0x24>
 800efa2:	4b9d      	ldr	r3, [pc, #628]	; (800f218 <tcp_process+0x28c>)
 800efa4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800efa8:	499c      	ldr	r1, [pc, #624]	; (800f21c <tcp_process+0x290>)
 800efaa:	489d      	ldr	r0, [pc, #628]	; (800f220 <tcp_process+0x294>)
 800efac:	f006 fa58 	bl	8015460 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800efb0:	4b9c      	ldr	r3, [pc, #624]	; (800f224 <tcp_process+0x298>)
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	f003 0304 	and.w	r3, r3, #4
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d04e      	beq.n	800f05a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	7d1b      	ldrb	r3, [r3, #20]
 800efc0:	2b02      	cmp	r3, #2
 800efc2:	d108      	bne.n	800efd6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efc8:	4b97      	ldr	r3, [pc, #604]	; (800f228 <tcp_process+0x29c>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d123      	bne.n	800f018 <tcp_process+0x8c>
        acceptable = 1;
 800efd0:	2301      	movs	r3, #1
 800efd2:	76fb      	strb	r3, [r7, #27]
 800efd4:	e020      	b.n	800f018 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efda:	4b94      	ldr	r3, [pc, #592]	; (800f22c <tcp_process+0x2a0>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d102      	bne.n	800efe8 <tcp_process+0x5c>
        acceptable = 1;
 800efe2:	2301      	movs	r3, #1
 800efe4:	76fb      	strb	r3, [r7, #27]
 800efe6:	e017      	b.n	800f018 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800efe8:	4b90      	ldr	r3, [pc, #576]	; (800f22c <tcp_process+0x2a0>)
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eff0:	1ad3      	subs	r3, r2, r3
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	db10      	blt.n	800f018 <tcp_process+0x8c>
 800eff6:	4b8d      	ldr	r3, [pc, #564]	; (800f22c <tcp_process+0x2a0>)
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800effe:	6879      	ldr	r1, [r7, #4]
 800f000:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f002:	440b      	add	r3, r1
 800f004:	1ad3      	subs	r3, r2, r3
 800f006:	2b00      	cmp	r3, #0
 800f008:	dc06      	bgt.n	800f018 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	8b5b      	ldrh	r3, [r3, #26]
 800f00e:	f043 0302 	orr.w	r3, r3, #2
 800f012:	b29a      	uxth	r2, r3
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f018:	7efb      	ldrb	r3, [r7, #27]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d01b      	beq.n	800f056 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	7d1b      	ldrb	r3, [r3, #20]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d106      	bne.n	800f034 <tcp_process+0xa8>
 800f026:	4b7c      	ldr	r3, [pc, #496]	; (800f218 <tcp_process+0x28c>)
 800f028:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f02c:	4980      	ldr	r1, [pc, #512]	; (800f230 <tcp_process+0x2a4>)
 800f02e:	487c      	ldr	r0, [pc, #496]	; (800f220 <tcp_process+0x294>)
 800f030:	f006 fa16 	bl	8015460 <iprintf>
      recv_flags |= TF_RESET;
 800f034:	4b7f      	ldr	r3, [pc, #508]	; (800f234 <tcp_process+0x2a8>)
 800f036:	781b      	ldrb	r3, [r3, #0]
 800f038:	f043 0308 	orr.w	r3, r3, #8
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	4b7d      	ldr	r3, [pc, #500]	; (800f234 <tcp_process+0x2a8>)
 800f040:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	8b5b      	ldrh	r3, [r3, #26]
 800f046:	f023 0301 	bic.w	r3, r3, #1
 800f04a:	b29a      	uxth	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f050:	f06f 030d 	mvn.w	r3, #13
 800f054:	e37a      	b.n	800f74c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f056:	2300      	movs	r3, #0
 800f058:	e378      	b.n	800f74c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f05a:	4b72      	ldr	r3, [pc, #456]	; (800f224 <tcp_process+0x298>)
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	f003 0302 	and.w	r3, r3, #2
 800f062:	2b00      	cmp	r3, #0
 800f064:	d010      	beq.n	800f088 <tcp_process+0xfc>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	7d1b      	ldrb	r3, [r3, #20]
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d00c      	beq.n	800f088 <tcp_process+0xfc>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	7d1b      	ldrb	r3, [r3, #20]
 800f072:	2b03      	cmp	r3, #3
 800f074:	d008      	beq.n	800f088 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	8b5b      	ldrh	r3, [r3, #26]
 800f07a:	f043 0302 	orr.w	r3, r3, #2
 800f07e:	b29a      	uxth	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	e361      	b.n	800f74c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	8b5b      	ldrh	r3, [r3, #26]
 800f08c:	f003 0310 	and.w	r3, r3, #16
 800f090:	2b00      	cmp	r3, #0
 800f092:	d103      	bne.n	800f09c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f094:	4b68      	ldr	r3, [pc, #416]	; (800f238 <tcp_process+0x2ac>)
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f001 fc2f 	bl	8010910 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	7d1b      	ldrb	r3, [r3, #20]
 800f0b6:	3b02      	subs	r3, #2
 800f0b8:	2b07      	cmp	r3, #7
 800f0ba:	f200 8337 	bhi.w	800f72c <tcp_process+0x7a0>
 800f0be:	a201      	add	r2, pc, #4	; (adr r2, 800f0c4 <tcp_process+0x138>)
 800f0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0c4:	0800f0e5 	.word	0x0800f0e5
 800f0c8:	0800f315 	.word	0x0800f315
 800f0cc:	0800f48d 	.word	0x0800f48d
 800f0d0:	0800f4b7 	.word	0x0800f4b7
 800f0d4:	0800f5db 	.word	0x0800f5db
 800f0d8:	0800f48d 	.word	0x0800f48d
 800f0dc:	0800f667 	.word	0x0800f667
 800f0e0:	0800f6f7 	.word	0x0800f6f7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f0e4:	4b4f      	ldr	r3, [pc, #316]	; (800f224 <tcp_process+0x298>)
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	f003 0310 	and.w	r3, r3, #16
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f000 80e4 	beq.w	800f2ba <tcp_process+0x32e>
 800f0f2:	4b4c      	ldr	r3, [pc, #304]	; (800f224 <tcp_process+0x298>)
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	f003 0302 	and.w	r3, r3, #2
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f000 80dd 	beq.w	800f2ba <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f104:	1c5a      	adds	r2, r3, #1
 800f106:	4b48      	ldr	r3, [pc, #288]	; (800f228 <tcp_process+0x29c>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	f040 80d5 	bne.w	800f2ba <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f110:	4b46      	ldr	r3, [pc, #280]	; (800f22c <tcp_process+0x2a0>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	1c5a      	adds	r2, r3, #1
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f122:	4b41      	ldr	r3, [pc, #260]	; (800f228 <tcp_process+0x29c>)
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f12a:	4b44      	ldr	r3, [pc, #272]	; (800f23c <tcp_process+0x2b0>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	89db      	ldrh	r3, [r3, #14]
 800f130:	b29a      	uxth	r2, r3
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f144:	4b39      	ldr	r3, [pc, #228]	; (800f22c <tcp_process+0x2a0>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	1e5a      	subs	r2, r3, #1
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2204      	movs	r2, #4
 800f152:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	3304      	adds	r3, #4
 800f15c:	4618      	mov	r0, r3
 800f15e:	f004 ff49 	bl	8013ff4 <ip4_route>
 800f162:	4601      	mov	r1, r0
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	3304      	adds	r3, #4
 800f168:	461a      	mov	r2, r3
 800f16a:	4620      	mov	r0, r4
 800f16c:	f7ff f88c 	bl	800e288 <tcp_eff_send_mss_netif>
 800f170:	4603      	mov	r3, r0
 800f172:	461a      	mov	r2, r3
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f17c:	009a      	lsls	r2, r3, #2
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f182:	005b      	lsls	r3, r3, #1
 800f184:	f241 111c 	movw	r1, #4380	; 0x111c
 800f188:	428b      	cmp	r3, r1
 800f18a:	bf38      	it	cc
 800f18c:	460b      	movcc	r3, r1
 800f18e:	429a      	cmp	r2, r3
 800f190:	d204      	bcs.n	800f19c <tcp_process+0x210>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f196:	009b      	lsls	r3, r3, #2
 800f198:	b29b      	uxth	r3, r3
 800f19a:	e00d      	b.n	800f1b8 <tcp_process+0x22c>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1a0:	005b      	lsls	r3, r3, #1
 800f1a2:	f241 121c 	movw	r2, #4380	; 0x111c
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d904      	bls.n	800f1b4 <tcp_process+0x228>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1ae:	005b      	lsls	r3, r3, #1
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	e001      	b.n	800f1b8 <tcp_process+0x22c>
 800f1b4:	f241 131c 	movw	r3, #4380	; 0x111c
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d106      	bne.n	800f1d6 <tcp_process+0x24a>
 800f1c8:	4b13      	ldr	r3, [pc, #76]	; (800f218 <tcp_process+0x28c>)
 800f1ca:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f1ce:	491c      	ldr	r1, [pc, #112]	; (800f240 <tcp_process+0x2b4>)
 800f1d0:	4813      	ldr	r0, [pc, #76]	; (800f220 <tcp_process+0x294>)
 800f1d2:	f006 f945 	bl	8015460 <iprintf>
        --pcb->snd_queuelen;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1ea:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d12a      	bne.n	800f248 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1f6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d106      	bne.n	800f20c <tcp_process+0x280>
 800f1fe:	4b06      	ldr	r3, [pc, #24]	; (800f218 <tcp_process+0x28c>)
 800f200:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f204:	490f      	ldr	r1, [pc, #60]	; (800f244 <tcp_process+0x2b8>)
 800f206:	4806      	ldr	r0, [pc, #24]	; (800f220 <tcp_process+0x294>)
 800f208:	f006 f92a 	bl	8015460 <iprintf>
          pcb->unsent = rseg->next;
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	66da      	str	r2, [r3, #108]	; 0x6c
 800f214:	e01c      	b.n	800f250 <tcp_process+0x2c4>
 800f216:	bf00      	nop
 800f218:	08017a80 	.word	0x08017a80
 800f21c:	08017cb8 	.word	0x08017cb8
 800f220:	08017acc 	.word	0x08017acc
 800f224:	20008be4 	.word	0x20008be4
 800f228:	20008bdc 	.word	0x20008bdc
 800f22c:	20008bd8 	.word	0x20008bd8
 800f230:	08017cd4 	.word	0x08017cd4
 800f234:	20008be5 	.word	0x20008be5
 800f238:	20008ba0 	.word	0x20008ba0
 800f23c:	20008bc8 	.word	0x20008bc8
 800f240:	08017cf4 	.word	0x08017cf4
 800f244:	08017d0c 	.word	0x08017d0c
        } else {
          pcb->unacked = rseg->next;
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f250:	69f8      	ldr	r0, [r7, #28]
 800f252:	f7fe fc3c 	bl	800dace <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d104      	bne.n	800f268 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f264:	861a      	strh	r2, [r3, #48]	; 0x30
 800f266:	e006      	b.n	800f276 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2200      	movs	r2, #0
 800f272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00a      	beq.n	800f296 <tcp_process+0x30a>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	6910      	ldr	r0, [r2, #16]
 800f28a:	2200      	movs	r2, #0
 800f28c:	6879      	ldr	r1, [r7, #4]
 800f28e:	4798      	blx	r3
 800f290:	4603      	mov	r3, r0
 800f292:	76bb      	strb	r3, [r7, #26]
 800f294:	e001      	b.n	800f29a <tcp_process+0x30e>
 800f296:	2300      	movs	r3, #0
 800f298:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f29a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f29e:	f113 0f0d 	cmn.w	r3, #13
 800f2a2:	d102      	bne.n	800f2aa <tcp_process+0x31e>
          return ERR_ABRT;
 800f2a4:	f06f 030c 	mvn.w	r3, #12
 800f2a8:	e250      	b.n	800f74c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	8b5b      	ldrh	r3, [r3, #26]
 800f2ae:	f043 0302 	orr.w	r3, r3, #2
 800f2b2:	b29a      	uxth	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f2b8:	e23a      	b.n	800f730 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f2ba:	4b98      	ldr	r3, [pc, #608]	; (800f51c <tcp_process+0x590>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	f003 0310 	and.w	r3, r3, #16
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 8234 	beq.w	800f730 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2c8:	4b95      	ldr	r3, [pc, #596]	; (800f520 <tcp_process+0x594>)
 800f2ca:	6819      	ldr	r1, [r3, #0]
 800f2cc:	4b95      	ldr	r3, [pc, #596]	; (800f524 <tcp_process+0x598>)
 800f2ce:	881b      	ldrh	r3, [r3, #0]
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	4b95      	ldr	r3, [pc, #596]	; (800f528 <tcp_process+0x59c>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2d8:	4b94      	ldr	r3, [pc, #592]	; (800f52c <tcp_process+0x5a0>)
 800f2da:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2dc:	885b      	ldrh	r3, [r3, #2]
 800f2de:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2e0:	4a92      	ldr	r2, [pc, #584]	; (800f52c <tcp_process+0x5a0>)
 800f2e2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2e4:	8812      	ldrh	r2, [r2, #0]
 800f2e6:	b292      	uxth	r2, r2
 800f2e8:	9202      	str	r2, [sp, #8]
 800f2ea:	9301      	str	r3, [sp, #4]
 800f2ec:	4b90      	ldr	r3, [pc, #576]	; (800f530 <tcp_process+0x5a4>)
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	4b90      	ldr	r3, [pc, #576]	; (800f534 <tcp_process+0x5a8>)
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f003 f8dd 	bl	80124b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f300:	2b05      	cmp	r3, #5
 800f302:	f200 8215 	bhi.w	800f730 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2200      	movs	r2, #0
 800f30a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f002 fea7 	bl	8012060 <tcp_rexmit_rto>
      break;
 800f312:	e20d      	b.n	800f730 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f314:	4b81      	ldr	r3, [pc, #516]	; (800f51c <tcp_process+0x590>)
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	f003 0310 	and.w	r3, r3, #16
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f000 80a1 	beq.w	800f464 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f322:	4b7f      	ldr	r3, [pc, #508]	; (800f520 <tcp_process+0x594>)
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f32a:	1ad3      	subs	r3, r2, r3
 800f32c:	3b01      	subs	r3, #1
 800f32e:	2b00      	cmp	r3, #0
 800f330:	db7e      	blt.n	800f430 <tcp_process+0x4a4>
 800f332:	4b7b      	ldr	r3, [pc, #492]	; (800f520 <tcp_process+0x594>)
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f33a:	1ad3      	subs	r3, r2, r3
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	dc77      	bgt.n	800f430 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2204      	movs	r2, #4
 800f344:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d102      	bne.n	800f354 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f34e:	23fa      	movs	r3, #250	; 0xfa
 800f350:	76bb      	strb	r3, [r7, #26]
 800f352:	e01d      	b.n	800f390 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f358:	699b      	ldr	r3, [r3, #24]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d106      	bne.n	800f36c <tcp_process+0x3e0>
 800f35e:	4b76      	ldr	r3, [pc, #472]	; (800f538 <tcp_process+0x5ac>)
 800f360:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f364:	4975      	ldr	r1, [pc, #468]	; (800f53c <tcp_process+0x5b0>)
 800f366:	4876      	ldr	r0, [pc, #472]	; (800f540 <tcp_process+0x5b4>)
 800f368:	f006 f87a 	bl	8015460 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f370:	699b      	ldr	r3, [r3, #24]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d00a      	beq.n	800f38c <tcp_process+0x400>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f37a:	699b      	ldr	r3, [r3, #24]
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	6910      	ldr	r0, [r2, #16]
 800f380:	2200      	movs	r2, #0
 800f382:	6879      	ldr	r1, [r7, #4]
 800f384:	4798      	blx	r3
 800f386:	4603      	mov	r3, r0
 800f388:	76bb      	strb	r3, [r7, #26]
 800f38a:	e001      	b.n	800f390 <tcp_process+0x404>
 800f38c:	23f0      	movs	r3, #240	; 0xf0
 800f38e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f390:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d00a      	beq.n	800f3ae <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f398:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f39c:	f113 0f0d 	cmn.w	r3, #13
 800f3a0:	d002      	beq.n	800f3a8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f7fd fbd6 	bl	800cb54 <tcp_abort>
            }
            return ERR_ABRT;
 800f3a8:	f06f 030c 	mvn.w	r3, #12
 800f3ac:	e1ce      	b.n	800f74c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f000 fae0 	bl	800f974 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f3b4:	4b63      	ldr	r3, [pc, #396]	; (800f544 <tcp_process+0x5b8>)
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d005      	beq.n	800f3c8 <tcp_process+0x43c>
            recv_acked--;
 800f3bc:	4b61      	ldr	r3, [pc, #388]	; (800f544 <tcp_process+0x5b8>)
 800f3be:	881b      	ldrh	r3, [r3, #0]
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	4b5f      	ldr	r3, [pc, #380]	; (800f544 <tcp_process+0x5b8>)
 800f3c6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3cc:	009a      	lsls	r2, r3, #2
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3d2:	005b      	lsls	r3, r3, #1
 800f3d4:	f241 111c 	movw	r1, #4380	; 0x111c
 800f3d8:	428b      	cmp	r3, r1
 800f3da:	bf38      	it	cc
 800f3dc:	460b      	movcc	r3, r1
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d204      	bcs.n	800f3ec <tcp_process+0x460>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3e6:	009b      	lsls	r3, r3, #2
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	e00d      	b.n	800f408 <tcp_process+0x47c>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3f0:	005b      	lsls	r3, r3, #1
 800f3f2:	f241 121c 	movw	r2, #4380	; 0x111c
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	d904      	bls.n	800f404 <tcp_process+0x478>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3fe:	005b      	lsls	r3, r3, #1
 800f400:	b29b      	uxth	r3, r3
 800f402:	e001      	b.n	800f408 <tcp_process+0x47c>
 800f404:	f241 131c 	movw	r3, #4380	; 0x111c
 800f408:	687a      	ldr	r2, [r7, #4]
 800f40a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f40e:	4b4e      	ldr	r3, [pc, #312]	; (800f548 <tcp_process+0x5bc>)
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	f003 0320 	and.w	r3, r3, #32
 800f416:	2b00      	cmp	r3, #0
 800f418:	d037      	beq.n	800f48a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	8b5b      	ldrh	r3, [r3, #26]
 800f41e:	f043 0302 	orr.w	r3, r3, #2
 800f422:	b29a      	uxth	r2, r3
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2207      	movs	r2, #7
 800f42c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f42e:	e02c      	b.n	800f48a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f430:	4b3b      	ldr	r3, [pc, #236]	; (800f520 <tcp_process+0x594>)
 800f432:	6819      	ldr	r1, [r3, #0]
 800f434:	4b3b      	ldr	r3, [pc, #236]	; (800f524 <tcp_process+0x598>)
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	461a      	mov	r2, r3
 800f43a:	4b3b      	ldr	r3, [pc, #236]	; (800f528 <tcp_process+0x59c>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f440:	4b3a      	ldr	r3, [pc, #232]	; (800f52c <tcp_process+0x5a0>)
 800f442:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f444:	885b      	ldrh	r3, [r3, #2]
 800f446:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f448:	4a38      	ldr	r2, [pc, #224]	; (800f52c <tcp_process+0x5a0>)
 800f44a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f44c:	8812      	ldrh	r2, [r2, #0]
 800f44e:	b292      	uxth	r2, r2
 800f450:	9202      	str	r2, [sp, #8]
 800f452:	9301      	str	r3, [sp, #4]
 800f454:	4b36      	ldr	r3, [pc, #216]	; (800f530 <tcp_process+0x5a4>)
 800f456:	9300      	str	r3, [sp, #0]
 800f458:	4b36      	ldr	r3, [pc, #216]	; (800f534 <tcp_process+0x5a8>)
 800f45a:	4602      	mov	r2, r0
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f003 f829 	bl	80124b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f462:	e167      	b.n	800f734 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f464:	4b2d      	ldr	r3, [pc, #180]	; (800f51c <tcp_process+0x590>)
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	f003 0302 	and.w	r3, r3, #2
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	f000 8161 	beq.w	800f734 <tcp_process+0x7a8>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f476:	1e5a      	subs	r2, r3, #1
 800f478:	4b2b      	ldr	r3, [pc, #172]	; (800f528 <tcp_process+0x59c>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	429a      	cmp	r2, r3
 800f47e:	f040 8159 	bne.w	800f734 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f002 fe0e 	bl	80120a4 <tcp_rexmit>
      break;
 800f488:	e154      	b.n	800f734 <tcp_process+0x7a8>
 800f48a:	e153      	b.n	800f734 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 fa71 	bl	800f974 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f492:	4b2d      	ldr	r3, [pc, #180]	; (800f548 <tcp_process+0x5bc>)
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	f003 0320 	and.w	r3, r3, #32
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	f000 814c 	beq.w	800f738 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	8b5b      	ldrh	r3, [r3, #26]
 800f4a4:	f043 0302 	orr.w	r3, r3, #2
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2207      	movs	r2, #7
 800f4b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f4b4:	e140      	b.n	800f738 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 fa5c 	bl	800f974 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f4bc:	4b22      	ldr	r3, [pc, #136]	; (800f548 <tcp_process+0x5bc>)
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	f003 0320 	and.w	r3, r3, #32
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d071      	beq.n	800f5ac <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4c8:	4b14      	ldr	r3, [pc, #80]	; (800f51c <tcp_process+0x590>)
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	f003 0310 	and.w	r3, r3, #16
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d060      	beq.n	800f596 <tcp_process+0x60a>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4d8:	4b11      	ldr	r3, [pc, #68]	; (800f520 <tcp_process+0x594>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d15a      	bne.n	800f596 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d156      	bne.n	800f596 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	8b5b      	ldrh	r3, [r3, #26]
 800f4ec:	f043 0302 	orr.w	r3, r3, #2
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7fe fdbc 	bl	800e074 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f4fc:	4b13      	ldr	r3, [pc, #76]	; (800f54c <tcp_process+0x5c0>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	429a      	cmp	r2, r3
 800f504:	d105      	bne.n	800f512 <tcp_process+0x586>
 800f506:	4b11      	ldr	r3, [pc, #68]	; (800f54c <tcp_process+0x5c0>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	68db      	ldr	r3, [r3, #12]
 800f50c:	4a0f      	ldr	r2, [pc, #60]	; (800f54c <tcp_process+0x5c0>)
 800f50e:	6013      	str	r3, [r2, #0]
 800f510:	e02e      	b.n	800f570 <tcp_process+0x5e4>
 800f512:	4b0e      	ldr	r3, [pc, #56]	; (800f54c <tcp_process+0x5c0>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	617b      	str	r3, [r7, #20]
 800f518:	e027      	b.n	800f56a <tcp_process+0x5de>
 800f51a:	bf00      	nop
 800f51c:	20008be4 	.word	0x20008be4
 800f520:	20008bdc 	.word	0x20008bdc
 800f524:	20008be2 	.word	0x20008be2
 800f528:	20008bd8 	.word	0x20008bd8
 800f52c:	20008bc8 	.word	0x20008bc8
 800f530:	20005640 	.word	0x20005640
 800f534:	20005644 	.word	0x20005644
 800f538:	08017a80 	.word	0x08017a80
 800f53c:	08017d20 	.word	0x08017d20
 800f540:	08017acc 	.word	0x08017acc
 800f544:	20008be0 	.word	0x20008be0
 800f548:	20008be5 	.word	0x20008be5
 800f54c:	20008bac 	.word	0x20008bac
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	687a      	ldr	r2, [r7, #4]
 800f556:	429a      	cmp	r2, r3
 800f558:	d104      	bne.n	800f564 <tcp_process+0x5d8>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	68da      	ldr	r2, [r3, #12]
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	60da      	str	r2, [r3, #12]
 800f562:	e005      	b.n	800f570 <tcp_process+0x5e4>
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	617b      	str	r3, [r7, #20]
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1ef      	bne.n	800f550 <tcp_process+0x5c4>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2200      	movs	r2, #0
 800f574:	60da      	str	r2, [r3, #12]
 800f576:	4b77      	ldr	r3, [pc, #476]	; (800f754 <tcp_process+0x7c8>)
 800f578:	2201      	movs	r2, #1
 800f57a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	220a      	movs	r2, #10
 800f580:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f582:	4b75      	ldr	r3, [pc, #468]	; (800f758 <tcp_process+0x7cc>)
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	60da      	str	r2, [r3, #12]
 800f58a:	4a73      	ldr	r2, [pc, #460]	; (800f758 <tcp_process+0x7cc>)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6013      	str	r3, [r2, #0]
 800f590:	f003 f952 	bl	8012838 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f594:	e0d2      	b.n	800f73c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	8b5b      	ldrh	r3, [r3, #26]
 800f59a:	f043 0302 	orr.w	r3, r3, #2
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2208      	movs	r2, #8
 800f5a8:	751a      	strb	r2, [r3, #20]
      break;
 800f5aa:	e0c7      	b.n	800f73c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f5ac:	4b6b      	ldr	r3, [pc, #428]	; (800f75c <tcp_process+0x7d0>)
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	f003 0310 	and.w	r3, r3, #16
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	f000 80c1 	beq.w	800f73c <tcp_process+0x7b0>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f5be:	4b68      	ldr	r3, [pc, #416]	; (800f760 <tcp_process+0x7d4>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	f040 80ba 	bne.w	800f73c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	f040 80b5 	bne.w	800f73c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2206      	movs	r2, #6
 800f5d6:	751a      	strb	r2, [r3, #20]
      break;
 800f5d8:	e0b0      	b.n	800f73c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 f9ca 	bl	800f974 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f5e0:	4b60      	ldr	r3, [pc, #384]	; (800f764 <tcp_process+0x7d8>)
 800f5e2:	781b      	ldrb	r3, [r3, #0]
 800f5e4:	f003 0320 	and.w	r3, r3, #32
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f000 80a9 	beq.w	800f740 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	8b5b      	ldrh	r3, [r3, #26]
 800f5f2:	f043 0302 	orr.w	r3, r3, #2
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7fe fd39 	bl	800e074 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f602:	4b59      	ldr	r3, [pc, #356]	; (800f768 <tcp_process+0x7dc>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	687a      	ldr	r2, [r7, #4]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d105      	bne.n	800f618 <tcp_process+0x68c>
 800f60c:	4b56      	ldr	r3, [pc, #344]	; (800f768 <tcp_process+0x7dc>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	4a55      	ldr	r2, [pc, #340]	; (800f768 <tcp_process+0x7dc>)
 800f614:	6013      	str	r3, [r2, #0]
 800f616:	e013      	b.n	800f640 <tcp_process+0x6b4>
 800f618:	4b53      	ldr	r3, [pc, #332]	; (800f768 <tcp_process+0x7dc>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	613b      	str	r3, [r7, #16]
 800f61e:	e00c      	b.n	800f63a <tcp_process+0x6ae>
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	429a      	cmp	r2, r3
 800f628:	d104      	bne.n	800f634 <tcp_process+0x6a8>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	68da      	ldr	r2, [r3, #12]
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	60da      	str	r2, [r3, #12]
 800f632:	e005      	b.n	800f640 <tcp_process+0x6b4>
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	613b      	str	r3, [r7, #16]
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1ef      	bne.n	800f620 <tcp_process+0x694>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2200      	movs	r2, #0
 800f644:	60da      	str	r2, [r3, #12]
 800f646:	4b43      	ldr	r3, [pc, #268]	; (800f754 <tcp_process+0x7c8>)
 800f648:	2201      	movs	r2, #1
 800f64a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	220a      	movs	r2, #10
 800f650:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f652:	4b41      	ldr	r3, [pc, #260]	; (800f758 <tcp_process+0x7cc>)
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	60da      	str	r2, [r3, #12]
 800f65a:	4a3f      	ldr	r2, [pc, #252]	; (800f758 <tcp_process+0x7cc>)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6013      	str	r3, [r2, #0]
 800f660:	f003 f8ea 	bl	8012838 <tcp_timer_needed>
      }
      break;
 800f664:	e06c      	b.n	800f740 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 f984 	bl	800f974 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f66c:	4b3b      	ldr	r3, [pc, #236]	; (800f75c <tcp_process+0x7d0>)
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	f003 0310 	and.w	r3, r3, #16
 800f674:	2b00      	cmp	r3, #0
 800f676:	d065      	beq.n	800f744 <tcp_process+0x7b8>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f67c:	4b38      	ldr	r3, [pc, #224]	; (800f760 <tcp_process+0x7d4>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	429a      	cmp	r2, r3
 800f682:	d15f      	bne.n	800f744 <tcp_process+0x7b8>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d15b      	bne.n	800f744 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7fe fcf1 	bl	800e074 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f692:	4b35      	ldr	r3, [pc, #212]	; (800f768 <tcp_process+0x7dc>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	429a      	cmp	r2, r3
 800f69a:	d105      	bne.n	800f6a8 <tcp_process+0x71c>
 800f69c:	4b32      	ldr	r3, [pc, #200]	; (800f768 <tcp_process+0x7dc>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	4a31      	ldr	r2, [pc, #196]	; (800f768 <tcp_process+0x7dc>)
 800f6a4:	6013      	str	r3, [r2, #0]
 800f6a6:	e013      	b.n	800f6d0 <tcp_process+0x744>
 800f6a8:	4b2f      	ldr	r3, [pc, #188]	; (800f768 <tcp_process+0x7dc>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	60fb      	str	r3, [r7, #12]
 800f6ae:	e00c      	b.n	800f6ca <tcp_process+0x73e>
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	687a      	ldr	r2, [r7, #4]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d104      	bne.n	800f6c4 <tcp_process+0x738>
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	68da      	ldr	r2, [r3, #12]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	60da      	str	r2, [r3, #12]
 800f6c2:	e005      	b.n	800f6d0 <tcp_process+0x744>
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	60fb      	str	r3, [r7, #12]
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d1ef      	bne.n	800f6b0 <tcp_process+0x724>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	60da      	str	r2, [r3, #12]
 800f6d6:	4b1f      	ldr	r3, [pc, #124]	; (800f754 <tcp_process+0x7c8>)
 800f6d8:	2201      	movs	r2, #1
 800f6da:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	220a      	movs	r2, #10
 800f6e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f6e2:	4b1d      	ldr	r3, [pc, #116]	; (800f758 <tcp_process+0x7cc>)
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	60da      	str	r2, [r3, #12]
 800f6ea:	4a1b      	ldr	r2, [pc, #108]	; (800f758 <tcp_process+0x7cc>)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6013      	str	r3, [r2, #0]
 800f6f0:	f003 f8a2 	bl	8012838 <tcp_timer_needed>
      }
      break;
 800f6f4:	e026      	b.n	800f744 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 f93c 	bl	800f974 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f6fc:	4b17      	ldr	r3, [pc, #92]	; (800f75c <tcp_process+0x7d0>)
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	f003 0310 	and.w	r3, r3, #16
 800f704:	2b00      	cmp	r3, #0
 800f706:	d01f      	beq.n	800f748 <tcp_process+0x7bc>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f70c:	4b14      	ldr	r3, [pc, #80]	; (800f760 <tcp_process+0x7d4>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	429a      	cmp	r2, r3
 800f712:	d119      	bne.n	800f748 <tcp_process+0x7bc>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d115      	bne.n	800f748 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f71c:	4b11      	ldr	r3, [pc, #68]	; (800f764 <tcp_process+0x7d8>)
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	f043 0310 	orr.w	r3, r3, #16
 800f724:	b2da      	uxtb	r2, r3
 800f726:	4b0f      	ldr	r3, [pc, #60]	; (800f764 <tcp_process+0x7d8>)
 800f728:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f72a:	e00d      	b.n	800f748 <tcp_process+0x7bc>
    default:
      break;
 800f72c:	bf00      	nop
 800f72e:	e00c      	b.n	800f74a <tcp_process+0x7be>
      break;
 800f730:	bf00      	nop
 800f732:	e00a      	b.n	800f74a <tcp_process+0x7be>
      break;
 800f734:	bf00      	nop
 800f736:	e008      	b.n	800f74a <tcp_process+0x7be>
      break;
 800f738:	bf00      	nop
 800f73a:	e006      	b.n	800f74a <tcp_process+0x7be>
      break;
 800f73c:	bf00      	nop
 800f73e:	e004      	b.n	800f74a <tcp_process+0x7be>
      break;
 800f740:	bf00      	nop
 800f742:	e002      	b.n	800f74a <tcp_process+0x7be>
      break;
 800f744:	bf00      	nop
 800f746:	e000      	b.n	800f74a <tcp_process+0x7be>
      break;
 800f748:	bf00      	nop
  }
  return ERR_OK;
 800f74a:	2300      	movs	r3, #0
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3724      	adds	r7, #36	; 0x24
 800f750:	46bd      	mov	sp, r7
 800f752:	bd90      	pop	{r4, r7, pc}
 800f754:	20008bb4 	.word	0x20008bb4
 800f758:	20008bb0 	.word	0x20008bb0
 800f75c:	20008be4 	.word	0x20008be4
 800f760:	20008bdc 	.word	0x20008bdc
 800f764:	20008be5 	.word	0x20008be5
 800f768:	20008bac 	.word	0x20008bac

0800f76c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f76c:	b590      	push	{r4, r7, lr}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d106      	bne.n	800f78a <tcp_oos_insert_segment+0x1e>
 800f77c:	4b3b      	ldr	r3, [pc, #236]	; (800f86c <tcp_oos_insert_segment+0x100>)
 800f77e:	f240 421f 	movw	r2, #1055	; 0x41f
 800f782:	493b      	ldr	r1, [pc, #236]	; (800f870 <tcp_oos_insert_segment+0x104>)
 800f784:	483b      	ldr	r0, [pc, #236]	; (800f874 <tcp_oos_insert_segment+0x108>)
 800f786:	f005 fe6b 	bl	8015460 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	68db      	ldr	r3, [r3, #12]
 800f78e:	899b      	ldrh	r3, [r3, #12]
 800f790:	b29b      	uxth	r3, r3
 800f792:	4618      	mov	r0, r3
 800f794:	f7fb f8f8 	bl	800a988 <lwip_htons>
 800f798:	4603      	mov	r3, r0
 800f79a:	b2db      	uxtb	r3, r3
 800f79c:	f003 0301 	and.w	r3, r3, #1
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d028      	beq.n	800f7f6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f7a4:	6838      	ldr	r0, [r7, #0]
 800f7a6:	f7fe f97d 	bl	800daa4 <tcp_segs_free>
    next = NULL;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	603b      	str	r3, [r7, #0]
 800f7ae:	e056      	b.n	800f85e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	899b      	ldrh	r3, [r3, #12]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fb f8e5 	bl	800a988 <lwip_htons>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	b2db      	uxtb	r3, r3
 800f7c2:	f003 0301 	and.w	r3, r3, #1
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d00d      	beq.n	800f7e6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	68db      	ldr	r3, [r3, #12]
 800f7ce:	899b      	ldrh	r3, [r3, #12]
 800f7d0:	b29c      	uxth	r4, r3
 800f7d2:	2001      	movs	r0, #1
 800f7d4:	f7fb f8d8 	bl	800a988 <lwip_htons>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	461a      	mov	r2, r3
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	68db      	ldr	r3, [r3, #12]
 800f7e0:	4322      	orrs	r2, r4
 800f7e2:	b292      	uxth	r2, r2
 800f7e4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f7e6:	683b      	ldr	r3, [r7, #0]
 800f7e8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f7f0:	68f8      	ldr	r0, [r7, #12]
 800f7f2:	f7fe f96c 	bl	800dace <tcp_seg_free>
    while (next &&
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d00e      	beq.n	800f81a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	891b      	ldrh	r3, [r3, #8]
 800f800:	461a      	mov	r2, r3
 800f802:	4b1d      	ldr	r3, [pc, #116]	; (800f878 <tcp_oos_insert_segment+0x10c>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	441a      	add	r2, r3
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	6839      	ldr	r1, [r7, #0]
 800f810:	8909      	ldrh	r1, [r1, #8]
 800f812:	440b      	add	r3, r1
 800f814:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f816:	2b00      	cmp	r3, #0
 800f818:	daca      	bge.n	800f7b0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d01e      	beq.n	800f85e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	891b      	ldrh	r3, [r3, #8]
 800f824:	461a      	mov	r2, r3
 800f826:	4b14      	ldr	r3, [pc, #80]	; (800f878 <tcp_oos_insert_segment+0x10c>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	441a      	add	r2, r3
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f834:	2b00      	cmp	r3, #0
 800f836:	dd12      	ble.n	800f85e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	68db      	ldr	r3, [r3, #12]
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	b29a      	uxth	r2, r3
 800f840:	4b0d      	ldr	r3, [pc, #52]	; (800f878 <tcp_oos_insert_segment+0x10c>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	b29b      	uxth	r3, r3
 800f846:	1ad3      	subs	r3, r2, r3
 800f848:	b29a      	uxth	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	685a      	ldr	r2, [r3, #4]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	891b      	ldrh	r3, [r3, #8]
 800f856:	4619      	mov	r1, r3
 800f858:	4610      	mov	r0, r2
 800f85a:	f7fc fa6d 	bl	800bd38 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	683a      	ldr	r2, [r7, #0]
 800f862:	601a      	str	r2, [r3, #0]
}
 800f864:	bf00      	nop
 800f866:	3714      	adds	r7, #20
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd90      	pop	{r4, r7, pc}
 800f86c:	08017a80 	.word	0x08017a80
 800f870:	08017d40 	.word	0x08017d40
 800f874:	08017acc 	.word	0x08017acc
 800f878:	20008bd8 	.word	0x20008bd8

0800f87c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f87c:	b5b0      	push	{r4, r5, r7, lr}
 800f87e:	b086      	sub	sp, #24
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
 800f888:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f88a:	e03e      	b.n	800f90a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fc fc5a 	bl	800c154 <pbuf_clen>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8aa:	8a7a      	ldrh	r2, [r7, #18]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d906      	bls.n	800f8be <tcp_free_acked_segments+0x42>
 800f8b0:	4b2a      	ldr	r3, [pc, #168]	; (800f95c <tcp_free_acked_segments+0xe0>)
 800f8b2:	f240 4257 	movw	r2, #1111	; 0x457
 800f8b6:	492a      	ldr	r1, [pc, #168]	; (800f960 <tcp_free_acked_segments+0xe4>)
 800f8b8:	482a      	ldr	r0, [pc, #168]	; (800f964 <tcp_free_acked_segments+0xe8>)
 800f8ba:	f005 fdd1 	bl	8015460 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f8c4:	8a7b      	ldrh	r3, [r7, #18]
 800f8c6:	1ad3      	subs	r3, r2, r3
 800f8c8:	b29a      	uxth	r2, r3
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	891a      	ldrh	r2, [r3, #8]
 800f8d4:	4b24      	ldr	r3, [pc, #144]	; (800f968 <tcp_free_acked_segments+0xec>)
 800f8d6:	881b      	ldrh	r3, [r3, #0]
 800f8d8:	4413      	add	r3, r2
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	4b22      	ldr	r3, [pc, #136]	; (800f968 <tcp_free_acked_segments+0xec>)
 800f8de:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f8e0:	6978      	ldr	r0, [r7, #20]
 800f8e2:	f7fe f8f4 	bl	800dace <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d00c      	beq.n	800f90a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d109      	bne.n	800f90a <tcp_free_acked_segments+0x8e>
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d106      	bne.n	800f90a <tcp_free_acked_segments+0x8e>
 800f8fc:	4b17      	ldr	r3, [pc, #92]	; (800f95c <tcp_free_acked_segments+0xe0>)
 800f8fe:	f240 4261 	movw	r2, #1121	; 0x461
 800f902:	491a      	ldr	r1, [pc, #104]	; (800f96c <tcp_free_acked_segments+0xf0>)
 800f904:	4817      	ldr	r0, [pc, #92]	; (800f964 <tcp_free_acked_segments+0xe8>)
 800f906:	f005 fdab 	bl	8015460 <iprintf>
  while (seg_list != NULL &&
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d020      	beq.n	800f952 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	4618      	mov	r0, r3
 800f918:	f7fb f84b 	bl	800a9b2 <lwip_htonl>
 800f91c:	4604      	mov	r4, r0
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	891b      	ldrh	r3, [r3, #8]
 800f922:	461d      	mov	r5, r3
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	68db      	ldr	r3, [r3, #12]
 800f928:	899b      	ldrh	r3, [r3, #12]
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7fb f82b 	bl	800a988 <lwip_htons>
 800f932:	4603      	mov	r3, r0
 800f934:	b2db      	uxtb	r3, r3
 800f936:	f003 0303 	and.w	r3, r3, #3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d001      	beq.n	800f942 <tcp_free_acked_segments+0xc6>
 800f93e:	2301      	movs	r3, #1
 800f940:	e000      	b.n	800f944 <tcp_free_acked_segments+0xc8>
 800f942:	2300      	movs	r3, #0
 800f944:	442b      	add	r3, r5
 800f946:	18e2      	adds	r2, r4, r3
 800f948:	4b09      	ldr	r3, [pc, #36]	; (800f970 <tcp_free_acked_segments+0xf4>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f94e:	2b00      	cmp	r3, #0
 800f950:	dd9c      	ble.n	800f88c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f952:	68bb      	ldr	r3, [r7, #8]
}
 800f954:	4618      	mov	r0, r3
 800f956:	3718      	adds	r7, #24
 800f958:	46bd      	mov	sp, r7
 800f95a:	bdb0      	pop	{r4, r5, r7, pc}
 800f95c:	08017a80 	.word	0x08017a80
 800f960:	08017d68 	.word	0x08017d68
 800f964:	08017acc 	.word	0x08017acc
 800f968:	20008be0 	.word	0x20008be0
 800f96c:	08017d90 	.word	0x08017d90
 800f970:	20008bdc 	.word	0x20008bdc

0800f974 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f974:	b5b0      	push	{r4, r5, r7, lr}
 800f976:	b094      	sub	sp, #80	; 0x50
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f97c:	2300      	movs	r3, #0
 800f97e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d106      	bne.n	800f994 <tcp_receive+0x20>
 800f986:	4b91      	ldr	r3, [pc, #580]	; (800fbcc <tcp_receive+0x258>)
 800f988:	f240 427b 	movw	r2, #1147	; 0x47b
 800f98c:	4990      	ldr	r1, [pc, #576]	; (800fbd0 <tcp_receive+0x25c>)
 800f98e:	4891      	ldr	r0, [pc, #580]	; (800fbd4 <tcp_receive+0x260>)
 800f990:	f005 fd66 	bl	8015460 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	7d1b      	ldrb	r3, [r3, #20]
 800f998:	2b03      	cmp	r3, #3
 800f99a:	d806      	bhi.n	800f9aa <tcp_receive+0x36>
 800f99c:	4b8b      	ldr	r3, [pc, #556]	; (800fbcc <tcp_receive+0x258>)
 800f99e:	f240 427c 	movw	r2, #1148	; 0x47c
 800f9a2:	498d      	ldr	r1, [pc, #564]	; (800fbd8 <tcp_receive+0x264>)
 800f9a4:	488b      	ldr	r0, [pc, #556]	; (800fbd4 <tcp_receive+0x260>)
 800f9a6:	f005 fd5b 	bl	8015460 <iprintf>

  if (flags & TCP_ACK) {
 800f9aa:	4b8c      	ldr	r3, [pc, #560]	; (800fbdc <tcp_receive+0x268>)
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	f003 0310 	and.w	r3, r3, #16
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	f000 8264 	beq.w	800fe80 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9be:	461a      	mov	r2, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9c4:	4413      	add	r3, r2
 800f9c6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9cc:	4b84      	ldr	r3, [pc, #528]	; (800fbe0 <tcp_receive+0x26c>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	1ad3      	subs	r3, r2, r3
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	db1b      	blt.n	800fa0e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9da:	4b81      	ldr	r3, [pc, #516]	; (800fbe0 <tcp_receive+0x26c>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d106      	bne.n	800f9f0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9e6:	4b7f      	ldr	r3, [pc, #508]	; (800fbe4 <tcp_receive+0x270>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	1ad3      	subs	r3, r2, r3
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	db0e      	blt.n	800fa0e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9f4:	4b7b      	ldr	r3, [pc, #492]	; (800fbe4 <tcp_receive+0x270>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d125      	bne.n	800fa48 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9fc:	4b7a      	ldr	r3, [pc, #488]	; (800fbe8 <tcp_receive+0x274>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	89db      	ldrh	r3, [r3, #14]
 800fa02:	b29a      	uxth	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d91c      	bls.n	800fa48 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fa0e:	4b76      	ldr	r3, [pc, #472]	; (800fbe8 <tcp_receive+0x274>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	89db      	ldrh	r3, [r3, #14]
 800fa14:	b29a      	uxth	r2, r3
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa28:	429a      	cmp	r2, r3
 800fa2a:	d205      	bcs.n	800fa38 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fa38:	4b69      	ldr	r3, [pc, #420]	; (800fbe0 <tcp_receive+0x26c>)
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fa40:	4b68      	ldr	r3, [pc, #416]	; (800fbe4 <tcp_receive+0x270>)
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fa48:	4b66      	ldr	r3, [pc, #408]	; (800fbe4 <tcp_receive+0x270>)
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa50:	1ad3      	subs	r3, r2, r3
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	dc58      	bgt.n	800fb08 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fa56:	4b65      	ldr	r3, [pc, #404]	; (800fbec <tcp_receive+0x278>)
 800fa58:	881b      	ldrh	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d14b      	bne.n	800faf6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fa68:	4413      	add	r3, r2
 800fa6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d142      	bne.n	800faf6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	db3d      	blt.n	800faf6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa7e:	4b59      	ldr	r3, [pc, #356]	; (800fbe4 <tcp_receive+0x270>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d137      	bne.n	800faf6 <tcp_receive+0x182>
              found_dupack = 1;
 800fa86:	2301      	movs	r3, #1
 800fa88:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa90:	2bff      	cmp	r3, #255	; 0xff
 800fa92:	d007      	beq.n	800faa4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	b2da      	uxtb	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800faaa:	2b03      	cmp	r3, #3
 800faac:	d91b      	bls.n	800fae6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fab8:	4413      	add	r3, r2
 800faba:	b29a      	uxth	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d30a      	bcc.n	800fadc <tcp_receive+0x168>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fad0:	4413      	add	r3, r2
 800fad2:	b29a      	uxth	r2, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fada:	e004      	b.n	800fae6 <tcp_receive+0x172>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fae2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800faec:	2b02      	cmp	r3, #2
 800faee:	d902      	bls.n	800faf6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f002 fb43 	bl	801217c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800faf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	f040 8161 	bne.w	800fdc0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fb06:	e15b      	b.n	800fdc0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fb08:	4b36      	ldr	r3, [pc, #216]	; (800fbe4 <tcp_receive+0x270>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	3b01      	subs	r3, #1
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	f2c0 814e 	blt.w	800fdb6 <tcp_receive+0x442>
 800fb1a:	4b32      	ldr	r3, [pc, #200]	; (800fbe4 <tcp_receive+0x270>)
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb22:	1ad3      	subs	r3, r2, r3
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	f300 8146 	bgt.w	800fdb6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	8b5b      	ldrh	r3, [r3, #26]
 800fb2e:	f003 0304 	and.w	r3, r3, #4
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d010      	beq.n	800fb58 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	8b5b      	ldrh	r3, [r3, #26]
 800fb3a:	f023 0304 	bic.w	r3, r3, #4
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2200      	movs	r2, #0
 800fb54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb66:	10db      	asrs	r3, r3, #3
 800fb68:	b21b      	sxth	r3, r3
 800fb6a:	b29a      	uxth	r2, r3
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	4413      	add	r3, r2
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	b21a      	sxth	r2, r3
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fb80:	4b18      	ldr	r3, [pc, #96]	; (800fbe4 <tcp_receive+0x270>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	b29a      	uxth	r2, r3
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	1ad3      	subs	r3, r2, r3
 800fb8e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2200      	movs	r2, #0
 800fb94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fb98:	4b12      	ldr	r3, [pc, #72]	; (800fbe4 <tcp_receive+0x270>)
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	7d1b      	ldrb	r3, [r3, #20]
 800fba4:	2b03      	cmp	r3, #3
 800fba6:	f240 8097 	bls.w	800fcd8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d245      	bcs.n	800fc46 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	8b5b      	ldrh	r3, [r3, #26]
 800fbbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d014      	beq.n	800fbf0 <tcp_receive+0x27c>
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e013      	b.n	800fbf2 <tcp_receive+0x27e>
 800fbca:	bf00      	nop
 800fbcc:	08017a80 	.word	0x08017a80
 800fbd0:	08017db0 	.word	0x08017db0
 800fbd4:	08017acc 	.word	0x08017acc
 800fbd8:	08017dcc 	.word	0x08017dcc
 800fbdc:	20008be4 	.word	0x20008be4
 800fbe0:	20008bd8 	.word	0x20008bd8
 800fbe4:	20008bdc 	.word	0x20008bdc
 800fbe8:	20008bc8 	.word	0x20008bc8
 800fbec:	20008be2 	.word	0x20008be2
 800fbf0:	2302      	movs	r3, #2
 800fbf2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fbf6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc00:	fb12 f303 	smulbb	r3, r2, r3
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	bf28      	it	cs
 800fc0c:	4613      	movcs	r3, r2
 800fc0e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fc18:	4413      	add	r3, r2
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d309      	bcc.n	800fc3a <tcp_receive+0x2c6>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fc2e:	4413      	add	r3, r2
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fc38:	e04e      	b.n	800fcd8 <tcp_receive+0x364>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fc44:	e048      	b.n	800fcd8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc4e:	4413      	add	r3, r2
 800fc50:	b29a      	uxth	r2, r3
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d309      	bcc.n	800fc70 <tcp_receive+0x2fc>
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc64:	4413      	add	r3, r2
 800fc66:	b29a      	uxth	r2, r3
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fc6e:	e004      	b.n	800fc7a <tcp_receive+0x306>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d326      	bcc.n	800fcd8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	b29a      	uxth	r2, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcaa:	4413      	add	r3, r2
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d30a      	bcc.n	800fcce <tcp_receive+0x35a>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcc2:	4413      	add	r3, r2
 800fcc4:	b29a      	uxth	r2, r3
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fccc:	e004      	b.n	800fcd8 <tcp_receive+0x364>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcd4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fce0:	4a98      	ldr	r2, [pc, #608]	; (800ff44 <tcp_receive+0x5d0>)
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7ff fdca 	bl	800f87c <tcp_free_acked_segments>
 800fce8:	4602      	mov	r2, r0
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcf6:	4a94      	ldr	r2, [pc, #592]	; (800ff48 <tcp_receive+0x5d4>)
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f7ff fdbf 	bl	800f87c <tcp_free_acked_segments>
 800fcfe:	4602      	mov	r2, r0
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d104      	bne.n	800fd16 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd12:	861a      	strh	r2, [r3, #48]	; 0x30
 800fd14:	e002      	b.n	800fd1c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2200      	movs	r2, #0
 800fd1a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d103      	bne.n	800fd32 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fd38:	4b84      	ldr	r3, [pc, #528]	; (800ff4c <tcp_receive+0x5d8>)
 800fd3a:	881b      	ldrh	r3, [r3, #0]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	b29a      	uxth	r2, r3
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	8b5b      	ldrh	r3, [r3, #26]
 800fd4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d035      	beq.n	800fdbe <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d118      	bne.n	800fd8c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d00c      	beq.n	800fd7c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fa fe1f 	bl	800a9b2 <lwip_htonl>
 800fd74:	4603      	mov	r3, r0
 800fd76:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	dc20      	bgt.n	800fdbe <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	8b5b      	ldrh	r3, [r3, #26]
 800fd80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd84:	b29a      	uxth	r2, r3
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd8a:	e018      	b.n	800fdbe <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd94:	68db      	ldr	r3, [r3, #12]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fa fe0a 	bl	800a9b2 <lwip_htonl>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	1ae3      	subs	r3, r4, r3
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	dc0b      	bgt.n	800fdbe <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	8b5b      	ldrh	r3, [r3, #26]
 800fdaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fdb4:	e003      	b.n	800fdbe <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f002 fbce 	bl	8012558 <tcp_send_empty_ack>
 800fdbc:	e000      	b.n	800fdc0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fdbe:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d05b      	beq.n	800fe80 <tcp_receive+0x50c>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fdcc:	4b60      	ldr	r3, [pc, #384]	; (800ff50 <tcp_receive+0x5dc>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	1ad3      	subs	r3, r2, r3
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	da54      	bge.n	800fe80 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fdd6:	4b5f      	ldr	r3, [pc, #380]	; (800ff54 <tcp_receive+0x5e0>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	b29a      	uxth	r2, r3
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	1ad3      	subs	r3, r2, r3
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fdea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdf4:	10db      	asrs	r3, r3, #3
 800fdf6:	b21b      	sxth	r3, r3
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	1ad3      	subs	r3, r2, r3
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe08:	b29a      	uxth	r2, r3
 800fe0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fe0e:	4413      	add	r3, r2
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	b21a      	sxth	r2, r3
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fe18:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	da05      	bge.n	800fe2c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fe20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fe24:	425b      	negs	r3, r3
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fe2c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe36:	109b      	asrs	r3, r3, #2
 800fe38:	b21b      	sxth	r3, r3
 800fe3a:	b29b      	uxth	r3, r3
 800fe3c:	1ad3      	subs	r3, r2, r3
 800fe3e:	b29b      	uxth	r3, r3
 800fe40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fe50:	4413      	add	r3, r2
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	b21a      	sxth	r2, r3
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe60:	10db      	asrs	r3, r3, #3
 800fe62:	b21b      	sxth	r3, r3
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe6c:	b29b      	uxth	r3, r3
 800fe6e:	4413      	add	r3, r2
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	b21a      	sxth	r2, r3
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fe80:	4b35      	ldr	r3, [pc, #212]	; (800ff58 <tcp_receive+0x5e4>)
 800fe82:	881b      	ldrh	r3, [r3, #0]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f000 84e2 	beq.w	801084e <tcp_receive+0xeda>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	7d1b      	ldrb	r3, [r3, #20]
 800fe8e:	2b06      	cmp	r3, #6
 800fe90:	f200 84dd 	bhi.w	801084e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe98:	4b30      	ldr	r3, [pc, #192]	; (800ff5c <tcp_receive+0x5e8>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	1ad3      	subs	r3, r2, r3
 800fe9e:	3b01      	subs	r3, #1
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f2c0 808f 	blt.w	800ffc4 <tcp_receive+0x650>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800feaa:	4b2b      	ldr	r3, [pc, #172]	; (800ff58 <tcp_receive+0x5e4>)
 800feac:	881b      	ldrh	r3, [r3, #0]
 800feae:	4619      	mov	r1, r3
 800feb0:	4b2a      	ldr	r3, [pc, #168]	; (800ff5c <tcp_receive+0x5e8>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	440b      	add	r3, r1
 800feb6:	1ad3      	subs	r3, r2, r3
 800feb8:	3301      	adds	r3, #1
 800feba:	2b00      	cmp	r3, #0
 800febc:	f300 8082 	bgt.w	800ffc4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fec0:	4b27      	ldr	r3, [pc, #156]	; (800ff60 <tcp_receive+0x5ec>)
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800feca:	4b24      	ldr	r3, [pc, #144]	; (800ff5c <tcp_receive+0x5e8>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	1ad3      	subs	r3, r2, r3
 800fed0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fed2:	4b23      	ldr	r3, [pc, #140]	; (800ff60 <tcp_receive+0x5ec>)
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d106      	bne.n	800fee8 <tcp_receive+0x574>
 800feda:	4b22      	ldr	r3, [pc, #136]	; (800ff64 <tcp_receive+0x5f0>)
 800fedc:	f240 5294 	movw	r2, #1428	; 0x594
 800fee0:	4921      	ldr	r1, [pc, #132]	; (800ff68 <tcp_receive+0x5f4>)
 800fee2:	4822      	ldr	r0, [pc, #136]	; (800ff6c <tcp_receive+0x5f8>)
 800fee4:	f005 fabc 	bl	8015460 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800feee:	4293      	cmp	r3, r2
 800fef0:	d906      	bls.n	800ff00 <tcp_receive+0x58c>
 800fef2:	4b1c      	ldr	r3, [pc, #112]	; (800ff64 <tcp_receive+0x5f0>)
 800fef4:	f240 5295 	movw	r2, #1429	; 0x595
 800fef8:	491d      	ldr	r1, [pc, #116]	; (800ff70 <tcp_receive+0x5fc>)
 800fefa:	481c      	ldr	r0, [pc, #112]	; (800ff6c <tcp_receive+0x5f8>)
 800fefc:	f005 fab0 	bl	8015460 <iprintf>
      off = (u16_t)off32;
 800ff00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ff06:	4b16      	ldr	r3, [pc, #88]	; (800ff60 <tcp_receive+0x5ec>)
 800ff08:	685b      	ldr	r3, [r3, #4]
 800ff0a:	891b      	ldrh	r3, [r3, #8]
 800ff0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d906      	bls.n	800ff22 <tcp_receive+0x5ae>
 800ff14:	4b13      	ldr	r3, [pc, #76]	; (800ff64 <tcp_receive+0x5f0>)
 800ff16:	f240 5297 	movw	r2, #1431	; 0x597
 800ff1a:	4916      	ldr	r1, [pc, #88]	; (800ff74 <tcp_receive+0x600>)
 800ff1c:	4813      	ldr	r0, [pc, #76]	; (800ff6c <tcp_receive+0x5f8>)
 800ff1e:	f005 fa9f 	bl	8015460 <iprintf>
      inseg.len -= off;
 800ff22:	4b0f      	ldr	r3, [pc, #60]	; (800ff60 <tcp_receive+0x5ec>)
 800ff24:	891a      	ldrh	r2, [r3, #8]
 800ff26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff2a:	1ad3      	subs	r3, r2, r3
 800ff2c:	b29a      	uxth	r2, r3
 800ff2e:	4b0c      	ldr	r3, [pc, #48]	; (800ff60 <tcp_receive+0x5ec>)
 800ff30:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ff32:	4b0b      	ldr	r3, [pc, #44]	; (800ff60 <tcp_receive+0x5ec>)
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	891a      	ldrh	r2, [r3, #8]
 800ff38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff3c:	1ad3      	subs	r3, r2, r3
 800ff3e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ff40:	e02a      	b.n	800ff98 <tcp_receive+0x624>
 800ff42:	bf00      	nop
 800ff44:	08017de8 	.word	0x08017de8
 800ff48:	08017df0 	.word	0x08017df0
 800ff4c:	20008be0 	.word	0x20008be0
 800ff50:	20008bdc 	.word	0x20008bdc
 800ff54:	20008ba0 	.word	0x20008ba0
 800ff58:	20008be2 	.word	0x20008be2
 800ff5c:	20008bd8 	.word	0x20008bd8
 800ff60:	20008bb8 	.word	0x20008bb8
 800ff64:	08017a80 	.word	0x08017a80
 800ff68:	08017df8 	.word	0x08017df8
 800ff6c:	08017acc 	.word	0x08017acc
 800ff70:	08017e08 	.word	0x08017e08
 800ff74:	08017e18 	.word	0x08017e18
        off -= p->len;
 800ff78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff7a:	895b      	ldrh	r3, [r3, #10]
 800ff7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff80:	1ad3      	subs	r3, r2, r3
 800ff82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ff86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ff8a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ff8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff8e:	2200      	movs	r2, #0
 800ff90:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ff92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ff98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff9a:	895b      	ldrh	r3, [r3, #10]
 800ff9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d8e9      	bhi.n	800ff78 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ffa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ffac:	f7fb ffc4 	bl	800bf38 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb4:	4a91      	ldr	r2, [pc, #580]	; (80101fc <tcp_receive+0x888>)
 800ffb6:	6013      	str	r3, [r2, #0]
 800ffb8:	4b91      	ldr	r3, [pc, #580]	; (8010200 <tcp_receive+0x88c>)
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	4a8f      	ldr	r2, [pc, #572]	; (80101fc <tcp_receive+0x888>)
 800ffbe:	6812      	ldr	r2, [r2, #0]
 800ffc0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ffc2:	e00d      	b.n	800ffe0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ffc4:	4b8d      	ldr	r3, [pc, #564]	; (80101fc <tcp_receive+0x888>)
 800ffc6:	681a      	ldr	r2, [r3, #0]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffcc:	1ad3      	subs	r3, r2, r3
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	da06      	bge.n	800ffe0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	8b5b      	ldrh	r3, [r3, #26]
 800ffd6:	f043 0302 	orr.w	r3, r3, #2
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffe0:	4b86      	ldr	r3, [pc, #536]	; (80101fc <tcp_receive+0x888>)
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f2c0 842a 	blt.w	8010844 <tcp_receive+0xed0>
 800fff0:	4b82      	ldr	r3, [pc, #520]	; (80101fc <tcp_receive+0x888>)
 800fff2:	681a      	ldr	r2, [r3, #0]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff8:	6879      	ldr	r1, [r7, #4]
 800fffa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fffc:	440b      	add	r3, r1
 800fffe:	1ad3      	subs	r3, r2, r3
 8010000:	3301      	adds	r3, #1
 8010002:	2b00      	cmp	r3, #0
 8010004:	f300 841e 	bgt.w	8010844 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801000c:	4b7b      	ldr	r3, [pc, #492]	; (80101fc <tcp_receive+0x888>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	429a      	cmp	r2, r3
 8010012:	f040 829a 	bne.w	801054a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010016:	4b7a      	ldr	r3, [pc, #488]	; (8010200 <tcp_receive+0x88c>)
 8010018:	891c      	ldrh	r4, [r3, #8]
 801001a:	4b79      	ldr	r3, [pc, #484]	; (8010200 <tcp_receive+0x88c>)
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	899b      	ldrh	r3, [r3, #12]
 8010020:	b29b      	uxth	r3, r3
 8010022:	4618      	mov	r0, r3
 8010024:	f7fa fcb0 	bl	800a988 <lwip_htons>
 8010028:	4603      	mov	r3, r0
 801002a:	b2db      	uxtb	r3, r3
 801002c:	f003 0303 	and.w	r3, r3, #3
 8010030:	2b00      	cmp	r3, #0
 8010032:	d001      	beq.n	8010038 <tcp_receive+0x6c4>
 8010034:	2301      	movs	r3, #1
 8010036:	e000      	b.n	801003a <tcp_receive+0x6c6>
 8010038:	2300      	movs	r3, #0
 801003a:	4423      	add	r3, r4
 801003c:	b29a      	uxth	r2, r3
 801003e:	4b71      	ldr	r3, [pc, #452]	; (8010204 <tcp_receive+0x890>)
 8010040:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010046:	4b6f      	ldr	r3, [pc, #444]	; (8010204 <tcp_receive+0x890>)
 8010048:	881b      	ldrh	r3, [r3, #0]
 801004a:	429a      	cmp	r2, r3
 801004c:	d275      	bcs.n	801013a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801004e:	4b6c      	ldr	r3, [pc, #432]	; (8010200 <tcp_receive+0x88c>)
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	899b      	ldrh	r3, [r3, #12]
 8010054:	b29b      	uxth	r3, r3
 8010056:	4618      	mov	r0, r3
 8010058:	f7fa fc96 	bl	800a988 <lwip_htons>
 801005c:	4603      	mov	r3, r0
 801005e:	b2db      	uxtb	r3, r3
 8010060:	f003 0301 	and.w	r3, r3, #1
 8010064:	2b00      	cmp	r3, #0
 8010066:	d01f      	beq.n	80100a8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010068:	4b65      	ldr	r3, [pc, #404]	; (8010200 <tcp_receive+0x88c>)
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	899b      	ldrh	r3, [r3, #12]
 801006e:	b29b      	uxth	r3, r3
 8010070:	b21b      	sxth	r3, r3
 8010072:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010076:	b21c      	sxth	r4, r3
 8010078:	4b61      	ldr	r3, [pc, #388]	; (8010200 <tcp_receive+0x88c>)
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	899b      	ldrh	r3, [r3, #12]
 801007e:	b29b      	uxth	r3, r3
 8010080:	4618      	mov	r0, r3
 8010082:	f7fa fc81 	bl	800a988 <lwip_htons>
 8010086:	4603      	mov	r3, r0
 8010088:	b2db      	uxtb	r3, r3
 801008a:	b29b      	uxth	r3, r3
 801008c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010090:	b29b      	uxth	r3, r3
 8010092:	4618      	mov	r0, r3
 8010094:	f7fa fc78 	bl	800a988 <lwip_htons>
 8010098:	4603      	mov	r3, r0
 801009a:	b21b      	sxth	r3, r3
 801009c:	4323      	orrs	r3, r4
 801009e:	b21a      	sxth	r2, r3
 80100a0:	4b57      	ldr	r3, [pc, #348]	; (8010200 <tcp_receive+0x88c>)
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	b292      	uxth	r2, r2
 80100a6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100ac:	4b54      	ldr	r3, [pc, #336]	; (8010200 <tcp_receive+0x88c>)
 80100ae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80100b0:	4b53      	ldr	r3, [pc, #332]	; (8010200 <tcp_receive+0x88c>)
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	899b      	ldrh	r3, [r3, #12]
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fa fc65 	bl	800a988 <lwip_htons>
 80100be:	4603      	mov	r3, r0
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	f003 0302 	and.w	r3, r3, #2
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d005      	beq.n	80100d6 <tcp_receive+0x762>
            inseg.len -= 1;
 80100ca:	4b4d      	ldr	r3, [pc, #308]	; (8010200 <tcp_receive+0x88c>)
 80100cc:	891b      	ldrh	r3, [r3, #8]
 80100ce:	3b01      	subs	r3, #1
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	4b4b      	ldr	r3, [pc, #300]	; (8010200 <tcp_receive+0x88c>)
 80100d4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80100d6:	4b4a      	ldr	r3, [pc, #296]	; (8010200 <tcp_receive+0x88c>)
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	4a49      	ldr	r2, [pc, #292]	; (8010200 <tcp_receive+0x88c>)
 80100dc:	8912      	ldrh	r2, [r2, #8]
 80100de:	4611      	mov	r1, r2
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7fb fe29 	bl	800bd38 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80100e6:	4b46      	ldr	r3, [pc, #280]	; (8010200 <tcp_receive+0x88c>)
 80100e8:	891c      	ldrh	r4, [r3, #8]
 80100ea:	4b45      	ldr	r3, [pc, #276]	; (8010200 <tcp_receive+0x88c>)
 80100ec:	68db      	ldr	r3, [r3, #12]
 80100ee:	899b      	ldrh	r3, [r3, #12]
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fa fc48 	bl	800a988 <lwip_htons>
 80100f8:	4603      	mov	r3, r0
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	f003 0303 	and.w	r3, r3, #3
 8010100:	2b00      	cmp	r3, #0
 8010102:	d001      	beq.n	8010108 <tcp_receive+0x794>
 8010104:	2301      	movs	r3, #1
 8010106:	e000      	b.n	801010a <tcp_receive+0x796>
 8010108:	2300      	movs	r3, #0
 801010a:	4423      	add	r3, r4
 801010c:	b29a      	uxth	r2, r3
 801010e:	4b3d      	ldr	r3, [pc, #244]	; (8010204 <tcp_receive+0x890>)
 8010110:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010112:	4b3c      	ldr	r3, [pc, #240]	; (8010204 <tcp_receive+0x890>)
 8010114:	881b      	ldrh	r3, [r3, #0]
 8010116:	461a      	mov	r2, r3
 8010118:	4b38      	ldr	r3, [pc, #224]	; (80101fc <tcp_receive+0x888>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	441a      	add	r2, r3
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010122:	6879      	ldr	r1, [r7, #4]
 8010124:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010126:	440b      	add	r3, r1
 8010128:	429a      	cmp	r2, r3
 801012a:	d006      	beq.n	801013a <tcp_receive+0x7c6>
 801012c:	4b36      	ldr	r3, [pc, #216]	; (8010208 <tcp_receive+0x894>)
 801012e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010132:	4936      	ldr	r1, [pc, #216]	; (801020c <tcp_receive+0x898>)
 8010134:	4836      	ldr	r0, [pc, #216]	; (8010210 <tcp_receive+0x89c>)
 8010136:	f005 f993 	bl	8015460 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801013e:	2b00      	cmp	r3, #0
 8010140:	f000 80e7 	beq.w	8010312 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010144:	4b2e      	ldr	r3, [pc, #184]	; (8010200 <tcp_receive+0x88c>)
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	899b      	ldrh	r3, [r3, #12]
 801014a:	b29b      	uxth	r3, r3
 801014c:	4618      	mov	r0, r3
 801014e:	f7fa fc1b 	bl	800a988 <lwip_htons>
 8010152:	4603      	mov	r3, r0
 8010154:	b2db      	uxtb	r3, r3
 8010156:	f003 0301 	and.w	r3, r3, #1
 801015a:	2b00      	cmp	r3, #0
 801015c:	d010      	beq.n	8010180 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801015e:	e00a      	b.n	8010176 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010164:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801016a:	681a      	ldr	r2, [r3, #0]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010170:	68f8      	ldr	r0, [r7, #12]
 8010172:	f7fd fcac 	bl	800dace <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1f0      	bne.n	8010160 <tcp_receive+0x7ec>
 801017e:	e0c8      	b.n	8010312 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010184:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010186:	e052      	b.n	801022e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	899b      	ldrh	r3, [r3, #12]
 801018e:	b29b      	uxth	r3, r3
 8010190:	4618      	mov	r0, r3
 8010192:	f7fa fbf9 	bl	800a988 <lwip_htons>
 8010196:	4603      	mov	r3, r0
 8010198:	b2db      	uxtb	r3, r3
 801019a:	f003 0301 	and.w	r3, r3, #1
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d03d      	beq.n	801021e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80101a2:	4b17      	ldr	r3, [pc, #92]	; (8010200 <tcp_receive+0x88c>)
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	899b      	ldrh	r3, [r3, #12]
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fa fbec 	bl	800a988 <lwip_htons>
 80101b0:	4603      	mov	r3, r0
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d130      	bne.n	801021e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80101bc:	4b10      	ldr	r3, [pc, #64]	; (8010200 <tcp_receive+0x88c>)
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	899b      	ldrh	r3, [r3, #12]
 80101c2:	b29c      	uxth	r4, r3
 80101c4:	2001      	movs	r0, #1
 80101c6:	f7fa fbdf 	bl	800a988 <lwip_htons>
 80101ca:	4603      	mov	r3, r0
 80101cc:	461a      	mov	r2, r3
 80101ce:	4b0c      	ldr	r3, [pc, #48]	; (8010200 <tcp_receive+0x88c>)
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	4322      	orrs	r2, r4
 80101d4:	b292      	uxth	r2, r2
 80101d6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80101d8:	4b09      	ldr	r3, [pc, #36]	; (8010200 <tcp_receive+0x88c>)
 80101da:	891c      	ldrh	r4, [r3, #8]
 80101dc:	4b08      	ldr	r3, [pc, #32]	; (8010200 <tcp_receive+0x88c>)
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	899b      	ldrh	r3, [r3, #12]
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7fa fbcf 	bl	800a988 <lwip_htons>
 80101ea:	4603      	mov	r3, r0
 80101ec:	b2db      	uxtb	r3, r3
 80101ee:	f003 0303 	and.w	r3, r3, #3
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d00e      	beq.n	8010214 <tcp_receive+0x8a0>
 80101f6:	2301      	movs	r3, #1
 80101f8:	e00d      	b.n	8010216 <tcp_receive+0x8a2>
 80101fa:	bf00      	nop
 80101fc:	20008bd8 	.word	0x20008bd8
 8010200:	20008bb8 	.word	0x20008bb8
 8010204:	20008be2 	.word	0x20008be2
 8010208:	08017a80 	.word	0x08017a80
 801020c:	08017e28 	.word	0x08017e28
 8010210:	08017acc 	.word	0x08017acc
 8010214:	2300      	movs	r3, #0
 8010216:	4423      	add	r3, r4
 8010218:	b29a      	uxth	r2, r3
 801021a:	4b98      	ldr	r3, [pc, #608]	; (801047c <tcp_receive+0xb08>)
 801021c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801021e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010220:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010228:	6938      	ldr	r0, [r7, #16]
 801022a:	f7fd fc50 	bl	800dace <tcp_seg_free>
            while (next &&
 801022e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010230:	2b00      	cmp	r3, #0
 8010232:	d00e      	beq.n	8010252 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010234:	4b91      	ldr	r3, [pc, #580]	; (801047c <tcp_receive+0xb08>)
 8010236:	881b      	ldrh	r3, [r3, #0]
 8010238:	461a      	mov	r2, r3
 801023a:	4b91      	ldr	r3, [pc, #580]	; (8010480 <tcp_receive+0xb0c>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	441a      	add	r2, r3
 8010240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010248:	8909      	ldrh	r1, [r1, #8]
 801024a:	440b      	add	r3, r1
 801024c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801024e:	2b00      	cmp	r3, #0
 8010250:	da9a      	bge.n	8010188 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010254:	2b00      	cmp	r3, #0
 8010256:	d059      	beq.n	801030c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010258:	4b88      	ldr	r3, [pc, #544]	; (801047c <tcp_receive+0xb08>)
 801025a:	881b      	ldrh	r3, [r3, #0]
 801025c:	461a      	mov	r2, r3
 801025e:	4b88      	ldr	r3, [pc, #544]	; (8010480 <tcp_receive+0xb0c>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	441a      	add	r2, r3
 8010264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801026c:	2b00      	cmp	r3, #0
 801026e:	dd4d      	ble.n	801030c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010272:	68db      	ldr	r3, [r3, #12]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	b29a      	uxth	r2, r3
 8010278:	4b81      	ldr	r3, [pc, #516]	; (8010480 <tcp_receive+0xb0c>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	b29b      	uxth	r3, r3
 801027e:	1ad3      	subs	r3, r2, r3
 8010280:	b29a      	uxth	r2, r3
 8010282:	4b80      	ldr	r3, [pc, #512]	; (8010484 <tcp_receive+0xb10>)
 8010284:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010286:	4b7f      	ldr	r3, [pc, #508]	; (8010484 <tcp_receive+0xb10>)
 8010288:	68db      	ldr	r3, [r3, #12]
 801028a:	899b      	ldrh	r3, [r3, #12]
 801028c:	b29b      	uxth	r3, r3
 801028e:	4618      	mov	r0, r3
 8010290:	f7fa fb7a 	bl	800a988 <lwip_htons>
 8010294:	4603      	mov	r3, r0
 8010296:	b2db      	uxtb	r3, r3
 8010298:	f003 0302 	and.w	r3, r3, #2
 801029c:	2b00      	cmp	r3, #0
 801029e:	d005      	beq.n	80102ac <tcp_receive+0x938>
                inseg.len -= 1;
 80102a0:	4b78      	ldr	r3, [pc, #480]	; (8010484 <tcp_receive+0xb10>)
 80102a2:	891b      	ldrh	r3, [r3, #8]
 80102a4:	3b01      	subs	r3, #1
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	4b76      	ldr	r3, [pc, #472]	; (8010484 <tcp_receive+0xb10>)
 80102aa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80102ac:	4b75      	ldr	r3, [pc, #468]	; (8010484 <tcp_receive+0xb10>)
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	4a74      	ldr	r2, [pc, #464]	; (8010484 <tcp_receive+0xb10>)
 80102b2:	8912      	ldrh	r2, [r2, #8]
 80102b4:	4611      	mov	r1, r2
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7fb fd3e 	bl	800bd38 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80102bc:	4b71      	ldr	r3, [pc, #452]	; (8010484 <tcp_receive+0xb10>)
 80102be:	891c      	ldrh	r4, [r3, #8]
 80102c0:	4b70      	ldr	r3, [pc, #448]	; (8010484 <tcp_receive+0xb10>)
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	899b      	ldrh	r3, [r3, #12]
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fa fb5d 	bl	800a988 <lwip_htons>
 80102ce:	4603      	mov	r3, r0
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	f003 0303 	and.w	r3, r3, #3
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d001      	beq.n	80102de <tcp_receive+0x96a>
 80102da:	2301      	movs	r3, #1
 80102dc:	e000      	b.n	80102e0 <tcp_receive+0x96c>
 80102de:	2300      	movs	r3, #0
 80102e0:	4423      	add	r3, r4
 80102e2:	b29a      	uxth	r2, r3
 80102e4:	4b65      	ldr	r3, [pc, #404]	; (801047c <tcp_receive+0xb08>)
 80102e6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80102e8:	4b64      	ldr	r3, [pc, #400]	; (801047c <tcp_receive+0xb08>)
 80102ea:	881b      	ldrh	r3, [r3, #0]
 80102ec:	461a      	mov	r2, r3
 80102ee:	4b64      	ldr	r3, [pc, #400]	; (8010480 <tcp_receive+0xb0c>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	441a      	add	r2, r3
 80102f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	429a      	cmp	r2, r3
 80102fc:	d006      	beq.n	801030c <tcp_receive+0x998>
 80102fe:	4b62      	ldr	r3, [pc, #392]	; (8010488 <tcp_receive+0xb14>)
 8010300:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010304:	4961      	ldr	r1, [pc, #388]	; (801048c <tcp_receive+0xb18>)
 8010306:	4862      	ldr	r0, [pc, #392]	; (8010490 <tcp_receive+0xb1c>)
 8010308:	f005 f8aa 	bl	8015460 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010310:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010312:	4b5a      	ldr	r3, [pc, #360]	; (801047c <tcp_receive+0xb08>)
 8010314:	881b      	ldrh	r3, [r3, #0]
 8010316:	461a      	mov	r2, r3
 8010318:	4b59      	ldr	r3, [pc, #356]	; (8010480 <tcp_receive+0xb0c>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	441a      	add	r2, r3
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010326:	4b55      	ldr	r3, [pc, #340]	; (801047c <tcp_receive+0xb08>)
 8010328:	881b      	ldrh	r3, [r3, #0]
 801032a:	429a      	cmp	r2, r3
 801032c:	d206      	bcs.n	801033c <tcp_receive+0x9c8>
 801032e:	4b56      	ldr	r3, [pc, #344]	; (8010488 <tcp_receive+0xb14>)
 8010330:	f240 6207 	movw	r2, #1543	; 0x607
 8010334:	4957      	ldr	r1, [pc, #348]	; (8010494 <tcp_receive+0xb20>)
 8010336:	4856      	ldr	r0, [pc, #344]	; (8010490 <tcp_receive+0xb1c>)
 8010338:	f005 f892 	bl	8015460 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010340:	4b4e      	ldr	r3, [pc, #312]	; (801047c <tcp_receive+0xb08>)
 8010342:	881b      	ldrh	r3, [r3, #0]
 8010344:	1ad3      	subs	r3, r2, r3
 8010346:	b29a      	uxth	r2, r3
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f7fc fd81 	bl	800ce54 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010352:	4b4c      	ldr	r3, [pc, #304]	; (8010484 <tcp_receive+0xb10>)
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	891b      	ldrh	r3, [r3, #8]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d006      	beq.n	801036a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801035c:	4b49      	ldr	r3, [pc, #292]	; (8010484 <tcp_receive+0xb10>)
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	4a4d      	ldr	r2, [pc, #308]	; (8010498 <tcp_receive+0xb24>)
 8010362:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010364:	4b47      	ldr	r3, [pc, #284]	; (8010484 <tcp_receive+0xb10>)
 8010366:	2200      	movs	r2, #0
 8010368:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801036a:	4b46      	ldr	r3, [pc, #280]	; (8010484 <tcp_receive+0xb10>)
 801036c:	68db      	ldr	r3, [r3, #12]
 801036e:	899b      	ldrh	r3, [r3, #12]
 8010370:	b29b      	uxth	r3, r3
 8010372:	4618      	mov	r0, r3
 8010374:	f7fa fb08 	bl	800a988 <lwip_htons>
 8010378:	4603      	mov	r3, r0
 801037a:	b2db      	uxtb	r3, r3
 801037c:	f003 0301 	and.w	r3, r3, #1
 8010380:	2b00      	cmp	r3, #0
 8010382:	f000 80b8 	beq.w	80104f6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010386:	4b45      	ldr	r3, [pc, #276]	; (801049c <tcp_receive+0xb28>)
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	f043 0320 	orr.w	r3, r3, #32
 801038e:	b2da      	uxtb	r2, r3
 8010390:	4b42      	ldr	r3, [pc, #264]	; (801049c <tcp_receive+0xb28>)
 8010392:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010394:	e0af      	b.n	80104f6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801039a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103a0:	68db      	ldr	r3, [r3, #12]
 80103a2:	685b      	ldr	r3, [r3, #4]
 80103a4:	4a36      	ldr	r2, [pc, #216]	; (8010480 <tcp_receive+0xb0c>)
 80103a6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	891b      	ldrh	r3, [r3, #8]
 80103ac:	461c      	mov	r4, r3
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	68db      	ldr	r3, [r3, #12]
 80103b2:	899b      	ldrh	r3, [r3, #12]
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7fa fae6 	bl	800a988 <lwip_htons>
 80103bc:	4603      	mov	r3, r0
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	f003 0303 	and.w	r3, r3, #3
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d001      	beq.n	80103cc <tcp_receive+0xa58>
 80103c8:	2301      	movs	r3, #1
 80103ca:	e000      	b.n	80103ce <tcp_receive+0xa5a>
 80103cc:	2300      	movs	r3, #0
 80103ce:	191a      	adds	r2, r3, r4
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103d4:	441a      	add	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103de:	461c      	mov	r4, r3
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	891b      	ldrh	r3, [r3, #8]
 80103e4:	461d      	mov	r5, r3
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	68db      	ldr	r3, [r3, #12]
 80103ea:	899b      	ldrh	r3, [r3, #12]
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7fa faca 	bl	800a988 <lwip_htons>
 80103f4:	4603      	mov	r3, r0
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	f003 0303 	and.w	r3, r3, #3
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d001      	beq.n	8010404 <tcp_receive+0xa90>
 8010400:	2301      	movs	r3, #1
 8010402:	e000      	b.n	8010406 <tcp_receive+0xa92>
 8010404:	2300      	movs	r3, #0
 8010406:	442b      	add	r3, r5
 8010408:	429c      	cmp	r4, r3
 801040a:	d206      	bcs.n	801041a <tcp_receive+0xaa6>
 801040c:	4b1e      	ldr	r3, [pc, #120]	; (8010488 <tcp_receive+0xb14>)
 801040e:	f240 622b 	movw	r2, #1579	; 0x62b
 8010412:	4923      	ldr	r1, [pc, #140]	; (80104a0 <tcp_receive+0xb2c>)
 8010414:	481e      	ldr	r0, [pc, #120]	; (8010490 <tcp_receive+0xb1c>)
 8010416:	f005 f823 	bl	8015460 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	891b      	ldrh	r3, [r3, #8]
 801041e:	461c      	mov	r4, r3
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	899b      	ldrh	r3, [r3, #12]
 8010426:	b29b      	uxth	r3, r3
 8010428:	4618      	mov	r0, r3
 801042a:	f7fa faad 	bl	800a988 <lwip_htons>
 801042e:	4603      	mov	r3, r0
 8010430:	b2db      	uxtb	r3, r3
 8010432:	f003 0303 	and.w	r3, r3, #3
 8010436:	2b00      	cmp	r3, #0
 8010438:	d001      	beq.n	801043e <tcp_receive+0xaca>
 801043a:	2301      	movs	r3, #1
 801043c:	e000      	b.n	8010440 <tcp_receive+0xacc>
 801043e:	2300      	movs	r3, #0
 8010440:	1919      	adds	r1, r3, r4
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010446:	b28b      	uxth	r3, r1
 8010448:	1ad3      	subs	r3, r2, r3
 801044a:	b29a      	uxth	r2, r3
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7fc fcff 	bl	800ce54 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	891b      	ldrh	r3, [r3, #8]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d028      	beq.n	80104b2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010460:	4b0d      	ldr	r3, [pc, #52]	; (8010498 <tcp_receive+0xb24>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d01d      	beq.n	80104a4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010468:	4b0b      	ldr	r3, [pc, #44]	; (8010498 <tcp_receive+0xb24>)
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	4619      	mov	r1, r3
 8010472:	4610      	mov	r0, r2
 8010474:	f7fb fea8 	bl	800c1c8 <pbuf_cat>
 8010478:	e018      	b.n	80104ac <tcp_receive+0xb38>
 801047a:	bf00      	nop
 801047c:	20008be2 	.word	0x20008be2
 8010480:	20008bd8 	.word	0x20008bd8
 8010484:	20008bb8 	.word	0x20008bb8
 8010488:	08017a80 	.word	0x08017a80
 801048c:	08017e60 	.word	0x08017e60
 8010490:	08017acc 	.word	0x08017acc
 8010494:	08017e9c 	.word	0x08017e9c
 8010498:	20008be8 	.word	0x20008be8
 801049c:	20008be5 	.word	0x20008be5
 80104a0:	08017ebc 	.word	0x08017ebc
            } else {
              recv_data = cseg->p;
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	4a70      	ldr	r2, [pc, #448]	; (801066c <tcp_receive+0xcf8>)
 80104aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	2200      	movs	r2, #0
 80104b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	899b      	ldrh	r3, [r3, #12]
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7fa fa64 	bl	800a988 <lwip_htons>
 80104c0:	4603      	mov	r3, r0
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	f003 0301 	and.w	r3, r3, #1
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d00d      	beq.n	80104e8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80104cc:	4b68      	ldr	r3, [pc, #416]	; (8010670 <tcp_receive+0xcfc>)
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	f043 0320 	orr.w	r3, r3, #32
 80104d4:	b2da      	uxtb	r2, r3
 80104d6:	4b66      	ldr	r3, [pc, #408]	; (8010670 <tcp_receive+0xcfc>)
 80104d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	7d1b      	ldrb	r3, [r3, #20]
 80104de:	2b04      	cmp	r3, #4
 80104e0:	d102      	bne.n	80104e8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2207      	movs	r2, #7
 80104e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80104f0:	68b8      	ldr	r0, [r7, #8]
 80104f2:	f7fd faec 	bl	800dace <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d008      	beq.n	8010510 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	685a      	ldr	r2, [r3, #4]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801050a:	429a      	cmp	r2, r3
 801050c:	f43f af43 	beq.w	8010396 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	8b5b      	ldrh	r3, [r3, #26]
 8010514:	f003 0301 	and.w	r3, r3, #1
 8010518:	2b00      	cmp	r3, #0
 801051a:	d00e      	beq.n	801053a <tcp_receive+0xbc6>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	8b5b      	ldrh	r3, [r3, #26]
 8010520:	f023 0301 	bic.w	r3, r3, #1
 8010524:	b29a      	uxth	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	835a      	strh	r2, [r3, #26]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	8b5b      	ldrh	r3, [r3, #26]
 801052e:	f043 0302 	orr.w	r3, r3, #2
 8010532:	b29a      	uxth	r2, r3
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010538:	e188      	b.n	801084c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	8b5b      	ldrh	r3, [r3, #26]
 801053e:	f043 0301 	orr.w	r3, r3, #1
 8010542:	b29a      	uxth	r2, r3
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010548:	e180      	b.n	801084c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801054e:	2b00      	cmp	r3, #0
 8010550:	d106      	bne.n	8010560 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010552:	4848      	ldr	r0, [pc, #288]	; (8010674 <tcp_receive+0xd00>)
 8010554:	f7fd faf2 	bl	800db3c <tcp_seg_copy>
 8010558:	4602      	mov	r2, r0
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	675a      	str	r2, [r3, #116]	; 0x74
 801055e:	e16d      	b.n	801083c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010560:	2300      	movs	r3, #0
 8010562:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010568:	63bb      	str	r3, [r7, #56]	; 0x38
 801056a:	e157      	b.n	801081c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801056c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056e:	68db      	ldr	r3, [r3, #12]
 8010570:	685a      	ldr	r2, [r3, #4]
 8010572:	4b41      	ldr	r3, [pc, #260]	; (8010678 <tcp_receive+0xd04>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	429a      	cmp	r2, r3
 8010578:	d11d      	bne.n	80105b6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801057a:	4b3e      	ldr	r3, [pc, #248]	; (8010674 <tcp_receive+0xd00>)
 801057c:	891a      	ldrh	r2, [r3, #8]
 801057e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010580:	891b      	ldrh	r3, [r3, #8]
 8010582:	429a      	cmp	r2, r3
 8010584:	f240 814f 	bls.w	8010826 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010588:	483a      	ldr	r0, [pc, #232]	; (8010674 <tcp_receive+0xd00>)
 801058a:	f7fd fad7 	bl	800db3c <tcp_seg_copy>
 801058e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	2b00      	cmp	r3, #0
 8010594:	f000 8149 	beq.w	801082a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801059a:	2b00      	cmp	r3, #0
 801059c:	d003      	beq.n	80105a6 <tcp_receive+0xc32>
                    prev->next = cseg;
 801059e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105a0:	697a      	ldr	r2, [r7, #20]
 80105a2:	601a      	str	r2, [r3, #0]
 80105a4:	e002      	b.n	80105ac <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	697a      	ldr	r2, [r7, #20]
 80105aa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80105ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105ae:	6978      	ldr	r0, [r7, #20]
 80105b0:	f7ff f8dc 	bl	800f76c <tcp_oos_insert_segment>
                }
                break;
 80105b4:	e139      	b.n	801082a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80105b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d117      	bne.n	80105ec <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80105bc:	4b2e      	ldr	r3, [pc, #184]	; (8010678 <tcp_receive+0xd04>)
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	1ad3      	subs	r3, r2, r3
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	da57      	bge.n	801067c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80105cc:	4829      	ldr	r0, [pc, #164]	; (8010674 <tcp_receive+0xd00>)
 80105ce:	f7fd fab5 	bl	800db3c <tcp_seg_copy>
 80105d2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80105d4:	69bb      	ldr	r3, [r7, #24]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f000 8129 	beq.w	801082e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	69ba      	ldr	r2, [r7, #24]
 80105e0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80105e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105e4:	69b8      	ldr	r0, [r7, #24]
 80105e6:	f7ff f8c1 	bl	800f76c <tcp_oos_insert_segment>
                  }
                  break;
 80105ea:	e120      	b.n	801082e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80105ec:	4b22      	ldr	r3, [pc, #136]	; (8010678 <tcp_receive+0xd04>)
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f2:	68db      	ldr	r3, [r3, #12]
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	1ad3      	subs	r3, r2, r3
 80105f8:	3b01      	subs	r3, #1
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	db3e      	blt.n	801067c <tcp_receive+0xd08>
 80105fe:	4b1e      	ldr	r3, [pc, #120]	; (8010678 <tcp_receive+0xd04>)
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010604:	68db      	ldr	r3, [r3, #12]
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	3301      	adds	r3, #1
 801060c:	2b00      	cmp	r3, #0
 801060e:	dc35      	bgt.n	801067c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010610:	4818      	ldr	r0, [pc, #96]	; (8010674 <tcp_receive+0xd00>)
 8010612:	f7fd fa93 	bl	800db3c <tcp_seg_copy>
 8010616:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	2b00      	cmp	r3, #0
 801061c:	f000 8109 	beq.w	8010832 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010628:	8912      	ldrh	r2, [r2, #8]
 801062a:	441a      	add	r2, r3
 801062c:	4b12      	ldr	r3, [pc, #72]	; (8010678 <tcp_receive+0xd04>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	1ad3      	subs	r3, r2, r3
 8010632:	2b00      	cmp	r3, #0
 8010634:	dd12      	ble.n	801065c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010636:	4b10      	ldr	r3, [pc, #64]	; (8010678 <tcp_receive+0xd04>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	b29a      	uxth	r2, r3
 801063c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	b29b      	uxth	r3, r3
 8010644:	1ad3      	subs	r3, r2, r3
 8010646:	b29a      	uxth	r2, r3
 8010648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801064a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801064c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801064e:	685a      	ldr	r2, [r3, #4]
 8010650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010652:	891b      	ldrh	r3, [r3, #8]
 8010654:	4619      	mov	r1, r3
 8010656:	4610      	mov	r0, r2
 8010658:	f7fb fb6e 	bl	800bd38 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801065c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065e:	69fa      	ldr	r2, [r7, #28]
 8010660:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010662:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010664:	69f8      	ldr	r0, [r7, #28]
 8010666:	f7ff f881 	bl	800f76c <tcp_oos_insert_segment>
                  }
                  break;
 801066a:	e0e2      	b.n	8010832 <tcp_receive+0xebe>
 801066c:	20008be8 	.word	0x20008be8
 8010670:	20008be5 	.word	0x20008be5
 8010674:	20008bb8 	.word	0x20008bb8
 8010678:	20008bd8 	.word	0x20008bd8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801067c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2b00      	cmp	r3, #0
 8010686:	f040 80c6 	bne.w	8010816 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801068a:	4b80      	ldr	r3, [pc, #512]	; (801088c <tcp_receive+0xf18>)
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010690:	68db      	ldr	r3, [r3, #12]
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010696:	2b00      	cmp	r3, #0
 8010698:	f340 80bd 	ble.w	8010816 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	899b      	ldrh	r3, [r3, #12]
 80106a2:	b29b      	uxth	r3, r3
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7fa f96f 	bl	800a988 <lwip_htons>
 80106aa:	4603      	mov	r3, r0
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	f003 0301 	and.w	r3, r3, #1
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	f040 80bf 	bne.w	8010836 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80106b8:	4875      	ldr	r0, [pc, #468]	; (8010890 <tcp_receive+0xf1c>)
 80106ba:	f7fd fa3f 	bl	800db3c <tcp_seg_copy>
 80106be:	4602      	mov	r2, r0
 80106c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80106c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f000 80b6 	beq.w	801083a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80106ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d0:	68db      	ldr	r3, [r3, #12]
 80106d2:	685b      	ldr	r3, [r3, #4]
 80106d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106d6:	8912      	ldrh	r2, [r2, #8]
 80106d8:	441a      	add	r2, r3
 80106da:	4b6c      	ldr	r3, [pc, #432]	; (801088c <tcp_receive+0xf18>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	dd12      	ble.n	801070a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80106e4:	4b69      	ldr	r3, [pc, #420]	; (801088c <tcp_receive+0xf18>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	1ad3      	subs	r3, r2, r3
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80106fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fc:	685a      	ldr	r2, [r3, #4]
 80106fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010700:	891b      	ldrh	r3, [r3, #8]
 8010702:	4619      	mov	r1, r3
 8010704:	4610      	mov	r0, r2
 8010706:	f7fb fb17 	bl	800bd38 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801070a:	4b62      	ldr	r3, [pc, #392]	; (8010894 <tcp_receive+0xf20>)
 801070c:	881b      	ldrh	r3, [r3, #0]
 801070e:	461a      	mov	r2, r3
 8010710:	4b5e      	ldr	r3, [pc, #376]	; (801088c <tcp_receive+0xf18>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	441a      	add	r2, r3
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801071a:	6879      	ldr	r1, [r7, #4]
 801071c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801071e:	440b      	add	r3, r1
 8010720:	1ad3      	subs	r3, r2, r3
 8010722:	2b00      	cmp	r3, #0
 8010724:	f340 8089 	ble.w	801083a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	899b      	ldrh	r3, [r3, #12]
 8010730:	b29b      	uxth	r3, r3
 8010732:	4618      	mov	r0, r3
 8010734:	f7fa f928 	bl	800a988 <lwip_htons>
 8010738:	4603      	mov	r3, r0
 801073a:	b2db      	uxtb	r3, r3
 801073c:	f003 0301 	and.w	r3, r3, #1
 8010740:	2b00      	cmp	r3, #0
 8010742:	d022      	beq.n	801078a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	899b      	ldrh	r3, [r3, #12]
 801074c:	b29b      	uxth	r3, r3
 801074e:	b21b      	sxth	r3, r3
 8010750:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010754:	b21c      	sxth	r4, r3
 8010756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	68db      	ldr	r3, [r3, #12]
 801075c:	899b      	ldrh	r3, [r3, #12]
 801075e:	b29b      	uxth	r3, r3
 8010760:	4618      	mov	r0, r3
 8010762:	f7fa f911 	bl	800a988 <lwip_htons>
 8010766:	4603      	mov	r3, r0
 8010768:	b2db      	uxtb	r3, r3
 801076a:	b29b      	uxth	r3, r3
 801076c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010770:	b29b      	uxth	r3, r3
 8010772:	4618      	mov	r0, r3
 8010774:	f7fa f908 	bl	800a988 <lwip_htons>
 8010778:	4603      	mov	r3, r0
 801077a:	b21b      	sxth	r3, r3
 801077c:	4323      	orrs	r3, r4
 801077e:	b21a      	sxth	r2, r3
 8010780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	68db      	ldr	r3, [r3, #12]
 8010786:	b292      	uxth	r2, r2
 8010788:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801078e:	b29a      	uxth	r2, r3
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010794:	4413      	add	r3, r2
 8010796:	b299      	uxth	r1, r3
 8010798:	4b3c      	ldr	r3, [pc, #240]	; (801088c <tcp_receive+0xf18>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	b29a      	uxth	r2, r3
 801079e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	1a8a      	subs	r2, r1, r2
 80107a4:	b292      	uxth	r2, r2
 80107a6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80107a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	685a      	ldr	r2, [r3, #4]
 80107ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	891b      	ldrh	r3, [r3, #8]
 80107b4:	4619      	mov	r1, r3
 80107b6:	4610      	mov	r0, r2
 80107b8:	f7fb fabe 	bl	800bd38 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80107bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	891c      	ldrh	r4, [r3, #8]
 80107c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	899b      	ldrh	r3, [r3, #12]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7fa f8db 	bl	800a988 <lwip_htons>
 80107d2:	4603      	mov	r3, r0
 80107d4:	b2db      	uxtb	r3, r3
 80107d6:	f003 0303 	and.w	r3, r3, #3
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <tcp_receive+0xe6e>
 80107de:	2301      	movs	r3, #1
 80107e0:	e000      	b.n	80107e4 <tcp_receive+0xe70>
 80107e2:	2300      	movs	r3, #0
 80107e4:	4423      	add	r3, r4
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	4b2a      	ldr	r3, [pc, #168]	; (8010894 <tcp_receive+0xf20>)
 80107ea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80107ec:	4b29      	ldr	r3, [pc, #164]	; (8010894 <tcp_receive+0xf20>)
 80107ee:	881b      	ldrh	r3, [r3, #0]
 80107f0:	461a      	mov	r2, r3
 80107f2:	4b26      	ldr	r3, [pc, #152]	; (801088c <tcp_receive+0xf18>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	441a      	add	r2, r3
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107fc:	6879      	ldr	r1, [r7, #4]
 80107fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010800:	440b      	add	r3, r1
 8010802:	429a      	cmp	r2, r3
 8010804:	d019      	beq.n	801083a <tcp_receive+0xec6>
 8010806:	4b24      	ldr	r3, [pc, #144]	; (8010898 <tcp_receive+0xf24>)
 8010808:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801080c:	4923      	ldr	r1, [pc, #140]	; (801089c <tcp_receive+0xf28>)
 801080e:	4824      	ldr	r0, [pc, #144]	; (80108a0 <tcp_receive+0xf2c>)
 8010810:	f004 fe26 	bl	8015460 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010814:	e011      	b.n	801083a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	63bb      	str	r3, [r7, #56]	; 0x38
 801081c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081e:	2b00      	cmp	r3, #0
 8010820:	f47f aea4 	bne.w	801056c <tcp_receive+0xbf8>
 8010824:	e00a      	b.n	801083c <tcp_receive+0xec8>
                break;
 8010826:	bf00      	nop
 8010828:	e008      	b.n	801083c <tcp_receive+0xec8>
                break;
 801082a:	bf00      	nop
 801082c:	e006      	b.n	801083c <tcp_receive+0xec8>
                  break;
 801082e:	bf00      	nop
 8010830:	e004      	b.n	801083c <tcp_receive+0xec8>
                  break;
 8010832:	bf00      	nop
 8010834:	e002      	b.n	801083c <tcp_receive+0xec8>
                  break;
 8010836:	bf00      	nop
 8010838:	e000      	b.n	801083c <tcp_receive+0xec8>
                break;
 801083a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f001 fe8b 	bl	8012558 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010842:	e003      	b.n	801084c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f001 fe87 	bl	8012558 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801084a:	e01a      	b.n	8010882 <tcp_receive+0xf0e>
 801084c:	e019      	b.n	8010882 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801084e:	4b0f      	ldr	r3, [pc, #60]	; (801088c <tcp_receive+0xf18>)
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010856:	1ad3      	subs	r3, r2, r3
 8010858:	2b00      	cmp	r3, #0
 801085a:	db0a      	blt.n	8010872 <tcp_receive+0xefe>
 801085c:	4b0b      	ldr	r3, [pc, #44]	; (801088c <tcp_receive+0xf18>)
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010864:	6879      	ldr	r1, [r7, #4]
 8010866:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010868:	440b      	add	r3, r1
 801086a:	1ad3      	subs	r3, r2, r3
 801086c:	3301      	adds	r3, #1
 801086e:	2b00      	cmp	r3, #0
 8010870:	dd07      	ble.n	8010882 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	8b5b      	ldrh	r3, [r3, #26]
 8010876:	f043 0302 	orr.w	r3, r3, #2
 801087a:	b29a      	uxth	r2, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010880:	e7ff      	b.n	8010882 <tcp_receive+0xf0e>
 8010882:	bf00      	nop
 8010884:	3750      	adds	r7, #80	; 0x50
 8010886:	46bd      	mov	sp, r7
 8010888:	bdb0      	pop	{r4, r5, r7, pc}
 801088a:	bf00      	nop
 801088c:	20008bd8 	.word	0x20008bd8
 8010890:	20008bb8 	.word	0x20008bb8
 8010894:	20008be2 	.word	0x20008be2
 8010898:	08017a80 	.word	0x08017a80
 801089c:	08017e28 	.word	0x08017e28
 80108a0:	08017acc 	.word	0x08017acc

080108a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b083      	sub	sp, #12
 80108a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80108aa:	4b15      	ldr	r3, [pc, #84]	; (8010900 <tcp_get_next_optbyte+0x5c>)
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	1c5a      	adds	r2, r3, #1
 80108b0:	b291      	uxth	r1, r2
 80108b2:	4a13      	ldr	r2, [pc, #76]	; (8010900 <tcp_get_next_optbyte+0x5c>)
 80108b4:	8011      	strh	r1, [r2, #0]
 80108b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80108b8:	4b12      	ldr	r3, [pc, #72]	; (8010904 <tcp_get_next_optbyte+0x60>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d004      	beq.n	80108ca <tcp_get_next_optbyte+0x26>
 80108c0:	4b11      	ldr	r3, [pc, #68]	; (8010908 <tcp_get_next_optbyte+0x64>)
 80108c2:	881b      	ldrh	r3, [r3, #0]
 80108c4:	88fa      	ldrh	r2, [r7, #6]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d208      	bcs.n	80108dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80108ca:	4b10      	ldr	r3, [pc, #64]	; (801090c <tcp_get_next_optbyte+0x68>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	3314      	adds	r3, #20
 80108d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80108d2:	88fb      	ldrh	r3, [r7, #6]
 80108d4:	683a      	ldr	r2, [r7, #0]
 80108d6:	4413      	add	r3, r2
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	e00b      	b.n	80108f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80108dc:	88fb      	ldrh	r3, [r7, #6]
 80108de:	b2da      	uxtb	r2, r3
 80108e0:	4b09      	ldr	r3, [pc, #36]	; (8010908 <tcp_get_next_optbyte+0x64>)
 80108e2:	881b      	ldrh	r3, [r3, #0]
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	1ad3      	subs	r3, r2, r3
 80108e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80108ea:	4b06      	ldr	r3, [pc, #24]	; (8010904 <tcp_get_next_optbyte+0x60>)
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	797b      	ldrb	r3, [r7, #5]
 80108f0:	4413      	add	r3, r2
 80108f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	370c      	adds	r7, #12
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr
 8010900:	20008bd4 	.word	0x20008bd4
 8010904:	20008bd0 	.word	0x20008bd0
 8010908:	20008bce 	.word	0x20008bce
 801090c:	20008bc8 	.word	0x20008bc8

08010910 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b084      	sub	sp, #16
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d106      	bne.n	801092c <tcp_parseopt+0x1c>
 801091e:	4b32      	ldr	r3, [pc, #200]	; (80109e8 <tcp_parseopt+0xd8>)
 8010920:	f240 727d 	movw	r2, #1917	; 0x77d
 8010924:	4931      	ldr	r1, [pc, #196]	; (80109ec <tcp_parseopt+0xdc>)
 8010926:	4832      	ldr	r0, [pc, #200]	; (80109f0 <tcp_parseopt+0xe0>)
 8010928:	f004 fd9a 	bl	8015460 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801092c:	4b31      	ldr	r3, [pc, #196]	; (80109f4 <tcp_parseopt+0xe4>)
 801092e:	881b      	ldrh	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d055      	beq.n	80109e0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010934:	4b30      	ldr	r3, [pc, #192]	; (80109f8 <tcp_parseopt+0xe8>)
 8010936:	2200      	movs	r2, #0
 8010938:	801a      	strh	r2, [r3, #0]
 801093a:	e045      	b.n	80109c8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801093c:	f7ff ffb2 	bl	80108a4 <tcp_get_next_optbyte>
 8010940:	4603      	mov	r3, r0
 8010942:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010944:	7bfb      	ldrb	r3, [r7, #15]
 8010946:	2b02      	cmp	r3, #2
 8010948:	d006      	beq.n	8010958 <tcp_parseopt+0x48>
 801094a:	2b02      	cmp	r3, #2
 801094c:	dc2b      	bgt.n	80109a6 <tcp_parseopt+0x96>
 801094e:	2b00      	cmp	r3, #0
 8010950:	d041      	beq.n	80109d6 <tcp_parseopt+0xc6>
 8010952:	2b01      	cmp	r3, #1
 8010954:	d127      	bne.n	80109a6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010956:	e037      	b.n	80109c8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010958:	f7ff ffa4 	bl	80108a4 <tcp_get_next_optbyte>
 801095c:	4603      	mov	r3, r0
 801095e:	2b04      	cmp	r3, #4
 8010960:	d13b      	bne.n	80109da <tcp_parseopt+0xca>
 8010962:	4b25      	ldr	r3, [pc, #148]	; (80109f8 <tcp_parseopt+0xe8>)
 8010964:	881b      	ldrh	r3, [r3, #0]
 8010966:	3301      	adds	r3, #1
 8010968:	4a22      	ldr	r2, [pc, #136]	; (80109f4 <tcp_parseopt+0xe4>)
 801096a:	8812      	ldrh	r2, [r2, #0]
 801096c:	4293      	cmp	r3, r2
 801096e:	da34      	bge.n	80109da <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010970:	f7ff ff98 	bl	80108a4 <tcp_get_next_optbyte>
 8010974:	4603      	mov	r3, r0
 8010976:	b29b      	uxth	r3, r3
 8010978:	021b      	lsls	r3, r3, #8
 801097a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801097c:	f7ff ff92 	bl	80108a4 <tcp_get_next_optbyte>
 8010980:	4603      	mov	r3, r0
 8010982:	b29a      	uxth	r2, r3
 8010984:	89bb      	ldrh	r3, [r7, #12]
 8010986:	4313      	orrs	r3, r2
 8010988:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801098a:	89bb      	ldrh	r3, [r7, #12]
 801098c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010990:	d804      	bhi.n	801099c <tcp_parseopt+0x8c>
 8010992:	89bb      	ldrh	r3, [r7, #12]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d001      	beq.n	801099c <tcp_parseopt+0x8c>
 8010998:	89ba      	ldrh	r2, [r7, #12]
 801099a:	e001      	b.n	80109a0 <tcp_parseopt+0x90>
 801099c:	f44f 7206 	mov.w	r2, #536	; 0x218
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80109a4:	e010      	b.n	80109c8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80109a6:	f7ff ff7d 	bl	80108a4 <tcp_get_next_optbyte>
 80109aa:	4603      	mov	r3, r0
 80109ac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80109ae:	7afb      	ldrb	r3, [r7, #11]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d914      	bls.n	80109de <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80109b4:	7afb      	ldrb	r3, [r7, #11]
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	4b0f      	ldr	r3, [pc, #60]	; (80109f8 <tcp_parseopt+0xe8>)
 80109ba:	881b      	ldrh	r3, [r3, #0]
 80109bc:	4413      	add	r3, r2
 80109be:	b29b      	uxth	r3, r3
 80109c0:	3b02      	subs	r3, #2
 80109c2:	b29a      	uxth	r2, r3
 80109c4:	4b0c      	ldr	r3, [pc, #48]	; (80109f8 <tcp_parseopt+0xe8>)
 80109c6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80109c8:	4b0b      	ldr	r3, [pc, #44]	; (80109f8 <tcp_parseopt+0xe8>)
 80109ca:	881a      	ldrh	r2, [r3, #0]
 80109cc:	4b09      	ldr	r3, [pc, #36]	; (80109f4 <tcp_parseopt+0xe4>)
 80109ce:	881b      	ldrh	r3, [r3, #0]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d3b3      	bcc.n	801093c <tcp_parseopt+0x2c>
 80109d4:	e004      	b.n	80109e0 <tcp_parseopt+0xd0>
          return;
 80109d6:	bf00      	nop
 80109d8:	e002      	b.n	80109e0 <tcp_parseopt+0xd0>
            return;
 80109da:	bf00      	nop
 80109dc:	e000      	b.n	80109e0 <tcp_parseopt+0xd0>
            return;
 80109de:	bf00      	nop
      }
    }
  }
}
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	08017a80 	.word	0x08017a80
 80109ec:	08017ee4 	.word	0x08017ee4
 80109f0:	08017acc 	.word	0x08017acc
 80109f4:	20008bcc 	.word	0x20008bcc
 80109f8:	20008bd4 	.word	0x20008bd4

080109fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80109fc:	b480      	push	{r7}
 80109fe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010a00:	4b05      	ldr	r3, [pc, #20]	; (8010a18 <tcp_trigger_input_pcb_close+0x1c>)
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	f043 0310 	orr.w	r3, r3, #16
 8010a08:	b2da      	uxtb	r2, r3
 8010a0a:	4b03      	ldr	r3, [pc, #12]	; (8010a18 <tcp_trigger_input_pcb_close+0x1c>)
 8010a0c:	701a      	strb	r2, [r3, #0]
}
 8010a0e:	bf00      	nop
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr
 8010a18:	20008be5 	.word	0x20008be5

08010a1c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00a      	beq.n	8010a44 <tcp_route+0x28>
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	7a1b      	ldrb	r3, [r3, #8]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d006      	beq.n	8010a44 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	7a1b      	ldrb	r3, [r3, #8]
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7fa ffa2 	bl	800b984 <netif_get_by_index>
 8010a40:	4603      	mov	r3, r0
 8010a42:	e003      	b.n	8010a4c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f003 fad5 	bl	8013ff4 <ip4_route>
 8010a4a:	4603      	mov	r3, r0
  }
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	3710      	adds	r7, #16
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010a54:	b590      	push	{r4, r7, lr}
 8010a56:	b087      	sub	sp, #28
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	60f8      	str	r0, [r7, #12]
 8010a5c:	60b9      	str	r1, [r7, #8]
 8010a5e:	603b      	str	r3, [r7, #0]
 8010a60:	4613      	mov	r3, r2
 8010a62:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d105      	bne.n	8010a76 <tcp_create_segment+0x22>
 8010a6a:	4b44      	ldr	r3, [pc, #272]	; (8010b7c <tcp_create_segment+0x128>)
 8010a6c:	22a3      	movs	r2, #163	; 0xa3
 8010a6e:	4944      	ldr	r1, [pc, #272]	; (8010b80 <tcp_create_segment+0x12c>)
 8010a70:	4844      	ldr	r0, [pc, #272]	; (8010b84 <tcp_create_segment+0x130>)
 8010a72:	f004 fcf5 	bl	8015460 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d105      	bne.n	8010a88 <tcp_create_segment+0x34>
 8010a7c:	4b3f      	ldr	r3, [pc, #252]	; (8010b7c <tcp_create_segment+0x128>)
 8010a7e:	22a4      	movs	r2, #164	; 0xa4
 8010a80:	4941      	ldr	r1, [pc, #260]	; (8010b88 <tcp_create_segment+0x134>)
 8010a82:	4840      	ldr	r0, [pc, #256]	; (8010b84 <tcp_create_segment+0x130>)
 8010a84:	f004 fcec 	bl	8015460 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a8c:	009b      	lsls	r3, r3, #2
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	f003 0304 	and.w	r3, r3, #4
 8010a94:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010a96:	2003      	movs	r0, #3
 8010a98:	f7fa fbee 	bl	800b278 <memp_malloc>
 8010a9c:	6138      	str	r0, [r7, #16]
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d104      	bne.n	8010aae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010aa4:	68b8      	ldr	r0, [r7, #8]
 8010aa6:	f7fb facd 	bl	800c044 <pbuf_free>
    return NULL;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	e061      	b.n	8010b72 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010ab4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	68ba      	ldr	r2, [r7, #8]
 8010ac0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	891a      	ldrh	r2, [r3, #8]
 8010ac6:	7dfb      	ldrb	r3, [r7, #23]
 8010ac8:	b29b      	uxth	r3, r3
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d205      	bcs.n	8010ada <tcp_create_segment+0x86>
 8010ace:	4b2b      	ldr	r3, [pc, #172]	; (8010b7c <tcp_create_segment+0x128>)
 8010ad0:	22b0      	movs	r2, #176	; 0xb0
 8010ad2:	492e      	ldr	r1, [pc, #184]	; (8010b8c <tcp_create_segment+0x138>)
 8010ad4:	482b      	ldr	r0, [pc, #172]	; (8010b84 <tcp_create_segment+0x130>)
 8010ad6:	f004 fcc3 	bl	8015460 <iprintf>
  seg->len = p->tot_len - optlen;
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	891a      	ldrh	r2, [r3, #8]
 8010ade:	7dfb      	ldrb	r3, [r7, #23]
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	1ad3      	subs	r3, r2, r3
 8010ae4:	b29a      	uxth	r2, r3
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010aea:	2114      	movs	r1, #20
 8010aec:	68b8      	ldr	r0, [r7, #8]
 8010aee:	f7fb fa13 	bl	800bf18 <pbuf_add_header>
 8010af2:	4603      	mov	r3, r0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d004      	beq.n	8010b02 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010af8:	6938      	ldr	r0, [r7, #16]
 8010afa:	f7fc ffe8 	bl	800dace <tcp_seg_free>
    return NULL;
 8010afe:	2300      	movs	r3, #0
 8010b00:	e037      	b.n	8010b72 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	685a      	ldr	r2, [r3, #4]
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	8ada      	ldrh	r2, [r3, #22]
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	68dc      	ldr	r4, [r3, #12]
 8010b14:	4610      	mov	r0, r2
 8010b16:	f7f9 ff37 	bl	800a988 <lwip_htons>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	8b1a      	ldrh	r2, [r3, #24]
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	68dc      	ldr	r4, [r3, #12]
 8010b26:	4610      	mov	r0, r2
 8010b28:	f7f9 ff2e 	bl	800a988 <lwip_htons>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	68dc      	ldr	r4, [r3, #12]
 8010b34:	6838      	ldr	r0, [r7, #0]
 8010b36:	f7f9 ff3c 	bl	800a9b2 <lwip_htonl>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010b3e:	7dfb      	ldrb	r3, [r7, #23]
 8010b40:	089b      	lsrs	r3, r3, #2
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	3305      	adds	r3, #5
 8010b48:	b29b      	uxth	r3, r3
 8010b4a:	031b      	lsls	r3, r3, #12
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	79fb      	ldrb	r3, [r7, #7]
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	4313      	orrs	r3, r2
 8010b54:	b29a      	uxth	r2, r3
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	68dc      	ldr	r4, [r3, #12]
 8010b5a:	4610      	mov	r0, r2
 8010b5c:	f7f9 ff14 	bl	800a988 <lwip_htons>
 8010b60:	4603      	mov	r3, r0
 8010b62:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010b64:	693b      	ldr	r3, [r7, #16]
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	749a      	strb	r2, [r3, #18]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010b70:	693b      	ldr	r3, [r7, #16]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	371c      	adds	r7, #28
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd90      	pop	{r4, r7, pc}
 8010b7a:	bf00      	nop
 8010b7c:	08017f00 	.word	0x08017f00
 8010b80:	08017f34 	.word	0x08017f34
 8010b84:	08017f54 	.word	0x08017f54
 8010b88:	08017f7c 	.word	0x08017f7c
 8010b8c:	08017fa0 	.word	0x08017fa0

08010b90 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b086      	sub	sp, #24
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	607b      	str	r3, [r7, #4]
 8010b98:	4603      	mov	r3, r0
 8010b9a:	73fb      	strb	r3, [r7, #15]
 8010b9c:	460b      	mov	r3, r1
 8010b9e:	81bb      	strh	r3, [r7, #12]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010ba4:	89bb      	ldrh	r3, [r7, #12]
 8010ba6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d105      	bne.n	8010bba <tcp_pbuf_prealloc+0x2a>
 8010bae:	4b30      	ldr	r3, [pc, #192]	; (8010c70 <tcp_pbuf_prealloc+0xe0>)
 8010bb0:	22e8      	movs	r2, #232	; 0xe8
 8010bb2:	4930      	ldr	r1, [pc, #192]	; (8010c74 <tcp_pbuf_prealloc+0xe4>)
 8010bb4:	4830      	ldr	r0, [pc, #192]	; (8010c78 <tcp_pbuf_prealloc+0xe8>)
 8010bb6:	f004 fc53 	bl	8015460 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010bba:	6a3b      	ldr	r3, [r7, #32]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d105      	bne.n	8010bcc <tcp_pbuf_prealloc+0x3c>
 8010bc0:	4b2b      	ldr	r3, [pc, #172]	; (8010c70 <tcp_pbuf_prealloc+0xe0>)
 8010bc2:	22e9      	movs	r2, #233	; 0xe9
 8010bc4:	492d      	ldr	r1, [pc, #180]	; (8010c7c <tcp_pbuf_prealloc+0xec>)
 8010bc6:	482c      	ldr	r0, [pc, #176]	; (8010c78 <tcp_pbuf_prealloc+0xe8>)
 8010bc8:	f004 fc4a 	bl	8015460 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010bcc:	89ba      	ldrh	r2, [r7, #12]
 8010bce:	897b      	ldrh	r3, [r7, #10]
 8010bd0:	429a      	cmp	r2, r3
 8010bd2:	d221      	bcs.n	8010c18 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010bd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010bd8:	f003 0302 	and.w	r3, r3, #2
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d111      	bne.n	8010c04 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010be0:	6a3b      	ldr	r3, [r7, #32]
 8010be2:	8b5b      	ldrh	r3, [r3, #26]
 8010be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d115      	bne.n	8010c18 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010bec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d007      	beq.n	8010c04 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010bf4:	6a3b      	ldr	r3, [r7, #32]
 8010bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d103      	bne.n	8010c04 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010bfc:	6a3b      	ldr	r3, [r7, #32]
 8010bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d009      	beq.n	8010c18 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010c04:	89bb      	ldrh	r3, [r7, #12]
 8010c06:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010c0a:	f023 0203 	bic.w	r2, r3, #3
 8010c0e:	897b      	ldrh	r3, [r7, #10]
 8010c10:	4293      	cmp	r3, r2
 8010c12:	bf28      	it	cs
 8010c14:	4613      	movcs	r3, r2
 8010c16:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010c18:	8af9      	ldrh	r1, [r7, #22]
 8010c1a:	7bfb      	ldrb	r3, [r7, #15]
 8010c1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7fa ff2b 	bl	800ba7c <pbuf_alloc>
 8010c26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d101      	bne.n	8010c32 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	e019      	b.n	8010c66 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d006      	beq.n	8010c48 <tcp_pbuf_prealloc+0xb8>
 8010c3a:	4b0d      	ldr	r3, [pc, #52]	; (8010c70 <tcp_pbuf_prealloc+0xe0>)
 8010c3c:	f240 120b 	movw	r2, #267	; 0x10b
 8010c40:	490f      	ldr	r1, [pc, #60]	; (8010c80 <tcp_pbuf_prealloc+0xf0>)
 8010c42:	480d      	ldr	r0, [pc, #52]	; (8010c78 <tcp_pbuf_prealloc+0xe8>)
 8010c44:	f004 fc0c 	bl	8015460 <iprintf>
  *oversize = p->len - length;
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	895a      	ldrh	r2, [r3, #10]
 8010c4c:	89bb      	ldrh	r3, [r7, #12]
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	89ba      	ldrh	r2, [r7, #12]
 8010c5a:	811a      	strh	r2, [r3, #8]
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	891a      	ldrh	r2, [r3, #8]
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	815a      	strh	r2, [r3, #10]
  return p;
 8010c64:	693b      	ldr	r3, [r7, #16]
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3718      	adds	r7, #24
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	08017f00 	.word	0x08017f00
 8010c74:	08017fb8 	.word	0x08017fb8
 8010c78:	08017f54 	.word	0x08017f54
 8010c7c:	08017fdc 	.word	0x08017fdc
 8010c80:	08017ffc 	.word	0x08017ffc

08010c84 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d106      	bne.n	8010ca4 <tcp_write_checks+0x20>
 8010c96:	4b33      	ldr	r3, [pc, #204]	; (8010d64 <tcp_write_checks+0xe0>)
 8010c98:	f240 1233 	movw	r2, #307	; 0x133
 8010c9c:	4932      	ldr	r1, [pc, #200]	; (8010d68 <tcp_write_checks+0xe4>)
 8010c9e:	4833      	ldr	r0, [pc, #204]	; (8010d6c <tcp_write_checks+0xe8>)
 8010ca0:	f004 fbde 	bl	8015460 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	7d1b      	ldrb	r3, [r3, #20]
 8010ca8:	2b04      	cmp	r3, #4
 8010caa:	d00e      	beq.n	8010cca <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010cb0:	2b07      	cmp	r3, #7
 8010cb2:	d00a      	beq.n	8010cca <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010cb8:	2b02      	cmp	r3, #2
 8010cba:	d006      	beq.n	8010cca <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010cc0:	2b03      	cmp	r3, #3
 8010cc2:	d002      	beq.n	8010cca <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010cc4:	f06f 030a 	mvn.w	r3, #10
 8010cc8:	e048      	b.n	8010d5c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010cca:	887b      	ldrh	r3, [r7, #2]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d101      	bne.n	8010cd4 <tcp_write_checks+0x50>
    return ERR_OK;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	e043      	b.n	8010d5c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010cda:	887a      	ldrh	r2, [r7, #2]
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d909      	bls.n	8010cf4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	8b5b      	ldrh	r3, [r3, #26]
 8010ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ce8:	b29a      	uxth	r2, r3
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010cee:	f04f 33ff 	mov.w	r3, #4294967295
 8010cf2:	e033      	b.n	8010d5c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cfa:	2b08      	cmp	r3, #8
 8010cfc:	d909      	bls.n	8010d12 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	8b5b      	ldrh	r3, [r3, #26]
 8010d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d06:	b29a      	uxth	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d10:	e024      	b.n	8010d5c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d00f      	beq.n	8010d3c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d11a      	bne.n	8010d5a <tcp_write_checks+0xd6>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d116      	bne.n	8010d5a <tcp_write_checks+0xd6>
 8010d2c:	4b0d      	ldr	r3, [pc, #52]	; (8010d64 <tcp_write_checks+0xe0>)
 8010d2e:	f240 1255 	movw	r2, #341	; 0x155
 8010d32:	490f      	ldr	r1, [pc, #60]	; (8010d70 <tcp_write_checks+0xec>)
 8010d34:	480d      	ldr	r0, [pc, #52]	; (8010d6c <tcp_write_checks+0xe8>)
 8010d36:	f004 fb93 	bl	8015460 <iprintf>
 8010d3a:	e00e      	b.n	8010d5a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d103      	bne.n	8010d4c <tcp_write_checks+0xc8>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d006      	beq.n	8010d5a <tcp_write_checks+0xd6>
 8010d4c:	4b05      	ldr	r3, [pc, #20]	; (8010d64 <tcp_write_checks+0xe0>)
 8010d4e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010d52:	4908      	ldr	r1, [pc, #32]	; (8010d74 <tcp_write_checks+0xf0>)
 8010d54:	4805      	ldr	r0, [pc, #20]	; (8010d6c <tcp_write_checks+0xe8>)
 8010d56:	f004 fb83 	bl	8015460 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010d5a:	2300      	movs	r3, #0
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	08017f00 	.word	0x08017f00
 8010d68:	08018010 	.word	0x08018010
 8010d6c:	08017f54 	.word	0x08017f54
 8010d70:	08018030 	.word	0x08018030
 8010d74:	0801806c 	.word	0x0801806c

08010d78 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010d78:	b590      	push	{r4, r7, lr}
 8010d7a:	b09b      	sub	sp, #108	; 0x6c
 8010d7c:	af04      	add	r7, sp, #16
 8010d7e:	60f8      	str	r0, [r7, #12]
 8010d80:	60b9      	str	r1, [r7, #8]
 8010d82:	4611      	mov	r1, r2
 8010d84:	461a      	mov	r2, r3
 8010d86:	460b      	mov	r3, r1
 8010d88:	80fb      	strh	r3, [r7, #6]
 8010d8a:	4613      	mov	r3, r2
 8010d8c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010d92:	2300      	movs	r3, #0
 8010d94:	653b      	str	r3, [r7, #80]	; 0x50
 8010d96:	2300      	movs	r3, #0
 8010d98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010d9e:	2300      	movs	r3, #0
 8010da0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010da2:	2300      	movs	r3, #0
 8010da4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010da8:	2300      	movs	r3, #0
 8010daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010dae:	2300      	movs	r3, #0
 8010db0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010db2:	2300      	movs	r3, #0
 8010db4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010db6:	2300      	movs	r3, #0
 8010db8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d109      	bne.n	8010dd4 <tcp_write+0x5c>
 8010dc0:	4ba4      	ldr	r3, [pc, #656]	; (8011054 <tcp_write+0x2dc>)
 8010dc2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010dc6:	49a4      	ldr	r1, [pc, #656]	; (8011058 <tcp_write+0x2e0>)
 8010dc8:	48a4      	ldr	r0, [pc, #656]	; (801105c <tcp_write+0x2e4>)
 8010dca:	f004 fb49 	bl	8015460 <iprintf>
 8010dce:	f06f 030f 	mvn.w	r3, #15
 8010dd2:	e32a      	b.n	801142a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010dda:	085b      	lsrs	r3, r3, #1
 8010ddc:	b29a      	uxth	r2, r3
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010de2:	4293      	cmp	r3, r2
 8010de4:	bf28      	it	cs
 8010de6:	4613      	movcs	r3, r2
 8010de8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d102      	bne.n	8010df6 <tcp_write+0x7e>
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010df4:	e000      	b.n	8010df8 <tcp_write+0x80>
 8010df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010df8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d109      	bne.n	8010e14 <tcp_write+0x9c>
 8010e00:	4b94      	ldr	r3, [pc, #592]	; (8011054 <tcp_write+0x2dc>)
 8010e02:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010e06:	4996      	ldr	r1, [pc, #600]	; (8011060 <tcp_write+0x2e8>)
 8010e08:	4894      	ldr	r0, [pc, #592]	; (801105c <tcp_write+0x2e4>)
 8010e0a:	f004 fb29 	bl	8015460 <iprintf>
 8010e0e:	f06f 030f 	mvn.w	r3, #15
 8010e12:	e30a      	b.n	801142a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010e14:	88fb      	ldrh	r3, [r7, #6]
 8010e16:	4619      	mov	r1, r3
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	f7ff ff33 	bl	8010c84 <tcp_write_checks>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010e24:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d002      	beq.n	8010e32 <tcp_write+0xba>
    return err;
 8010e2c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010e30:	e2fb      	b.n	801142a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	f000 80f6 	beq.w	8011038 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e50:	653b      	str	r3, [r7, #80]	; 0x50
 8010e52:	e002      	b.n	8010e5a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d1f8      	bne.n	8010e54 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e64:	7a9b      	ldrb	r3, [r3, #10]
 8010e66:	009b      	lsls	r3, r3, #2
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	f003 0304 	and.w	r3, r3, #4
 8010e6e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010e70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e74:	891b      	ldrh	r3, [r3, #8]
 8010e76:	4619      	mov	r1, r3
 8010e78:	8c3b      	ldrh	r3, [r7, #32]
 8010e7a:	440b      	add	r3, r1
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	da06      	bge.n	8010e8e <tcp_write+0x116>
 8010e80:	4b74      	ldr	r3, [pc, #464]	; (8011054 <tcp_write+0x2dc>)
 8010e82:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010e86:	4977      	ldr	r1, [pc, #476]	; (8011064 <tcp_write+0x2ec>)
 8010e88:	4874      	ldr	r0, [pc, #464]	; (801105c <tcp_write+0x2e4>)
 8010e8a:	f004 fae9 	bl	8015460 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e90:	891a      	ldrh	r2, [r3, #8]
 8010e92:	8c3b      	ldrh	r3, [r7, #32]
 8010e94:	4413      	add	r3, r2
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e9a:	1ad3      	subs	r3, r2, r3
 8010e9c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010ea4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010ea6:	8a7b      	ldrh	r3, [r7, #18]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d026      	beq.n	8010efa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010eac:	8a7b      	ldrh	r3, [r7, #18]
 8010eae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d206      	bcs.n	8010ec2 <tcp_write+0x14a>
 8010eb4:	4b67      	ldr	r3, [pc, #412]	; (8011054 <tcp_write+0x2dc>)
 8010eb6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010eba:	496b      	ldr	r1, [pc, #428]	; (8011068 <tcp_write+0x2f0>)
 8010ebc:	4867      	ldr	r0, [pc, #412]	; (801105c <tcp_write+0x2e4>)
 8010ebe:	f004 facf 	bl	8015460 <iprintf>
      seg = last_unsent;
 8010ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010ec6:	8a7b      	ldrh	r3, [r7, #18]
 8010ec8:	88fa      	ldrh	r2, [r7, #6]
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	bf28      	it	cs
 8010ece:	4613      	movcs	r3, r2
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010ed4:	4293      	cmp	r3, r2
 8010ed6:	bf28      	it	cs
 8010ed8:	4613      	movcs	r3, r2
 8010eda:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010edc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ee0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ee2:	4413      	add	r3, r2
 8010ee4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010ee8:	8a7a      	ldrh	r2, [r7, #18]
 8010eea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010eec:	1ad3      	subs	r3, r2, r3
 8010eee:	b29b      	uxth	r3, r3
 8010ef0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010ef2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010ef4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010efa:	8a7b      	ldrh	r3, [r7, #18]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d00b      	beq.n	8010f18 <tcp_write+0x1a0>
 8010f00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f04:	88fb      	ldrh	r3, [r7, #6]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d006      	beq.n	8010f18 <tcp_write+0x1a0>
 8010f0a:	4b52      	ldr	r3, [pc, #328]	; (8011054 <tcp_write+0x2dc>)
 8010f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010f10:	4956      	ldr	r1, [pc, #344]	; (801106c <tcp_write+0x2f4>)
 8010f12:	4852      	ldr	r0, [pc, #328]	; (801105c <tcp_write+0x2e4>)
 8010f14:	f004 faa4 	bl	8015460 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010f18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f1c:	88fb      	ldrh	r3, [r7, #6]
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	f080 8167 	bcs.w	80111f2 <tcp_write+0x47a>
 8010f24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	f000 8163 	beq.w	80111f2 <tcp_write+0x47a>
 8010f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f2e:	891b      	ldrh	r3, [r3, #8]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 815e 	beq.w	80111f2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010f36:	88fa      	ldrh	r2, [r7, #6]
 8010f38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f3c:	1ad2      	subs	r2, r2, r3
 8010f3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f40:	4293      	cmp	r3, r2
 8010f42:	bfa8      	it	ge
 8010f44:	4613      	movge	r3, r2
 8010f46:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f4a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010f4c:	797b      	ldrb	r3, [r7, #5]
 8010f4e:	f003 0301 	and.w	r3, r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d027      	beq.n	8010fa6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010f56:	f107 0012 	add.w	r0, r7, #18
 8010f5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010f5c:	8bf9      	ldrh	r1, [r7, #30]
 8010f5e:	2301      	movs	r3, #1
 8010f60:	9302      	str	r3, [sp, #8]
 8010f62:	797b      	ldrb	r3, [r7, #5]
 8010f64:	9301      	str	r3, [sp, #4]
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	9300      	str	r3, [sp, #0]
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	2000      	movs	r0, #0
 8010f6e:	f7ff fe0f 	bl	8010b90 <tcp_pbuf_prealloc>
 8010f72:	6578      	str	r0, [r7, #84]	; 0x54
 8010f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	f000 8225 	beq.w	80113c6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f7e:	6858      	ldr	r0, [r3, #4]
 8010f80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f84:	68ba      	ldr	r2, [r7, #8]
 8010f86:	4413      	add	r3, r2
 8010f88:	8bfa      	ldrh	r2, [r7, #30]
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	f004 fa52 	bl	8015434 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010f90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010f92:	f7fb f8df 	bl	800c154 <pbuf_clen>
 8010f96:	4603      	mov	r3, r0
 8010f98:	461a      	mov	r2, r3
 8010f9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010f9e:	4413      	add	r3, r2
 8010fa0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010fa4:	e041      	b.n	801102a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	637b      	str	r3, [r7, #52]	; 0x34
 8010fac:	e002      	b.n	8010fb4 <tcp_write+0x23c>
 8010fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8010fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d1f8      	bne.n	8010fae <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fbe:	7b1b      	ldrb	r3, [r3, #12]
 8010fc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d115      	bne.n	8010ff4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fce:	8952      	ldrh	r2, [r2, #10]
 8010fd0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010fd2:	68ba      	ldr	r2, [r7, #8]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d10d      	bne.n	8010ff4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010fd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d006      	beq.n	8010fee <tcp_write+0x276>
 8010fe0:	4b1c      	ldr	r3, [pc, #112]	; (8011054 <tcp_write+0x2dc>)
 8010fe2:	f240 2231 	movw	r2, #561	; 0x231
 8010fe6:	4922      	ldr	r1, [pc, #136]	; (8011070 <tcp_write+0x2f8>)
 8010fe8:	481c      	ldr	r0, [pc, #112]	; (801105c <tcp_write+0x2e4>)
 8010fea:	f004 fa39 	bl	8015460 <iprintf>
          extendlen = seglen;
 8010fee:	8bfb      	ldrh	r3, [r7, #30]
 8010ff0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010ff2:	e01a      	b.n	801102a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010ff4:	8bfb      	ldrh	r3, [r7, #30]
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	4619      	mov	r1, r3
 8010ffa:	2000      	movs	r0, #0
 8010ffc:	f7fa fd3e 	bl	800ba7c <pbuf_alloc>
 8011000:	6578      	str	r0, [r7, #84]	; 0x54
 8011002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011004:	2b00      	cmp	r3, #0
 8011006:	f000 81e0 	beq.w	80113ca <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801100a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801100e:	68ba      	ldr	r2, [r7, #8]
 8011010:	441a      	add	r2, r3
 8011012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011014:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011016:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011018:	f7fb f89c 	bl	800c154 <pbuf_clen>
 801101c:	4603      	mov	r3, r0
 801101e:	461a      	mov	r2, r3
 8011020:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011024:	4413      	add	r3, r2
 8011026:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801102a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801102e:	8bfb      	ldrh	r3, [r7, #30]
 8011030:	4413      	add	r3, r2
 8011032:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011036:	e0dc      	b.n	80111f2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801103e:	2b00      	cmp	r3, #0
 8011040:	f000 80d7 	beq.w	80111f2 <tcp_write+0x47a>
 8011044:	4b03      	ldr	r3, [pc, #12]	; (8011054 <tcp_write+0x2dc>)
 8011046:	f240 224a 	movw	r2, #586	; 0x24a
 801104a:	490a      	ldr	r1, [pc, #40]	; (8011074 <tcp_write+0x2fc>)
 801104c:	4803      	ldr	r0, [pc, #12]	; (801105c <tcp_write+0x2e4>)
 801104e:	f004 fa07 	bl	8015460 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011052:	e0ce      	b.n	80111f2 <tcp_write+0x47a>
 8011054:	08017f00 	.word	0x08017f00
 8011058:	080180a0 	.word	0x080180a0
 801105c:	08017f54 	.word	0x08017f54
 8011060:	080180b8 	.word	0x080180b8
 8011064:	080180ec 	.word	0x080180ec
 8011068:	08018104 	.word	0x08018104
 801106c:	08018124 	.word	0x08018124
 8011070:	08018144 	.word	0x08018144
 8011074:	08018170 	.word	0x08018170
    struct pbuf *p;
    u16_t left = len - pos;
 8011078:	88fa      	ldrh	r2, [r7, #6]
 801107a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801107e:	1ad3      	subs	r3, r2, r3
 8011080:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011082:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011086:	b29b      	uxth	r3, r3
 8011088:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801108a:	1ad3      	subs	r3, r2, r3
 801108c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801108e:	8b7a      	ldrh	r2, [r7, #26]
 8011090:	8bbb      	ldrh	r3, [r7, #28]
 8011092:	4293      	cmp	r3, r2
 8011094:	bf28      	it	cs
 8011096:	4613      	movcs	r3, r2
 8011098:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801109a:	797b      	ldrb	r3, [r7, #5]
 801109c:	f003 0301 	and.w	r3, r3, #1
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d036      	beq.n	8011112 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80110a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80110a8:	b29a      	uxth	r2, r3
 80110aa:	8b3b      	ldrh	r3, [r7, #24]
 80110ac:	4413      	add	r3, r2
 80110ae:	b299      	uxth	r1, r3
 80110b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	bf0c      	ite	eq
 80110b6:	2301      	moveq	r3, #1
 80110b8:	2300      	movne	r3, #0
 80110ba:	b2db      	uxtb	r3, r3
 80110bc:	f107 0012 	add.w	r0, r7, #18
 80110c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80110c2:	9302      	str	r3, [sp, #8]
 80110c4:	797b      	ldrb	r3, [r7, #5]
 80110c6:	9301      	str	r3, [sp, #4]
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	9300      	str	r3, [sp, #0]
 80110cc:	4603      	mov	r3, r0
 80110ce:	2036      	movs	r0, #54	; 0x36
 80110d0:	f7ff fd5e 	bl	8010b90 <tcp_pbuf_prealloc>
 80110d4:	6338      	str	r0, [r7, #48]	; 0x30
 80110d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d8:	2b00      	cmp	r3, #0
 80110da:	f000 8178 	beq.w	80113ce <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80110de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e0:	895b      	ldrh	r3, [r3, #10]
 80110e2:	8b3a      	ldrh	r2, [r7, #24]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d906      	bls.n	80110f6 <tcp_write+0x37e>
 80110e8:	4b8c      	ldr	r3, [pc, #560]	; (801131c <tcp_write+0x5a4>)
 80110ea:	f240 2266 	movw	r2, #614	; 0x266
 80110ee:	498c      	ldr	r1, [pc, #560]	; (8011320 <tcp_write+0x5a8>)
 80110f0:	488c      	ldr	r0, [pc, #560]	; (8011324 <tcp_write+0x5ac>)
 80110f2:	f004 f9b5 	bl	8015460 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80110f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f8:	685a      	ldr	r2, [r3, #4]
 80110fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80110fe:	18d0      	adds	r0, r2, r3
 8011100:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011104:	68ba      	ldr	r2, [r7, #8]
 8011106:	4413      	add	r3, r2
 8011108:	8b3a      	ldrh	r2, [r7, #24]
 801110a:	4619      	mov	r1, r3
 801110c:	f004 f992 	bl	8015434 <memcpy>
 8011110:	e02f      	b.n	8011172 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011112:	8a7b      	ldrh	r3, [r7, #18]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d006      	beq.n	8011126 <tcp_write+0x3ae>
 8011118:	4b80      	ldr	r3, [pc, #512]	; (801131c <tcp_write+0x5a4>)
 801111a:	f240 2271 	movw	r2, #625	; 0x271
 801111e:	4982      	ldr	r1, [pc, #520]	; (8011328 <tcp_write+0x5b0>)
 8011120:	4880      	ldr	r0, [pc, #512]	; (8011324 <tcp_write+0x5ac>)
 8011122:	f004 f99d 	bl	8015460 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011126:	8b3b      	ldrh	r3, [r7, #24]
 8011128:	2201      	movs	r2, #1
 801112a:	4619      	mov	r1, r3
 801112c:	2036      	movs	r0, #54	; 0x36
 801112e:	f7fa fca5 	bl	800ba7c <pbuf_alloc>
 8011132:	6178      	str	r0, [r7, #20]
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	2b00      	cmp	r3, #0
 8011138:	f000 814b 	beq.w	80113d2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801113c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011140:	68ba      	ldr	r2, [r7, #8]
 8011142:	441a      	add	r2, r3
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011148:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801114c:	b29b      	uxth	r3, r3
 801114e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011152:	4619      	mov	r1, r3
 8011154:	2036      	movs	r0, #54	; 0x36
 8011156:	f7fa fc91 	bl	800ba7c <pbuf_alloc>
 801115a:	6338      	str	r0, [r7, #48]	; 0x30
 801115c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115e:	2b00      	cmp	r3, #0
 8011160:	d103      	bne.n	801116a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011162:	6978      	ldr	r0, [r7, #20]
 8011164:	f7fa ff6e 	bl	800c044 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011168:	e136      	b.n	80113d8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801116a:	6979      	ldr	r1, [r7, #20]
 801116c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801116e:	f7fb f82b 	bl	800c1c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011174:	f7fa ffee 	bl	800c154 <pbuf_clen>
 8011178:	4603      	mov	r3, r0
 801117a:	461a      	mov	r2, r3
 801117c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011180:	4413      	add	r3, r2
 8011182:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011186:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801118a:	2b09      	cmp	r3, #9
 801118c:	d903      	bls.n	8011196 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801118e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011190:	f7fa ff58 	bl	800c044 <pbuf_free>
      goto memerr;
 8011194:	e120      	b.n	80113d8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801119a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801119e:	441a      	add	r2, r3
 80111a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111a4:	9300      	str	r3, [sp, #0]
 80111a6:	4613      	mov	r3, r2
 80111a8:	2200      	movs	r2, #0
 80111aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80111ac:	68f8      	ldr	r0, [r7, #12]
 80111ae:	f7ff fc51 	bl	8010a54 <tcp_create_segment>
 80111b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80111b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	f000 810d 	beq.w	80113d6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80111bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d102      	bne.n	80111c8 <tcp_write+0x450>
      queue = seg;
 80111c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111c4:	647b      	str	r3, [r7, #68]	; 0x44
 80111c6:	e00c      	b.n	80111e2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80111c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d106      	bne.n	80111dc <tcp_write+0x464>
 80111ce:	4b53      	ldr	r3, [pc, #332]	; (801131c <tcp_write+0x5a4>)
 80111d0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80111d4:	4955      	ldr	r1, [pc, #340]	; (801132c <tcp_write+0x5b4>)
 80111d6:	4853      	ldr	r0, [pc, #332]	; (8011324 <tcp_write+0x5ac>)
 80111d8:	f004 f942 	bl	8015460 <iprintf>
      prev_seg->next = seg;
 80111dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80111e0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80111e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111e4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80111e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111ea:	8b3b      	ldrh	r3, [r7, #24]
 80111ec:	4413      	add	r3, r2
 80111ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80111f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111f6:	88fb      	ldrh	r3, [r7, #6]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	f4ff af3d 	bcc.w	8011078 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80111fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011200:	2b00      	cmp	r3, #0
 8011202:	d02c      	beq.n	801125e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011206:	685b      	ldr	r3, [r3, #4]
 8011208:	62fb      	str	r3, [r7, #44]	; 0x2c
 801120a:	e01e      	b.n	801124a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120e:	891a      	ldrh	r2, [r3, #8]
 8011210:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011212:	4413      	add	r3, r2
 8011214:	b29a      	uxth	r2, r3
 8011216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011218:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d110      	bne.n	8011244 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011228:	8952      	ldrh	r2, [r2, #10]
 801122a:	4413      	add	r3, r2
 801122c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801122e:	68b9      	ldr	r1, [r7, #8]
 8011230:	4618      	mov	r0, r3
 8011232:	f004 f8ff 	bl	8015434 <memcpy>
        p->len += oversize_used;
 8011236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011238:	895a      	ldrh	r2, [r3, #10]
 801123a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801123c:	4413      	add	r3, r2
 801123e:	b29a      	uxth	r2, r3
 8011240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011242:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	62fb      	str	r3, [r7, #44]	; 0x2c
 801124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124c:	2b00      	cmp	r3, #0
 801124e:	d1dd      	bne.n	801120c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011252:	891a      	ldrh	r2, [r3, #8]
 8011254:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011256:	4413      	add	r3, r2
 8011258:	b29a      	uxth	r2, r3
 801125a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801125c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801125e:	8a7a      	ldrh	r2, [r7, #18]
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011268:	2b00      	cmp	r3, #0
 801126a:	d018      	beq.n	801129e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801126c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801126e:	2b00      	cmp	r3, #0
 8011270:	d106      	bne.n	8011280 <tcp_write+0x508>
 8011272:	4b2a      	ldr	r3, [pc, #168]	; (801131c <tcp_write+0x5a4>)
 8011274:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011278:	492d      	ldr	r1, [pc, #180]	; (8011330 <tcp_write+0x5b8>)
 801127a:	482a      	ldr	r0, [pc, #168]	; (8011324 <tcp_write+0x5ac>)
 801127c:	f004 f8f0 	bl	8015460 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011286:	4618      	mov	r0, r3
 8011288:	f7fa ff9e 	bl	800c1c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801128c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801128e:	891a      	ldrh	r2, [r3, #8]
 8011290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011292:	891b      	ldrh	r3, [r3, #8]
 8011294:	4413      	add	r3, r2
 8011296:	b29a      	uxth	r2, r3
 8011298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801129a:	811a      	strh	r2, [r3, #8]
 801129c:	e037      	b.n	801130e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801129e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d034      	beq.n	801130e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80112a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d003      	beq.n	80112b2 <tcp_write+0x53a>
 80112aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ac:	685b      	ldr	r3, [r3, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d106      	bne.n	80112c0 <tcp_write+0x548>
 80112b2:	4b1a      	ldr	r3, [pc, #104]	; (801131c <tcp_write+0x5a4>)
 80112b4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80112b8:	491e      	ldr	r1, [pc, #120]	; (8011334 <tcp_write+0x5bc>)
 80112ba:	481a      	ldr	r0, [pc, #104]	; (8011324 <tcp_write+0x5ac>)
 80112bc:	f004 f8d0 	bl	8015460 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80112c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80112c6:	e009      	b.n	80112dc <tcp_write+0x564>
      p->tot_len += extendlen;
 80112c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ca:	891a      	ldrh	r2, [r3, #8]
 80112cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112ce:	4413      	add	r3, r2
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80112d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	62bb      	str	r3, [r7, #40]	; 0x28
 80112dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d1f1      	bne.n	80112c8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80112e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e6:	891a      	ldrh	r2, [r3, #8]
 80112e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112ea:	4413      	add	r3, r2
 80112ec:	b29a      	uxth	r2, r3
 80112ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80112f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f4:	895a      	ldrh	r2, [r3, #10]
 80112f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112f8:	4413      	add	r3, r2
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112fe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011302:	891a      	ldrh	r2, [r3, #8]
 8011304:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011306:	4413      	add	r3, r2
 8011308:	b29a      	uxth	r2, r3
 801130a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801130c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801130e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011310:	2b00      	cmp	r3, #0
 8011312:	d111      	bne.n	8011338 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011318:	66da      	str	r2, [r3, #108]	; 0x6c
 801131a:	e010      	b.n	801133e <tcp_write+0x5c6>
 801131c:	08017f00 	.word	0x08017f00
 8011320:	080181a0 	.word	0x080181a0
 8011324:	08017f54 	.word	0x08017f54
 8011328:	080181e0 	.word	0x080181e0
 801132c:	080181f0 	.word	0x080181f0
 8011330:	08018204 	.word	0x08018204
 8011334:	0801823c 	.word	0x0801823c
  } else {
    last_unsent->next = queue;
 8011338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801133a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801133c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011342:	88fb      	ldrh	r3, [r7, #6]
 8011344:	441a      	add	r2, r3
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011350:	88fb      	ldrh	r3, [r7, #6]
 8011352:	1ad3      	subs	r3, r2, r3
 8011354:	b29a      	uxth	r2, r3
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011362:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801136c:	2b00      	cmp	r3, #0
 801136e:	d00e      	beq.n	801138e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011374:	2b00      	cmp	r3, #0
 8011376:	d10a      	bne.n	801138e <tcp_write+0x616>
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801137c:	2b00      	cmp	r3, #0
 801137e:	d106      	bne.n	801138e <tcp_write+0x616>
 8011380:	4b2c      	ldr	r3, [pc, #176]	; (8011434 <tcp_write+0x6bc>)
 8011382:	f240 3212 	movw	r2, #786	; 0x312
 8011386:	492c      	ldr	r1, [pc, #176]	; (8011438 <tcp_write+0x6c0>)
 8011388:	482c      	ldr	r0, [pc, #176]	; (801143c <tcp_write+0x6c4>)
 801138a:	f004 f869 	bl	8015460 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801138e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011390:	2b00      	cmp	r3, #0
 8011392:	d016      	beq.n	80113c2 <tcp_write+0x64a>
 8011394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011396:	68db      	ldr	r3, [r3, #12]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d012      	beq.n	80113c2 <tcp_write+0x64a>
 801139c:	797b      	ldrb	r3, [r7, #5]
 801139e:	f003 0302 	and.w	r3, r3, #2
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d10d      	bne.n	80113c2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80113a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113a8:	68db      	ldr	r3, [r3, #12]
 80113aa:	899b      	ldrh	r3, [r3, #12]
 80113ac:	b29c      	uxth	r4, r3
 80113ae:	2008      	movs	r0, #8
 80113b0:	f7f9 faea 	bl	800a988 <lwip_htons>
 80113b4:	4603      	mov	r3, r0
 80113b6:	461a      	mov	r2, r3
 80113b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	4322      	orrs	r2, r4
 80113be:	b292      	uxth	r2, r2
 80113c0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80113c2:	2300      	movs	r3, #0
 80113c4:	e031      	b.n	801142a <tcp_write+0x6b2>
          goto memerr;
 80113c6:	bf00      	nop
 80113c8:	e006      	b.n	80113d8 <tcp_write+0x660>
            goto memerr;
 80113ca:	bf00      	nop
 80113cc:	e004      	b.n	80113d8 <tcp_write+0x660>
        goto memerr;
 80113ce:	bf00      	nop
 80113d0:	e002      	b.n	80113d8 <tcp_write+0x660>
        goto memerr;
 80113d2:	bf00      	nop
 80113d4:	e000      	b.n	80113d8 <tcp_write+0x660>
      goto memerr;
 80113d6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	8b5b      	ldrh	r3, [r3, #26]
 80113dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113e0:	b29a      	uxth	r2, r3
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80113e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d002      	beq.n	80113f2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80113ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80113ee:	f7fa fe29 	bl	800c044 <pbuf_free>
  }
  if (queue != NULL) {
 80113f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d002      	beq.n	80113fe <tcp_write+0x686>
    tcp_segs_free(queue);
 80113f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80113fa:	f7fc fb53 	bl	800daa4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011404:	2b00      	cmp	r3, #0
 8011406:	d00e      	beq.n	8011426 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801140c:	2b00      	cmp	r3, #0
 801140e:	d10a      	bne.n	8011426 <tcp_write+0x6ae>
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011414:	2b00      	cmp	r3, #0
 8011416:	d106      	bne.n	8011426 <tcp_write+0x6ae>
 8011418:	4b06      	ldr	r3, [pc, #24]	; (8011434 <tcp_write+0x6bc>)
 801141a:	f240 3227 	movw	r2, #807	; 0x327
 801141e:	4906      	ldr	r1, [pc, #24]	; (8011438 <tcp_write+0x6c0>)
 8011420:	4806      	ldr	r0, [pc, #24]	; (801143c <tcp_write+0x6c4>)
 8011422:	f004 f81d 	bl	8015460 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011426:	f04f 33ff 	mov.w	r3, #4294967295
}
 801142a:	4618      	mov	r0, r3
 801142c:	375c      	adds	r7, #92	; 0x5c
 801142e:	46bd      	mov	sp, r7
 8011430:	bd90      	pop	{r4, r7, pc}
 8011432:	bf00      	nop
 8011434:	08017f00 	.word	0x08017f00
 8011438:	08018274 	.word	0x08018274
 801143c:	08017f54 	.word	0x08017f54

08011440 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011440:	b590      	push	{r4, r7, lr}
 8011442:	b08b      	sub	sp, #44	; 0x2c
 8011444:	af02      	add	r7, sp, #8
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	460b      	mov	r3, r1
 801144a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801144c:	2300      	movs	r3, #0
 801144e:	61fb      	str	r3, [r7, #28]
 8011450:	2300      	movs	r3, #0
 8011452:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011454:	2300      	movs	r3, #0
 8011456:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d106      	bne.n	801146c <tcp_split_unsent_seg+0x2c>
 801145e:	4b95      	ldr	r3, [pc, #596]	; (80116b4 <tcp_split_unsent_seg+0x274>)
 8011460:	f240 324b 	movw	r2, #843	; 0x34b
 8011464:	4994      	ldr	r1, [pc, #592]	; (80116b8 <tcp_split_unsent_seg+0x278>)
 8011466:	4895      	ldr	r0, [pc, #596]	; (80116bc <tcp_split_unsent_seg+0x27c>)
 8011468:	f003 fffa 	bl	8015460 <iprintf>

  useg = pcb->unsent;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011470:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d102      	bne.n	801147e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011478:	f04f 33ff 	mov.w	r3, #4294967295
 801147c:	e116      	b.n	80116ac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801147e:	887b      	ldrh	r3, [r7, #2]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d109      	bne.n	8011498 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011484:	4b8b      	ldr	r3, [pc, #556]	; (80116b4 <tcp_split_unsent_seg+0x274>)
 8011486:	f240 3253 	movw	r2, #851	; 0x353
 801148a:	498d      	ldr	r1, [pc, #564]	; (80116c0 <tcp_split_unsent_seg+0x280>)
 801148c:	488b      	ldr	r0, [pc, #556]	; (80116bc <tcp_split_unsent_seg+0x27c>)
 801148e:	f003 ffe7 	bl	8015460 <iprintf>
    return ERR_VAL;
 8011492:	f06f 0305 	mvn.w	r3, #5
 8011496:	e109      	b.n	80116ac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	891b      	ldrh	r3, [r3, #8]
 801149c:	887a      	ldrh	r2, [r7, #2]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d301      	bcc.n	80114a6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80114a2:	2300      	movs	r3, #0
 80114a4:	e102      	b.n	80116ac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114aa:	887a      	ldrh	r2, [r7, #2]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d906      	bls.n	80114be <tcp_split_unsent_seg+0x7e>
 80114b0:	4b80      	ldr	r3, [pc, #512]	; (80116b4 <tcp_split_unsent_seg+0x274>)
 80114b2:	f240 325b 	movw	r2, #859	; 0x35b
 80114b6:	4983      	ldr	r1, [pc, #524]	; (80116c4 <tcp_split_unsent_seg+0x284>)
 80114b8:	4880      	ldr	r0, [pc, #512]	; (80116bc <tcp_split_unsent_seg+0x27c>)
 80114ba:	f003 ffd1 	bl	8015460 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	891b      	ldrh	r3, [r3, #8]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d106      	bne.n	80114d4 <tcp_split_unsent_seg+0x94>
 80114c6:	4b7b      	ldr	r3, [pc, #492]	; (80116b4 <tcp_split_unsent_seg+0x274>)
 80114c8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80114cc:	497e      	ldr	r1, [pc, #504]	; (80116c8 <tcp_split_unsent_seg+0x288>)
 80114ce:	487b      	ldr	r0, [pc, #492]	; (80116bc <tcp_split_unsent_seg+0x27c>)
 80114d0:	f003 ffc6 	bl	8015460 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	7a9b      	ldrb	r3, [r3, #10]
 80114d8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80114da:	7bfb      	ldrb	r3, [r7, #15]
 80114dc:	009b      	lsls	r3, r3, #2
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	f003 0304 	and.w	r3, r3, #4
 80114e4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	891a      	ldrh	r2, [r3, #8]
 80114ea:	887b      	ldrh	r3, [r7, #2]
 80114ec:	1ad3      	subs	r3, r2, r3
 80114ee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80114f0:	7bbb      	ldrb	r3, [r7, #14]
 80114f2:	b29a      	uxth	r2, r3
 80114f4:	89bb      	ldrh	r3, [r7, #12]
 80114f6:	4413      	add	r3, r2
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80114fe:	4619      	mov	r1, r3
 8011500:	2036      	movs	r0, #54	; 0x36
 8011502:	f7fa fabb 	bl	800ba7c <pbuf_alloc>
 8011506:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	2b00      	cmp	r3, #0
 801150c:	f000 80b7 	beq.w	801167e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	891a      	ldrh	r2, [r3, #8]
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	891b      	ldrh	r3, [r3, #8]
 801151a:	1ad3      	subs	r3, r2, r3
 801151c:	b29a      	uxth	r2, r3
 801151e:	887b      	ldrh	r3, [r7, #2]
 8011520:	4413      	add	r3, r2
 8011522:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	6858      	ldr	r0, [r3, #4]
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	685a      	ldr	r2, [r3, #4]
 801152c:	7bbb      	ldrb	r3, [r7, #14]
 801152e:	18d1      	adds	r1, r2, r3
 8011530:	897b      	ldrh	r3, [r7, #10]
 8011532:	89ba      	ldrh	r2, [r7, #12]
 8011534:	f7fa ff70 	bl	800c418 <pbuf_copy_partial>
 8011538:	4603      	mov	r3, r0
 801153a:	461a      	mov	r2, r3
 801153c:	89bb      	ldrh	r3, [r7, #12]
 801153e:	4293      	cmp	r3, r2
 8011540:	f040 809f 	bne.w	8011682 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	899b      	ldrh	r3, [r3, #12]
 801154a:	b29b      	uxth	r3, r3
 801154c:	4618      	mov	r0, r3
 801154e:	f7f9 fa1b 	bl	800a988 <lwip_htons>
 8011552:	4603      	mov	r3, r0
 8011554:	b2db      	uxtb	r3, r3
 8011556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801155a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801155c:	2300      	movs	r3, #0
 801155e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011560:	7efb      	ldrb	r3, [r7, #27]
 8011562:	f003 0308 	and.w	r3, r3, #8
 8011566:	2b00      	cmp	r3, #0
 8011568:	d007      	beq.n	801157a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801156a:	7efb      	ldrb	r3, [r7, #27]
 801156c:	f023 0308 	bic.w	r3, r3, #8
 8011570:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011572:	7ebb      	ldrb	r3, [r7, #26]
 8011574:	f043 0308 	orr.w	r3, r3, #8
 8011578:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801157a:	7efb      	ldrb	r3, [r7, #27]
 801157c:	f003 0301 	and.w	r3, r3, #1
 8011580:	2b00      	cmp	r3, #0
 8011582:	d007      	beq.n	8011594 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011584:	7efb      	ldrb	r3, [r7, #27]
 8011586:	f023 0301 	bic.w	r3, r3, #1
 801158a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801158c:	7ebb      	ldrb	r3, [r7, #26]
 801158e:	f043 0301 	orr.w	r3, r3, #1
 8011592:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	4618      	mov	r0, r3
 801159c:	f7f9 fa09 	bl	800a9b2 <lwip_htonl>
 80115a0:	4602      	mov	r2, r0
 80115a2:	887b      	ldrh	r3, [r7, #2]
 80115a4:	18d1      	adds	r1, r2, r3
 80115a6:	7eba      	ldrb	r2, [r7, #26]
 80115a8:	7bfb      	ldrb	r3, [r7, #15]
 80115aa:	9300      	str	r3, [sp, #0]
 80115ac:	460b      	mov	r3, r1
 80115ae:	6939      	ldr	r1, [r7, #16]
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f7ff fa4f 	bl	8010a54 <tcp_create_segment>
 80115b6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d063      	beq.n	8011686 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7fa fdc6 	bl	800c154 <pbuf_clen>
 80115c8:	4603      	mov	r3, r0
 80115ca:	461a      	mov	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115d2:	1a9b      	subs	r3, r3, r2
 80115d4:	b29a      	uxth	r2, r3
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	6858      	ldr	r0, [r3, #4]
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	891a      	ldrh	r2, [r3, #8]
 80115e6:	89bb      	ldrh	r3, [r7, #12]
 80115e8:	1ad3      	subs	r3, r2, r3
 80115ea:	b29b      	uxth	r3, r3
 80115ec:	4619      	mov	r1, r3
 80115ee:	f7fa fba3 	bl	800bd38 <pbuf_realloc>
  useg->len -= remainder;
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	891a      	ldrh	r2, [r3, #8]
 80115f6:	89bb      	ldrh	r3, [r7, #12]
 80115f8:	1ad3      	subs	r3, r2, r3
 80115fa:	b29a      	uxth	r2, r3
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	68db      	ldr	r3, [r3, #12]
 8011604:	899b      	ldrh	r3, [r3, #12]
 8011606:	b29c      	uxth	r4, r3
 8011608:	7efb      	ldrb	r3, [r7, #27]
 801160a:	b29b      	uxth	r3, r3
 801160c:	4618      	mov	r0, r3
 801160e:	f7f9 f9bb 	bl	800a988 <lwip_htons>
 8011612:	4603      	mov	r3, r0
 8011614:	461a      	mov	r2, r3
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	68db      	ldr	r3, [r3, #12]
 801161a:	4322      	orrs	r2, r4
 801161c:	b292      	uxth	r2, r2
 801161e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	4618      	mov	r0, r3
 8011626:	f7fa fd95 	bl	800c154 <pbuf_clen>
 801162a:	4603      	mov	r3, r0
 801162c:	461a      	mov	r2, r3
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011634:	4413      	add	r3, r2
 8011636:	b29a      	uxth	r2, r3
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	4618      	mov	r0, r3
 8011644:	f7fa fd86 	bl	800c154 <pbuf_clen>
 8011648:	4603      	mov	r3, r0
 801164a:	461a      	mov	r2, r3
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011652:	4413      	add	r3, r2
 8011654:	b29a      	uxth	r2, r3
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	69fa      	ldr	r2, [r7, #28]
 8011668:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801166a:	69fb      	ldr	r3, [r7, #28]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d103      	bne.n	801167a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2200      	movs	r2, #0
 8011676:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801167a:	2300      	movs	r3, #0
 801167c:	e016      	b.n	80116ac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801167e:	bf00      	nop
 8011680:	e002      	b.n	8011688 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011682:	bf00      	nop
 8011684:	e000      	b.n	8011688 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011686:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011688:	69fb      	ldr	r3, [r7, #28]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d006      	beq.n	801169c <tcp_split_unsent_seg+0x25c>
 801168e:	4b09      	ldr	r3, [pc, #36]	; (80116b4 <tcp_split_unsent_seg+0x274>)
 8011690:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011694:	490d      	ldr	r1, [pc, #52]	; (80116cc <tcp_split_unsent_seg+0x28c>)
 8011696:	4809      	ldr	r0, [pc, #36]	; (80116bc <tcp_split_unsent_seg+0x27c>)
 8011698:	f003 fee2 	bl	8015460 <iprintf>
  if (p != NULL) {
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d002      	beq.n	80116a8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80116a2:	6938      	ldr	r0, [r7, #16]
 80116a4:	f7fa fcce 	bl	800c044 <pbuf_free>
  }

  return ERR_MEM;
 80116a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3724      	adds	r7, #36	; 0x24
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd90      	pop	{r4, r7, pc}
 80116b4:	08017f00 	.word	0x08017f00
 80116b8:	08018294 	.word	0x08018294
 80116bc:	08017f54 	.word	0x08017f54
 80116c0:	080182b8 	.word	0x080182b8
 80116c4:	080182dc 	.word	0x080182dc
 80116c8:	080182ec 	.word	0x080182ec
 80116cc:	080182fc 	.word	0x080182fc

080116d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80116d0:	b590      	push	{r4, r7, lr}
 80116d2:	b085      	sub	sp, #20
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d106      	bne.n	80116ec <tcp_send_fin+0x1c>
 80116de:	4b21      	ldr	r3, [pc, #132]	; (8011764 <tcp_send_fin+0x94>)
 80116e0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80116e4:	4920      	ldr	r1, [pc, #128]	; (8011768 <tcp_send_fin+0x98>)
 80116e6:	4821      	ldr	r0, [pc, #132]	; (801176c <tcp_send_fin+0x9c>)
 80116e8:	f003 feba 	bl	8015460 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d02e      	beq.n	8011752 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116f8:	60fb      	str	r3, [r7, #12]
 80116fa:	e002      	b.n	8011702 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d1f8      	bne.n	80116fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	68db      	ldr	r3, [r3, #12]
 801170e:	899b      	ldrh	r3, [r3, #12]
 8011710:	b29b      	uxth	r3, r3
 8011712:	4618      	mov	r0, r3
 8011714:	f7f9 f938 	bl	800a988 <lwip_htons>
 8011718:	4603      	mov	r3, r0
 801171a:	b2db      	uxtb	r3, r3
 801171c:	f003 0307 	and.w	r3, r3, #7
 8011720:	2b00      	cmp	r3, #0
 8011722:	d116      	bne.n	8011752 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	899b      	ldrh	r3, [r3, #12]
 801172a:	b29c      	uxth	r4, r3
 801172c:	2001      	movs	r0, #1
 801172e:	f7f9 f92b 	bl	800a988 <lwip_htons>
 8011732:	4603      	mov	r3, r0
 8011734:	461a      	mov	r2, r3
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	4322      	orrs	r2, r4
 801173c:	b292      	uxth	r2, r2
 801173e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	8b5b      	ldrh	r3, [r3, #26]
 8011744:	f043 0320 	orr.w	r3, r3, #32
 8011748:	b29a      	uxth	r2, r3
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801174e:	2300      	movs	r3, #0
 8011750:	e004      	b.n	801175c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011752:	2101      	movs	r1, #1
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 f80b 	bl	8011770 <tcp_enqueue_flags>
 801175a:	4603      	mov	r3, r0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3714      	adds	r7, #20
 8011760:	46bd      	mov	sp, r7
 8011762:	bd90      	pop	{r4, r7, pc}
 8011764:	08017f00 	.word	0x08017f00
 8011768:	08018308 	.word	0x08018308
 801176c:	08017f54 	.word	0x08017f54

08011770 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b08a      	sub	sp, #40	; 0x28
 8011774:	af02      	add	r7, sp, #8
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	460b      	mov	r3, r1
 801177a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801177c:	2300      	movs	r3, #0
 801177e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011780:	2300      	movs	r3, #0
 8011782:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011784:	78fb      	ldrb	r3, [r7, #3]
 8011786:	f003 0303 	and.w	r3, r3, #3
 801178a:	2b00      	cmp	r3, #0
 801178c:	d106      	bne.n	801179c <tcp_enqueue_flags+0x2c>
 801178e:	4b67      	ldr	r3, [pc, #412]	; (801192c <tcp_enqueue_flags+0x1bc>)
 8011790:	f240 4211 	movw	r2, #1041	; 0x411
 8011794:	4966      	ldr	r1, [pc, #408]	; (8011930 <tcp_enqueue_flags+0x1c0>)
 8011796:	4867      	ldr	r0, [pc, #412]	; (8011934 <tcp_enqueue_flags+0x1c4>)
 8011798:	f003 fe62 	bl	8015460 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d106      	bne.n	80117b0 <tcp_enqueue_flags+0x40>
 80117a2:	4b62      	ldr	r3, [pc, #392]	; (801192c <tcp_enqueue_flags+0x1bc>)
 80117a4:	f240 4213 	movw	r2, #1043	; 0x413
 80117a8:	4963      	ldr	r1, [pc, #396]	; (8011938 <tcp_enqueue_flags+0x1c8>)
 80117aa:	4862      	ldr	r0, [pc, #392]	; (8011934 <tcp_enqueue_flags+0x1c4>)
 80117ac:	f003 fe58 	bl	8015460 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80117b0:	78fb      	ldrb	r3, [r7, #3]
 80117b2:	f003 0302 	and.w	r3, r3, #2
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d001      	beq.n	80117be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80117ba:	2301      	movs	r3, #1
 80117bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80117be:	7ffb      	ldrb	r3, [r7, #31]
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	b2db      	uxtb	r3, r3
 80117c4:	f003 0304 	and.w	r3, r3, #4
 80117c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80117ca:	7dfb      	ldrb	r3, [r7, #23]
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80117d2:	4619      	mov	r1, r3
 80117d4:	2036      	movs	r0, #54	; 0x36
 80117d6:	f7fa f951 	bl	800ba7c <pbuf_alloc>
 80117da:	6138      	str	r0, [r7, #16]
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d109      	bne.n	80117f6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	8b5b      	ldrh	r3, [r3, #26]
 80117e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117ea:	b29a      	uxth	r2, r3
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80117f0:	f04f 33ff 	mov.w	r3, #4294967295
 80117f4:	e095      	b.n	8011922 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	895a      	ldrh	r2, [r3, #10]
 80117fa:	7dfb      	ldrb	r3, [r7, #23]
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	429a      	cmp	r2, r3
 8011800:	d206      	bcs.n	8011810 <tcp_enqueue_flags+0xa0>
 8011802:	4b4a      	ldr	r3, [pc, #296]	; (801192c <tcp_enqueue_flags+0x1bc>)
 8011804:	f240 4239 	movw	r2, #1081	; 0x439
 8011808:	494c      	ldr	r1, [pc, #304]	; (801193c <tcp_enqueue_flags+0x1cc>)
 801180a:	484a      	ldr	r0, [pc, #296]	; (8011934 <tcp_enqueue_flags+0x1c4>)
 801180c:	f003 fe28 	bl	8015460 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011814:	78fa      	ldrb	r2, [r7, #3]
 8011816:	7ffb      	ldrb	r3, [r7, #31]
 8011818:	9300      	str	r3, [sp, #0]
 801181a:	460b      	mov	r3, r1
 801181c:	6939      	ldr	r1, [r7, #16]
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f7ff f918 	bl	8010a54 <tcp_create_segment>
 8011824:	60f8      	str	r0, [r7, #12]
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d109      	bne.n	8011840 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	8b5b      	ldrh	r3, [r3, #26]
 8011830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011834:	b29a      	uxth	r2, r3
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801183a:	f04f 33ff 	mov.w	r3, #4294967295
 801183e:	e070      	b.n	8011922 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	f003 0303 	and.w	r3, r3, #3
 8011848:	2b00      	cmp	r3, #0
 801184a:	d006      	beq.n	801185a <tcp_enqueue_flags+0xea>
 801184c:	4b37      	ldr	r3, [pc, #220]	; (801192c <tcp_enqueue_flags+0x1bc>)
 801184e:	f240 4242 	movw	r2, #1090	; 0x442
 8011852:	493b      	ldr	r1, [pc, #236]	; (8011940 <tcp_enqueue_flags+0x1d0>)
 8011854:	4837      	ldr	r0, [pc, #220]	; (8011934 <tcp_enqueue_flags+0x1c4>)
 8011856:	f003 fe03 	bl	8015460 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	891b      	ldrh	r3, [r3, #8]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d006      	beq.n	8011870 <tcp_enqueue_flags+0x100>
 8011862:	4b32      	ldr	r3, [pc, #200]	; (801192c <tcp_enqueue_flags+0x1bc>)
 8011864:	f240 4243 	movw	r2, #1091	; 0x443
 8011868:	4936      	ldr	r1, [pc, #216]	; (8011944 <tcp_enqueue_flags+0x1d4>)
 801186a:	4832      	ldr	r0, [pc, #200]	; (8011934 <tcp_enqueue_flags+0x1c4>)
 801186c:	f003 fdf8 	bl	8015460 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011874:	2b00      	cmp	r3, #0
 8011876:	d103      	bne.n	8011880 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	66da      	str	r2, [r3, #108]	; 0x6c
 801187e:	e00d      	b.n	801189c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011884:	61bb      	str	r3, [r7, #24]
 8011886:	e002      	b.n	801188e <tcp_enqueue_flags+0x11e>
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	61bb      	str	r3, [r7, #24]
 801188e:	69bb      	ldr	r3, [r7, #24]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d1f8      	bne.n	8011888 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011896:	69bb      	ldr	r3, [r7, #24]
 8011898:	68fa      	ldr	r2, [r7, #12]
 801189a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2200      	movs	r2, #0
 80118a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80118a4:	78fb      	ldrb	r3, [r7, #3]
 80118a6:	f003 0302 	and.w	r3, r3, #2
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d104      	bne.n	80118b8 <tcp_enqueue_flags+0x148>
 80118ae:	78fb      	ldrb	r3, [r7, #3]
 80118b0:	f003 0301 	and.w	r3, r3, #1
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d004      	beq.n	80118c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80118bc:	1c5a      	adds	r2, r3, #1
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80118c2:	78fb      	ldrb	r3, [r7, #3]
 80118c4:	f003 0301 	and.w	r3, r3, #1
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d006      	beq.n	80118da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	8b5b      	ldrh	r3, [r3, #26]
 80118d0:	f043 0320 	orr.w	r3, r3, #32
 80118d4:	b29a      	uxth	r2, r3
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	4618      	mov	r0, r3
 80118e0:	f7fa fc38 	bl	800c154 <pbuf_clen>
 80118e4:	4603      	mov	r3, r0
 80118e6:	461a      	mov	r2, r3
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118ee:	4413      	add	r3, r2
 80118f0:	b29a      	uxth	r2, r3
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d00e      	beq.n	8011920 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011906:	2b00      	cmp	r3, #0
 8011908:	d10a      	bne.n	8011920 <tcp_enqueue_flags+0x1b0>
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801190e:	2b00      	cmp	r3, #0
 8011910:	d106      	bne.n	8011920 <tcp_enqueue_flags+0x1b0>
 8011912:	4b06      	ldr	r3, [pc, #24]	; (801192c <tcp_enqueue_flags+0x1bc>)
 8011914:	f240 4265 	movw	r2, #1125	; 0x465
 8011918:	490b      	ldr	r1, [pc, #44]	; (8011948 <tcp_enqueue_flags+0x1d8>)
 801191a:	4806      	ldr	r0, [pc, #24]	; (8011934 <tcp_enqueue_flags+0x1c4>)
 801191c:	f003 fda0 	bl	8015460 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011920:	2300      	movs	r3, #0
}
 8011922:	4618      	mov	r0, r3
 8011924:	3720      	adds	r7, #32
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	08017f00 	.word	0x08017f00
 8011930:	08018324 	.word	0x08018324
 8011934:	08017f54 	.word	0x08017f54
 8011938:	0801837c 	.word	0x0801837c
 801193c:	0801839c 	.word	0x0801839c
 8011940:	080183d8 	.word	0x080183d8
 8011944:	080183f0 	.word	0x080183f0
 8011948:	0801841c 	.word	0x0801841c

0801194c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801194c:	b5b0      	push	{r4, r5, r7, lr}
 801194e:	b08a      	sub	sp, #40	; 0x28
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d106      	bne.n	8011968 <tcp_output+0x1c>
 801195a:	4b8a      	ldr	r3, [pc, #552]	; (8011b84 <tcp_output+0x238>)
 801195c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011960:	4989      	ldr	r1, [pc, #548]	; (8011b88 <tcp_output+0x23c>)
 8011962:	488a      	ldr	r0, [pc, #552]	; (8011b8c <tcp_output+0x240>)
 8011964:	f003 fd7c 	bl	8015460 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	7d1b      	ldrb	r3, [r3, #20]
 801196c:	2b01      	cmp	r3, #1
 801196e:	d106      	bne.n	801197e <tcp_output+0x32>
 8011970:	4b84      	ldr	r3, [pc, #528]	; (8011b84 <tcp_output+0x238>)
 8011972:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011976:	4986      	ldr	r1, [pc, #536]	; (8011b90 <tcp_output+0x244>)
 8011978:	4884      	ldr	r0, [pc, #528]	; (8011b8c <tcp_output+0x240>)
 801197a:	f003 fd71 	bl	8015460 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801197e:	4b85      	ldr	r3, [pc, #532]	; (8011b94 <tcp_output+0x248>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	687a      	ldr	r2, [r7, #4]
 8011984:	429a      	cmp	r2, r3
 8011986:	d101      	bne.n	801198c <tcp_output+0x40>
    return ERR_OK;
 8011988:	2300      	movs	r3, #0
 801198a:	e1ce      	b.n	8011d2a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011998:	4293      	cmp	r3, r2
 801199a:	bf28      	it	cs
 801199c:	4613      	movcs	r3, r2
 801199e:	b29b      	uxth	r3, r3
 80119a0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80119a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d10b      	bne.n	80119c6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	8b5b      	ldrh	r3, [r3, #26]
 80119b2:	f003 0302 	and.w	r3, r3, #2
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	f000 81aa 	beq.w	8011d10 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f000 fdcb 	bl	8012558 <tcp_send_empty_ack>
 80119c2:	4603      	mov	r3, r0
 80119c4:	e1b1      	b.n	8011d2a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80119c6:	6879      	ldr	r1, [r7, #4]
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	3304      	adds	r3, #4
 80119cc:	461a      	mov	r2, r3
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f7ff f824 	bl	8010a1c <tcp_route>
 80119d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d102      	bne.n	80119e2 <tcp_output+0x96>
    return ERR_RTE;
 80119dc:	f06f 0303 	mvn.w	r3, #3
 80119e0:	e1a3      	b.n	8011d2a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d003      	beq.n	80119f0 <tcp_output+0xa4>
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d111      	bne.n	8011a14 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80119f0:	697b      	ldr	r3, [r7, #20]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d002      	beq.n	80119fc <tcp_output+0xb0>
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	3304      	adds	r3, #4
 80119fa:	e000      	b.n	80119fe <tcp_output+0xb2>
 80119fc:	2300      	movs	r3, #0
 80119fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d102      	bne.n	8011a0c <tcp_output+0xc0>
      return ERR_RTE;
 8011a06:	f06f 0303 	mvn.w	r3, #3
 8011a0a:	e18e      	b.n	8011d2a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7f8 ffc9 	bl	800a9b2 <lwip_htonl>
 8011a20:	4602      	mov	r2, r0
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a26:	1ad3      	subs	r3, r2, r3
 8011a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a2a:	8912      	ldrh	r2, [r2, #8]
 8011a2c:	4413      	add	r3, r2
 8011a2e:	69ba      	ldr	r2, [r7, #24]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d227      	bcs.n	8011a84 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a3a:	461a      	mov	r2, r3
 8011a3c:	69bb      	ldr	r3, [r7, #24]
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d114      	bne.n	8011a6c <tcp_output+0x120>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d110      	bne.n	8011a6c <tcp_output+0x120>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d10b      	bne.n	8011a6c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2200      	movs	r2, #0
 8011a58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2201      	movs	r2, #1
 8011a60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	8b5b      	ldrh	r3, [r3, #26]
 8011a70:	f003 0302 	and.w	r3, r3, #2
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	f000 814d 	beq.w	8011d14 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f000 fd6c 	bl	8012558 <tcp_send_empty_ack>
 8011a80:	4603      	mov	r3, r0
 8011a82:	e152      	b.n	8011d2a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2200      	movs	r2, #0
 8011a88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a90:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011a92:	6a3b      	ldr	r3, [r7, #32]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	f000 811c 	beq.w	8011cd2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011a9a:	e002      	b.n	8011aa2 <tcp_output+0x156>
 8011a9c:	6a3b      	ldr	r3, [r7, #32]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	623b      	str	r3, [r7, #32]
 8011aa2:	6a3b      	ldr	r3, [r7, #32]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d1f8      	bne.n	8011a9c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011aaa:	e112      	b.n	8011cd2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	899b      	ldrh	r3, [r3, #12]
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7f8 ff67 	bl	800a988 <lwip_htons>
 8011aba:	4603      	mov	r3, r0
 8011abc:	b2db      	uxtb	r3, r3
 8011abe:	f003 0304 	and.w	r3, r3, #4
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d006      	beq.n	8011ad4 <tcp_output+0x188>
 8011ac6:	4b2f      	ldr	r3, [pc, #188]	; (8011b84 <tcp_output+0x238>)
 8011ac8:	f240 5236 	movw	r2, #1334	; 0x536
 8011acc:	4932      	ldr	r1, [pc, #200]	; (8011b98 <tcp_output+0x24c>)
 8011ace:	482f      	ldr	r0, [pc, #188]	; (8011b8c <tcp_output+0x240>)
 8011ad0:	f003 fcc6 	bl	8015460 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d01f      	beq.n	8011b1c <tcp_output+0x1d0>
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	8b5b      	ldrh	r3, [r3, #26]
 8011ae0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d119      	bne.n	8011b1c <tcp_output+0x1d0>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d00b      	beq.n	8011b08 <tcp_output+0x1bc>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d110      	bne.n	8011b1c <tcp_output+0x1d0>
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011afe:	891a      	ldrh	r2, [r3, #8]
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d209      	bcs.n	8011b1c <tcp_output+0x1d0>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d004      	beq.n	8011b1c <tcp_output+0x1d0>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011b18:	2b08      	cmp	r3, #8
 8011b1a:	d901      	bls.n	8011b20 <tcp_output+0x1d4>
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e000      	b.n	8011b22 <tcp_output+0x1d6>
 8011b20:	2300      	movs	r3, #0
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d106      	bne.n	8011b34 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	8b5b      	ldrh	r3, [r3, #26]
 8011b2a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	f000 80e4 	beq.w	8011cfc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	7d1b      	ldrb	r3, [r3, #20]
 8011b38:	2b02      	cmp	r3, #2
 8011b3a:	d00d      	beq.n	8011b58 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3e:	68db      	ldr	r3, [r3, #12]
 8011b40:	899b      	ldrh	r3, [r3, #12]
 8011b42:	b29c      	uxth	r4, r3
 8011b44:	2010      	movs	r0, #16
 8011b46:	f7f8 ff1f 	bl	800a988 <lwip_htons>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b50:	68db      	ldr	r3, [r3, #12]
 8011b52:	4322      	orrs	r2, r4
 8011b54:	b292      	uxth	r2, r2
 8011b56:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011b58:	697a      	ldr	r2, [r7, #20]
 8011b5a:	6879      	ldr	r1, [r7, #4]
 8011b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b5e:	f000 f909 	bl	8011d74 <tcp_output_segment>
 8011b62:	4603      	mov	r3, r0
 8011b64:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d016      	beq.n	8011b9c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	8b5b      	ldrh	r3, [r3, #26]
 8011b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	835a      	strh	r2, [r3, #26]
      return err;
 8011b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b80:	e0d3      	b.n	8011d2a <tcp_output+0x3de>
 8011b82:	bf00      	nop
 8011b84:	08017f00 	.word	0x08017f00
 8011b88:	08018444 	.word	0x08018444
 8011b8c:	08017f54 	.word	0x08017f54
 8011b90:	0801845c 	.word	0x0801845c
 8011b94:	20008bec 	.word	0x20008bec
 8011b98:	08018484 	.word	0x08018484
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b9e:	681a      	ldr	r2, [r3, #0]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	7d1b      	ldrb	r3, [r3, #20]
 8011ba8:	2b02      	cmp	r3, #2
 8011baa:	d006      	beq.n	8011bba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	8b5b      	ldrh	r3, [r3, #26]
 8011bb0:	f023 0303 	bic.w	r3, r3, #3
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bbc:	68db      	ldr	r3, [r3, #12]
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7f8 fef6 	bl	800a9b2 <lwip_htonl>
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bca:	891b      	ldrh	r3, [r3, #8]
 8011bcc:	461d      	mov	r5, r3
 8011bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd0:	68db      	ldr	r3, [r3, #12]
 8011bd2:	899b      	ldrh	r3, [r3, #12]
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7f8 fed6 	bl	800a988 <lwip_htons>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	f003 0303 	and.w	r3, r3, #3
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d001      	beq.n	8011bec <tcp_output+0x2a0>
 8011be8:	2301      	movs	r3, #1
 8011bea:	e000      	b.n	8011bee <tcp_output+0x2a2>
 8011bec:	2300      	movs	r3, #0
 8011bee:	442b      	add	r3, r5
 8011bf0:	4423      	add	r3, r4
 8011bf2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	1ad3      	subs	r3, r2, r3
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	da02      	bge.n	8011c06 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	68ba      	ldr	r2, [r7, #8]
 8011c04:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c08:	891b      	ldrh	r3, [r3, #8]
 8011c0a:	461c      	mov	r4, r3
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	899b      	ldrh	r3, [r3, #12]
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7f8 feb7 	bl	800a988 <lwip_htons>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	f003 0303 	and.w	r3, r3, #3
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d001      	beq.n	8011c2a <tcp_output+0x2de>
 8011c26:	2301      	movs	r3, #1
 8011c28:	e000      	b.n	8011c2c <tcp_output+0x2e0>
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	4423      	add	r3, r4
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d049      	beq.n	8011cc6 <tcp_output+0x37a>
      seg->next = NULL;
 8011c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c34:	2200      	movs	r2, #0
 8011c36:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d105      	bne.n	8011c4c <tcp_output+0x300>
        pcb->unacked = seg;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c44:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c48:	623b      	str	r3, [r7, #32]
 8011c4a:	e03f      	b.n	8011ccc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4e:	68db      	ldr	r3, [r3, #12]
 8011c50:	685b      	ldr	r3, [r3, #4]
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7f8 fead 	bl	800a9b2 <lwip_htonl>
 8011c58:	4604      	mov	r4, r0
 8011c5a:	6a3b      	ldr	r3, [r7, #32]
 8011c5c:	68db      	ldr	r3, [r3, #12]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7f8 fea6 	bl	800a9b2 <lwip_htonl>
 8011c66:	4603      	mov	r3, r0
 8011c68:	1ae3      	subs	r3, r4, r3
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	da24      	bge.n	8011cb8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	3370      	adds	r3, #112	; 0x70
 8011c72:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c74:	e002      	b.n	8011c7c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011c76:	69fb      	ldr	r3, [r7, #28]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c7c:	69fb      	ldr	r3, [r7, #28]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d011      	beq.n	8011ca8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011c84:	69fb      	ldr	r3, [r7, #28]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	685b      	ldr	r3, [r3, #4]
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7f8 fe90 	bl	800a9b2 <lwip_htonl>
 8011c92:	4604      	mov	r4, r0
 8011c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	685b      	ldr	r3, [r3, #4]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7f8 fe89 	bl	800a9b2 <lwip_htonl>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	dbe6      	blt.n	8011c76 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cb4:	601a      	str	r2, [r3, #0]
 8011cb6:	e009      	b.n	8011ccc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011cb8:	6a3b      	ldr	r3, [r7, #32]
 8011cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cbc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011cbe:	6a3b      	ldr	r3, [r7, #32]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	623b      	str	r3, [r7, #32]
 8011cc4:	e002      	b.n	8011ccc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011cc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cc8:	f7fb ff01 	bl	800dace <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cd0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d012      	beq.n	8011cfe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7f8 fe67 	bl	800a9b2 <lwip_htonl>
 8011ce4:	4602      	mov	r2, r0
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cee:	8912      	ldrh	r2, [r2, #8]
 8011cf0:	4413      	add	r3, r2
  while (seg != NULL &&
 8011cf2:	69ba      	ldr	r2, [r7, #24]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	f4bf aed9 	bcs.w	8011aac <tcp_output+0x160>
 8011cfa:	e000      	b.n	8011cfe <tcp_output+0x3b2>
      break;
 8011cfc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d108      	bne.n	8011d18 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011d0e:	e004      	b.n	8011d1a <tcp_output+0x3ce>
    goto output_done;
 8011d10:	bf00      	nop
 8011d12:	e002      	b.n	8011d1a <tcp_output+0x3ce>
    goto output_done;
 8011d14:	bf00      	nop
 8011d16:	e000      	b.n	8011d1a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011d18:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	8b5b      	ldrh	r3, [r3, #26]
 8011d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011d22:	b29a      	uxth	r2, r3
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011d28:	2300      	movs	r3, #0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3728      	adds	r7, #40	; 0x28
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bdb0      	pop	{r4, r5, r7, pc}
 8011d32:	bf00      	nop

08011d34 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d106      	bne.n	8011d50 <tcp_output_segment_busy+0x1c>
 8011d42:	4b09      	ldr	r3, [pc, #36]	; (8011d68 <tcp_output_segment_busy+0x34>)
 8011d44:	f240 529a 	movw	r2, #1434	; 0x59a
 8011d48:	4908      	ldr	r1, [pc, #32]	; (8011d6c <tcp_output_segment_busy+0x38>)
 8011d4a:	4809      	ldr	r0, [pc, #36]	; (8011d70 <tcp_output_segment_busy+0x3c>)
 8011d4c:	f003 fb88 	bl	8015460 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	7b9b      	ldrb	r3, [r3, #14]
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d001      	beq.n	8011d5e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e000      	b.n	8011d60 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011d5e:	2300      	movs	r3, #0
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	08017f00 	.word	0x08017f00
 8011d6c:	0801849c 	.word	0x0801849c
 8011d70:	08017f54 	.word	0x08017f54

08011d74 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011d74:	b5b0      	push	{r4, r5, r7, lr}
 8011d76:	b08c      	sub	sp, #48	; 0x30
 8011d78:	af04      	add	r7, sp, #16
 8011d7a:	60f8      	str	r0, [r7, #12]
 8011d7c:	60b9      	str	r1, [r7, #8]
 8011d7e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d106      	bne.n	8011d94 <tcp_output_segment+0x20>
 8011d86:	4b63      	ldr	r3, [pc, #396]	; (8011f14 <tcp_output_segment+0x1a0>)
 8011d88:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011d8c:	4962      	ldr	r1, [pc, #392]	; (8011f18 <tcp_output_segment+0x1a4>)
 8011d8e:	4863      	ldr	r0, [pc, #396]	; (8011f1c <tcp_output_segment+0x1a8>)
 8011d90:	f003 fb66 	bl	8015460 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d106      	bne.n	8011da8 <tcp_output_segment+0x34>
 8011d9a:	4b5e      	ldr	r3, [pc, #376]	; (8011f14 <tcp_output_segment+0x1a0>)
 8011d9c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011da0:	495f      	ldr	r1, [pc, #380]	; (8011f20 <tcp_output_segment+0x1ac>)
 8011da2:	485e      	ldr	r0, [pc, #376]	; (8011f1c <tcp_output_segment+0x1a8>)
 8011da4:	f003 fb5c 	bl	8015460 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d106      	bne.n	8011dbc <tcp_output_segment+0x48>
 8011dae:	4b59      	ldr	r3, [pc, #356]	; (8011f14 <tcp_output_segment+0x1a0>)
 8011db0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011db4:	495b      	ldr	r1, [pc, #364]	; (8011f24 <tcp_output_segment+0x1b0>)
 8011db6:	4859      	ldr	r0, [pc, #356]	; (8011f1c <tcp_output_segment+0x1a8>)
 8011db8:	f003 fb52 	bl	8015460 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011dbc:	68f8      	ldr	r0, [r7, #12]
 8011dbe:	f7ff ffb9 	bl	8011d34 <tcp_output_segment_busy>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d001      	beq.n	8011dcc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	e09f      	b.n	8011f0c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	68dc      	ldr	r4, [r3, #12]
 8011dd4:	4610      	mov	r0, r2
 8011dd6:	f7f8 fdec 	bl	800a9b2 <lwip_htonl>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	68dc      	ldr	r4, [r3, #12]
 8011de6:	4610      	mov	r0, r2
 8011de8:	f7f8 fdce 	bl	800a988 <lwip_htons>
 8011dec:	4603      	mov	r3, r0
 8011dee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011df4:	68ba      	ldr	r2, [r7, #8]
 8011df6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011df8:	441a      	add	r2, r3
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	3314      	adds	r3, #20
 8011e04:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	7a9b      	ldrb	r3, [r3, #10]
 8011e0a:	f003 0301 	and.w	r3, r3, #1
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d015      	beq.n	8011e3e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	3304      	adds	r3, #4
 8011e16:	461a      	mov	r2, r3
 8011e18:	6879      	ldr	r1, [r7, #4]
 8011e1a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011e1e:	f7fc fa33 	bl	800e288 <tcp_eff_send_mss_netif>
 8011e22:	4603      	mov	r3, r0
 8011e24:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011e26:	8b7b      	ldrh	r3, [r7, #26]
 8011e28:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7f8 fdc0 	bl	800a9b2 <lwip_htonl>
 8011e32:	4602      	mov	r2, r0
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011e38:	69fb      	ldr	r3, [r7, #28]
 8011e3a:	3304      	adds	r3, #4
 8011e3c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	da02      	bge.n	8011e4e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d10c      	bne.n	8011e70 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011e56:	4b34      	ldr	r3, [pc, #208]	; (8011f28 <tcp_output_segment+0x1b4>)
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	68db      	ldr	r3, [r3, #12]
 8011e62:	685b      	ldr	r3, [r3, #4]
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7f8 fda4 	bl	800a9b2 <lwip_htonl>
 8011e6a:	4602      	mov	r2, r0
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	68da      	ldr	r2, [r3, #12]
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	685b      	ldr	r3, [r3, #4]
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	1ad3      	subs	r3, r2, r3
 8011e7c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	8959      	ldrh	r1, [r3, #10]
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	685b      	ldr	r3, [r3, #4]
 8011e88:	8b3a      	ldrh	r2, [r7, #24]
 8011e8a:	1a8a      	subs	r2, r1, r2
 8011e8c:	b292      	uxth	r2, r2
 8011e8e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	8919      	ldrh	r1, [r3, #8]
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	8b3a      	ldrh	r2, [r7, #24]
 8011e9c:	1a8a      	subs	r2, r1, r2
 8011e9e:	b292      	uxth	r2, r2
 8011ea0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	68d2      	ldr	r2, [r2, #12]
 8011eaa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	68db      	ldr	r3, [r3, #12]
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	741a      	strb	r2, [r3, #16]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	f103 0214 	add.w	r2, r3, #20
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	7a9b      	ldrb	r3, [r3, #10]
 8011ec4:	009b      	lsls	r3, r3, #2
 8011ec6:	f003 0304 	and.w	r3, r3, #4
 8011eca:	4413      	add	r3, r2
 8011ecc:	69fa      	ldr	r2, [r7, #28]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d006      	beq.n	8011ee0 <tcp_output_segment+0x16c>
 8011ed2:	4b10      	ldr	r3, [pc, #64]	; (8011f14 <tcp_output_segment+0x1a0>)
 8011ed4:	f240 621c 	movw	r2, #1564	; 0x61c
 8011ed8:	4914      	ldr	r1, [pc, #80]	; (8011f2c <tcp_output_segment+0x1b8>)
 8011eda:	4810      	ldr	r0, [pc, #64]	; (8011f1c <tcp_output_segment+0x1a8>)
 8011edc:	f003 fac0 	bl	8015460 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	6858      	ldr	r0, [r3, #4]
 8011ee4:	68b9      	ldr	r1, [r7, #8]
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	1d1c      	adds	r4, r3, #4
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	7add      	ldrb	r5, [r3, #11]
 8011eee:	68bb      	ldr	r3, [r7, #8]
 8011ef0:	7a9b      	ldrb	r3, [r3, #10]
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	9202      	str	r2, [sp, #8]
 8011ef6:	2206      	movs	r2, #6
 8011ef8:	9201      	str	r2, [sp, #4]
 8011efa:	9300      	str	r3, [sp, #0]
 8011efc:	462b      	mov	r3, r5
 8011efe:	4622      	mov	r2, r4
 8011f00:	f002 fa36 	bl	8014370 <ip4_output_if>
 8011f04:	4603      	mov	r3, r0
 8011f06:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3720      	adds	r7, #32
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bdb0      	pop	{r4, r5, r7, pc}
 8011f14:	08017f00 	.word	0x08017f00
 8011f18:	080184c4 	.word	0x080184c4
 8011f1c:	08017f54 	.word	0x08017f54
 8011f20:	080184e4 	.word	0x080184e4
 8011f24:	08018504 	.word	0x08018504
 8011f28:	20008ba0 	.word	0x20008ba0
 8011f2c:	08018528 	.word	0x08018528

08011f30 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011f30:	b5b0      	push	{r4, r5, r7, lr}
 8011f32:	b084      	sub	sp, #16
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d106      	bne.n	8011f4c <tcp_rexmit_rto_prepare+0x1c>
 8011f3e:	4b31      	ldr	r3, [pc, #196]	; (8012004 <tcp_rexmit_rto_prepare+0xd4>)
 8011f40:	f240 6263 	movw	r2, #1635	; 0x663
 8011f44:	4930      	ldr	r1, [pc, #192]	; (8012008 <tcp_rexmit_rto_prepare+0xd8>)
 8011f46:	4831      	ldr	r0, [pc, #196]	; (801200c <tcp_rexmit_rto_prepare+0xdc>)
 8011f48:	f003 fa8a 	bl	8015460 <iprintf>

  if (pcb->unacked == NULL) {
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d102      	bne.n	8011f5a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011f54:	f06f 0305 	mvn.w	r3, #5
 8011f58:	e050      	b.n	8011ffc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f5e:	60fb      	str	r3, [r7, #12]
 8011f60:	e00b      	b.n	8011f7a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011f62:	68f8      	ldr	r0, [r7, #12]
 8011f64:	f7ff fee6 	bl	8011d34 <tcp_output_segment_busy>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d002      	beq.n	8011f74 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011f6e:	f06f 0305 	mvn.w	r3, #5
 8011f72:	e043      	b.n	8011ffc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	60fb      	str	r3, [r7, #12]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d1ef      	bne.n	8011f62 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011f82:	68f8      	ldr	r0, [r7, #12]
 8011f84:	f7ff fed6 	bl	8011d34 <tcp_output_segment_busy>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d002      	beq.n	8011f94 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011f8e:	f06f 0305 	mvn.w	r3, #5
 8011f92:	e033      	b.n	8011ffc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	8b5b      	ldrh	r3, [r3, #26]
 8011fae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011fb2:	b29a      	uxth	r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7f8 fcf7 	bl	800a9b2 <lwip_htonl>
 8011fc4:	4604      	mov	r4, r0
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	891b      	ldrh	r3, [r3, #8]
 8011fca:	461d      	mov	r5, r3
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	899b      	ldrh	r3, [r3, #12]
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7f8 fcd7 	bl	800a988 <lwip_htons>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	b2db      	uxtb	r3, r3
 8011fde:	f003 0303 	and.w	r3, r3, #3
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d001      	beq.n	8011fea <tcp_rexmit_rto_prepare+0xba>
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	e000      	b.n	8011fec <tcp_rexmit_rto_prepare+0xbc>
 8011fea:	2300      	movs	r3, #0
 8011fec:	442b      	add	r3, r5
 8011fee:	18e2      	adds	r2, r4, r3
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011ffa:	2300      	movs	r3, #0
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3710      	adds	r7, #16
 8012000:	46bd      	mov	sp, r7
 8012002:	bdb0      	pop	{r4, r5, r7, pc}
 8012004:	08017f00 	.word	0x08017f00
 8012008:	0801853c 	.word	0x0801853c
 801200c:	08017f54 	.word	0x08017f54

08012010 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b082      	sub	sp, #8
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d106      	bne.n	801202c <tcp_rexmit_rto_commit+0x1c>
 801201e:	4b0d      	ldr	r3, [pc, #52]	; (8012054 <tcp_rexmit_rto_commit+0x44>)
 8012020:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012024:	490c      	ldr	r1, [pc, #48]	; (8012058 <tcp_rexmit_rto_commit+0x48>)
 8012026:	480d      	ldr	r0, [pc, #52]	; (801205c <tcp_rexmit_rto_commit+0x4c>)
 8012028:	f003 fa1a 	bl	8015460 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012032:	2bff      	cmp	r3, #255	; 0xff
 8012034:	d007      	beq.n	8012046 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801203c:	3301      	adds	r3, #1
 801203e:	b2da      	uxtb	r2, r3
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f7ff fc80 	bl	801194c <tcp_output>
}
 801204c:	bf00      	nop
 801204e:	3708      	adds	r7, #8
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	08017f00 	.word	0x08017f00
 8012058:	08018560 	.word	0x08018560
 801205c:	08017f54 	.word	0x08017f54

08012060 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d106      	bne.n	801207c <tcp_rexmit_rto+0x1c>
 801206e:	4b0a      	ldr	r3, [pc, #40]	; (8012098 <tcp_rexmit_rto+0x38>)
 8012070:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012074:	4909      	ldr	r1, [pc, #36]	; (801209c <tcp_rexmit_rto+0x3c>)
 8012076:	480a      	ldr	r0, [pc, #40]	; (80120a0 <tcp_rexmit_rto+0x40>)
 8012078:	f003 f9f2 	bl	8015460 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f7ff ff57 	bl	8011f30 <tcp_rexmit_rto_prepare>
 8012082:	4603      	mov	r3, r0
 8012084:	2b00      	cmp	r3, #0
 8012086:	d102      	bne.n	801208e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f7ff ffc1 	bl	8012010 <tcp_rexmit_rto_commit>
  }
}
 801208e:	bf00      	nop
 8012090:	3708      	adds	r7, #8
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
 8012096:	bf00      	nop
 8012098:	08017f00 	.word	0x08017f00
 801209c:	08018584 	.word	0x08018584
 80120a0:	08017f54 	.word	0x08017f54

080120a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80120a4:	b590      	push	{r4, r7, lr}
 80120a6:	b085      	sub	sp, #20
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d106      	bne.n	80120c0 <tcp_rexmit+0x1c>
 80120b2:	4b2f      	ldr	r3, [pc, #188]	; (8012170 <tcp_rexmit+0xcc>)
 80120b4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80120b8:	492e      	ldr	r1, [pc, #184]	; (8012174 <tcp_rexmit+0xd0>)
 80120ba:	482f      	ldr	r0, [pc, #188]	; (8012178 <tcp_rexmit+0xd4>)
 80120bc:	f003 f9d0 	bl	8015460 <iprintf>

  if (pcb->unacked == NULL) {
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d102      	bne.n	80120ce <tcp_rexmit+0x2a>
    return ERR_VAL;
 80120c8:	f06f 0305 	mvn.w	r3, #5
 80120cc:	e04c      	b.n	8012168 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120d2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80120d4:	68b8      	ldr	r0, [r7, #8]
 80120d6:	f7ff fe2d 	bl	8011d34 <tcp_output_segment_busy>
 80120da:	4603      	mov	r3, r0
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d002      	beq.n	80120e6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80120e0:	f06f 0305 	mvn.w	r3, #5
 80120e4:	e040      	b.n	8012168 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	336c      	adds	r3, #108	; 0x6c
 80120f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80120f4:	e002      	b.n	80120fc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d011      	beq.n	8012128 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	4618      	mov	r0, r3
 801210e:	f7f8 fc50 	bl	800a9b2 <lwip_htonl>
 8012112:	4604      	mov	r4, r0
 8012114:	68bb      	ldr	r3, [r7, #8]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	4618      	mov	r0, r3
 801211c:	f7f8 fc49 	bl	800a9b2 <lwip_htonl>
 8012120:	4603      	mov	r3, r0
 8012122:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012124:	2b00      	cmp	r3, #0
 8012126:	dbe6      	blt.n	80120f6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681a      	ldr	r2, [r3, #0]
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	68ba      	ldr	r2, [r7, #8]
 8012134:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d103      	bne.n	8012146 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	2200      	movs	r2, #0
 8012142:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801214c:	2bff      	cmp	r3, #255	; 0xff
 801214e:	d007      	beq.n	8012160 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012156:	3301      	adds	r3, #1
 8012158:	b2da      	uxtb	r2, r3
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2200      	movs	r2, #0
 8012164:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012166:	2300      	movs	r3, #0
}
 8012168:	4618      	mov	r0, r3
 801216a:	3714      	adds	r7, #20
 801216c:	46bd      	mov	sp, r7
 801216e:	bd90      	pop	{r4, r7, pc}
 8012170:	08017f00 	.word	0x08017f00
 8012174:	080185a0 	.word	0x080185a0
 8012178:	08017f54 	.word	0x08017f54

0801217c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d106      	bne.n	8012198 <tcp_rexmit_fast+0x1c>
 801218a:	4b2a      	ldr	r3, [pc, #168]	; (8012234 <tcp_rexmit_fast+0xb8>)
 801218c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012190:	4929      	ldr	r1, [pc, #164]	; (8012238 <tcp_rexmit_fast+0xbc>)
 8012192:	482a      	ldr	r0, [pc, #168]	; (801223c <tcp_rexmit_fast+0xc0>)
 8012194:	f003 f964 	bl	8015460 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801219c:	2b00      	cmp	r3, #0
 801219e:	d045      	beq.n	801222c <tcp_rexmit_fast+0xb0>
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	8b5b      	ldrh	r3, [r3, #26]
 80121a4:	f003 0304 	and.w	r3, r3, #4
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d13f      	bne.n	801222c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f7ff ff79 	bl	80120a4 <tcp_rexmit>
 80121b2:	4603      	mov	r3, r0
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d139      	bne.n	801222c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80121c4:	4293      	cmp	r3, r2
 80121c6:	bf28      	it	cs
 80121c8:	4613      	movcs	r3, r2
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	da00      	bge.n	80121d2 <tcp_rexmit_fast+0x56>
 80121d0:	3301      	adds	r3, #1
 80121d2:	105b      	asrs	r3, r3, #1
 80121d4:	b29a      	uxth	r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80121e2:	461a      	mov	r2, r3
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121e8:	005b      	lsls	r3, r3, #1
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d206      	bcs.n	80121fc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121f2:	005b      	lsls	r3, r3, #1
 80121f4:	b29a      	uxth	r2, r3
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012206:	4619      	mov	r1, r3
 8012208:	0049      	lsls	r1, r1, #1
 801220a:	440b      	add	r3, r1
 801220c:	b29b      	uxth	r3, r3
 801220e:	4413      	add	r3, r2
 8012210:	b29a      	uxth	r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	8b5b      	ldrh	r3, [r3, #26]
 801221c:	f043 0304 	orr.w	r3, r3, #4
 8012220:	b29a      	uxth	r2, r3
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2200      	movs	r2, #0
 801222a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801222c:	bf00      	nop
 801222e:	3708      	adds	r7, #8
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}
 8012234:	08017f00 	.word	0x08017f00
 8012238:	080185b8 	.word	0x080185b8
 801223c:	08017f54 	.word	0x08017f54

08012240 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b086      	sub	sp, #24
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	607b      	str	r3, [r7, #4]
 801224a:	460b      	mov	r3, r1
 801224c:	817b      	strh	r3, [r7, #10]
 801224e:	4613      	mov	r3, r2
 8012250:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012252:	897a      	ldrh	r2, [r7, #10]
 8012254:	893b      	ldrh	r3, [r7, #8]
 8012256:	4413      	add	r3, r2
 8012258:	b29b      	uxth	r3, r3
 801225a:	3314      	adds	r3, #20
 801225c:	b29b      	uxth	r3, r3
 801225e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012262:	4619      	mov	r1, r3
 8012264:	2022      	movs	r0, #34	; 0x22
 8012266:	f7f9 fc09 	bl	800ba7c <pbuf_alloc>
 801226a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d04d      	beq.n	801230e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012272:	897b      	ldrh	r3, [r7, #10]
 8012274:	3313      	adds	r3, #19
 8012276:	697a      	ldr	r2, [r7, #20]
 8012278:	8952      	ldrh	r2, [r2, #10]
 801227a:	4293      	cmp	r3, r2
 801227c:	db06      	blt.n	801228c <tcp_output_alloc_header_common+0x4c>
 801227e:	4b26      	ldr	r3, [pc, #152]	; (8012318 <tcp_output_alloc_header_common+0xd8>)
 8012280:	f240 7223 	movw	r2, #1827	; 0x723
 8012284:	4925      	ldr	r1, [pc, #148]	; (801231c <tcp_output_alloc_header_common+0xdc>)
 8012286:	4826      	ldr	r0, [pc, #152]	; (8012320 <tcp_output_alloc_header_common+0xe0>)
 8012288:	f003 f8ea 	bl	8015460 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012292:	8c3b      	ldrh	r3, [r7, #32]
 8012294:	4618      	mov	r0, r3
 8012296:	f7f8 fb77 	bl	800a988 <lwip_htons>
 801229a:	4603      	mov	r3, r0
 801229c:	461a      	mov	r2, r3
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80122a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7f8 fb6f 	bl	800a988 <lwip_htons>
 80122aa:	4603      	mov	r3, r0
 80122ac:	461a      	mov	r2, r3
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	f7f8 fb7a 	bl	800a9b2 <lwip_htonl>
 80122be:	4602      	mov	r2, r0
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80122c4:	897b      	ldrh	r3, [r7, #10]
 80122c6:	089b      	lsrs	r3, r3, #2
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	3305      	adds	r3, #5
 80122cc:	b29b      	uxth	r3, r3
 80122ce:	031b      	lsls	r3, r3, #12
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	4313      	orrs	r3, r2
 80122da:	b29b      	uxth	r3, r3
 80122dc:	4618      	mov	r0, r3
 80122de:	f7f8 fb53 	bl	800a988 <lwip_htons>
 80122e2:	4603      	mov	r3, r0
 80122e4:	461a      	mov	r2, r3
 80122e6:	693b      	ldr	r3, [r7, #16]
 80122e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80122ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7f8 fb4b 	bl	800a988 <lwip_htons>
 80122f2:	4603      	mov	r3, r0
 80122f4:	461a      	mov	r2, r3
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	2200      	movs	r2, #0
 80122fe:	741a      	strb	r2, [r3, #16]
 8012300:	2200      	movs	r2, #0
 8012302:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	2200      	movs	r2, #0
 8012308:	749a      	strb	r2, [r3, #18]
 801230a:	2200      	movs	r2, #0
 801230c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801230e:	697b      	ldr	r3, [r7, #20]
}
 8012310:	4618      	mov	r0, r3
 8012312:	3718      	adds	r7, #24
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}
 8012318:	08017f00 	.word	0x08017f00
 801231c:	080185d8 	.word	0x080185d8
 8012320:	08017f54 	.word	0x08017f54

08012324 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012324:	b5b0      	push	{r4, r5, r7, lr}
 8012326:	b08a      	sub	sp, #40	; 0x28
 8012328:	af04      	add	r7, sp, #16
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	607b      	str	r3, [r7, #4]
 801232e:	460b      	mov	r3, r1
 8012330:	817b      	strh	r3, [r7, #10]
 8012332:	4613      	mov	r3, r2
 8012334:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d106      	bne.n	801234a <tcp_output_alloc_header+0x26>
 801233c:	4b15      	ldr	r3, [pc, #84]	; (8012394 <tcp_output_alloc_header+0x70>)
 801233e:	f240 7242 	movw	r2, #1858	; 0x742
 8012342:	4915      	ldr	r1, [pc, #84]	; (8012398 <tcp_output_alloc_header+0x74>)
 8012344:	4815      	ldr	r0, [pc, #84]	; (801239c <tcp_output_alloc_header+0x78>)
 8012346:	f003 f88b 	bl	8015460 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	8adb      	ldrh	r3, [r3, #22]
 8012352:	68fa      	ldr	r2, [r7, #12]
 8012354:	8b12      	ldrh	r2, [r2, #24]
 8012356:	68f9      	ldr	r1, [r7, #12]
 8012358:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801235a:	893d      	ldrh	r5, [r7, #8]
 801235c:	897c      	ldrh	r4, [r7, #10]
 801235e:	9103      	str	r1, [sp, #12]
 8012360:	2110      	movs	r1, #16
 8012362:	9102      	str	r1, [sp, #8]
 8012364:	9201      	str	r2, [sp, #4]
 8012366:	9300      	str	r3, [sp, #0]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	462a      	mov	r2, r5
 801236c:	4621      	mov	r1, r4
 801236e:	f7ff ff67 	bl	8012240 <tcp_output_alloc_header_common>
 8012372:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d006      	beq.n	8012388 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801237e:	68fa      	ldr	r2, [r7, #12]
 8012380:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012382:	441a      	add	r2, r3
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012388:	697b      	ldr	r3, [r7, #20]
}
 801238a:	4618      	mov	r0, r3
 801238c:	3718      	adds	r7, #24
 801238e:	46bd      	mov	sp, r7
 8012390:	bdb0      	pop	{r4, r5, r7, pc}
 8012392:	bf00      	nop
 8012394:	08017f00 	.word	0x08017f00
 8012398:	08018608 	.word	0x08018608
 801239c:	08017f54 	.word	0x08017f54

080123a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b088      	sub	sp, #32
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	60b9      	str	r1, [r7, #8]
 80123aa:	4611      	mov	r1, r2
 80123ac:	461a      	mov	r2, r3
 80123ae:	460b      	mov	r3, r1
 80123b0:	71fb      	strb	r3, [r7, #7]
 80123b2:	4613      	mov	r3, r2
 80123b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80123b6:	2300      	movs	r3, #0
 80123b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d106      	bne.n	80123ce <tcp_output_fill_options+0x2e>
 80123c0:	4b13      	ldr	r3, [pc, #76]	; (8012410 <tcp_output_fill_options+0x70>)
 80123c2:	f240 7256 	movw	r2, #1878	; 0x756
 80123c6:	4913      	ldr	r1, [pc, #76]	; (8012414 <tcp_output_fill_options+0x74>)
 80123c8:	4813      	ldr	r0, [pc, #76]	; (8012418 <tcp_output_fill_options+0x78>)
 80123ca:	f003 f849 	bl	8015460 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80123d4:	69bb      	ldr	r3, [r7, #24]
 80123d6:	3314      	adds	r3, #20
 80123d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80123da:	69bb      	ldr	r3, [r7, #24]
 80123dc:	f103 0214 	add.w	r2, r3, #20
 80123e0:	8bfb      	ldrh	r3, [r7, #30]
 80123e2:	009b      	lsls	r3, r3, #2
 80123e4:	4619      	mov	r1, r3
 80123e6:	79fb      	ldrb	r3, [r7, #7]
 80123e8:	009b      	lsls	r3, r3, #2
 80123ea:	f003 0304 	and.w	r3, r3, #4
 80123ee:	440b      	add	r3, r1
 80123f0:	4413      	add	r3, r2
 80123f2:	697a      	ldr	r2, [r7, #20]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d006      	beq.n	8012406 <tcp_output_fill_options+0x66>
 80123f8:	4b05      	ldr	r3, [pc, #20]	; (8012410 <tcp_output_fill_options+0x70>)
 80123fa:	f240 7275 	movw	r2, #1909	; 0x775
 80123fe:	4907      	ldr	r1, [pc, #28]	; (801241c <tcp_output_fill_options+0x7c>)
 8012400:	4805      	ldr	r0, [pc, #20]	; (8012418 <tcp_output_fill_options+0x78>)
 8012402:	f003 f82d 	bl	8015460 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012406:	bf00      	nop
 8012408:	3720      	adds	r7, #32
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
 801240e:	bf00      	nop
 8012410:	08017f00 	.word	0x08017f00
 8012414:	08018630 	.word	0x08018630
 8012418:	08017f54 	.word	0x08017f54
 801241c:	08018528 	.word	0x08018528

08012420 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b08a      	sub	sp, #40	; 0x28
 8012424:	af04      	add	r7, sp, #16
 8012426:	60f8      	str	r0, [r7, #12]
 8012428:	60b9      	str	r1, [r7, #8]
 801242a:	607a      	str	r2, [r7, #4]
 801242c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d106      	bne.n	8012442 <tcp_output_control_segment+0x22>
 8012434:	4b1c      	ldr	r3, [pc, #112]	; (80124a8 <tcp_output_control_segment+0x88>)
 8012436:	f240 7287 	movw	r2, #1927	; 0x787
 801243a:	491c      	ldr	r1, [pc, #112]	; (80124ac <tcp_output_control_segment+0x8c>)
 801243c:	481c      	ldr	r0, [pc, #112]	; (80124b0 <tcp_output_control_segment+0x90>)
 801243e:	f003 f80f 	bl	8015460 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012442:	683a      	ldr	r2, [r7, #0]
 8012444:	6879      	ldr	r1, [r7, #4]
 8012446:	68f8      	ldr	r0, [r7, #12]
 8012448:	f7fe fae8 	bl	8010a1c <tcp_route>
 801244c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d102      	bne.n	801245a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012454:	23fc      	movs	r3, #252	; 0xfc
 8012456:	75fb      	strb	r3, [r7, #23]
 8012458:	e01c      	b.n	8012494 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d006      	beq.n	801246e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	7adb      	ldrb	r3, [r3, #11]
 8012464:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	7a9b      	ldrb	r3, [r3, #10]
 801246a:	757b      	strb	r3, [r7, #21]
 801246c:	e003      	b.n	8012476 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801246e:	23ff      	movs	r3, #255	; 0xff
 8012470:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012472:	2300      	movs	r3, #0
 8012474:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012476:	7dba      	ldrb	r2, [r7, #22]
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	9302      	str	r3, [sp, #8]
 801247c:	2306      	movs	r3, #6
 801247e:	9301      	str	r3, [sp, #4]
 8012480:	7d7b      	ldrb	r3, [r7, #21]
 8012482:	9300      	str	r3, [sp, #0]
 8012484:	4613      	mov	r3, r2
 8012486:	683a      	ldr	r2, [r7, #0]
 8012488:	6879      	ldr	r1, [r7, #4]
 801248a:	68b8      	ldr	r0, [r7, #8]
 801248c:	f001 ff70 	bl	8014370 <ip4_output_if>
 8012490:	4603      	mov	r3, r0
 8012492:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012494:	68b8      	ldr	r0, [r7, #8]
 8012496:	f7f9 fdd5 	bl	800c044 <pbuf_free>
  return err;
 801249a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3718      	adds	r7, #24
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	08017f00 	.word	0x08017f00
 80124ac:	08018658 	.word	0x08018658
 80124b0:	08017f54 	.word	0x08017f54

080124b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80124b4:	b590      	push	{r4, r7, lr}
 80124b6:	b08b      	sub	sp, #44	; 0x2c
 80124b8:	af04      	add	r7, sp, #16
 80124ba:	60f8      	str	r0, [r7, #12]
 80124bc:	60b9      	str	r1, [r7, #8]
 80124be:	607a      	str	r2, [r7, #4]
 80124c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d106      	bne.n	80124d6 <tcp_rst+0x22>
 80124c8:	4b1f      	ldr	r3, [pc, #124]	; (8012548 <tcp_rst+0x94>)
 80124ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80124ce:	491f      	ldr	r1, [pc, #124]	; (801254c <tcp_rst+0x98>)
 80124d0:	481f      	ldr	r0, [pc, #124]	; (8012550 <tcp_rst+0x9c>)
 80124d2:	f002 ffc5 	bl	8015460 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80124d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d106      	bne.n	80124ea <tcp_rst+0x36>
 80124dc:	4b1a      	ldr	r3, [pc, #104]	; (8012548 <tcp_rst+0x94>)
 80124de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80124e2:	491c      	ldr	r1, [pc, #112]	; (8012554 <tcp_rst+0xa0>)
 80124e4:	481a      	ldr	r0, [pc, #104]	; (8012550 <tcp_rst+0x9c>)
 80124e6:	f002 ffbb 	bl	8015460 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124ea:	2300      	movs	r3, #0
 80124ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80124ee:	f246 0308 	movw	r3, #24584	; 0x6008
 80124f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80124f4:	7dfb      	ldrb	r3, [r7, #23]
 80124f6:	b29c      	uxth	r4, r3
 80124f8:	68b8      	ldr	r0, [r7, #8]
 80124fa:	f7f8 fa5a 	bl	800a9b2 <lwip_htonl>
 80124fe:	4602      	mov	r2, r0
 8012500:	8abb      	ldrh	r3, [r7, #20]
 8012502:	9303      	str	r3, [sp, #12]
 8012504:	2314      	movs	r3, #20
 8012506:	9302      	str	r3, [sp, #8]
 8012508:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801250a:	9301      	str	r3, [sp, #4]
 801250c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801250e:	9300      	str	r3, [sp, #0]
 8012510:	4613      	mov	r3, r2
 8012512:	2200      	movs	r2, #0
 8012514:	4621      	mov	r1, r4
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f7ff fe92 	bl	8012240 <tcp_output_alloc_header_common>
 801251c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d00c      	beq.n	801253e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012524:	7dfb      	ldrb	r3, [r7, #23]
 8012526:	2200      	movs	r2, #0
 8012528:	6939      	ldr	r1, [r7, #16]
 801252a:	68f8      	ldr	r0, [r7, #12]
 801252c:	f7ff ff38 	bl	80123a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012532:	683a      	ldr	r2, [r7, #0]
 8012534:	6939      	ldr	r1, [r7, #16]
 8012536:	68f8      	ldr	r0, [r7, #12]
 8012538:	f7ff ff72 	bl	8012420 <tcp_output_control_segment>
 801253c:	e000      	b.n	8012540 <tcp_rst+0x8c>
    return;
 801253e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012540:	371c      	adds	r7, #28
 8012542:	46bd      	mov	sp, r7
 8012544:	bd90      	pop	{r4, r7, pc}
 8012546:	bf00      	nop
 8012548:	08017f00 	.word	0x08017f00
 801254c:	08018684 	.word	0x08018684
 8012550:	08017f54 	.word	0x08017f54
 8012554:	080186a0 	.word	0x080186a0

08012558 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012558:	b590      	push	{r4, r7, lr}
 801255a:	b087      	sub	sp, #28
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012560:	2300      	movs	r3, #0
 8012562:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012564:	2300      	movs	r3, #0
 8012566:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d106      	bne.n	801257c <tcp_send_empty_ack+0x24>
 801256e:	4b28      	ldr	r3, [pc, #160]	; (8012610 <tcp_send_empty_ack+0xb8>)
 8012570:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012574:	4927      	ldr	r1, [pc, #156]	; (8012614 <tcp_send_empty_ack+0xbc>)
 8012576:	4828      	ldr	r0, [pc, #160]	; (8012618 <tcp_send_empty_ack+0xc0>)
 8012578:	f002 ff72 	bl	8015460 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801257c:	7dfb      	ldrb	r3, [r7, #23]
 801257e:	009b      	lsls	r3, r3, #2
 8012580:	b2db      	uxtb	r3, r3
 8012582:	f003 0304 	and.w	r3, r3, #4
 8012586:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012588:	7d7b      	ldrb	r3, [r7, #21]
 801258a:	b29c      	uxth	r4, r3
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012590:	4618      	mov	r0, r3
 8012592:	f7f8 fa0e 	bl	800a9b2 <lwip_htonl>
 8012596:	4603      	mov	r3, r0
 8012598:	2200      	movs	r2, #0
 801259a:	4621      	mov	r1, r4
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7ff fec1 	bl	8012324 <tcp_output_alloc_header>
 80125a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d109      	bne.n	80125be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	8b5b      	ldrh	r3, [r3, #26]
 80125ae:	f043 0303 	orr.w	r3, r3, #3
 80125b2:	b29a      	uxth	r2, r3
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80125b8:	f06f 0301 	mvn.w	r3, #1
 80125bc:	e023      	b.n	8012606 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80125be:	7dbb      	ldrb	r3, [r7, #22]
 80125c0:	7dfa      	ldrb	r2, [r7, #23]
 80125c2:	6939      	ldr	r1, [r7, #16]
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f7ff feeb 	bl	80123a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80125ca:	687a      	ldr	r2, [r7, #4]
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	3304      	adds	r3, #4
 80125d0:	6939      	ldr	r1, [r7, #16]
 80125d2:	6878      	ldr	r0, [r7, #4]
 80125d4:	f7ff ff24 	bl	8012420 <tcp_output_control_segment>
 80125d8:	4603      	mov	r3, r0
 80125da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80125dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d007      	beq.n	80125f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	8b5b      	ldrh	r3, [r3, #26]
 80125e8:	f043 0303 	orr.w	r3, r3, #3
 80125ec:	b29a      	uxth	r2, r3
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	835a      	strh	r2, [r3, #26]
 80125f2:	e006      	b.n	8012602 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	8b5b      	ldrh	r3, [r3, #26]
 80125f8:	f023 0303 	bic.w	r3, r3, #3
 80125fc:	b29a      	uxth	r2, r3
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012602:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012606:	4618      	mov	r0, r3
 8012608:	371c      	adds	r7, #28
 801260a:	46bd      	mov	sp, r7
 801260c:	bd90      	pop	{r4, r7, pc}
 801260e:	bf00      	nop
 8012610:	08017f00 	.word	0x08017f00
 8012614:	080186bc 	.word	0x080186bc
 8012618:	08017f54 	.word	0x08017f54

0801261c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801261c:	b590      	push	{r4, r7, lr}
 801261e:	b087      	sub	sp, #28
 8012620:	af00      	add	r7, sp, #0
 8012622:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012624:	2300      	movs	r3, #0
 8012626:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d106      	bne.n	801263c <tcp_keepalive+0x20>
 801262e:	4b18      	ldr	r3, [pc, #96]	; (8012690 <tcp_keepalive+0x74>)
 8012630:	f640 0224 	movw	r2, #2084	; 0x824
 8012634:	4917      	ldr	r1, [pc, #92]	; (8012694 <tcp_keepalive+0x78>)
 8012636:	4818      	ldr	r0, [pc, #96]	; (8012698 <tcp_keepalive+0x7c>)
 8012638:	f002 ff12 	bl	8015460 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801263c:	7dfb      	ldrb	r3, [r7, #23]
 801263e:	b29c      	uxth	r4, r3
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012644:	3b01      	subs	r3, #1
 8012646:	4618      	mov	r0, r3
 8012648:	f7f8 f9b3 	bl	800a9b2 <lwip_htonl>
 801264c:	4603      	mov	r3, r0
 801264e:	2200      	movs	r2, #0
 8012650:	4621      	mov	r1, r4
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f7ff fe66 	bl	8012324 <tcp_output_alloc_header>
 8012658:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d102      	bne.n	8012666 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012660:	f04f 33ff 	mov.w	r3, #4294967295
 8012664:	e010      	b.n	8012688 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012666:	7dfb      	ldrb	r3, [r7, #23]
 8012668:	2200      	movs	r2, #0
 801266a:	6939      	ldr	r1, [r7, #16]
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f7ff fe97 	bl	80123a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012672:	687a      	ldr	r2, [r7, #4]
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	3304      	adds	r3, #4
 8012678:	6939      	ldr	r1, [r7, #16]
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f7ff fed0 	bl	8012420 <tcp_output_control_segment>
 8012680:	4603      	mov	r3, r0
 8012682:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012688:	4618      	mov	r0, r3
 801268a:	371c      	adds	r7, #28
 801268c:	46bd      	mov	sp, r7
 801268e:	bd90      	pop	{r4, r7, pc}
 8012690:	08017f00 	.word	0x08017f00
 8012694:	080186dc 	.word	0x080186dc
 8012698:	08017f54 	.word	0x08017f54

0801269c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801269c:	b590      	push	{r4, r7, lr}
 801269e:	b08b      	sub	sp, #44	; 0x2c
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80126a4:	2300      	movs	r3, #0
 80126a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d106      	bne.n	80126be <tcp_zero_window_probe+0x22>
 80126b0:	4b4c      	ldr	r3, [pc, #304]	; (80127e4 <tcp_zero_window_probe+0x148>)
 80126b2:	f640 024f 	movw	r2, #2127	; 0x84f
 80126b6:	494c      	ldr	r1, [pc, #304]	; (80127e8 <tcp_zero_window_probe+0x14c>)
 80126b8:	484c      	ldr	r0, [pc, #304]	; (80127ec <tcp_zero_window_probe+0x150>)
 80126ba:	f002 fed1 	bl	8015460 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80126c4:	6a3b      	ldr	r3, [r7, #32]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d101      	bne.n	80126ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80126ca:	2300      	movs	r3, #0
 80126cc:	e086      	b.n	80127dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80126d4:	2bff      	cmp	r3, #255	; 0xff
 80126d6:	d007      	beq.n	80126e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80126de:	3301      	adds	r3, #1
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80126e8:	6a3b      	ldr	r3, [r7, #32]
 80126ea:	68db      	ldr	r3, [r3, #12]
 80126ec:	899b      	ldrh	r3, [r3, #12]
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	4618      	mov	r0, r3
 80126f2:	f7f8 f949 	bl	800a988 <lwip_htons>
 80126f6:	4603      	mov	r3, r0
 80126f8:	b2db      	uxtb	r3, r3
 80126fa:	f003 0301 	and.w	r3, r3, #1
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d005      	beq.n	801270e <tcp_zero_window_probe+0x72>
 8012702:	6a3b      	ldr	r3, [r7, #32]
 8012704:	891b      	ldrh	r3, [r3, #8]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d101      	bne.n	801270e <tcp_zero_window_probe+0x72>
 801270a:	2301      	movs	r3, #1
 801270c:	e000      	b.n	8012710 <tcp_zero_window_probe+0x74>
 801270e:	2300      	movs	r3, #0
 8012710:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012712:	7ffb      	ldrb	r3, [r7, #31]
 8012714:	2b00      	cmp	r3, #0
 8012716:	bf0c      	ite	eq
 8012718:	2301      	moveq	r3, #1
 801271a:	2300      	movne	r3, #0
 801271c:	b2db      	uxtb	r3, r3
 801271e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012724:	b299      	uxth	r1, r3
 8012726:	6a3b      	ldr	r3, [r7, #32]
 8012728:	68db      	ldr	r3, [r3, #12]
 801272a:	685b      	ldr	r3, [r3, #4]
 801272c:	8bba      	ldrh	r2, [r7, #28]
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f7ff fdf8 	bl	8012324 <tcp_output_alloc_header>
 8012734:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012736:	69bb      	ldr	r3, [r7, #24]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d102      	bne.n	8012742 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801273c:	f04f 33ff 	mov.w	r3, #4294967295
 8012740:	e04c      	b.n	80127dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012742:	69bb      	ldr	r3, [r7, #24]
 8012744:	685b      	ldr	r3, [r3, #4]
 8012746:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012748:	7ffb      	ldrb	r3, [r7, #31]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d011      	beq.n	8012772 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	899b      	ldrh	r3, [r3, #12]
 8012752:	b29b      	uxth	r3, r3
 8012754:	b21b      	sxth	r3, r3
 8012756:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801275a:	b21c      	sxth	r4, r3
 801275c:	2011      	movs	r0, #17
 801275e:	f7f8 f913 	bl	800a988 <lwip_htons>
 8012762:	4603      	mov	r3, r0
 8012764:	b21b      	sxth	r3, r3
 8012766:	4323      	orrs	r3, r4
 8012768:	b21b      	sxth	r3, r3
 801276a:	b29a      	uxth	r2, r3
 801276c:	697b      	ldr	r3, [r7, #20]
 801276e:	819a      	strh	r2, [r3, #12]
 8012770:	e010      	b.n	8012794 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012772:	69bb      	ldr	r3, [r7, #24]
 8012774:	685b      	ldr	r3, [r3, #4]
 8012776:	3314      	adds	r3, #20
 8012778:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801277a:	6a3b      	ldr	r3, [r7, #32]
 801277c:	6858      	ldr	r0, [r3, #4]
 801277e:	6a3b      	ldr	r3, [r7, #32]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	891a      	ldrh	r2, [r3, #8]
 8012784:	6a3b      	ldr	r3, [r7, #32]
 8012786:	891b      	ldrh	r3, [r3, #8]
 8012788:	1ad3      	subs	r3, r2, r3
 801278a:	b29b      	uxth	r3, r3
 801278c:	2201      	movs	r2, #1
 801278e:	6939      	ldr	r1, [r7, #16]
 8012790:	f7f9 fe42 	bl	800c418 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012794:	6a3b      	ldr	r3, [r7, #32]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	685b      	ldr	r3, [r3, #4]
 801279a:	4618      	mov	r0, r3
 801279c:	f7f8 f909 	bl	800a9b2 <lwip_htonl>
 80127a0:	4603      	mov	r3, r0
 80127a2:	3301      	adds	r3, #1
 80127a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	1ad3      	subs	r3, r2, r3
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	da02      	bge.n	80127b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	68fa      	ldr	r2, [r7, #12]
 80127b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80127b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127bc:	2200      	movs	r2, #0
 80127be:	69b9      	ldr	r1, [r7, #24]
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f7ff fded 	bl	80123a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80127c6:	687a      	ldr	r2, [r7, #4]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	3304      	adds	r3, #4
 80127cc:	69b9      	ldr	r1, [r7, #24]
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f7ff fe26 	bl	8012420 <tcp_output_control_segment>
 80127d4:	4603      	mov	r3, r0
 80127d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80127d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80127dc:	4618      	mov	r0, r3
 80127de:	372c      	adds	r7, #44	; 0x2c
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd90      	pop	{r4, r7, pc}
 80127e4:	08017f00 	.word	0x08017f00
 80127e8:	080186f8 	.word	0x080186f8
 80127ec:	08017f54 	.word	0x08017f54

080127f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b082      	sub	sp, #8
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80127f8:	f7f9 fefc 	bl	800c5f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80127fc:	4b0a      	ldr	r3, [pc, #40]	; (8012828 <tcpip_tcp_timer+0x38>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d103      	bne.n	801280c <tcpip_tcp_timer+0x1c>
 8012804:	4b09      	ldr	r3, [pc, #36]	; (801282c <tcpip_tcp_timer+0x3c>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d005      	beq.n	8012818 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801280c:	2200      	movs	r2, #0
 801280e:	4908      	ldr	r1, [pc, #32]	; (8012830 <tcpip_tcp_timer+0x40>)
 8012810:	20fa      	movs	r0, #250	; 0xfa
 8012812:	f000 f8f3 	bl	80129fc <sys_timeout>
 8012816:	e003      	b.n	8012820 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012818:	4b06      	ldr	r3, [pc, #24]	; (8012834 <tcpip_tcp_timer+0x44>)
 801281a:	2200      	movs	r2, #0
 801281c:	601a      	str	r2, [r3, #0]
  }
}
 801281e:	bf00      	nop
 8012820:	bf00      	nop
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}
 8012828:	20008bac 	.word	0x20008bac
 801282c:	20008bb0 	.word	0x20008bb0
 8012830:	080127f1 	.word	0x080127f1
 8012834:	20008bf8 	.word	0x20008bf8

08012838 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801283c:	4b0a      	ldr	r3, [pc, #40]	; (8012868 <tcp_timer_needed+0x30>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d10f      	bne.n	8012864 <tcp_timer_needed+0x2c>
 8012844:	4b09      	ldr	r3, [pc, #36]	; (801286c <tcp_timer_needed+0x34>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d103      	bne.n	8012854 <tcp_timer_needed+0x1c>
 801284c:	4b08      	ldr	r3, [pc, #32]	; (8012870 <tcp_timer_needed+0x38>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d007      	beq.n	8012864 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012854:	4b04      	ldr	r3, [pc, #16]	; (8012868 <tcp_timer_needed+0x30>)
 8012856:	2201      	movs	r2, #1
 8012858:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801285a:	2200      	movs	r2, #0
 801285c:	4905      	ldr	r1, [pc, #20]	; (8012874 <tcp_timer_needed+0x3c>)
 801285e:	20fa      	movs	r0, #250	; 0xfa
 8012860:	f000 f8cc 	bl	80129fc <sys_timeout>
  }
}
 8012864:	bf00      	nop
 8012866:	bd80      	pop	{r7, pc}
 8012868:	20008bf8 	.word	0x20008bf8
 801286c:	20008bac 	.word	0x20008bac
 8012870:	20008bb0 	.word	0x20008bb0
 8012874:	080127f1 	.word	0x080127f1

08012878 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b086      	sub	sp, #24
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012884:	2006      	movs	r0, #6
 8012886:	f7f8 fcf7 	bl	800b278 <memp_malloc>
 801288a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d109      	bne.n	80128a6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d151      	bne.n	801293c <sys_timeout_abs+0xc4>
 8012898:	4b2a      	ldr	r3, [pc, #168]	; (8012944 <sys_timeout_abs+0xcc>)
 801289a:	22be      	movs	r2, #190	; 0xbe
 801289c:	492a      	ldr	r1, [pc, #168]	; (8012948 <sys_timeout_abs+0xd0>)
 801289e:	482b      	ldr	r0, [pc, #172]	; (801294c <sys_timeout_abs+0xd4>)
 80128a0:	f002 fdde 	bl	8015460 <iprintf>
    return;
 80128a4:	e04a      	b.n	801293c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	2200      	movs	r2, #0
 80128aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80128ac:	693b      	ldr	r3, [r7, #16]
 80128ae:	68ba      	ldr	r2, [r7, #8]
 80128b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	68fa      	ldr	r2, [r7, #12]
 80128bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80128be:	4b24      	ldr	r3, [pc, #144]	; (8012950 <sys_timeout_abs+0xd8>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d103      	bne.n	80128ce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80128c6:	4a22      	ldr	r2, [pc, #136]	; (8012950 <sys_timeout_abs+0xd8>)
 80128c8:	693b      	ldr	r3, [r7, #16]
 80128ca:	6013      	str	r3, [r2, #0]
    return;
 80128cc:	e037      	b.n	801293e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	685a      	ldr	r2, [r3, #4]
 80128d2:	4b1f      	ldr	r3, [pc, #124]	; (8012950 <sys_timeout_abs+0xd8>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	1ad3      	subs	r3, r2, r3
 80128da:	0fdb      	lsrs	r3, r3, #31
 80128dc:	f003 0301 	and.w	r3, r3, #1
 80128e0:	b2db      	uxtb	r3, r3
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d007      	beq.n	80128f6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80128e6:	4b1a      	ldr	r3, [pc, #104]	; (8012950 <sys_timeout_abs+0xd8>)
 80128e8:	681a      	ldr	r2, [r3, #0]
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80128ee:	4a18      	ldr	r2, [pc, #96]	; (8012950 <sys_timeout_abs+0xd8>)
 80128f0:	693b      	ldr	r3, [r7, #16]
 80128f2:	6013      	str	r3, [r2, #0]
 80128f4:	e023      	b.n	801293e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80128f6:	4b16      	ldr	r3, [pc, #88]	; (8012950 <sys_timeout_abs+0xd8>)
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	617b      	str	r3, [r7, #20]
 80128fc:	e01a      	b.n	8012934 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d00b      	beq.n	801291e <sys_timeout_abs+0xa6>
 8012906:	693b      	ldr	r3, [r7, #16]
 8012908:	685a      	ldr	r2, [r3, #4]
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	1ad3      	subs	r3, r2, r3
 8012912:	0fdb      	lsrs	r3, r3, #31
 8012914:	f003 0301 	and.w	r3, r3, #1
 8012918:	b2db      	uxtb	r3, r3
 801291a:	2b00      	cmp	r3, #0
 801291c:	d007      	beq.n	801292e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	693a      	ldr	r2, [r7, #16]
 801292a:	601a      	str	r2, [r3, #0]
        break;
 801292c:	e007      	b.n	801293e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	617b      	str	r3, [r7, #20]
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d1e1      	bne.n	80128fe <sys_timeout_abs+0x86>
 801293a:	e000      	b.n	801293e <sys_timeout_abs+0xc6>
    return;
 801293c:	bf00      	nop
      }
    }
  }
}
 801293e:	3718      	adds	r7, #24
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}
 8012944:	0801871c 	.word	0x0801871c
 8012948:	08018750 	.word	0x08018750
 801294c:	08018790 	.word	0x08018790
 8012950:	20008bf0 	.word	0x20008bf0

08012954 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b086      	sub	sp, #24
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	4798      	blx	r3

  now = sys_now();
 8012966:	f7f7 fe23 	bl	800a5b0 <sys_now>
 801296a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801296c:	697b      	ldr	r3, [r7, #20]
 801296e:	681a      	ldr	r2, [r3, #0]
 8012970:	4b0f      	ldr	r3, [pc, #60]	; (80129b0 <lwip_cyclic_timer+0x5c>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	4413      	add	r3, r2
 8012976:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012978:	68fa      	ldr	r2, [r7, #12]
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	1ad3      	subs	r3, r2, r3
 801297e:	0fdb      	lsrs	r3, r3, #31
 8012980:	f003 0301 	and.w	r3, r3, #1
 8012984:	b2db      	uxtb	r3, r3
 8012986:	2b00      	cmp	r3, #0
 8012988:	d009      	beq.n	801299e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	681a      	ldr	r2, [r3, #0]
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	4413      	add	r3, r2
 8012992:	687a      	ldr	r2, [r7, #4]
 8012994:	4907      	ldr	r1, [pc, #28]	; (80129b4 <lwip_cyclic_timer+0x60>)
 8012996:	4618      	mov	r0, r3
 8012998:	f7ff ff6e 	bl	8012878 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801299c:	e004      	b.n	80129a8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801299e:	687a      	ldr	r2, [r7, #4]
 80129a0:	4904      	ldr	r1, [pc, #16]	; (80129b4 <lwip_cyclic_timer+0x60>)
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	f7ff ff68 	bl	8012878 <sys_timeout_abs>
}
 80129a8:	bf00      	nop
 80129aa:	3718      	adds	r7, #24
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	20008bf4 	.word	0x20008bf4
 80129b4:	08012955 	.word	0x08012955

080129b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b082      	sub	sp, #8
 80129bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80129be:	2301      	movs	r3, #1
 80129c0:	607b      	str	r3, [r7, #4]
 80129c2:	e00e      	b.n	80129e2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80129c4:	4a0b      	ldr	r2, [pc, #44]	; (80129f4 <sys_timeouts_init+0x3c>)
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	00db      	lsls	r3, r3, #3
 80129d0:	4a08      	ldr	r2, [pc, #32]	; (80129f4 <sys_timeouts_init+0x3c>)
 80129d2:	4413      	add	r3, r2
 80129d4:	461a      	mov	r2, r3
 80129d6:	4908      	ldr	r1, [pc, #32]	; (80129f8 <sys_timeouts_init+0x40>)
 80129d8:	f000 f810 	bl	80129fc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	3301      	adds	r3, #1
 80129e0:	607b      	str	r3, [r7, #4]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2b02      	cmp	r3, #2
 80129e6:	d9ed      	bls.n	80129c4 <sys_timeouts_init+0xc>
  }
}
 80129e8:	bf00      	nop
 80129ea:	bf00      	nop
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	0801b23c 	.word	0x0801b23c
 80129f8:	08012955 	.word	0x08012955

080129fc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b086      	sub	sp, #24
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	60f8      	str	r0, [r7, #12]
 8012a04:	60b9      	str	r1, [r7, #8]
 8012a06:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a0e:	d306      	bcc.n	8012a1e <sys_timeout+0x22>
 8012a10:	4b0a      	ldr	r3, [pc, #40]	; (8012a3c <sys_timeout+0x40>)
 8012a12:	f240 1229 	movw	r2, #297	; 0x129
 8012a16:	490a      	ldr	r1, [pc, #40]	; (8012a40 <sys_timeout+0x44>)
 8012a18:	480a      	ldr	r0, [pc, #40]	; (8012a44 <sys_timeout+0x48>)
 8012a1a:	f002 fd21 	bl	8015460 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012a1e:	f7f7 fdc7 	bl	800a5b0 <sys_now>
 8012a22:	4602      	mov	r2, r0
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	4413      	add	r3, r2
 8012a28:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012a2a:	687a      	ldr	r2, [r7, #4]
 8012a2c:	68b9      	ldr	r1, [r7, #8]
 8012a2e:	6978      	ldr	r0, [r7, #20]
 8012a30:	f7ff ff22 	bl	8012878 <sys_timeout_abs>
#endif
}
 8012a34:	bf00      	nop
 8012a36:	3718      	adds	r7, #24
 8012a38:	46bd      	mov	sp, r7
 8012a3a:	bd80      	pop	{r7, pc}
 8012a3c:	0801871c 	.word	0x0801871c
 8012a40:	080187b8 	.word	0x080187b8
 8012a44:	08018790 	.word	0x08018790

08012a48 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b084      	sub	sp, #16
 8012a4c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012a4e:	f7f7 fdaf 	bl	800a5b0 <sys_now>
 8012a52:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012a54:	4b1a      	ldr	r3, [pc, #104]	; (8012ac0 <sys_check_timeouts+0x78>)
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d001      	beq.n	8012a62 <sys_check_timeouts+0x1a>
 8012a5e:	f7f8 ffb7 	bl	800b9d0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012a62:	4b18      	ldr	r3, [pc, #96]	; (8012ac4 <sys_check_timeouts+0x7c>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d022      	beq.n	8012ab4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	685b      	ldr	r3, [r3, #4]
 8012a72:	68fa      	ldr	r2, [r7, #12]
 8012a74:	1ad3      	subs	r3, r2, r3
 8012a76:	0fdb      	lsrs	r3, r3, #31
 8012a78:	f003 0301 	and.w	r3, r3, #1
 8012a7c:	b2db      	uxtb	r3, r3
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d11a      	bne.n	8012ab8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	4a0f      	ldr	r2, [pc, #60]	; (8012ac4 <sys_check_timeouts+0x7c>)
 8012a88:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	689b      	ldr	r3, [r3, #8]
 8012a8e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	4a0b      	ldr	r2, [pc, #44]	; (8012ac8 <sys_check_timeouts+0x80>)
 8012a9c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012a9e:	68b9      	ldr	r1, [r7, #8]
 8012aa0:	2006      	movs	r0, #6
 8012aa2:	f7f8 fc59 	bl	800b358 <memp_free>
    if (handler != NULL) {
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d0d3      	beq.n	8012a54 <sys_check_timeouts+0xc>
      handler(arg);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6838      	ldr	r0, [r7, #0]
 8012ab0:	4798      	blx	r3
  do {
 8012ab2:	e7cf      	b.n	8012a54 <sys_check_timeouts+0xc>
      return;
 8012ab4:	bf00      	nop
 8012ab6:	e000      	b.n	8012aba <sys_check_timeouts+0x72>
      return;
 8012ab8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012aba:	3710      	adds	r7, #16
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	20008b9d 	.word	0x20008b9d
 8012ac4:	20008bf0 	.word	0x20008bf0
 8012ac8:	20008bf4 	.word	0x20008bf4

08012acc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012ad0:	f002 fd54 	bl	801557c <rand>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	b29b      	uxth	r3, r3
 8012ad8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012adc:	b29b      	uxth	r3, r3
 8012ade:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012ae2:	b29a      	uxth	r2, r3
 8012ae4:	4b01      	ldr	r3, [pc, #4]	; (8012aec <udp_init+0x20>)
 8012ae6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012ae8:	bf00      	nop
 8012aea:	bd80      	pop	{r7, pc}
 8012aec:	20000064 	.word	0x20000064

08012af0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b084      	sub	sp, #16
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	60f8      	str	r0, [r7, #12]
 8012af8:	60b9      	str	r1, [r7, #8]
 8012afa:	4613      	mov	r3, r2
 8012afc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d105      	bne.n	8012b10 <udp_input_local_match+0x20>
 8012b04:	4b27      	ldr	r3, [pc, #156]	; (8012ba4 <udp_input_local_match+0xb4>)
 8012b06:	2287      	movs	r2, #135	; 0x87
 8012b08:	4927      	ldr	r1, [pc, #156]	; (8012ba8 <udp_input_local_match+0xb8>)
 8012b0a:	4828      	ldr	r0, [pc, #160]	; (8012bac <udp_input_local_match+0xbc>)
 8012b0c:	f002 fca8 	bl	8015460 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d105      	bne.n	8012b22 <udp_input_local_match+0x32>
 8012b16:	4b23      	ldr	r3, [pc, #140]	; (8012ba4 <udp_input_local_match+0xb4>)
 8012b18:	2288      	movs	r2, #136	; 0x88
 8012b1a:	4925      	ldr	r1, [pc, #148]	; (8012bb0 <udp_input_local_match+0xc0>)
 8012b1c:	4823      	ldr	r0, [pc, #140]	; (8012bac <udp_input_local_match+0xbc>)
 8012b1e:	f002 fc9f 	bl	8015460 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	7a1b      	ldrb	r3, [r3, #8]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d00b      	beq.n	8012b42 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	7a1a      	ldrb	r2, [r3, #8]
 8012b2e:	4b21      	ldr	r3, [pc, #132]	; (8012bb4 <udp_input_local_match+0xc4>)
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b36:	3301      	adds	r3, #1
 8012b38:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d001      	beq.n	8012b42 <udp_input_local_match+0x52>
    return 0;
 8012b3e:	2300      	movs	r3, #0
 8012b40:	e02b      	b.n	8012b9a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012b42:	79fb      	ldrb	r3, [r7, #7]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d018      	beq.n	8012b7a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d013      	beq.n	8012b76 <udp_input_local_match+0x86>
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d00f      	beq.n	8012b76 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012b56:	4b17      	ldr	r3, [pc, #92]	; (8012bb4 <udp_input_local_match+0xc4>)
 8012b58:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b5e:	d00a      	beq.n	8012b76 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	681a      	ldr	r2, [r3, #0]
 8012b64:	4b13      	ldr	r3, [pc, #76]	; (8012bb4 <udp_input_local_match+0xc4>)
 8012b66:	695b      	ldr	r3, [r3, #20]
 8012b68:	405a      	eors	r2, r3
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	3308      	adds	r3, #8
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d110      	bne.n	8012b98 <udp_input_local_match+0xa8>
          return 1;
 8012b76:	2301      	movs	r3, #1
 8012b78:	e00f      	b.n	8012b9a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d009      	beq.n	8012b94 <udp_input_local_match+0xa4>
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d005      	beq.n	8012b94 <udp_input_local_match+0xa4>
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	4b09      	ldr	r3, [pc, #36]	; (8012bb4 <udp_input_local_match+0xc4>)
 8012b8e:	695b      	ldr	r3, [r3, #20]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d101      	bne.n	8012b98 <udp_input_local_match+0xa8>
        return 1;
 8012b94:	2301      	movs	r3, #1
 8012b96:	e000      	b.n	8012b9a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012b98:	2300      	movs	r3, #0
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3710      	adds	r7, #16
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	08018804 	.word	0x08018804
 8012ba8:	08018834 	.word	0x08018834
 8012bac:	08018858 	.word	0x08018858
 8012bb0:	08018880 	.word	0x08018880
 8012bb4:	20005630 	.word	0x20005630

08012bb8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012bb8:	b590      	push	{r4, r7, lr}
 8012bba:	b08d      	sub	sp, #52	; 0x34
 8012bbc:	af02      	add	r7, sp, #8
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d105      	bne.n	8012bd8 <udp_input+0x20>
 8012bcc:	4b7c      	ldr	r3, [pc, #496]	; (8012dc0 <udp_input+0x208>)
 8012bce:	22cf      	movs	r2, #207	; 0xcf
 8012bd0:	497c      	ldr	r1, [pc, #496]	; (8012dc4 <udp_input+0x20c>)
 8012bd2:	487d      	ldr	r0, [pc, #500]	; (8012dc8 <udp_input+0x210>)
 8012bd4:	f002 fc44 	bl	8015460 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d105      	bne.n	8012bea <udp_input+0x32>
 8012bde:	4b78      	ldr	r3, [pc, #480]	; (8012dc0 <udp_input+0x208>)
 8012be0:	22d0      	movs	r2, #208	; 0xd0
 8012be2:	497a      	ldr	r1, [pc, #488]	; (8012dcc <udp_input+0x214>)
 8012be4:	4878      	ldr	r0, [pc, #480]	; (8012dc8 <udp_input+0x210>)
 8012be6:	f002 fc3b 	bl	8015460 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	895b      	ldrh	r3, [r3, #10]
 8012bee:	2b07      	cmp	r3, #7
 8012bf0:	d803      	bhi.n	8012bfa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f7f9 fa26 	bl	800c044 <pbuf_free>
    goto end;
 8012bf8:	e0de      	b.n	8012db8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	685b      	ldr	r3, [r3, #4]
 8012bfe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012c00:	4b73      	ldr	r3, [pc, #460]	; (8012dd0 <udp_input+0x218>)
 8012c02:	695b      	ldr	r3, [r3, #20]
 8012c04:	4a72      	ldr	r2, [pc, #456]	; (8012dd0 <udp_input+0x218>)
 8012c06:	6812      	ldr	r2, [r2, #0]
 8012c08:	4611      	mov	r1, r2
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f001 fc88 	bl	8014520 <ip4_addr_isbroadcast_u32>
 8012c10:	4603      	mov	r3, r0
 8012c12:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012c14:	697b      	ldr	r3, [r7, #20]
 8012c16:	881b      	ldrh	r3, [r3, #0]
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7f7 feb4 	bl	800a988 <lwip_htons>
 8012c20:	4603      	mov	r3, r0
 8012c22:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	885b      	ldrh	r3, [r3, #2]
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7f7 feac 	bl	800a988 <lwip_htons>
 8012c30:	4603      	mov	r3, r0
 8012c32:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012c34:	2300      	movs	r3, #0
 8012c36:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c40:	4b64      	ldr	r3, [pc, #400]	; (8012dd4 <udp_input+0x21c>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	627b      	str	r3, [r7, #36]	; 0x24
 8012c46:	e054      	b.n	8012cf2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4a:	8a5b      	ldrh	r3, [r3, #18]
 8012c4c:	89fa      	ldrh	r2, [r7, #14]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d14a      	bne.n	8012ce8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012c52:	7cfb      	ldrb	r3, [r7, #19]
 8012c54:	461a      	mov	r2, r3
 8012c56:	6839      	ldr	r1, [r7, #0]
 8012c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c5a:	f7ff ff49 	bl	8012af0 <udp_input_local_match>
 8012c5e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d041      	beq.n	8012ce8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c66:	7c1b      	ldrb	r3, [r3, #16]
 8012c68:	f003 0304 	and.w	r3, r3, #4
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d11d      	bne.n	8012cac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d102      	bne.n	8012c7c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c78:	61fb      	str	r3, [r7, #28]
 8012c7a:	e017      	b.n	8012cac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012c7c:	7cfb      	ldrb	r3, [r7, #19]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d014      	beq.n	8012cac <udp_input+0xf4>
 8012c82:	4b53      	ldr	r3, [pc, #332]	; (8012dd0 <udp_input+0x218>)
 8012c84:	695b      	ldr	r3, [r3, #20]
 8012c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c8a:	d10f      	bne.n	8012cac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012c8c:	69fb      	ldr	r3, [r7, #28]
 8012c8e:	681a      	ldr	r2, [r3, #0]
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	3304      	adds	r3, #4
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d008      	beq.n	8012cac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9c:	681a      	ldr	r2, [r3, #0]
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	3304      	adds	r3, #4
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d101      	bne.n	8012cac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012caa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cae:	8a9b      	ldrh	r3, [r3, #20]
 8012cb0:	8a3a      	ldrh	r2, [r7, #16]
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d118      	bne.n	8012ce8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d005      	beq.n	8012cca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc0:	685a      	ldr	r2, [r3, #4]
 8012cc2:	4b43      	ldr	r3, [pc, #268]	; (8012dd0 <udp_input+0x218>)
 8012cc4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d10e      	bne.n	8012ce8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012cca:	6a3b      	ldr	r3, [r7, #32]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d014      	beq.n	8012cfa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd2:	68da      	ldr	r2, [r3, #12]
 8012cd4:	6a3b      	ldr	r3, [r7, #32]
 8012cd6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012cd8:	4b3e      	ldr	r3, [pc, #248]	; (8012dd4 <udp_input+0x21c>)
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cde:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012ce0:	4a3c      	ldr	r2, [pc, #240]	; (8012dd4 <udp_input+0x21c>)
 8012ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012ce6:	e008      	b.n	8012cfa <udp_input+0x142>
      }
    }

    prev = pcb;
 8012ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8012cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d1a7      	bne.n	8012c48 <udp_input+0x90>
 8012cf8:	e000      	b.n	8012cfc <udp_input+0x144>
        break;
 8012cfa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d101      	bne.n	8012d06 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012d02:	69fb      	ldr	r3, [r7, #28]
 8012d04:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d002      	beq.n	8012d12 <udp_input+0x15a>
    for_us = 1;
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	76fb      	strb	r3, [r7, #27]
 8012d10:	e00a      	b.n	8012d28 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	3304      	adds	r3, #4
 8012d16:	681a      	ldr	r2, [r3, #0]
 8012d18:	4b2d      	ldr	r3, [pc, #180]	; (8012dd0 <udp_input+0x218>)
 8012d1a:	695b      	ldr	r3, [r3, #20]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	bf0c      	ite	eq
 8012d20:	2301      	moveq	r3, #1
 8012d22:	2300      	movne	r3, #0
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012d28:	7efb      	ldrb	r3, [r7, #27]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d041      	beq.n	8012db2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012d2e:	2108      	movs	r1, #8
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f7f9 f901 	bl	800bf38 <pbuf_remove_header>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d00a      	beq.n	8012d52 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012d3c:	4b20      	ldr	r3, [pc, #128]	; (8012dc0 <udp_input+0x208>)
 8012d3e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012d42:	4925      	ldr	r1, [pc, #148]	; (8012dd8 <udp_input+0x220>)
 8012d44:	4820      	ldr	r0, [pc, #128]	; (8012dc8 <udp_input+0x210>)
 8012d46:	f002 fb8b 	bl	8015460 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f7f9 f97a 	bl	800c044 <pbuf_free>
      goto end;
 8012d50:	e032      	b.n	8012db8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d012      	beq.n	8012d7e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d5a:	699b      	ldr	r3, [r3, #24]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d00a      	beq.n	8012d76 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d62:	699c      	ldr	r4, [r3, #24]
 8012d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d66:	69d8      	ldr	r0, [r3, #28]
 8012d68:	8a3b      	ldrh	r3, [r7, #16]
 8012d6a:	9300      	str	r3, [sp, #0]
 8012d6c:	4b1b      	ldr	r3, [pc, #108]	; (8012ddc <udp_input+0x224>)
 8012d6e:	687a      	ldr	r2, [r7, #4]
 8012d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d72:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012d74:	e021      	b.n	8012dba <udp_input+0x202>
        pbuf_free(p);
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f7f9 f964 	bl	800c044 <pbuf_free>
        goto end;
 8012d7c:	e01c      	b.n	8012db8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012d7e:	7cfb      	ldrb	r3, [r7, #19]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d112      	bne.n	8012daa <udp_input+0x1f2>
 8012d84:	4b12      	ldr	r3, [pc, #72]	; (8012dd0 <udp_input+0x218>)
 8012d86:	695b      	ldr	r3, [r3, #20]
 8012d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d8c:	2be0      	cmp	r3, #224	; 0xe0
 8012d8e:	d00c      	beq.n	8012daa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012d90:	4b0f      	ldr	r3, [pc, #60]	; (8012dd0 <udp_input+0x218>)
 8012d92:	899b      	ldrh	r3, [r3, #12]
 8012d94:	3308      	adds	r3, #8
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	b21b      	sxth	r3, r3
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f7f9 f93e 	bl	800c01e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012da2:	2103      	movs	r1, #3
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f001 f89b 	bl	8013ee0 <icmp_dest_unreach>
      pbuf_free(p);
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f7f9 f94a 	bl	800c044 <pbuf_free>
  return;
 8012db0:	e003      	b.n	8012dba <udp_input+0x202>
    pbuf_free(p);
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	f7f9 f946 	bl	800c044 <pbuf_free>
  return;
 8012db8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012dba:	372c      	adds	r7, #44	; 0x2c
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd90      	pop	{r4, r7, pc}
 8012dc0:	08018804 	.word	0x08018804
 8012dc4:	080188a8 	.word	0x080188a8
 8012dc8:	08018858 	.word	0x08018858
 8012dcc:	080188c0 	.word	0x080188c0
 8012dd0:	20005630 	.word	0x20005630
 8012dd4:	20008bfc 	.word	0x20008bfc
 8012dd8:	080188dc 	.word	0x080188dc
 8012ddc:	20005640 	.word	0x20005640

08012de0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012de0:	b480      	push	{r7}
 8012de2:	b085      	sub	sp, #20
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d01e      	beq.n	8012e2e <udp_netif_ip_addr_changed+0x4e>
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d01a      	beq.n	8012e2e <udp_netif_ip_addr_changed+0x4e>
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d017      	beq.n	8012e2e <udp_netif_ip_addr_changed+0x4e>
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d013      	beq.n	8012e2e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012e06:	4b0d      	ldr	r3, [pc, #52]	; (8012e3c <udp_netif_ip_addr_changed+0x5c>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	60fb      	str	r3, [r7, #12]
 8012e0c:	e00c      	b.n	8012e28 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	d103      	bne.n	8012e22 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	681a      	ldr	r2, [r3, #0]
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	68db      	ldr	r3, [r3, #12]
 8012e26:	60fb      	str	r3, [r7, #12]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d1ef      	bne.n	8012e0e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012e2e:	bf00      	nop
 8012e30:	3714      	adds	r7, #20
 8012e32:	46bd      	mov	sp, r7
 8012e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e38:	4770      	bx	lr
 8012e3a:	bf00      	nop
 8012e3c:	20008bfc 	.word	0x20008bfc

08012e40 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012e48:	4915      	ldr	r1, [pc, #84]	; (8012ea0 <etharp_free_entry+0x60>)
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	4613      	mov	r3, r2
 8012e4e:	005b      	lsls	r3, r3, #1
 8012e50:	4413      	add	r3, r2
 8012e52:	00db      	lsls	r3, r3, #3
 8012e54:	440b      	add	r3, r1
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d013      	beq.n	8012e84 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012e5c:	4910      	ldr	r1, [pc, #64]	; (8012ea0 <etharp_free_entry+0x60>)
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	4613      	mov	r3, r2
 8012e62:	005b      	lsls	r3, r3, #1
 8012e64:	4413      	add	r3, r2
 8012e66:	00db      	lsls	r3, r3, #3
 8012e68:	440b      	add	r3, r1
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	f7f9 f8e9 	bl	800c044 <pbuf_free>
    arp_table[i].q = NULL;
 8012e72:	490b      	ldr	r1, [pc, #44]	; (8012ea0 <etharp_free_entry+0x60>)
 8012e74:	687a      	ldr	r2, [r7, #4]
 8012e76:	4613      	mov	r3, r2
 8012e78:	005b      	lsls	r3, r3, #1
 8012e7a:	4413      	add	r3, r2
 8012e7c:	00db      	lsls	r3, r3, #3
 8012e7e:	440b      	add	r3, r1
 8012e80:	2200      	movs	r2, #0
 8012e82:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012e84:	4906      	ldr	r1, [pc, #24]	; (8012ea0 <etharp_free_entry+0x60>)
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	4613      	mov	r3, r2
 8012e8a:	005b      	lsls	r3, r3, #1
 8012e8c:	4413      	add	r3, r2
 8012e8e:	00db      	lsls	r3, r3, #3
 8012e90:	440b      	add	r3, r1
 8012e92:	3314      	adds	r3, #20
 8012e94:	2200      	movs	r2, #0
 8012e96:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012e98:	bf00      	nop
 8012e9a:	3708      	adds	r7, #8
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}
 8012ea0:	20008c00 	.word	0x20008c00

08012ea4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012eaa:	2300      	movs	r3, #0
 8012eac:	607b      	str	r3, [r7, #4]
 8012eae:	e096      	b.n	8012fde <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012eb0:	494f      	ldr	r1, [pc, #316]	; (8012ff0 <etharp_tmr+0x14c>)
 8012eb2:	687a      	ldr	r2, [r7, #4]
 8012eb4:	4613      	mov	r3, r2
 8012eb6:	005b      	lsls	r3, r3, #1
 8012eb8:	4413      	add	r3, r2
 8012eba:	00db      	lsls	r3, r3, #3
 8012ebc:	440b      	add	r3, r1
 8012ebe:	3314      	adds	r3, #20
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012ec4:	78fb      	ldrb	r3, [r7, #3]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	f000 8086 	beq.w	8012fd8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012ecc:	4948      	ldr	r1, [pc, #288]	; (8012ff0 <etharp_tmr+0x14c>)
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	4613      	mov	r3, r2
 8012ed2:	005b      	lsls	r3, r3, #1
 8012ed4:	4413      	add	r3, r2
 8012ed6:	00db      	lsls	r3, r3, #3
 8012ed8:	440b      	add	r3, r1
 8012eda:	3312      	adds	r3, #18
 8012edc:	881b      	ldrh	r3, [r3, #0]
 8012ede:	3301      	adds	r3, #1
 8012ee0:	b298      	uxth	r0, r3
 8012ee2:	4943      	ldr	r1, [pc, #268]	; (8012ff0 <etharp_tmr+0x14c>)
 8012ee4:	687a      	ldr	r2, [r7, #4]
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	005b      	lsls	r3, r3, #1
 8012eea:	4413      	add	r3, r2
 8012eec:	00db      	lsls	r3, r3, #3
 8012eee:	440b      	add	r3, r1
 8012ef0:	3312      	adds	r3, #18
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012ef6:	493e      	ldr	r1, [pc, #248]	; (8012ff0 <etharp_tmr+0x14c>)
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	4613      	mov	r3, r2
 8012efc:	005b      	lsls	r3, r3, #1
 8012efe:	4413      	add	r3, r2
 8012f00:	00db      	lsls	r3, r3, #3
 8012f02:	440b      	add	r3, r1
 8012f04:	3312      	adds	r3, #18
 8012f06:	881b      	ldrh	r3, [r3, #0]
 8012f08:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012f0c:	d215      	bcs.n	8012f3a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012f0e:	4938      	ldr	r1, [pc, #224]	; (8012ff0 <etharp_tmr+0x14c>)
 8012f10:	687a      	ldr	r2, [r7, #4]
 8012f12:	4613      	mov	r3, r2
 8012f14:	005b      	lsls	r3, r3, #1
 8012f16:	4413      	add	r3, r2
 8012f18:	00db      	lsls	r3, r3, #3
 8012f1a:	440b      	add	r3, r1
 8012f1c:	3314      	adds	r3, #20
 8012f1e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012f20:	2b01      	cmp	r3, #1
 8012f22:	d10e      	bne.n	8012f42 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012f24:	4932      	ldr	r1, [pc, #200]	; (8012ff0 <etharp_tmr+0x14c>)
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	4613      	mov	r3, r2
 8012f2a:	005b      	lsls	r3, r3, #1
 8012f2c:	4413      	add	r3, r2
 8012f2e:	00db      	lsls	r3, r3, #3
 8012f30:	440b      	add	r3, r1
 8012f32:	3312      	adds	r3, #18
 8012f34:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012f36:	2b04      	cmp	r3, #4
 8012f38:	d903      	bls.n	8012f42 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f7ff ff80 	bl	8012e40 <etharp_free_entry>
 8012f40:	e04a      	b.n	8012fd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012f42:	492b      	ldr	r1, [pc, #172]	; (8012ff0 <etharp_tmr+0x14c>)
 8012f44:	687a      	ldr	r2, [r7, #4]
 8012f46:	4613      	mov	r3, r2
 8012f48:	005b      	lsls	r3, r3, #1
 8012f4a:	4413      	add	r3, r2
 8012f4c:	00db      	lsls	r3, r3, #3
 8012f4e:	440b      	add	r3, r1
 8012f50:	3314      	adds	r3, #20
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	2b03      	cmp	r3, #3
 8012f56:	d10a      	bne.n	8012f6e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012f58:	4925      	ldr	r1, [pc, #148]	; (8012ff0 <etharp_tmr+0x14c>)
 8012f5a:	687a      	ldr	r2, [r7, #4]
 8012f5c:	4613      	mov	r3, r2
 8012f5e:	005b      	lsls	r3, r3, #1
 8012f60:	4413      	add	r3, r2
 8012f62:	00db      	lsls	r3, r3, #3
 8012f64:	440b      	add	r3, r1
 8012f66:	3314      	adds	r3, #20
 8012f68:	2204      	movs	r2, #4
 8012f6a:	701a      	strb	r2, [r3, #0]
 8012f6c:	e034      	b.n	8012fd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012f6e:	4920      	ldr	r1, [pc, #128]	; (8012ff0 <etharp_tmr+0x14c>)
 8012f70:	687a      	ldr	r2, [r7, #4]
 8012f72:	4613      	mov	r3, r2
 8012f74:	005b      	lsls	r3, r3, #1
 8012f76:	4413      	add	r3, r2
 8012f78:	00db      	lsls	r3, r3, #3
 8012f7a:	440b      	add	r3, r1
 8012f7c:	3314      	adds	r3, #20
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	2b04      	cmp	r3, #4
 8012f82:	d10a      	bne.n	8012f9a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012f84:	491a      	ldr	r1, [pc, #104]	; (8012ff0 <etharp_tmr+0x14c>)
 8012f86:	687a      	ldr	r2, [r7, #4]
 8012f88:	4613      	mov	r3, r2
 8012f8a:	005b      	lsls	r3, r3, #1
 8012f8c:	4413      	add	r3, r2
 8012f8e:	00db      	lsls	r3, r3, #3
 8012f90:	440b      	add	r3, r1
 8012f92:	3314      	adds	r3, #20
 8012f94:	2202      	movs	r2, #2
 8012f96:	701a      	strb	r2, [r3, #0]
 8012f98:	e01e      	b.n	8012fd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012f9a:	4915      	ldr	r1, [pc, #84]	; (8012ff0 <etharp_tmr+0x14c>)
 8012f9c:	687a      	ldr	r2, [r7, #4]
 8012f9e:	4613      	mov	r3, r2
 8012fa0:	005b      	lsls	r3, r3, #1
 8012fa2:	4413      	add	r3, r2
 8012fa4:	00db      	lsls	r3, r3, #3
 8012fa6:	440b      	add	r3, r1
 8012fa8:	3314      	adds	r3, #20
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d113      	bne.n	8012fd8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012fb0:	490f      	ldr	r1, [pc, #60]	; (8012ff0 <etharp_tmr+0x14c>)
 8012fb2:	687a      	ldr	r2, [r7, #4]
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	005b      	lsls	r3, r3, #1
 8012fb8:	4413      	add	r3, r2
 8012fba:	00db      	lsls	r3, r3, #3
 8012fbc:	440b      	add	r3, r1
 8012fbe:	3308      	adds	r3, #8
 8012fc0:	6818      	ldr	r0, [r3, #0]
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	4613      	mov	r3, r2
 8012fc6:	005b      	lsls	r3, r3, #1
 8012fc8:	4413      	add	r3, r2
 8012fca:	00db      	lsls	r3, r3, #3
 8012fcc:	4a08      	ldr	r2, [pc, #32]	; (8012ff0 <etharp_tmr+0x14c>)
 8012fce:	4413      	add	r3, r2
 8012fd0:	3304      	adds	r3, #4
 8012fd2:	4619      	mov	r1, r3
 8012fd4:	f000 fe6e 	bl	8013cb4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	3301      	adds	r3, #1
 8012fdc:	607b      	str	r3, [r7, #4]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2b09      	cmp	r3, #9
 8012fe2:	f77f af65 	ble.w	8012eb0 <etharp_tmr+0xc>
      }
    }
  }
}
 8012fe6:	bf00      	nop
 8012fe8:	bf00      	nop
 8012fea:	3708      	adds	r7, #8
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	20008c00 	.word	0x20008c00

08012ff4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b08a      	sub	sp, #40	; 0x28
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	460b      	mov	r3, r1
 8012ffe:	607a      	str	r2, [r7, #4]
 8013000:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013002:	230a      	movs	r3, #10
 8013004:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013006:	230a      	movs	r3, #10
 8013008:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801300a:	230a      	movs	r3, #10
 801300c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801300e:	2300      	movs	r3, #0
 8013010:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013012:	230a      	movs	r3, #10
 8013014:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013016:	2300      	movs	r3, #0
 8013018:	83bb      	strh	r3, [r7, #28]
 801301a:	2300      	movs	r3, #0
 801301c:	837b      	strh	r3, [r7, #26]
 801301e:	2300      	movs	r3, #0
 8013020:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013022:	2300      	movs	r3, #0
 8013024:	843b      	strh	r3, [r7, #32]
 8013026:	e0ae      	b.n	8013186 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013028:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801302c:	49a6      	ldr	r1, [pc, #664]	; (80132c8 <etharp_find_entry+0x2d4>)
 801302e:	4613      	mov	r3, r2
 8013030:	005b      	lsls	r3, r3, #1
 8013032:	4413      	add	r3, r2
 8013034:	00db      	lsls	r3, r3, #3
 8013036:	440b      	add	r3, r1
 8013038:	3314      	adds	r3, #20
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801303e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013042:	2b0a      	cmp	r3, #10
 8013044:	d105      	bne.n	8013052 <etharp_find_entry+0x5e>
 8013046:	7dfb      	ldrb	r3, [r7, #23]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d102      	bne.n	8013052 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801304c:	8c3b      	ldrh	r3, [r7, #32]
 801304e:	847b      	strh	r3, [r7, #34]	; 0x22
 8013050:	e095      	b.n	801317e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013052:	7dfb      	ldrb	r3, [r7, #23]
 8013054:	2b00      	cmp	r3, #0
 8013056:	f000 8092 	beq.w	801317e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801305a:	7dfb      	ldrb	r3, [r7, #23]
 801305c:	2b01      	cmp	r3, #1
 801305e:	d009      	beq.n	8013074 <etharp_find_entry+0x80>
 8013060:	7dfb      	ldrb	r3, [r7, #23]
 8013062:	2b01      	cmp	r3, #1
 8013064:	d806      	bhi.n	8013074 <etharp_find_entry+0x80>
 8013066:	4b99      	ldr	r3, [pc, #612]	; (80132cc <etharp_find_entry+0x2d8>)
 8013068:	f240 1223 	movw	r2, #291	; 0x123
 801306c:	4998      	ldr	r1, [pc, #608]	; (80132d0 <etharp_find_entry+0x2dc>)
 801306e:	4899      	ldr	r0, [pc, #612]	; (80132d4 <etharp_find_entry+0x2e0>)
 8013070:	f002 f9f6 	bl	8015460 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d020      	beq.n	80130bc <etharp_find_entry+0xc8>
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	6819      	ldr	r1, [r3, #0]
 801307e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013082:	4891      	ldr	r0, [pc, #580]	; (80132c8 <etharp_find_entry+0x2d4>)
 8013084:	4613      	mov	r3, r2
 8013086:	005b      	lsls	r3, r3, #1
 8013088:	4413      	add	r3, r2
 801308a:	00db      	lsls	r3, r3, #3
 801308c:	4403      	add	r3, r0
 801308e:	3304      	adds	r3, #4
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	4299      	cmp	r1, r3
 8013094:	d112      	bne.n	80130bc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d00c      	beq.n	80130b6 <etharp_find_entry+0xc2>
 801309c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130a0:	4989      	ldr	r1, [pc, #548]	; (80132c8 <etharp_find_entry+0x2d4>)
 80130a2:	4613      	mov	r3, r2
 80130a4:	005b      	lsls	r3, r3, #1
 80130a6:	4413      	add	r3, r2
 80130a8:	00db      	lsls	r3, r3, #3
 80130aa:	440b      	add	r3, r1
 80130ac:	3308      	adds	r3, #8
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	687a      	ldr	r2, [r7, #4]
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d102      	bne.n	80130bc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80130b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80130ba:	e100      	b.n	80132be <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80130bc:	7dfb      	ldrb	r3, [r7, #23]
 80130be:	2b01      	cmp	r3, #1
 80130c0:	d140      	bne.n	8013144 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80130c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130c6:	4980      	ldr	r1, [pc, #512]	; (80132c8 <etharp_find_entry+0x2d4>)
 80130c8:	4613      	mov	r3, r2
 80130ca:	005b      	lsls	r3, r3, #1
 80130cc:	4413      	add	r3, r2
 80130ce:	00db      	lsls	r3, r3, #3
 80130d0:	440b      	add	r3, r1
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d01a      	beq.n	801310e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80130d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130dc:	497a      	ldr	r1, [pc, #488]	; (80132c8 <etharp_find_entry+0x2d4>)
 80130de:	4613      	mov	r3, r2
 80130e0:	005b      	lsls	r3, r3, #1
 80130e2:	4413      	add	r3, r2
 80130e4:	00db      	lsls	r3, r3, #3
 80130e6:	440b      	add	r3, r1
 80130e8:	3312      	adds	r3, #18
 80130ea:	881b      	ldrh	r3, [r3, #0]
 80130ec:	8bba      	ldrh	r2, [r7, #28]
 80130ee:	429a      	cmp	r2, r3
 80130f0:	d845      	bhi.n	801317e <etharp_find_entry+0x18a>
            old_queue = i;
 80130f2:	8c3b      	ldrh	r3, [r7, #32]
 80130f4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80130f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130fa:	4973      	ldr	r1, [pc, #460]	; (80132c8 <etharp_find_entry+0x2d4>)
 80130fc:	4613      	mov	r3, r2
 80130fe:	005b      	lsls	r3, r3, #1
 8013100:	4413      	add	r3, r2
 8013102:	00db      	lsls	r3, r3, #3
 8013104:	440b      	add	r3, r1
 8013106:	3312      	adds	r3, #18
 8013108:	881b      	ldrh	r3, [r3, #0]
 801310a:	83bb      	strh	r3, [r7, #28]
 801310c:	e037      	b.n	801317e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801310e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013112:	496d      	ldr	r1, [pc, #436]	; (80132c8 <etharp_find_entry+0x2d4>)
 8013114:	4613      	mov	r3, r2
 8013116:	005b      	lsls	r3, r3, #1
 8013118:	4413      	add	r3, r2
 801311a:	00db      	lsls	r3, r3, #3
 801311c:	440b      	add	r3, r1
 801311e:	3312      	adds	r3, #18
 8013120:	881b      	ldrh	r3, [r3, #0]
 8013122:	8b7a      	ldrh	r2, [r7, #26]
 8013124:	429a      	cmp	r2, r3
 8013126:	d82a      	bhi.n	801317e <etharp_find_entry+0x18a>
            old_pending = i;
 8013128:	8c3b      	ldrh	r3, [r7, #32]
 801312a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801312c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013130:	4965      	ldr	r1, [pc, #404]	; (80132c8 <etharp_find_entry+0x2d4>)
 8013132:	4613      	mov	r3, r2
 8013134:	005b      	lsls	r3, r3, #1
 8013136:	4413      	add	r3, r2
 8013138:	00db      	lsls	r3, r3, #3
 801313a:	440b      	add	r3, r1
 801313c:	3312      	adds	r3, #18
 801313e:	881b      	ldrh	r3, [r3, #0]
 8013140:	837b      	strh	r3, [r7, #26]
 8013142:	e01c      	b.n	801317e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013144:	7dfb      	ldrb	r3, [r7, #23]
 8013146:	2b01      	cmp	r3, #1
 8013148:	d919      	bls.n	801317e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801314a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801314e:	495e      	ldr	r1, [pc, #376]	; (80132c8 <etharp_find_entry+0x2d4>)
 8013150:	4613      	mov	r3, r2
 8013152:	005b      	lsls	r3, r3, #1
 8013154:	4413      	add	r3, r2
 8013156:	00db      	lsls	r3, r3, #3
 8013158:	440b      	add	r3, r1
 801315a:	3312      	adds	r3, #18
 801315c:	881b      	ldrh	r3, [r3, #0]
 801315e:	8b3a      	ldrh	r2, [r7, #24]
 8013160:	429a      	cmp	r2, r3
 8013162:	d80c      	bhi.n	801317e <etharp_find_entry+0x18a>
            old_stable = i;
 8013164:	8c3b      	ldrh	r3, [r7, #32]
 8013166:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013168:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801316c:	4956      	ldr	r1, [pc, #344]	; (80132c8 <etharp_find_entry+0x2d4>)
 801316e:	4613      	mov	r3, r2
 8013170:	005b      	lsls	r3, r3, #1
 8013172:	4413      	add	r3, r2
 8013174:	00db      	lsls	r3, r3, #3
 8013176:	440b      	add	r3, r1
 8013178:	3312      	adds	r3, #18
 801317a:	881b      	ldrh	r3, [r3, #0]
 801317c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801317e:	8c3b      	ldrh	r3, [r7, #32]
 8013180:	3301      	adds	r3, #1
 8013182:	b29b      	uxth	r3, r3
 8013184:	843b      	strh	r3, [r7, #32]
 8013186:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801318a:	2b09      	cmp	r3, #9
 801318c:	f77f af4c 	ble.w	8013028 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013190:	7afb      	ldrb	r3, [r7, #11]
 8013192:	f003 0302 	and.w	r3, r3, #2
 8013196:	2b00      	cmp	r3, #0
 8013198:	d108      	bne.n	80131ac <etharp_find_entry+0x1b8>
 801319a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801319e:	2b0a      	cmp	r3, #10
 80131a0:	d107      	bne.n	80131b2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80131a2:	7afb      	ldrb	r3, [r7, #11]
 80131a4:	f003 0301 	and.w	r3, r3, #1
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d102      	bne.n	80131b2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80131ac:	f04f 33ff 	mov.w	r3, #4294967295
 80131b0:	e085      	b.n	80132be <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80131b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80131b6:	2b09      	cmp	r3, #9
 80131b8:	dc02      	bgt.n	80131c0 <etharp_find_entry+0x1cc>
    i = empty;
 80131ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80131bc:	843b      	strh	r3, [r7, #32]
 80131be:	e039      	b.n	8013234 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80131c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80131c4:	2b09      	cmp	r3, #9
 80131c6:	dc14      	bgt.n	80131f2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80131c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131ca:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80131cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131d0:	493d      	ldr	r1, [pc, #244]	; (80132c8 <etharp_find_entry+0x2d4>)
 80131d2:	4613      	mov	r3, r2
 80131d4:	005b      	lsls	r3, r3, #1
 80131d6:	4413      	add	r3, r2
 80131d8:	00db      	lsls	r3, r3, #3
 80131da:	440b      	add	r3, r1
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d018      	beq.n	8013214 <etharp_find_entry+0x220>
 80131e2:	4b3a      	ldr	r3, [pc, #232]	; (80132cc <etharp_find_entry+0x2d8>)
 80131e4:	f240 126d 	movw	r2, #365	; 0x16d
 80131e8:	493b      	ldr	r1, [pc, #236]	; (80132d8 <etharp_find_entry+0x2e4>)
 80131ea:	483a      	ldr	r0, [pc, #232]	; (80132d4 <etharp_find_entry+0x2e0>)
 80131ec:	f002 f938 	bl	8015460 <iprintf>
 80131f0:	e010      	b.n	8013214 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80131f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80131f6:	2b09      	cmp	r3, #9
 80131f8:	dc02      	bgt.n	8013200 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80131fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80131fc:	843b      	strh	r3, [r7, #32]
 80131fe:	e009      	b.n	8013214 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013200:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013204:	2b09      	cmp	r3, #9
 8013206:	dc02      	bgt.n	801320e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013208:	8bfb      	ldrh	r3, [r7, #30]
 801320a:	843b      	strh	r3, [r7, #32]
 801320c:	e002      	b.n	8013214 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801320e:	f04f 33ff 	mov.w	r3, #4294967295
 8013212:	e054      	b.n	80132be <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013214:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013218:	2b09      	cmp	r3, #9
 801321a:	dd06      	ble.n	801322a <etharp_find_entry+0x236>
 801321c:	4b2b      	ldr	r3, [pc, #172]	; (80132cc <etharp_find_entry+0x2d8>)
 801321e:	f240 127f 	movw	r2, #383	; 0x17f
 8013222:	492e      	ldr	r1, [pc, #184]	; (80132dc <etharp_find_entry+0x2e8>)
 8013224:	482b      	ldr	r0, [pc, #172]	; (80132d4 <etharp_find_entry+0x2e0>)
 8013226:	f002 f91b 	bl	8015460 <iprintf>
    etharp_free_entry(i);
 801322a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801322e:	4618      	mov	r0, r3
 8013230:	f7ff fe06 	bl	8012e40 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013234:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013238:	2b09      	cmp	r3, #9
 801323a:	dd06      	ble.n	801324a <etharp_find_entry+0x256>
 801323c:	4b23      	ldr	r3, [pc, #140]	; (80132cc <etharp_find_entry+0x2d8>)
 801323e:	f240 1283 	movw	r2, #387	; 0x183
 8013242:	4926      	ldr	r1, [pc, #152]	; (80132dc <etharp_find_entry+0x2e8>)
 8013244:	4823      	ldr	r0, [pc, #140]	; (80132d4 <etharp_find_entry+0x2e0>)
 8013246:	f002 f90b 	bl	8015460 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801324a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801324e:	491e      	ldr	r1, [pc, #120]	; (80132c8 <etharp_find_entry+0x2d4>)
 8013250:	4613      	mov	r3, r2
 8013252:	005b      	lsls	r3, r3, #1
 8013254:	4413      	add	r3, r2
 8013256:	00db      	lsls	r3, r3, #3
 8013258:	440b      	add	r3, r1
 801325a:	3314      	adds	r3, #20
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d006      	beq.n	8013270 <etharp_find_entry+0x27c>
 8013262:	4b1a      	ldr	r3, [pc, #104]	; (80132cc <etharp_find_entry+0x2d8>)
 8013264:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013268:	491d      	ldr	r1, [pc, #116]	; (80132e0 <etharp_find_entry+0x2ec>)
 801326a:	481a      	ldr	r0, [pc, #104]	; (80132d4 <etharp_find_entry+0x2e0>)
 801326c:	f002 f8f8 	bl	8015460 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d00b      	beq.n	801328e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013276:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	6819      	ldr	r1, [r3, #0]
 801327e:	4812      	ldr	r0, [pc, #72]	; (80132c8 <etharp_find_entry+0x2d4>)
 8013280:	4613      	mov	r3, r2
 8013282:	005b      	lsls	r3, r3, #1
 8013284:	4413      	add	r3, r2
 8013286:	00db      	lsls	r3, r3, #3
 8013288:	4403      	add	r3, r0
 801328a:	3304      	adds	r3, #4
 801328c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801328e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013292:	490d      	ldr	r1, [pc, #52]	; (80132c8 <etharp_find_entry+0x2d4>)
 8013294:	4613      	mov	r3, r2
 8013296:	005b      	lsls	r3, r3, #1
 8013298:	4413      	add	r3, r2
 801329a:	00db      	lsls	r3, r3, #3
 801329c:	440b      	add	r3, r1
 801329e:	3312      	adds	r3, #18
 80132a0:	2200      	movs	r2, #0
 80132a2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80132a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132a8:	4907      	ldr	r1, [pc, #28]	; (80132c8 <etharp_find_entry+0x2d4>)
 80132aa:	4613      	mov	r3, r2
 80132ac:	005b      	lsls	r3, r3, #1
 80132ae:	4413      	add	r3, r2
 80132b0:	00db      	lsls	r3, r3, #3
 80132b2:	440b      	add	r3, r1
 80132b4:	3308      	adds	r3, #8
 80132b6:	687a      	ldr	r2, [r7, #4]
 80132b8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80132ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80132be:	4618      	mov	r0, r3
 80132c0:	3728      	adds	r7, #40	; 0x28
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
 80132c6:	bf00      	nop
 80132c8:	20008c00 	.word	0x20008c00
 80132cc:	08018b68 	.word	0x08018b68
 80132d0:	08018ba0 	.word	0x08018ba0
 80132d4:	08018be0 	.word	0x08018be0
 80132d8:	08018c08 	.word	0x08018c08
 80132dc:	08018c20 	.word	0x08018c20
 80132e0:	08018c34 	.word	0x08018c34

080132e4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b088      	sub	sp, #32
 80132e8:	af02      	add	r7, sp, #8
 80132ea:	60f8      	str	r0, [r7, #12]
 80132ec:	60b9      	str	r1, [r7, #8]
 80132ee:	607a      	str	r2, [r7, #4]
 80132f0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80132f8:	2b06      	cmp	r3, #6
 80132fa:	d006      	beq.n	801330a <etharp_update_arp_entry+0x26>
 80132fc:	4b48      	ldr	r3, [pc, #288]	; (8013420 <etharp_update_arp_entry+0x13c>)
 80132fe:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013302:	4948      	ldr	r1, [pc, #288]	; (8013424 <etharp_update_arp_entry+0x140>)
 8013304:	4848      	ldr	r0, [pc, #288]	; (8013428 <etharp_update_arp_entry+0x144>)
 8013306:	f002 f8ab 	bl	8015460 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d012      	beq.n	8013336 <etharp_update_arp_entry+0x52>
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d00e      	beq.n	8013336 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	68f9      	ldr	r1, [r7, #12]
 801331e:	4618      	mov	r0, r3
 8013320:	f001 f8fe 	bl	8014520 <ip4_addr_isbroadcast_u32>
 8013324:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013326:	2b00      	cmp	r3, #0
 8013328:	d105      	bne.n	8013336 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013332:	2be0      	cmp	r3, #224	; 0xe0
 8013334:	d102      	bne.n	801333c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013336:	f06f 030f 	mvn.w	r3, #15
 801333a:	e06c      	b.n	8013416 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801333c:	78fb      	ldrb	r3, [r7, #3]
 801333e:	68fa      	ldr	r2, [r7, #12]
 8013340:	4619      	mov	r1, r3
 8013342:	68b8      	ldr	r0, [r7, #8]
 8013344:	f7ff fe56 	bl	8012ff4 <etharp_find_entry>
 8013348:	4603      	mov	r3, r0
 801334a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801334c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013350:	2b00      	cmp	r3, #0
 8013352:	da02      	bge.n	801335a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013354:	8afb      	ldrh	r3, [r7, #22]
 8013356:	b25b      	sxtb	r3, r3
 8013358:	e05d      	b.n	8013416 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801335a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801335e:	4933      	ldr	r1, [pc, #204]	; (801342c <etharp_update_arp_entry+0x148>)
 8013360:	4613      	mov	r3, r2
 8013362:	005b      	lsls	r3, r3, #1
 8013364:	4413      	add	r3, r2
 8013366:	00db      	lsls	r3, r3, #3
 8013368:	440b      	add	r3, r1
 801336a:	3314      	adds	r3, #20
 801336c:	2202      	movs	r2, #2
 801336e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013370:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013374:	492d      	ldr	r1, [pc, #180]	; (801342c <etharp_update_arp_entry+0x148>)
 8013376:	4613      	mov	r3, r2
 8013378:	005b      	lsls	r3, r3, #1
 801337a:	4413      	add	r3, r2
 801337c:	00db      	lsls	r3, r3, #3
 801337e:	440b      	add	r3, r1
 8013380:	3308      	adds	r3, #8
 8013382:	68fa      	ldr	r2, [r7, #12]
 8013384:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013386:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801338a:	4613      	mov	r3, r2
 801338c:	005b      	lsls	r3, r3, #1
 801338e:	4413      	add	r3, r2
 8013390:	00db      	lsls	r3, r3, #3
 8013392:	3308      	adds	r3, #8
 8013394:	4a25      	ldr	r2, [pc, #148]	; (801342c <etharp_update_arp_entry+0x148>)
 8013396:	4413      	add	r3, r2
 8013398:	3304      	adds	r3, #4
 801339a:	2206      	movs	r2, #6
 801339c:	6879      	ldr	r1, [r7, #4]
 801339e:	4618      	mov	r0, r3
 80133a0:	f002 f848 	bl	8015434 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80133a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133a8:	4920      	ldr	r1, [pc, #128]	; (801342c <etharp_update_arp_entry+0x148>)
 80133aa:	4613      	mov	r3, r2
 80133ac:	005b      	lsls	r3, r3, #1
 80133ae:	4413      	add	r3, r2
 80133b0:	00db      	lsls	r3, r3, #3
 80133b2:	440b      	add	r3, r1
 80133b4:	3312      	adds	r3, #18
 80133b6:	2200      	movs	r2, #0
 80133b8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80133ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133be:	491b      	ldr	r1, [pc, #108]	; (801342c <etharp_update_arp_entry+0x148>)
 80133c0:	4613      	mov	r3, r2
 80133c2:	005b      	lsls	r3, r3, #1
 80133c4:	4413      	add	r3, r2
 80133c6:	00db      	lsls	r3, r3, #3
 80133c8:	440b      	add	r3, r1
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d021      	beq.n	8013414 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80133d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133d4:	4915      	ldr	r1, [pc, #84]	; (801342c <etharp_update_arp_entry+0x148>)
 80133d6:	4613      	mov	r3, r2
 80133d8:	005b      	lsls	r3, r3, #1
 80133da:	4413      	add	r3, r2
 80133dc:	00db      	lsls	r3, r3, #3
 80133de:	440b      	add	r3, r1
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80133e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133e8:	4910      	ldr	r1, [pc, #64]	; (801342c <etharp_update_arp_entry+0x148>)
 80133ea:	4613      	mov	r3, r2
 80133ec:	005b      	lsls	r3, r3, #1
 80133ee:	4413      	add	r3, r2
 80133f0:	00db      	lsls	r3, r3, #3
 80133f2:	440b      	add	r3, r1
 80133f4:	2200      	movs	r2, #0
 80133f6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80133fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6939      	ldr	r1, [r7, #16]
 8013408:	68f8      	ldr	r0, [r7, #12]
 801340a:	f001 ff97 	bl	801533c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801340e:	6938      	ldr	r0, [r7, #16]
 8013410:	f7f8 fe18 	bl	800c044 <pbuf_free>
  }
  return ERR_OK;
 8013414:	2300      	movs	r3, #0
}
 8013416:	4618      	mov	r0, r3
 8013418:	3718      	adds	r7, #24
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
 801341e:	bf00      	nop
 8013420:	08018b68 	.word	0x08018b68
 8013424:	08018c60 	.word	0x08018c60
 8013428:	08018be0 	.word	0x08018be0
 801342c:	20008c00 	.word	0x20008c00

08013430 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b084      	sub	sp, #16
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013438:	2300      	movs	r3, #0
 801343a:	60fb      	str	r3, [r7, #12]
 801343c:	e01e      	b.n	801347c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801343e:	4913      	ldr	r1, [pc, #76]	; (801348c <etharp_cleanup_netif+0x5c>)
 8013440:	68fa      	ldr	r2, [r7, #12]
 8013442:	4613      	mov	r3, r2
 8013444:	005b      	lsls	r3, r3, #1
 8013446:	4413      	add	r3, r2
 8013448:	00db      	lsls	r3, r3, #3
 801344a:	440b      	add	r3, r1
 801344c:	3314      	adds	r3, #20
 801344e:	781b      	ldrb	r3, [r3, #0]
 8013450:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013452:	7afb      	ldrb	r3, [r7, #11]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d00e      	beq.n	8013476 <etharp_cleanup_netif+0x46>
 8013458:	490c      	ldr	r1, [pc, #48]	; (801348c <etharp_cleanup_netif+0x5c>)
 801345a:	68fa      	ldr	r2, [r7, #12]
 801345c:	4613      	mov	r3, r2
 801345e:	005b      	lsls	r3, r3, #1
 8013460:	4413      	add	r3, r2
 8013462:	00db      	lsls	r3, r3, #3
 8013464:	440b      	add	r3, r1
 8013466:	3308      	adds	r3, #8
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	687a      	ldr	r2, [r7, #4]
 801346c:	429a      	cmp	r2, r3
 801346e:	d102      	bne.n	8013476 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	f7ff fce5 	bl	8012e40 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	3301      	adds	r3, #1
 801347a:	60fb      	str	r3, [r7, #12]
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2b09      	cmp	r3, #9
 8013480:	dddd      	ble.n	801343e <etharp_cleanup_netif+0xe>
    }
  }
}
 8013482:	bf00      	nop
 8013484:	bf00      	nop
 8013486:	3710      	adds	r7, #16
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}
 801348c:	20008c00 	.word	0x20008c00

08013490 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013490:	b5b0      	push	{r4, r5, r7, lr}
 8013492:	b08a      	sub	sp, #40	; 0x28
 8013494:	af04      	add	r7, sp, #16
 8013496:	6078      	str	r0, [r7, #4]
 8013498:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d107      	bne.n	80134b0 <etharp_input+0x20>
 80134a0:	4b3d      	ldr	r3, [pc, #244]	; (8013598 <etharp_input+0x108>)
 80134a2:	f240 228a 	movw	r2, #650	; 0x28a
 80134a6:	493d      	ldr	r1, [pc, #244]	; (801359c <etharp_input+0x10c>)
 80134a8:	483d      	ldr	r0, [pc, #244]	; (80135a0 <etharp_input+0x110>)
 80134aa:	f001 ffd9 	bl	8015460 <iprintf>
 80134ae:	e06f      	b.n	8013590 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	881b      	ldrh	r3, [r3, #0]
 80134ba:	b29b      	uxth	r3, r3
 80134bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134c0:	d10c      	bne.n	80134dc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80134c2:	693b      	ldr	r3, [r7, #16]
 80134c4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80134c6:	2b06      	cmp	r3, #6
 80134c8:	d108      	bne.n	80134dc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80134ce:	2b04      	cmp	r3, #4
 80134d0:	d104      	bne.n	80134dc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	885b      	ldrh	r3, [r3, #2]
 80134d6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80134d8:	2b08      	cmp	r3, #8
 80134da:	d003      	beq.n	80134e4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f7f8 fdb1 	bl	800c044 <pbuf_free>
    return;
 80134e2:	e055      	b.n	8013590 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	330e      	adds	r3, #14
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	3318      	adds	r3, #24
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	3304      	adds	r3, #4
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d102      	bne.n	8013504 <etharp_input+0x74>
    for_us = 0;
 80134fe:	2300      	movs	r3, #0
 8013500:	75fb      	strb	r3, [r7, #23]
 8013502:	e009      	b.n	8013518 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013504:	68ba      	ldr	r2, [r7, #8]
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	3304      	adds	r3, #4
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	429a      	cmp	r2, r3
 801350e:	bf0c      	ite	eq
 8013510:	2301      	moveq	r3, #1
 8013512:	2300      	movne	r3, #0
 8013514:	b2db      	uxtb	r3, r3
 8013516:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	f103 0208 	add.w	r2, r3, #8
 801351e:	7dfb      	ldrb	r3, [r7, #23]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d001      	beq.n	8013528 <etharp_input+0x98>
 8013524:	2301      	movs	r3, #1
 8013526:	e000      	b.n	801352a <etharp_input+0x9a>
 8013528:	2302      	movs	r3, #2
 801352a:	f107 010c 	add.w	r1, r7, #12
 801352e:	6838      	ldr	r0, [r7, #0]
 8013530:	f7ff fed8 	bl	80132e4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	88db      	ldrh	r3, [r3, #6]
 8013538:	b29b      	uxth	r3, r3
 801353a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801353e:	d003      	beq.n	8013548 <etharp_input+0xb8>
 8013540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013544:	d01e      	beq.n	8013584 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013546:	e020      	b.n	801358a <etharp_input+0xfa>
      if (for_us) {
 8013548:	7dfb      	ldrb	r3, [r7, #23]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d01c      	beq.n	8013588 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801355a:	683b      	ldr	r3, [r7, #0]
 801355c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013564:	693a      	ldr	r2, [r7, #16]
 8013566:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013568:	2102      	movs	r1, #2
 801356a:	9103      	str	r1, [sp, #12]
 801356c:	f107 010c 	add.w	r1, r7, #12
 8013570:	9102      	str	r1, [sp, #8]
 8013572:	9201      	str	r2, [sp, #4]
 8013574:	9300      	str	r3, [sp, #0]
 8013576:	462b      	mov	r3, r5
 8013578:	4622      	mov	r2, r4
 801357a:	4601      	mov	r1, r0
 801357c:	6838      	ldr	r0, [r7, #0]
 801357e:	f000 faeb 	bl	8013b58 <etharp_raw>
      break;
 8013582:	e001      	b.n	8013588 <etharp_input+0xf8>
      break;
 8013584:	bf00      	nop
 8013586:	e000      	b.n	801358a <etharp_input+0xfa>
      break;
 8013588:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f7f8 fd5a 	bl	800c044 <pbuf_free>
}
 8013590:	3718      	adds	r7, #24
 8013592:	46bd      	mov	sp, r7
 8013594:	bdb0      	pop	{r4, r5, r7, pc}
 8013596:	bf00      	nop
 8013598:	08018b68 	.word	0x08018b68
 801359c:	08018cb8 	.word	0x08018cb8
 80135a0:	08018be0 	.word	0x08018be0

080135a4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80135a4:	b580      	push	{r7, lr}
 80135a6:	b086      	sub	sp, #24
 80135a8:	af02      	add	r7, sp, #8
 80135aa:	60f8      	str	r0, [r7, #12]
 80135ac:	60b9      	str	r1, [r7, #8]
 80135ae:	4613      	mov	r3, r2
 80135b0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80135b2:	79fa      	ldrb	r2, [r7, #7]
 80135b4:	4944      	ldr	r1, [pc, #272]	; (80136c8 <etharp_output_to_arp_index+0x124>)
 80135b6:	4613      	mov	r3, r2
 80135b8:	005b      	lsls	r3, r3, #1
 80135ba:	4413      	add	r3, r2
 80135bc:	00db      	lsls	r3, r3, #3
 80135be:	440b      	add	r3, r1
 80135c0:	3314      	adds	r3, #20
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	2b01      	cmp	r3, #1
 80135c6:	d806      	bhi.n	80135d6 <etharp_output_to_arp_index+0x32>
 80135c8:	4b40      	ldr	r3, [pc, #256]	; (80136cc <etharp_output_to_arp_index+0x128>)
 80135ca:	f240 22ee 	movw	r2, #750	; 0x2ee
 80135ce:	4940      	ldr	r1, [pc, #256]	; (80136d0 <etharp_output_to_arp_index+0x12c>)
 80135d0:	4840      	ldr	r0, [pc, #256]	; (80136d4 <etharp_output_to_arp_index+0x130>)
 80135d2:	f001 ff45 	bl	8015460 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80135d6:	79fa      	ldrb	r2, [r7, #7]
 80135d8:	493b      	ldr	r1, [pc, #236]	; (80136c8 <etharp_output_to_arp_index+0x124>)
 80135da:	4613      	mov	r3, r2
 80135dc:	005b      	lsls	r3, r3, #1
 80135de:	4413      	add	r3, r2
 80135e0:	00db      	lsls	r3, r3, #3
 80135e2:	440b      	add	r3, r1
 80135e4:	3314      	adds	r3, #20
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	2b02      	cmp	r3, #2
 80135ea:	d153      	bne.n	8013694 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80135ec:	79fa      	ldrb	r2, [r7, #7]
 80135ee:	4936      	ldr	r1, [pc, #216]	; (80136c8 <etharp_output_to_arp_index+0x124>)
 80135f0:	4613      	mov	r3, r2
 80135f2:	005b      	lsls	r3, r3, #1
 80135f4:	4413      	add	r3, r2
 80135f6:	00db      	lsls	r3, r3, #3
 80135f8:	440b      	add	r3, r1
 80135fa:	3312      	adds	r3, #18
 80135fc:	881b      	ldrh	r3, [r3, #0]
 80135fe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013602:	d919      	bls.n	8013638 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013604:	79fa      	ldrb	r2, [r7, #7]
 8013606:	4613      	mov	r3, r2
 8013608:	005b      	lsls	r3, r3, #1
 801360a:	4413      	add	r3, r2
 801360c:	00db      	lsls	r3, r3, #3
 801360e:	4a2e      	ldr	r2, [pc, #184]	; (80136c8 <etharp_output_to_arp_index+0x124>)
 8013610:	4413      	add	r3, r2
 8013612:	3304      	adds	r3, #4
 8013614:	4619      	mov	r1, r3
 8013616:	68f8      	ldr	r0, [r7, #12]
 8013618:	f000 fb4c 	bl	8013cb4 <etharp_request>
 801361c:	4603      	mov	r3, r0
 801361e:	2b00      	cmp	r3, #0
 8013620:	d138      	bne.n	8013694 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013622:	79fa      	ldrb	r2, [r7, #7]
 8013624:	4928      	ldr	r1, [pc, #160]	; (80136c8 <etharp_output_to_arp_index+0x124>)
 8013626:	4613      	mov	r3, r2
 8013628:	005b      	lsls	r3, r3, #1
 801362a:	4413      	add	r3, r2
 801362c:	00db      	lsls	r3, r3, #3
 801362e:	440b      	add	r3, r1
 8013630:	3314      	adds	r3, #20
 8013632:	2203      	movs	r2, #3
 8013634:	701a      	strb	r2, [r3, #0]
 8013636:	e02d      	b.n	8013694 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013638:	79fa      	ldrb	r2, [r7, #7]
 801363a:	4923      	ldr	r1, [pc, #140]	; (80136c8 <etharp_output_to_arp_index+0x124>)
 801363c:	4613      	mov	r3, r2
 801363e:	005b      	lsls	r3, r3, #1
 8013640:	4413      	add	r3, r2
 8013642:	00db      	lsls	r3, r3, #3
 8013644:	440b      	add	r3, r1
 8013646:	3312      	adds	r3, #18
 8013648:	881b      	ldrh	r3, [r3, #0]
 801364a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801364e:	d321      	bcc.n	8013694 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013650:	79fa      	ldrb	r2, [r7, #7]
 8013652:	4613      	mov	r3, r2
 8013654:	005b      	lsls	r3, r3, #1
 8013656:	4413      	add	r3, r2
 8013658:	00db      	lsls	r3, r3, #3
 801365a:	4a1b      	ldr	r2, [pc, #108]	; (80136c8 <etharp_output_to_arp_index+0x124>)
 801365c:	4413      	add	r3, r2
 801365e:	1d19      	adds	r1, r3, #4
 8013660:	79fa      	ldrb	r2, [r7, #7]
 8013662:	4613      	mov	r3, r2
 8013664:	005b      	lsls	r3, r3, #1
 8013666:	4413      	add	r3, r2
 8013668:	00db      	lsls	r3, r3, #3
 801366a:	3308      	adds	r3, #8
 801366c:	4a16      	ldr	r2, [pc, #88]	; (80136c8 <etharp_output_to_arp_index+0x124>)
 801366e:	4413      	add	r3, r2
 8013670:	3304      	adds	r3, #4
 8013672:	461a      	mov	r2, r3
 8013674:	68f8      	ldr	r0, [r7, #12]
 8013676:	f000 fafb 	bl	8013c70 <etharp_request_dst>
 801367a:	4603      	mov	r3, r0
 801367c:	2b00      	cmp	r3, #0
 801367e:	d109      	bne.n	8013694 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013680:	79fa      	ldrb	r2, [r7, #7]
 8013682:	4911      	ldr	r1, [pc, #68]	; (80136c8 <etharp_output_to_arp_index+0x124>)
 8013684:	4613      	mov	r3, r2
 8013686:	005b      	lsls	r3, r3, #1
 8013688:	4413      	add	r3, r2
 801368a:	00db      	lsls	r3, r3, #3
 801368c:	440b      	add	r3, r1
 801368e:	3314      	adds	r3, #20
 8013690:	2203      	movs	r2, #3
 8013692:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801369a:	79fa      	ldrb	r2, [r7, #7]
 801369c:	4613      	mov	r3, r2
 801369e:	005b      	lsls	r3, r3, #1
 80136a0:	4413      	add	r3, r2
 80136a2:	00db      	lsls	r3, r3, #3
 80136a4:	3308      	adds	r3, #8
 80136a6:	4a08      	ldr	r2, [pc, #32]	; (80136c8 <etharp_output_to_arp_index+0x124>)
 80136a8:	4413      	add	r3, r2
 80136aa:	3304      	adds	r3, #4
 80136ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80136b0:	9200      	str	r2, [sp, #0]
 80136b2:	460a      	mov	r2, r1
 80136b4:	68b9      	ldr	r1, [r7, #8]
 80136b6:	68f8      	ldr	r0, [r7, #12]
 80136b8:	f001 fe40 	bl	801533c <ethernet_output>
 80136bc:	4603      	mov	r3, r0
}
 80136be:	4618      	mov	r0, r3
 80136c0:	3710      	adds	r7, #16
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}
 80136c6:	bf00      	nop
 80136c8:	20008c00 	.word	0x20008c00
 80136cc:	08018b68 	.word	0x08018b68
 80136d0:	08018cd8 	.word	0x08018cd8
 80136d4:	08018be0 	.word	0x08018be0

080136d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b08a      	sub	sp, #40	; 0x28
 80136dc:	af02      	add	r7, sp, #8
 80136de:	60f8      	str	r0, [r7, #12]
 80136e0:	60b9      	str	r1, [r7, #8]
 80136e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d106      	bne.n	80136fc <etharp_output+0x24>
 80136ee:	4b73      	ldr	r3, [pc, #460]	; (80138bc <etharp_output+0x1e4>)
 80136f0:	f240 321e 	movw	r2, #798	; 0x31e
 80136f4:	4972      	ldr	r1, [pc, #456]	; (80138c0 <etharp_output+0x1e8>)
 80136f6:	4873      	ldr	r0, [pc, #460]	; (80138c4 <etharp_output+0x1ec>)
 80136f8:	f001 feb2 	bl	8015460 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d106      	bne.n	8013710 <etharp_output+0x38>
 8013702:	4b6e      	ldr	r3, [pc, #440]	; (80138bc <etharp_output+0x1e4>)
 8013704:	f240 321f 	movw	r2, #799	; 0x31f
 8013708:	496f      	ldr	r1, [pc, #444]	; (80138c8 <etharp_output+0x1f0>)
 801370a:	486e      	ldr	r0, [pc, #440]	; (80138c4 <etharp_output+0x1ec>)
 801370c:	f001 fea8 	bl	8015460 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d106      	bne.n	8013724 <etharp_output+0x4c>
 8013716:	4b69      	ldr	r3, [pc, #420]	; (80138bc <etharp_output+0x1e4>)
 8013718:	f44f 7248 	mov.w	r2, #800	; 0x320
 801371c:	496b      	ldr	r1, [pc, #428]	; (80138cc <etharp_output+0x1f4>)
 801371e:	4869      	ldr	r0, [pc, #420]	; (80138c4 <etharp_output+0x1ec>)
 8013720:	f001 fe9e 	bl	8015460 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	68f9      	ldr	r1, [r7, #12]
 801372a:	4618      	mov	r0, r3
 801372c:	f000 fef8 	bl	8014520 <ip4_addr_isbroadcast_u32>
 8013730:	4603      	mov	r3, r0
 8013732:	2b00      	cmp	r3, #0
 8013734:	d002      	beq.n	801373c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013736:	4b66      	ldr	r3, [pc, #408]	; (80138d0 <etharp_output+0x1f8>)
 8013738:	61fb      	str	r3, [r7, #28]
 801373a:	e0af      	b.n	801389c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013744:	2be0      	cmp	r3, #224	; 0xe0
 8013746:	d118      	bne.n	801377a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013748:	2301      	movs	r3, #1
 801374a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801374c:	2300      	movs	r3, #0
 801374e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013750:	235e      	movs	r3, #94	; 0x5e
 8013752:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	3301      	adds	r3, #1
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801375e:	b2db      	uxtb	r3, r3
 8013760:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	3302      	adds	r3, #2
 8013766:	781b      	ldrb	r3, [r3, #0]
 8013768:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	3303      	adds	r3, #3
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013772:	f107 0310 	add.w	r3, r7, #16
 8013776:	61fb      	str	r3, [r7, #28]
 8013778:	e090      	b.n	801389c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681a      	ldr	r2, [r3, #0]
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	3304      	adds	r3, #4
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	405a      	eors	r2, r3
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	3308      	adds	r3, #8
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	4013      	ands	r3, r2
 801378e:	2b00      	cmp	r3, #0
 8013790:	d012      	beq.n	80137b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013798:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801379c:	4293      	cmp	r3, r2
 801379e:	d00b      	beq.n	80137b8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	330c      	adds	r3, #12
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d003      	beq.n	80137b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	330c      	adds	r3, #12
 80137ae:	61bb      	str	r3, [r7, #24]
 80137b0:	e002      	b.n	80137b8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80137b2:	f06f 0303 	mvn.w	r3, #3
 80137b6:	e07d      	b.n	80138b4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80137b8:	4b46      	ldr	r3, [pc, #280]	; (80138d4 <etharp_output+0x1fc>)
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	4619      	mov	r1, r3
 80137be:	4a46      	ldr	r2, [pc, #280]	; (80138d8 <etharp_output+0x200>)
 80137c0:	460b      	mov	r3, r1
 80137c2:	005b      	lsls	r3, r3, #1
 80137c4:	440b      	add	r3, r1
 80137c6:	00db      	lsls	r3, r3, #3
 80137c8:	4413      	add	r3, r2
 80137ca:	3314      	adds	r3, #20
 80137cc:	781b      	ldrb	r3, [r3, #0]
 80137ce:	2b01      	cmp	r3, #1
 80137d0:	d925      	bls.n	801381e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80137d2:	4b40      	ldr	r3, [pc, #256]	; (80138d4 <etharp_output+0x1fc>)
 80137d4:	781b      	ldrb	r3, [r3, #0]
 80137d6:	4619      	mov	r1, r3
 80137d8:	4a3f      	ldr	r2, [pc, #252]	; (80138d8 <etharp_output+0x200>)
 80137da:	460b      	mov	r3, r1
 80137dc:	005b      	lsls	r3, r3, #1
 80137de:	440b      	add	r3, r1
 80137e0:	00db      	lsls	r3, r3, #3
 80137e2:	4413      	add	r3, r2
 80137e4:	3308      	adds	r3, #8
 80137e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80137e8:	68fa      	ldr	r2, [r7, #12]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d117      	bne.n	801381e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	681a      	ldr	r2, [r3, #0]
 80137f2:	4b38      	ldr	r3, [pc, #224]	; (80138d4 <etharp_output+0x1fc>)
 80137f4:	781b      	ldrb	r3, [r3, #0]
 80137f6:	4618      	mov	r0, r3
 80137f8:	4937      	ldr	r1, [pc, #220]	; (80138d8 <etharp_output+0x200>)
 80137fa:	4603      	mov	r3, r0
 80137fc:	005b      	lsls	r3, r3, #1
 80137fe:	4403      	add	r3, r0
 8013800:	00db      	lsls	r3, r3, #3
 8013802:	440b      	add	r3, r1
 8013804:	3304      	adds	r3, #4
 8013806:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013808:	429a      	cmp	r2, r3
 801380a:	d108      	bne.n	801381e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801380c:	4b31      	ldr	r3, [pc, #196]	; (80138d4 <etharp_output+0x1fc>)
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	461a      	mov	r2, r3
 8013812:	68b9      	ldr	r1, [r7, #8]
 8013814:	68f8      	ldr	r0, [r7, #12]
 8013816:	f7ff fec5 	bl	80135a4 <etharp_output_to_arp_index>
 801381a:	4603      	mov	r3, r0
 801381c:	e04a      	b.n	80138b4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801381e:	2300      	movs	r3, #0
 8013820:	75fb      	strb	r3, [r7, #23]
 8013822:	e031      	b.n	8013888 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013824:	7dfa      	ldrb	r2, [r7, #23]
 8013826:	492c      	ldr	r1, [pc, #176]	; (80138d8 <etharp_output+0x200>)
 8013828:	4613      	mov	r3, r2
 801382a:	005b      	lsls	r3, r3, #1
 801382c:	4413      	add	r3, r2
 801382e:	00db      	lsls	r3, r3, #3
 8013830:	440b      	add	r3, r1
 8013832:	3314      	adds	r3, #20
 8013834:	781b      	ldrb	r3, [r3, #0]
 8013836:	2b01      	cmp	r3, #1
 8013838:	d923      	bls.n	8013882 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801383a:	7dfa      	ldrb	r2, [r7, #23]
 801383c:	4926      	ldr	r1, [pc, #152]	; (80138d8 <etharp_output+0x200>)
 801383e:	4613      	mov	r3, r2
 8013840:	005b      	lsls	r3, r3, #1
 8013842:	4413      	add	r3, r2
 8013844:	00db      	lsls	r3, r3, #3
 8013846:	440b      	add	r3, r1
 8013848:	3308      	adds	r3, #8
 801384a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801384c:	68fa      	ldr	r2, [r7, #12]
 801384e:	429a      	cmp	r2, r3
 8013850:	d117      	bne.n	8013882 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013852:	69bb      	ldr	r3, [r7, #24]
 8013854:	6819      	ldr	r1, [r3, #0]
 8013856:	7dfa      	ldrb	r2, [r7, #23]
 8013858:	481f      	ldr	r0, [pc, #124]	; (80138d8 <etharp_output+0x200>)
 801385a:	4613      	mov	r3, r2
 801385c:	005b      	lsls	r3, r3, #1
 801385e:	4413      	add	r3, r2
 8013860:	00db      	lsls	r3, r3, #3
 8013862:	4403      	add	r3, r0
 8013864:	3304      	adds	r3, #4
 8013866:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013868:	4299      	cmp	r1, r3
 801386a:	d10a      	bne.n	8013882 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801386c:	4a19      	ldr	r2, [pc, #100]	; (80138d4 <etharp_output+0x1fc>)
 801386e:	7dfb      	ldrb	r3, [r7, #23]
 8013870:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013872:	7dfb      	ldrb	r3, [r7, #23]
 8013874:	461a      	mov	r2, r3
 8013876:	68b9      	ldr	r1, [r7, #8]
 8013878:	68f8      	ldr	r0, [r7, #12]
 801387a:	f7ff fe93 	bl	80135a4 <etharp_output_to_arp_index>
 801387e:	4603      	mov	r3, r0
 8013880:	e018      	b.n	80138b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013882:	7dfb      	ldrb	r3, [r7, #23]
 8013884:	3301      	adds	r3, #1
 8013886:	75fb      	strb	r3, [r7, #23]
 8013888:	7dfb      	ldrb	r3, [r7, #23]
 801388a:	2b09      	cmp	r3, #9
 801388c:	d9ca      	bls.n	8013824 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801388e:	68ba      	ldr	r2, [r7, #8]
 8013890:	69b9      	ldr	r1, [r7, #24]
 8013892:	68f8      	ldr	r0, [r7, #12]
 8013894:	f000 f822 	bl	80138dc <etharp_query>
 8013898:	4603      	mov	r3, r0
 801389a:	e00b      	b.n	80138b4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80138a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80138a6:	9300      	str	r3, [sp, #0]
 80138a8:	69fb      	ldr	r3, [r7, #28]
 80138aa:	68b9      	ldr	r1, [r7, #8]
 80138ac:	68f8      	ldr	r0, [r7, #12]
 80138ae:	f001 fd45 	bl	801533c <ethernet_output>
 80138b2:	4603      	mov	r3, r0
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3720      	adds	r7, #32
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}
 80138bc:	08018b68 	.word	0x08018b68
 80138c0:	08018cb8 	.word	0x08018cb8
 80138c4:	08018be0 	.word	0x08018be0
 80138c8:	08018d08 	.word	0x08018d08
 80138cc:	08018ca8 	.word	0x08018ca8
 80138d0:	0801b258 	.word	0x0801b258
 80138d4:	20008cf0 	.word	0x20008cf0
 80138d8:	20008c00 	.word	0x20008c00

080138dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b08c      	sub	sp, #48	; 0x30
 80138e0:	af02      	add	r7, sp, #8
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	60b9      	str	r1, [r7, #8]
 80138e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	3326      	adds	r3, #38	; 0x26
 80138ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80138ee:	23ff      	movs	r3, #255	; 0xff
 80138f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80138f4:	2300      	movs	r3, #0
 80138f6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	68f9      	ldr	r1, [r7, #12]
 80138fe:	4618      	mov	r0, r3
 8013900:	f000 fe0e 	bl	8014520 <ip4_addr_isbroadcast_u32>
 8013904:	4603      	mov	r3, r0
 8013906:	2b00      	cmp	r3, #0
 8013908:	d10c      	bne.n	8013924 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013912:	2be0      	cmp	r3, #224	; 0xe0
 8013914:	d006      	beq.n	8013924 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d003      	beq.n	8013924 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d102      	bne.n	801392a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013924:	f06f 030f 	mvn.w	r3, #15
 8013928:	e101      	b.n	8013b2e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801392a:	68fa      	ldr	r2, [r7, #12]
 801392c:	2101      	movs	r1, #1
 801392e:	68b8      	ldr	r0, [r7, #8]
 8013930:	f7ff fb60 	bl	8012ff4 <etharp_find_entry>
 8013934:	4603      	mov	r3, r0
 8013936:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013938:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801393c:	2b00      	cmp	r3, #0
 801393e:	da02      	bge.n	8013946 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013940:	8a7b      	ldrh	r3, [r7, #18]
 8013942:	b25b      	sxtb	r3, r3
 8013944:	e0f3      	b.n	8013b2e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013946:	8a7b      	ldrh	r3, [r7, #18]
 8013948:	2b7e      	cmp	r3, #126	; 0x7e
 801394a:	d906      	bls.n	801395a <etharp_query+0x7e>
 801394c:	4b7a      	ldr	r3, [pc, #488]	; (8013b38 <etharp_query+0x25c>)
 801394e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013952:	497a      	ldr	r1, [pc, #488]	; (8013b3c <etharp_query+0x260>)
 8013954:	487a      	ldr	r0, [pc, #488]	; (8013b40 <etharp_query+0x264>)
 8013956:	f001 fd83 	bl	8015460 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801395a:	8a7b      	ldrh	r3, [r7, #18]
 801395c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801395e:	7c7a      	ldrb	r2, [r7, #17]
 8013960:	4978      	ldr	r1, [pc, #480]	; (8013b44 <etharp_query+0x268>)
 8013962:	4613      	mov	r3, r2
 8013964:	005b      	lsls	r3, r3, #1
 8013966:	4413      	add	r3, r2
 8013968:	00db      	lsls	r3, r3, #3
 801396a:	440b      	add	r3, r1
 801396c:	3314      	adds	r3, #20
 801396e:	781b      	ldrb	r3, [r3, #0]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d115      	bne.n	80139a0 <etharp_query+0xc4>
    is_new_entry = 1;
 8013974:	2301      	movs	r3, #1
 8013976:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013978:	7c7a      	ldrb	r2, [r7, #17]
 801397a:	4972      	ldr	r1, [pc, #456]	; (8013b44 <etharp_query+0x268>)
 801397c:	4613      	mov	r3, r2
 801397e:	005b      	lsls	r3, r3, #1
 8013980:	4413      	add	r3, r2
 8013982:	00db      	lsls	r3, r3, #3
 8013984:	440b      	add	r3, r1
 8013986:	3314      	adds	r3, #20
 8013988:	2201      	movs	r2, #1
 801398a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801398c:	7c7a      	ldrb	r2, [r7, #17]
 801398e:	496d      	ldr	r1, [pc, #436]	; (8013b44 <etharp_query+0x268>)
 8013990:	4613      	mov	r3, r2
 8013992:	005b      	lsls	r3, r3, #1
 8013994:	4413      	add	r3, r2
 8013996:	00db      	lsls	r3, r3, #3
 8013998:	440b      	add	r3, r1
 801399a:	3308      	adds	r3, #8
 801399c:	68fa      	ldr	r2, [r7, #12]
 801399e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80139a0:	7c7a      	ldrb	r2, [r7, #17]
 80139a2:	4968      	ldr	r1, [pc, #416]	; (8013b44 <etharp_query+0x268>)
 80139a4:	4613      	mov	r3, r2
 80139a6:	005b      	lsls	r3, r3, #1
 80139a8:	4413      	add	r3, r2
 80139aa:	00db      	lsls	r3, r3, #3
 80139ac:	440b      	add	r3, r1
 80139ae:	3314      	adds	r3, #20
 80139b0:	781b      	ldrb	r3, [r3, #0]
 80139b2:	2b01      	cmp	r3, #1
 80139b4:	d011      	beq.n	80139da <etharp_query+0xfe>
 80139b6:	7c7a      	ldrb	r2, [r7, #17]
 80139b8:	4962      	ldr	r1, [pc, #392]	; (8013b44 <etharp_query+0x268>)
 80139ba:	4613      	mov	r3, r2
 80139bc:	005b      	lsls	r3, r3, #1
 80139be:	4413      	add	r3, r2
 80139c0:	00db      	lsls	r3, r3, #3
 80139c2:	440b      	add	r3, r1
 80139c4:	3314      	adds	r3, #20
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	d806      	bhi.n	80139da <etharp_query+0xfe>
 80139cc:	4b5a      	ldr	r3, [pc, #360]	; (8013b38 <etharp_query+0x25c>)
 80139ce:	f240 32cd 	movw	r2, #973	; 0x3cd
 80139d2:	495d      	ldr	r1, [pc, #372]	; (8013b48 <etharp_query+0x26c>)
 80139d4:	485a      	ldr	r0, [pc, #360]	; (8013b40 <etharp_query+0x264>)
 80139d6:	f001 fd43 	bl	8015460 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80139da:	6a3b      	ldr	r3, [r7, #32]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d102      	bne.n	80139e6 <etharp_query+0x10a>
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d10c      	bne.n	8013a00 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80139e6:	68b9      	ldr	r1, [r7, #8]
 80139e8:	68f8      	ldr	r0, [r7, #12]
 80139ea:	f000 f963 	bl	8013cb4 <etharp_request>
 80139ee:	4603      	mov	r3, r0
 80139f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d102      	bne.n	8013a00 <etharp_query+0x124>
      return result;
 80139fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80139fe:	e096      	b.n	8013b2e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d106      	bne.n	8013a14 <etharp_query+0x138>
 8013a06:	4b4c      	ldr	r3, [pc, #304]	; (8013b38 <etharp_query+0x25c>)
 8013a08:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013a0c:	494f      	ldr	r1, [pc, #316]	; (8013b4c <etharp_query+0x270>)
 8013a0e:	484c      	ldr	r0, [pc, #304]	; (8013b40 <etharp_query+0x264>)
 8013a10:	f001 fd26 	bl	8015460 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013a14:	7c7a      	ldrb	r2, [r7, #17]
 8013a16:	494b      	ldr	r1, [pc, #300]	; (8013b44 <etharp_query+0x268>)
 8013a18:	4613      	mov	r3, r2
 8013a1a:	005b      	lsls	r3, r3, #1
 8013a1c:	4413      	add	r3, r2
 8013a1e:	00db      	lsls	r3, r3, #3
 8013a20:	440b      	add	r3, r1
 8013a22:	3314      	adds	r3, #20
 8013a24:	781b      	ldrb	r3, [r3, #0]
 8013a26:	2b01      	cmp	r3, #1
 8013a28:	d917      	bls.n	8013a5a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013a2a:	4a49      	ldr	r2, [pc, #292]	; (8013b50 <etharp_query+0x274>)
 8013a2c:	7c7b      	ldrb	r3, [r7, #17]
 8013a2e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013a30:	7c7a      	ldrb	r2, [r7, #17]
 8013a32:	4613      	mov	r3, r2
 8013a34:	005b      	lsls	r3, r3, #1
 8013a36:	4413      	add	r3, r2
 8013a38:	00db      	lsls	r3, r3, #3
 8013a3a:	3308      	adds	r3, #8
 8013a3c:	4a41      	ldr	r2, [pc, #260]	; (8013b44 <etharp_query+0x268>)
 8013a3e:	4413      	add	r3, r2
 8013a40:	3304      	adds	r3, #4
 8013a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013a46:	9200      	str	r2, [sp, #0]
 8013a48:	697a      	ldr	r2, [r7, #20]
 8013a4a:	6879      	ldr	r1, [r7, #4]
 8013a4c:	68f8      	ldr	r0, [r7, #12]
 8013a4e:	f001 fc75 	bl	801533c <ethernet_output>
 8013a52:	4603      	mov	r3, r0
 8013a54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a58:	e067      	b.n	8013b2a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013a5a:	7c7a      	ldrb	r2, [r7, #17]
 8013a5c:	4939      	ldr	r1, [pc, #228]	; (8013b44 <etharp_query+0x268>)
 8013a5e:	4613      	mov	r3, r2
 8013a60:	005b      	lsls	r3, r3, #1
 8013a62:	4413      	add	r3, r2
 8013a64:	00db      	lsls	r3, r3, #3
 8013a66:	440b      	add	r3, r1
 8013a68:	3314      	adds	r3, #20
 8013a6a:	781b      	ldrb	r3, [r3, #0]
 8013a6c:	2b01      	cmp	r3, #1
 8013a6e:	d15c      	bne.n	8013b2a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013a70:	2300      	movs	r3, #0
 8013a72:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013a78:	e01c      	b.n	8013ab4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013a7a:	69fb      	ldr	r3, [r7, #28]
 8013a7c:	895a      	ldrh	r2, [r3, #10]
 8013a7e:	69fb      	ldr	r3, [r7, #28]
 8013a80:	891b      	ldrh	r3, [r3, #8]
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d10a      	bne.n	8013a9c <etharp_query+0x1c0>
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d006      	beq.n	8013a9c <etharp_query+0x1c0>
 8013a8e:	4b2a      	ldr	r3, [pc, #168]	; (8013b38 <etharp_query+0x25c>)
 8013a90:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013a94:	492f      	ldr	r1, [pc, #188]	; (8013b54 <etharp_query+0x278>)
 8013a96:	482a      	ldr	r0, [pc, #168]	; (8013b40 <etharp_query+0x264>)
 8013a98:	f001 fce2 	bl	8015460 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013a9c:	69fb      	ldr	r3, [r7, #28]
 8013a9e:	7b1b      	ldrb	r3, [r3, #12]
 8013aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d002      	beq.n	8013aae <etharp_query+0x1d2>
        copy_needed = 1;
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	61bb      	str	r3, [r7, #24]
        break;
 8013aac:	e005      	b.n	8013aba <etharp_query+0x1de>
      }
      p = p->next;
 8013aae:	69fb      	ldr	r3, [r7, #28]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d1df      	bne.n	8013a7a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013aba:	69bb      	ldr	r3, [r7, #24]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d007      	beq.n	8013ad0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013ac0:	687a      	ldr	r2, [r7, #4]
 8013ac2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013ac6:	200e      	movs	r0, #14
 8013ac8:	f7f8 fd18 	bl	800c4fc <pbuf_clone>
 8013acc:	61f8      	str	r0, [r7, #28]
 8013ace:	e004      	b.n	8013ada <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013ad4:	69f8      	ldr	r0, [r7, #28]
 8013ad6:	f7f8 fb55 	bl	800c184 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013ada:	69fb      	ldr	r3, [r7, #28]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d021      	beq.n	8013b24 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013ae0:	7c7a      	ldrb	r2, [r7, #17]
 8013ae2:	4918      	ldr	r1, [pc, #96]	; (8013b44 <etharp_query+0x268>)
 8013ae4:	4613      	mov	r3, r2
 8013ae6:	005b      	lsls	r3, r3, #1
 8013ae8:	4413      	add	r3, r2
 8013aea:	00db      	lsls	r3, r3, #3
 8013aec:	440b      	add	r3, r1
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d00a      	beq.n	8013b0a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013af4:	7c7a      	ldrb	r2, [r7, #17]
 8013af6:	4913      	ldr	r1, [pc, #76]	; (8013b44 <etharp_query+0x268>)
 8013af8:	4613      	mov	r3, r2
 8013afa:	005b      	lsls	r3, r3, #1
 8013afc:	4413      	add	r3, r2
 8013afe:	00db      	lsls	r3, r3, #3
 8013b00:	440b      	add	r3, r1
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7f8 fa9d 	bl	800c044 <pbuf_free>
      }
      arp_table[i].q = p;
 8013b0a:	7c7a      	ldrb	r2, [r7, #17]
 8013b0c:	490d      	ldr	r1, [pc, #52]	; (8013b44 <etharp_query+0x268>)
 8013b0e:	4613      	mov	r3, r2
 8013b10:	005b      	lsls	r3, r3, #1
 8013b12:	4413      	add	r3, r2
 8013b14:	00db      	lsls	r3, r3, #3
 8013b16:	440b      	add	r3, r1
 8013b18:	69fa      	ldr	r2, [r7, #28]
 8013b1a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b22:	e002      	b.n	8013b2a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013b24:	23ff      	movs	r3, #255	; 0xff
 8013b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013b2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3728      	adds	r7, #40	; 0x28
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}
 8013b36:	bf00      	nop
 8013b38:	08018b68 	.word	0x08018b68
 8013b3c:	08018d14 	.word	0x08018d14
 8013b40:	08018be0 	.word	0x08018be0
 8013b44:	20008c00 	.word	0x20008c00
 8013b48:	08018d24 	.word	0x08018d24
 8013b4c:	08018d08 	.word	0x08018d08
 8013b50:	20008cf0 	.word	0x20008cf0
 8013b54:	08018d4c 	.word	0x08018d4c

08013b58 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b08a      	sub	sp, #40	; 0x28
 8013b5c:	af02      	add	r7, sp, #8
 8013b5e:	60f8      	str	r0, [r7, #12]
 8013b60:	60b9      	str	r1, [r7, #8]
 8013b62:	607a      	str	r2, [r7, #4]
 8013b64:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013b66:	2300      	movs	r3, #0
 8013b68:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d106      	bne.n	8013b7e <etharp_raw+0x26>
 8013b70:	4b3a      	ldr	r3, [pc, #232]	; (8013c5c <etharp_raw+0x104>)
 8013b72:	f240 4257 	movw	r2, #1111	; 0x457
 8013b76:	493a      	ldr	r1, [pc, #232]	; (8013c60 <etharp_raw+0x108>)
 8013b78:	483a      	ldr	r0, [pc, #232]	; (8013c64 <etharp_raw+0x10c>)
 8013b7a:	f001 fc71 	bl	8015460 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013b7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b82:	211c      	movs	r1, #28
 8013b84:	200e      	movs	r0, #14
 8013b86:	f7f7 ff79 	bl	800ba7c <pbuf_alloc>
 8013b8a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013b8c:	69bb      	ldr	r3, [r7, #24]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d102      	bne.n	8013b98 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013b92:	f04f 33ff 	mov.w	r3, #4294967295
 8013b96:	e05d      	b.n	8013c54 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013b98:	69bb      	ldr	r3, [r7, #24]
 8013b9a:	895b      	ldrh	r3, [r3, #10]
 8013b9c:	2b1b      	cmp	r3, #27
 8013b9e:	d806      	bhi.n	8013bae <etharp_raw+0x56>
 8013ba0:	4b2e      	ldr	r3, [pc, #184]	; (8013c5c <etharp_raw+0x104>)
 8013ba2:	f240 4262 	movw	r2, #1122	; 0x462
 8013ba6:	4930      	ldr	r1, [pc, #192]	; (8013c68 <etharp_raw+0x110>)
 8013ba8:	482e      	ldr	r0, [pc, #184]	; (8013c64 <etharp_raw+0x10c>)
 8013baa:	f001 fc59 	bl	8015460 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013bae:	69bb      	ldr	r3, [r7, #24]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013bb4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7f6 fee6 	bl	800a988 <lwip_htons>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013bca:	2b06      	cmp	r3, #6
 8013bcc:	d006      	beq.n	8013bdc <etharp_raw+0x84>
 8013bce:	4b23      	ldr	r3, [pc, #140]	; (8013c5c <etharp_raw+0x104>)
 8013bd0:	f240 4269 	movw	r2, #1129	; 0x469
 8013bd4:	4925      	ldr	r1, [pc, #148]	; (8013c6c <etharp_raw+0x114>)
 8013bd6:	4823      	ldr	r0, [pc, #140]	; (8013c64 <etharp_raw+0x10c>)
 8013bd8:	f001 fc42 	bl	8015460 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	3308      	adds	r3, #8
 8013be0:	2206      	movs	r2, #6
 8013be2:	6839      	ldr	r1, [r7, #0]
 8013be4:	4618      	mov	r0, r3
 8013be6:	f001 fc25 	bl	8015434 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	3312      	adds	r3, #18
 8013bee:	2206      	movs	r2, #6
 8013bf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f001 fc1e 	bl	8015434 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	330e      	adds	r3, #14
 8013bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bfe:	6812      	ldr	r2, [r2, #0]
 8013c00:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	3318      	adds	r3, #24
 8013c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c08:	6812      	ldr	r2, [r2, #0]
 8013c0a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	701a      	strb	r2, [r3, #0]
 8013c12:	2200      	movs	r2, #0
 8013c14:	f042 0201 	orr.w	r2, r2, #1
 8013c18:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013c1a:	697b      	ldr	r3, [r7, #20]
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	f042 0208 	orr.w	r2, r2, #8
 8013c22:	709a      	strb	r2, [r3, #2]
 8013c24:	2200      	movs	r2, #0
 8013c26:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	2206      	movs	r2, #6
 8013c2c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	2204      	movs	r2, #4
 8013c32:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013c34:	f640 0306 	movw	r3, #2054	; 0x806
 8013c38:	9300      	str	r3, [sp, #0]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	68ba      	ldr	r2, [r7, #8]
 8013c3e:	69b9      	ldr	r1, [r7, #24]
 8013c40:	68f8      	ldr	r0, [r7, #12]
 8013c42:	f001 fb7b 	bl	801533c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013c46:	69b8      	ldr	r0, [r7, #24]
 8013c48:	f7f8 f9fc 	bl	800c044 <pbuf_free>
  p = NULL;
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013c50:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3720      	adds	r7, #32
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}
 8013c5c:	08018b68 	.word	0x08018b68
 8013c60:	08018cb8 	.word	0x08018cb8
 8013c64:	08018be0 	.word	0x08018be0
 8013c68:	08018d68 	.word	0x08018d68
 8013c6c:	08018d9c 	.word	0x08018d9c

08013c70 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b088      	sub	sp, #32
 8013c74:	af04      	add	r7, sp, #16
 8013c76:	60f8      	str	r0, [r7, #12]
 8013c78:	60b9      	str	r1, [r7, #8]
 8013c7a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	9203      	str	r2, [sp, #12]
 8013c90:	68ba      	ldr	r2, [r7, #8]
 8013c92:	9202      	str	r2, [sp, #8]
 8013c94:	4a06      	ldr	r2, [pc, #24]	; (8013cb0 <etharp_request_dst+0x40>)
 8013c96:	9201      	str	r2, [sp, #4]
 8013c98:	9300      	str	r3, [sp, #0]
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	687a      	ldr	r2, [r7, #4]
 8013c9e:	68f8      	ldr	r0, [r7, #12]
 8013ca0:	f7ff ff5a 	bl	8013b58 <etharp_raw>
 8013ca4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	3710      	adds	r7, #16
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	0801b260 	.word	0x0801b260

08013cb4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b082      	sub	sp, #8
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013cbe:	4a05      	ldr	r2, [pc, #20]	; (8013cd4 <etharp_request+0x20>)
 8013cc0:	6839      	ldr	r1, [r7, #0]
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f7ff ffd4 	bl	8013c70 <etharp_request_dst>
 8013cc8:	4603      	mov	r3, r0
}
 8013cca:	4618      	mov	r0, r3
 8013ccc:	3708      	adds	r7, #8
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	0801b258 	.word	0x0801b258

08013cd8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b08e      	sub	sp, #56	; 0x38
 8013cdc:	af04      	add	r7, sp, #16
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013ce2:	4b79      	ldr	r3, [pc, #484]	; (8013ec8 <icmp_input+0x1f0>)
 8013ce4:	689b      	ldr	r3, [r3, #8]
 8013ce6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cea:	781b      	ldrb	r3, [r3, #0]
 8013cec:	f003 030f 	and.w	r3, r3, #15
 8013cf0:	b2db      	uxtb	r3, r3
 8013cf2:	009b      	lsls	r3, r3, #2
 8013cf4:	b2db      	uxtb	r3, r3
 8013cf6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013cf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013cfa:	2b13      	cmp	r3, #19
 8013cfc:	f240 80cd 	bls.w	8013e9a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	895b      	ldrh	r3, [r3, #10]
 8013d04:	2b03      	cmp	r3, #3
 8013d06:	f240 80ca 	bls.w	8013e9e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	685b      	ldr	r3, [r3, #4]
 8013d0e:	781b      	ldrb	r3, [r3, #0]
 8013d10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013d14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	f000 80b7 	beq.w	8013e8c <icmp_input+0x1b4>
 8013d1e:	2b08      	cmp	r3, #8
 8013d20:	f040 80b7 	bne.w	8013e92 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013d24:	4b69      	ldr	r3, [pc, #420]	; (8013ecc <icmp_input+0x1f4>)
 8013d26:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013d28:	4b67      	ldr	r3, [pc, #412]	; (8013ec8 <icmp_input+0x1f0>)
 8013d2a:	695b      	ldr	r3, [r3, #20]
 8013d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d30:	2be0      	cmp	r3, #224	; 0xe0
 8013d32:	f000 80bb 	beq.w	8013eac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013d36:	4b64      	ldr	r3, [pc, #400]	; (8013ec8 <icmp_input+0x1f0>)
 8013d38:	695b      	ldr	r3, [r3, #20]
 8013d3a:	4a63      	ldr	r2, [pc, #396]	; (8013ec8 <icmp_input+0x1f0>)
 8013d3c:	6812      	ldr	r2, [r2, #0]
 8013d3e:	4611      	mov	r1, r2
 8013d40:	4618      	mov	r0, r3
 8013d42:	f000 fbed 	bl	8014520 <ip4_addr_isbroadcast_u32>
 8013d46:	4603      	mov	r3, r0
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	f040 80b1 	bne.w	8013eb0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	891b      	ldrh	r3, [r3, #8]
 8013d52:	2b07      	cmp	r3, #7
 8013d54:	f240 80a5 	bls.w	8013ea2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013d58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d5a:	330e      	adds	r3, #14
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f7f8 f8da 	bl	800bf18 <pbuf_add_header>
 8013d64:	4603      	mov	r3, r0
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d04b      	beq.n	8013e02 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	891a      	ldrh	r2, [r3, #8]
 8013d6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d70:	4413      	add	r3, r2
 8013d72:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	891b      	ldrh	r3, [r3, #8]
 8013d78:	8b7a      	ldrh	r2, [r7, #26]
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	f0c0 809a 	bcc.w	8013eb4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013d80:	8b7b      	ldrh	r3, [r7, #26]
 8013d82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d86:	4619      	mov	r1, r3
 8013d88:	200e      	movs	r0, #14
 8013d8a:	f7f7 fe77 	bl	800ba7c <pbuf_alloc>
 8013d8e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	f000 8090 	beq.w	8013eb8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013d98:	697b      	ldr	r3, [r7, #20]
 8013d9a:	895b      	ldrh	r3, [r3, #10]
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013da0:	3308      	adds	r3, #8
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d203      	bcs.n	8013dae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013da6:	6978      	ldr	r0, [r7, #20]
 8013da8:	f7f8 f94c 	bl	800c044 <pbuf_free>
          goto icmperr;
 8013dac:	e085      	b.n	8013eba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	685b      	ldr	r3, [r3, #4]
 8013db2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013db6:	4618      	mov	r0, r3
 8013db8:	f001 fb3c 	bl	8015434 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013dbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013dbe:	4619      	mov	r1, r3
 8013dc0:	6978      	ldr	r0, [r7, #20]
 8013dc2:	f7f8 f8b9 	bl	800bf38 <pbuf_remove_header>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d009      	beq.n	8013de0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013dcc:	4b40      	ldr	r3, [pc, #256]	; (8013ed0 <icmp_input+0x1f8>)
 8013dce:	22b6      	movs	r2, #182	; 0xb6
 8013dd0:	4940      	ldr	r1, [pc, #256]	; (8013ed4 <icmp_input+0x1fc>)
 8013dd2:	4841      	ldr	r0, [pc, #260]	; (8013ed8 <icmp_input+0x200>)
 8013dd4:	f001 fb44 	bl	8015460 <iprintf>
          pbuf_free(r);
 8013dd8:	6978      	ldr	r0, [r7, #20]
 8013dda:	f7f8 f933 	bl	800c044 <pbuf_free>
          goto icmperr;
 8013dde:	e06c      	b.n	8013eba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013de0:	6879      	ldr	r1, [r7, #4]
 8013de2:	6978      	ldr	r0, [r7, #20]
 8013de4:	f7f8 fa46 	bl	800c274 <pbuf_copy>
 8013de8:	4603      	mov	r3, r0
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d003      	beq.n	8013df6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013dee:	6978      	ldr	r0, [r7, #20]
 8013df0:	f7f8 f928 	bl	800c044 <pbuf_free>
          goto icmperr;
 8013df4:	e061      	b.n	8013eba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013df6:	6878      	ldr	r0, [r7, #4]
 8013df8:	f7f8 f924 	bl	800c044 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	607b      	str	r3, [r7, #4]
 8013e00:	e00f      	b.n	8013e22 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013e02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e04:	330e      	adds	r3, #14
 8013e06:	4619      	mov	r1, r3
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f7f8 f895 	bl	800bf38 <pbuf_remove_header>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d006      	beq.n	8013e22 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013e14:	4b2e      	ldr	r3, [pc, #184]	; (8013ed0 <icmp_input+0x1f8>)
 8013e16:	22c7      	movs	r2, #199	; 0xc7
 8013e18:	4930      	ldr	r1, [pc, #192]	; (8013edc <icmp_input+0x204>)
 8013e1a:	482f      	ldr	r0, [pc, #188]	; (8013ed8 <icmp_input+0x200>)
 8013e1c:	f001 fb20 	bl	8015460 <iprintf>
          goto icmperr;
 8013e20:	e04b      	b.n	8013eba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013e28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f7f8 f873 	bl	800bf18 <pbuf_add_header>
 8013e32:	4603      	mov	r3, r0
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d12b      	bne.n	8013e90 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	685b      	ldr	r3, [r3, #4]
 8013e3c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013e3e:	69fb      	ldr	r3, [r7, #28]
 8013e40:	681a      	ldr	r2, [r3, #0]
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013e46:	4b20      	ldr	r3, [pc, #128]	; (8013ec8 <icmp_input+0x1f0>)
 8013e48:	691a      	ldr	r2, [r3, #16]
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	2200      	movs	r2, #0
 8013e52:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	2200      	movs	r2, #0
 8013e58:	709a      	strb	r2, [r3, #2]
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	22ff      	movs	r2, #255	; 0xff
 8013e62:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	2200      	movs	r2, #0
 8013e68:	729a      	strb	r2, [r3, #10]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	9302      	str	r3, [sp, #8]
 8013e72:	2301      	movs	r3, #1
 8013e74:	9301      	str	r3, [sp, #4]
 8013e76:	2300      	movs	r3, #0
 8013e78:	9300      	str	r3, [sp, #0]
 8013e7a:	23ff      	movs	r3, #255	; 0xff
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	69f9      	ldr	r1, [r7, #28]
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f000 fa75 	bl	8014370 <ip4_output_if>
 8013e86:	4603      	mov	r3, r0
 8013e88:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013e8a:	e001      	b.n	8013e90 <icmp_input+0x1b8>
      break;
 8013e8c:	bf00      	nop
 8013e8e:	e000      	b.n	8013e92 <icmp_input+0x1ba>
      break;
 8013e90:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f7f8 f8d6 	bl	800c044 <pbuf_free>
  return;
 8013e98:	e013      	b.n	8013ec2 <icmp_input+0x1ea>
    goto lenerr;
 8013e9a:	bf00      	nop
 8013e9c:	e002      	b.n	8013ea4 <icmp_input+0x1cc>
    goto lenerr;
 8013e9e:	bf00      	nop
 8013ea0:	e000      	b.n	8013ea4 <icmp_input+0x1cc>
        goto lenerr;
 8013ea2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f7f8 f8cd 	bl	800c044 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013eaa:	e00a      	b.n	8013ec2 <icmp_input+0x1ea>
        goto icmperr;
 8013eac:	bf00      	nop
 8013eae:	e004      	b.n	8013eba <icmp_input+0x1e2>
        goto icmperr;
 8013eb0:	bf00      	nop
 8013eb2:	e002      	b.n	8013eba <icmp_input+0x1e2>
          goto icmperr;
 8013eb4:	bf00      	nop
 8013eb6:	e000      	b.n	8013eba <icmp_input+0x1e2>
          goto icmperr;
 8013eb8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7f8 f8c2 	bl	800c044 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013ec0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013ec2:	3728      	adds	r7, #40	; 0x28
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}
 8013ec8:	20005630 	.word	0x20005630
 8013ecc:	20005644 	.word	0x20005644
 8013ed0:	08018de0 	.word	0x08018de0
 8013ed4:	08018e18 	.word	0x08018e18
 8013ed8:	08018e50 	.word	0x08018e50
 8013edc:	08018e78 	.word	0x08018e78

08013ee0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b082      	sub	sp, #8
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	460b      	mov	r3, r1
 8013eea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013eec:	78fb      	ldrb	r3, [r7, #3]
 8013eee:	461a      	mov	r2, r3
 8013ef0:	2103      	movs	r1, #3
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f000 f814 	bl	8013f20 <icmp_send_response>
}
 8013ef8:	bf00      	nop
 8013efa:	3708      	adds	r7, #8
 8013efc:	46bd      	mov	sp, r7
 8013efe:	bd80      	pop	{r7, pc}

08013f00 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b082      	sub	sp, #8
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
 8013f08:	460b      	mov	r3, r1
 8013f0a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013f0c:	78fb      	ldrb	r3, [r7, #3]
 8013f0e:	461a      	mov	r2, r3
 8013f10:	210b      	movs	r1, #11
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	f000 f804 	bl	8013f20 <icmp_send_response>
}
 8013f18:	bf00      	nop
 8013f1a:	3708      	adds	r7, #8
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}

08013f20 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b08c      	sub	sp, #48	; 0x30
 8013f24:	af04      	add	r7, sp, #16
 8013f26:	6078      	str	r0, [r7, #4]
 8013f28:	460b      	mov	r3, r1
 8013f2a:	70fb      	strb	r3, [r7, #3]
 8013f2c:	4613      	mov	r3, r2
 8013f2e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013f30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f34:	2124      	movs	r1, #36	; 0x24
 8013f36:	2022      	movs	r0, #34	; 0x22
 8013f38:	f7f7 fda0 	bl	800ba7c <pbuf_alloc>
 8013f3c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d04c      	beq.n	8013fde <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013f44:	69fb      	ldr	r3, [r7, #28]
 8013f46:	895b      	ldrh	r3, [r3, #10]
 8013f48:	2b23      	cmp	r3, #35	; 0x23
 8013f4a:	d806      	bhi.n	8013f5a <icmp_send_response+0x3a>
 8013f4c:	4b26      	ldr	r3, [pc, #152]	; (8013fe8 <icmp_send_response+0xc8>)
 8013f4e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013f52:	4926      	ldr	r1, [pc, #152]	; (8013fec <icmp_send_response+0xcc>)
 8013f54:	4826      	ldr	r0, [pc, #152]	; (8013ff0 <icmp_send_response+0xd0>)
 8013f56:	f001 fa83 	bl	8015460 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	685b      	ldr	r3, [r3, #4]
 8013f5e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013f60:	69fb      	ldr	r3, [r7, #28]
 8013f62:	685b      	ldr	r3, [r3, #4]
 8013f64:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013f66:	697b      	ldr	r3, [r7, #20]
 8013f68:	78fa      	ldrb	r2, [r7, #3]
 8013f6a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	78ba      	ldrb	r2, [r7, #2]
 8013f70:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	2200      	movs	r2, #0
 8013f76:	711a      	strb	r2, [r3, #4]
 8013f78:	2200      	movs	r2, #0
 8013f7a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	719a      	strb	r2, [r3, #6]
 8013f82:	2200      	movs	r2, #0
 8013f84:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013f86:	69fb      	ldr	r3, [r7, #28]
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	f103 0008 	add.w	r0, r3, #8
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	685b      	ldr	r3, [r3, #4]
 8013f92:	221c      	movs	r2, #28
 8013f94:	4619      	mov	r1, r3
 8013f96:	f001 fa4d 	bl	8015434 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013f9a:	69bb      	ldr	r3, [r7, #24]
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013fa0:	f107 030c 	add.w	r3, r7, #12
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f000 f825 	bl	8013ff4 <ip4_route>
 8013faa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013fac:	693b      	ldr	r3, [r7, #16]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d011      	beq.n	8013fd6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	709a      	strb	r2, [r3, #2]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013fbc:	f107 020c 	add.w	r2, r7, #12
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	9302      	str	r3, [sp, #8]
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	9301      	str	r3, [sp, #4]
 8013fc8:	2300      	movs	r3, #0
 8013fca:	9300      	str	r3, [sp, #0]
 8013fcc:	23ff      	movs	r3, #255	; 0xff
 8013fce:	2100      	movs	r1, #0
 8013fd0:	69f8      	ldr	r0, [r7, #28]
 8013fd2:	f000 f9cd 	bl	8014370 <ip4_output_if>
  }
  pbuf_free(q);
 8013fd6:	69f8      	ldr	r0, [r7, #28]
 8013fd8:	f7f8 f834 	bl	800c044 <pbuf_free>
 8013fdc:	e000      	b.n	8013fe0 <icmp_send_response+0xc0>
    return;
 8013fde:	bf00      	nop
}
 8013fe0:	3720      	adds	r7, #32
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	08018de0 	.word	0x08018de0
 8013fec:	08018eac 	.word	0x08018eac
 8013ff0:	08018e50 	.word	0x08018e50

08013ff4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013ff4:	b480      	push	{r7}
 8013ff6:	b085      	sub	sp, #20
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013ffc:	4b33      	ldr	r3, [pc, #204]	; (80140cc <ip4_route+0xd8>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	60fb      	str	r3, [r7, #12]
 8014002:	e036      	b.n	8014072 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801400a:	f003 0301 	and.w	r3, r3, #1
 801400e:	b2db      	uxtb	r3, r3
 8014010:	2b00      	cmp	r3, #0
 8014012:	d02b      	beq.n	801406c <ip4_route+0x78>
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801401a:	089b      	lsrs	r3, r3, #2
 801401c:	f003 0301 	and.w	r3, r3, #1
 8014020:	b2db      	uxtb	r3, r3
 8014022:	2b00      	cmp	r3, #0
 8014024:	d022      	beq.n	801406c <ip4_route+0x78>
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	3304      	adds	r3, #4
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d01d      	beq.n	801406c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681a      	ldr	r2, [r3, #0]
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	3304      	adds	r3, #4
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	405a      	eors	r2, r3
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	3308      	adds	r3, #8
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	4013      	ands	r3, r2
 8014044:	2b00      	cmp	r3, #0
 8014046:	d101      	bne.n	801404c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	e038      	b.n	80140be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014052:	f003 0302 	and.w	r3, r3, #2
 8014056:	2b00      	cmp	r3, #0
 8014058:	d108      	bne.n	801406c <ip4_route+0x78>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	681a      	ldr	r2, [r3, #0]
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	330c      	adds	r3, #12
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	429a      	cmp	r2, r3
 8014066:	d101      	bne.n	801406c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	e028      	b.n	80140be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	60fb      	str	r3, [r7, #12]
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d1c5      	bne.n	8014004 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014078:	4b15      	ldr	r3, [pc, #84]	; (80140d0 <ip4_route+0xdc>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d01a      	beq.n	80140b6 <ip4_route+0xc2>
 8014080:	4b13      	ldr	r3, [pc, #76]	; (80140d0 <ip4_route+0xdc>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014088:	f003 0301 	and.w	r3, r3, #1
 801408c:	2b00      	cmp	r3, #0
 801408e:	d012      	beq.n	80140b6 <ip4_route+0xc2>
 8014090:	4b0f      	ldr	r3, [pc, #60]	; (80140d0 <ip4_route+0xdc>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014098:	f003 0304 	and.w	r3, r3, #4
 801409c:	2b00      	cmp	r3, #0
 801409e:	d00a      	beq.n	80140b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80140a0:	4b0b      	ldr	r3, [pc, #44]	; (80140d0 <ip4_route+0xdc>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	3304      	adds	r3, #4
 80140a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d004      	beq.n	80140b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	b2db      	uxtb	r3, r3
 80140b2:	2b7f      	cmp	r3, #127	; 0x7f
 80140b4:	d101      	bne.n	80140ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80140b6:	2300      	movs	r3, #0
 80140b8:	e001      	b.n	80140be <ip4_route+0xca>
  }

  return netif_default;
 80140ba:	4b05      	ldr	r3, [pc, #20]	; (80140d0 <ip4_route+0xdc>)
 80140bc:	681b      	ldr	r3, [r3, #0]
}
 80140be:	4618      	mov	r0, r3
 80140c0:	3714      	adds	r7, #20
 80140c2:	46bd      	mov	sp, r7
 80140c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c8:	4770      	bx	lr
 80140ca:	bf00      	nop
 80140cc:	20008b94 	.word	0x20008b94
 80140d0:	20008b98 	.word	0x20008b98

080140d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b082      	sub	sp, #8
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80140e2:	f003 0301 	and.w	r3, r3, #1
 80140e6:	b2db      	uxtb	r3, r3
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d016      	beq.n	801411a <ip4_input_accept+0x46>
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	3304      	adds	r3, #4
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d011      	beq.n	801411a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80140f6:	4b0b      	ldr	r3, [pc, #44]	; (8014124 <ip4_input_accept+0x50>)
 80140f8:	695a      	ldr	r2, [r3, #20]
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	3304      	adds	r3, #4
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	429a      	cmp	r2, r3
 8014102:	d008      	beq.n	8014116 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014104:	4b07      	ldr	r3, [pc, #28]	; (8014124 <ip4_input_accept+0x50>)
 8014106:	695b      	ldr	r3, [r3, #20]
 8014108:	6879      	ldr	r1, [r7, #4]
 801410a:	4618      	mov	r0, r3
 801410c:	f000 fa08 	bl	8014520 <ip4_addr_isbroadcast_u32>
 8014110:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014112:	2b00      	cmp	r3, #0
 8014114:	d001      	beq.n	801411a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014116:	2301      	movs	r3, #1
 8014118:	e000      	b.n	801411c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801411a:	2300      	movs	r3, #0
}
 801411c:	4618      	mov	r0, r3
 801411e:	3708      	adds	r7, #8
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}
 8014124:	20005630 	.word	0x20005630

08014128 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b086      	sub	sp, #24
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	685b      	ldr	r3, [r3, #4]
 8014136:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014138:	697b      	ldr	r3, [r7, #20]
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	091b      	lsrs	r3, r3, #4
 801413e:	b2db      	uxtb	r3, r3
 8014140:	2b04      	cmp	r3, #4
 8014142:	d004      	beq.n	801414e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f7f7 ff7d 	bl	800c044 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801414a:	2300      	movs	r3, #0
 801414c:	e107      	b.n	801435e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	f003 030f 	and.w	r3, r3, #15
 8014156:	b2db      	uxtb	r3, r3
 8014158:	009b      	lsls	r3, r3, #2
 801415a:	b2db      	uxtb	r3, r3
 801415c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	885b      	ldrh	r3, [r3, #2]
 8014162:	b29b      	uxth	r3, r3
 8014164:	4618      	mov	r0, r3
 8014166:	f7f6 fc0f 	bl	800a988 <lwip_htons>
 801416a:	4603      	mov	r3, r0
 801416c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	891b      	ldrh	r3, [r3, #8]
 8014172:	89ba      	ldrh	r2, [r7, #12]
 8014174:	429a      	cmp	r2, r3
 8014176:	d204      	bcs.n	8014182 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014178:	89bb      	ldrh	r3, [r7, #12]
 801417a:	4619      	mov	r1, r3
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f7f7 fddb 	bl	800bd38 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	895b      	ldrh	r3, [r3, #10]
 8014186:	89fa      	ldrh	r2, [r7, #14]
 8014188:	429a      	cmp	r2, r3
 801418a:	d807      	bhi.n	801419c <ip4_input+0x74>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	891b      	ldrh	r3, [r3, #8]
 8014190:	89ba      	ldrh	r2, [r7, #12]
 8014192:	429a      	cmp	r2, r3
 8014194:	d802      	bhi.n	801419c <ip4_input+0x74>
 8014196:	89fb      	ldrh	r3, [r7, #14]
 8014198:	2b13      	cmp	r3, #19
 801419a:	d804      	bhi.n	80141a6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f7f7 ff51 	bl	800c044 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80141a2:	2300      	movs	r3, #0
 80141a4:	e0db      	b.n	801435e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	691b      	ldr	r3, [r3, #16]
 80141aa:	4a6f      	ldr	r2, [pc, #444]	; (8014368 <ip4_input+0x240>)
 80141ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	68db      	ldr	r3, [r3, #12]
 80141b2:	4a6d      	ldr	r2, [pc, #436]	; (8014368 <ip4_input+0x240>)
 80141b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80141b6:	4b6c      	ldr	r3, [pc, #432]	; (8014368 <ip4_input+0x240>)
 80141b8:	695b      	ldr	r3, [r3, #20]
 80141ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80141be:	2be0      	cmp	r3, #224	; 0xe0
 80141c0:	d112      	bne.n	80141e8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80141c2:	683b      	ldr	r3, [r7, #0]
 80141c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80141c8:	f003 0301 	and.w	r3, r3, #1
 80141cc:	b2db      	uxtb	r3, r3
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d007      	beq.n	80141e2 <ip4_input+0xba>
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	3304      	adds	r3, #4
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d002      	beq.n	80141e2 <ip4_input+0xba>
      netif = inp;
 80141dc:	683b      	ldr	r3, [r7, #0]
 80141de:	613b      	str	r3, [r7, #16]
 80141e0:	e02a      	b.n	8014238 <ip4_input+0x110>
    } else {
      netif = NULL;
 80141e2:	2300      	movs	r3, #0
 80141e4:	613b      	str	r3, [r7, #16]
 80141e6:	e027      	b.n	8014238 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80141e8:	6838      	ldr	r0, [r7, #0]
 80141ea:	f7ff ff73 	bl	80140d4 <ip4_input_accept>
 80141ee:	4603      	mov	r3, r0
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d002      	beq.n	80141fa <ip4_input+0xd2>
      netif = inp;
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	613b      	str	r3, [r7, #16]
 80141f8:	e01e      	b.n	8014238 <ip4_input+0x110>
    } else {
      netif = NULL;
 80141fa:	2300      	movs	r3, #0
 80141fc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80141fe:	4b5a      	ldr	r3, [pc, #360]	; (8014368 <ip4_input+0x240>)
 8014200:	695b      	ldr	r3, [r3, #20]
 8014202:	b2db      	uxtb	r3, r3
 8014204:	2b7f      	cmp	r3, #127	; 0x7f
 8014206:	d017      	beq.n	8014238 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014208:	4b58      	ldr	r3, [pc, #352]	; (801436c <ip4_input+0x244>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	613b      	str	r3, [r7, #16]
 801420e:	e00e      	b.n	801422e <ip4_input+0x106>
          if (netif == inp) {
 8014210:	693a      	ldr	r2, [r7, #16]
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	429a      	cmp	r2, r3
 8014216:	d006      	beq.n	8014226 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014218:	6938      	ldr	r0, [r7, #16]
 801421a:	f7ff ff5b 	bl	80140d4 <ip4_input_accept>
 801421e:	4603      	mov	r3, r0
 8014220:	2b00      	cmp	r3, #0
 8014222:	d108      	bne.n	8014236 <ip4_input+0x10e>
 8014224:	e000      	b.n	8014228 <ip4_input+0x100>
            continue;
 8014226:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014228:	693b      	ldr	r3, [r7, #16]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	613b      	str	r3, [r7, #16]
 801422e:	693b      	ldr	r3, [r7, #16]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d1ed      	bne.n	8014210 <ip4_input+0xe8>
 8014234:	e000      	b.n	8014238 <ip4_input+0x110>
            break;
 8014236:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014238:	4b4b      	ldr	r3, [pc, #300]	; (8014368 <ip4_input+0x240>)
 801423a:	691b      	ldr	r3, [r3, #16]
 801423c:	6839      	ldr	r1, [r7, #0]
 801423e:	4618      	mov	r0, r3
 8014240:	f000 f96e 	bl	8014520 <ip4_addr_isbroadcast_u32>
 8014244:	4603      	mov	r3, r0
 8014246:	2b00      	cmp	r3, #0
 8014248:	d105      	bne.n	8014256 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801424a:	4b47      	ldr	r3, [pc, #284]	; (8014368 <ip4_input+0x240>)
 801424c:	691b      	ldr	r3, [r3, #16]
 801424e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014252:	2be0      	cmp	r3, #224	; 0xe0
 8014254:	d104      	bne.n	8014260 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f7f7 fef4 	bl	800c044 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801425c:	2300      	movs	r3, #0
 801425e:	e07e      	b.n	801435e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d104      	bne.n	8014270 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f7f7 feec 	bl	800c044 <pbuf_free>
    return ERR_OK;
 801426c:	2300      	movs	r3, #0
 801426e:	e076      	b.n	801435e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	88db      	ldrh	r3, [r3, #6]
 8014274:	b29b      	uxth	r3, r3
 8014276:	461a      	mov	r2, r3
 8014278:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801427c:	4013      	ands	r3, r2
 801427e:	2b00      	cmp	r3, #0
 8014280:	d00b      	beq.n	801429a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 fc92 	bl	8014bac <ip4_reass>
 8014288:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d101      	bne.n	8014294 <ip4_input+0x16c>
      return ERR_OK;
 8014290:	2300      	movs	r3, #0
 8014292:	e064      	b.n	801435e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	685b      	ldr	r3, [r3, #4]
 8014298:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801429a:	4a33      	ldr	r2, [pc, #204]	; (8014368 <ip4_input+0x240>)
 801429c:	693b      	ldr	r3, [r7, #16]
 801429e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80142a0:	4a31      	ldr	r2, [pc, #196]	; (8014368 <ip4_input+0x240>)
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80142a6:	4a30      	ldr	r2, [pc, #192]	; (8014368 <ip4_input+0x240>)
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80142ac:	697b      	ldr	r3, [r7, #20]
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	f003 030f 	and.w	r3, r3, #15
 80142b4:	b2db      	uxtb	r3, r3
 80142b6:	009b      	lsls	r3, r3, #2
 80142b8:	b2db      	uxtb	r3, r3
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	4b2a      	ldr	r3, [pc, #168]	; (8014368 <ip4_input+0x240>)
 80142be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80142c0:	89fb      	ldrh	r3, [r7, #14]
 80142c2:	4619      	mov	r1, r3
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f7f7 fe37 	bl	800bf38 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	7a5b      	ldrb	r3, [r3, #9]
 80142ce:	2b11      	cmp	r3, #17
 80142d0:	d006      	beq.n	80142e0 <ip4_input+0x1b8>
 80142d2:	2b11      	cmp	r3, #17
 80142d4:	dc13      	bgt.n	80142fe <ip4_input+0x1d6>
 80142d6:	2b01      	cmp	r3, #1
 80142d8:	d00c      	beq.n	80142f4 <ip4_input+0x1cc>
 80142da:	2b06      	cmp	r3, #6
 80142dc:	d005      	beq.n	80142ea <ip4_input+0x1c2>
 80142de:	e00e      	b.n	80142fe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80142e0:	6839      	ldr	r1, [r7, #0]
 80142e2:	6878      	ldr	r0, [r7, #4]
 80142e4:	f7fe fc68 	bl	8012bb8 <udp_input>
        break;
 80142e8:	e026      	b.n	8014338 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80142ea:	6839      	ldr	r1, [r7, #0]
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f7fa f889 	bl	800e404 <tcp_input>
        break;
 80142f2:	e021      	b.n	8014338 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80142f4:	6839      	ldr	r1, [r7, #0]
 80142f6:	6878      	ldr	r0, [r7, #4]
 80142f8:	f7ff fcee 	bl	8013cd8 <icmp_input>
        break;
 80142fc:	e01c      	b.n	8014338 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80142fe:	4b1a      	ldr	r3, [pc, #104]	; (8014368 <ip4_input+0x240>)
 8014300:	695b      	ldr	r3, [r3, #20]
 8014302:	6939      	ldr	r1, [r7, #16]
 8014304:	4618      	mov	r0, r3
 8014306:	f000 f90b 	bl	8014520 <ip4_addr_isbroadcast_u32>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d10f      	bne.n	8014330 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014310:	4b15      	ldr	r3, [pc, #84]	; (8014368 <ip4_input+0x240>)
 8014312:	695b      	ldr	r3, [r3, #20]
 8014314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014318:	2be0      	cmp	r3, #224	; 0xe0
 801431a:	d009      	beq.n	8014330 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801431c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014320:	4619      	mov	r1, r3
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f7f7 fe7b 	bl	800c01e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014328:	2102      	movs	r1, #2
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f7ff fdd8 	bl	8013ee0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f7f7 fe87 	bl	800c044 <pbuf_free>
        break;
 8014336:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014338:	4b0b      	ldr	r3, [pc, #44]	; (8014368 <ip4_input+0x240>)
 801433a:	2200      	movs	r2, #0
 801433c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801433e:	4b0a      	ldr	r3, [pc, #40]	; (8014368 <ip4_input+0x240>)
 8014340:	2200      	movs	r2, #0
 8014342:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014344:	4b08      	ldr	r3, [pc, #32]	; (8014368 <ip4_input+0x240>)
 8014346:	2200      	movs	r2, #0
 8014348:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801434a:	4b07      	ldr	r3, [pc, #28]	; (8014368 <ip4_input+0x240>)
 801434c:	2200      	movs	r2, #0
 801434e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014350:	4b05      	ldr	r3, [pc, #20]	; (8014368 <ip4_input+0x240>)
 8014352:	2200      	movs	r2, #0
 8014354:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014356:	4b04      	ldr	r3, [pc, #16]	; (8014368 <ip4_input+0x240>)
 8014358:	2200      	movs	r2, #0
 801435a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801435c:	2300      	movs	r3, #0
}
 801435e:	4618      	mov	r0, r3
 8014360:	3718      	adds	r7, #24
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	20005630 	.word	0x20005630
 801436c:	20008b94 	.word	0x20008b94

08014370 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b08a      	sub	sp, #40	; 0x28
 8014374:	af04      	add	r7, sp, #16
 8014376:	60f8      	str	r0, [r7, #12]
 8014378:	60b9      	str	r1, [r7, #8]
 801437a:	607a      	str	r2, [r7, #4]
 801437c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d009      	beq.n	801439c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d003      	beq.n	8014396 <ip4_output_if+0x26>
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d102      	bne.n	801439c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014398:	3304      	adds	r3, #4
 801439a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801439c:	78fa      	ldrb	r2, [r7, #3]
 801439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a0:	9302      	str	r3, [sp, #8]
 80143a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80143a6:	9301      	str	r3, [sp, #4]
 80143a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80143ac:	9300      	str	r3, [sp, #0]
 80143ae:	4613      	mov	r3, r2
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	6979      	ldr	r1, [r7, #20]
 80143b4:	68f8      	ldr	r0, [r7, #12]
 80143b6:	f000 f805 	bl	80143c4 <ip4_output_if_src>
 80143ba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80143bc:	4618      	mov	r0, r3
 80143be:	3718      	adds	r7, #24
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}

080143c4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b088      	sub	sp, #32
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	60f8      	str	r0, [r7, #12]
 80143cc:	60b9      	str	r1, [r7, #8]
 80143ce:	607a      	str	r2, [r7, #4]
 80143d0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	7b9b      	ldrb	r3, [r3, #14]
 80143d6:	2b01      	cmp	r3, #1
 80143d8:	d006      	beq.n	80143e8 <ip4_output_if_src+0x24>
 80143da:	4b4b      	ldr	r3, [pc, #300]	; (8014508 <ip4_output_if_src+0x144>)
 80143dc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80143e0:	494a      	ldr	r1, [pc, #296]	; (801450c <ip4_output_if_src+0x148>)
 80143e2:	484b      	ldr	r0, [pc, #300]	; (8014510 <ip4_output_if_src+0x14c>)
 80143e4:	f001 f83c 	bl	8015460 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d060      	beq.n	80144b0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80143ee:	2314      	movs	r3, #20
 80143f0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80143f2:	2114      	movs	r1, #20
 80143f4:	68f8      	ldr	r0, [r7, #12]
 80143f6:	f7f7 fd8f 	bl	800bf18 <pbuf_add_header>
 80143fa:	4603      	mov	r3, r0
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d002      	beq.n	8014406 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014400:	f06f 0301 	mvn.w	r3, #1
 8014404:	e07c      	b.n	8014500 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	895b      	ldrh	r3, [r3, #10]
 8014410:	2b13      	cmp	r3, #19
 8014412:	d806      	bhi.n	8014422 <ip4_output_if_src+0x5e>
 8014414:	4b3c      	ldr	r3, [pc, #240]	; (8014508 <ip4_output_if_src+0x144>)
 8014416:	f44f 7262 	mov.w	r2, #904	; 0x388
 801441a:	493e      	ldr	r1, [pc, #248]	; (8014514 <ip4_output_if_src+0x150>)
 801441c:	483c      	ldr	r0, [pc, #240]	; (8014510 <ip4_output_if_src+0x14c>)
 801441e:	f001 f81f 	bl	8015460 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014422:	69fb      	ldr	r3, [r7, #28]
 8014424:	78fa      	ldrb	r2, [r7, #3]
 8014426:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014428:	69fb      	ldr	r3, [r7, #28]
 801442a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801442e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	681a      	ldr	r2, [r3, #0]
 8014434:	69fb      	ldr	r3, [r7, #28]
 8014436:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014438:	8b7b      	ldrh	r3, [r7, #26]
 801443a:	089b      	lsrs	r3, r3, #2
 801443c:	b29b      	uxth	r3, r3
 801443e:	b2db      	uxtb	r3, r3
 8014440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014444:	b2da      	uxtb	r2, r3
 8014446:	69fb      	ldr	r3, [r7, #28]
 8014448:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801444a:	69fb      	ldr	r3, [r7, #28]
 801444c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014450:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	891b      	ldrh	r3, [r3, #8]
 8014456:	4618      	mov	r0, r3
 8014458:	f7f6 fa96 	bl	800a988 <lwip_htons>
 801445c:	4603      	mov	r3, r0
 801445e:	461a      	mov	r2, r3
 8014460:	69fb      	ldr	r3, [r7, #28]
 8014462:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014464:	69fb      	ldr	r3, [r7, #28]
 8014466:	2200      	movs	r2, #0
 8014468:	719a      	strb	r2, [r3, #6]
 801446a:	2200      	movs	r2, #0
 801446c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801446e:	4b2a      	ldr	r3, [pc, #168]	; (8014518 <ip4_output_if_src+0x154>)
 8014470:	881b      	ldrh	r3, [r3, #0]
 8014472:	4618      	mov	r0, r3
 8014474:	f7f6 fa88 	bl	800a988 <lwip_htons>
 8014478:	4603      	mov	r3, r0
 801447a:	461a      	mov	r2, r3
 801447c:	69fb      	ldr	r3, [r7, #28]
 801447e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014480:	4b25      	ldr	r3, [pc, #148]	; (8014518 <ip4_output_if_src+0x154>)
 8014482:	881b      	ldrh	r3, [r3, #0]
 8014484:	3301      	adds	r3, #1
 8014486:	b29a      	uxth	r2, r3
 8014488:	4b23      	ldr	r3, [pc, #140]	; (8014518 <ip4_output_if_src+0x154>)
 801448a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d104      	bne.n	801449c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014492:	4b22      	ldr	r3, [pc, #136]	; (801451c <ip4_output_if_src+0x158>)
 8014494:	681a      	ldr	r2, [r3, #0]
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	60da      	str	r2, [r3, #12]
 801449a:	e003      	b.n	80144a4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	681a      	ldr	r2, [r3, #0]
 80144a0:	69fb      	ldr	r3, [r7, #28]
 80144a2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80144a4:	69fb      	ldr	r3, [r7, #28]
 80144a6:	2200      	movs	r2, #0
 80144a8:	729a      	strb	r2, [r3, #10]
 80144aa:	2200      	movs	r2, #0
 80144ac:	72da      	strb	r2, [r3, #11]
 80144ae:	e00f      	b.n	80144d0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	895b      	ldrh	r3, [r3, #10]
 80144b4:	2b13      	cmp	r3, #19
 80144b6:	d802      	bhi.n	80144be <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80144b8:	f06f 0301 	mvn.w	r3, #1
 80144bc:	e020      	b.n	8014500 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	685b      	ldr	r3, [r3, #4]
 80144c2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80144c4:	69fb      	ldr	r3, [r7, #28]
 80144c6:	691b      	ldr	r3, [r3, #16]
 80144c8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80144ca:	f107 0314 	add.w	r3, r7, #20
 80144ce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80144d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d00c      	beq.n	80144f2 <ip4_output_if_src+0x12e>
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	891a      	ldrh	r2, [r3, #8]
 80144dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80144e0:	429a      	cmp	r2, r3
 80144e2:	d906      	bls.n	80144f2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80144e4:	687a      	ldr	r2, [r7, #4]
 80144e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80144e8:	68f8      	ldr	r0, [r7, #12]
 80144ea:	f000 fd53 	bl	8014f94 <ip4_frag>
 80144ee:	4603      	mov	r3, r0
 80144f0:	e006      	b.n	8014500 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80144f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f4:	695b      	ldr	r3, [r3, #20]
 80144f6:	687a      	ldr	r2, [r7, #4]
 80144f8:	68f9      	ldr	r1, [r7, #12]
 80144fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144fc:	4798      	blx	r3
 80144fe:	4603      	mov	r3, r0
}
 8014500:	4618      	mov	r0, r3
 8014502:	3720      	adds	r7, #32
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	08018ed8 	.word	0x08018ed8
 801450c:	08018f0c 	.word	0x08018f0c
 8014510:	08018f18 	.word	0x08018f18
 8014514:	08018f40 	.word	0x08018f40
 8014518:	20008cf2 	.word	0x20008cf2
 801451c:	0801b254 	.word	0x0801b254

08014520 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014520:	b480      	push	{r7}
 8014522:	b085      	sub	sp, #20
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014534:	d002      	beq.n	801453c <ip4_addr_isbroadcast_u32+0x1c>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d101      	bne.n	8014540 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801453c:	2301      	movs	r3, #1
 801453e:	e02a      	b.n	8014596 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014546:	f003 0302 	and.w	r3, r3, #2
 801454a:	2b00      	cmp	r3, #0
 801454c:	d101      	bne.n	8014552 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801454e:	2300      	movs	r3, #0
 8014550:	e021      	b.n	8014596 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	3304      	adds	r3, #4
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	687a      	ldr	r2, [r7, #4]
 801455a:	429a      	cmp	r2, r3
 801455c:	d101      	bne.n	8014562 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801455e:	2300      	movs	r3, #0
 8014560:	e019      	b.n	8014596 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014562:	68fa      	ldr	r2, [r7, #12]
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	3304      	adds	r3, #4
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	405a      	eors	r2, r3
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	3308      	adds	r3, #8
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	4013      	ands	r3, r2
 8014574:	2b00      	cmp	r3, #0
 8014576:	d10d      	bne.n	8014594 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	3308      	adds	r3, #8
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	43da      	mvns	r2, r3
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014584:	683b      	ldr	r3, [r7, #0]
 8014586:	3308      	adds	r3, #8
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801458c:	429a      	cmp	r2, r3
 801458e:	d101      	bne.n	8014594 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014590:	2301      	movs	r3, #1
 8014592:	e000      	b.n	8014596 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014594:	2300      	movs	r3, #0
  }
}
 8014596:	4618      	mov	r0, r3
 8014598:	3714      	adds	r7, #20
 801459a:	46bd      	mov	sp, r7
 801459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a0:	4770      	bx	lr
	...

080145a4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b084      	sub	sp, #16
 80145a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80145aa:	2300      	movs	r3, #0
 80145ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80145ae:	4b12      	ldr	r3, [pc, #72]	; (80145f8 <ip_reass_tmr+0x54>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80145b4:	e018      	b.n	80145e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	7fdb      	ldrb	r3, [r3, #31]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d00b      	beq.n	80145d6 <ip_reass_tmr+0x32>
      r->timer--;
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	7fdb      	ldrb	r3, [r3, #31]
 80145c2:	3b01      	subs	r3, #1
 80145c4:	b2da      	uxtb	r2, r3
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	60fb      	str	r3, [r7, #12]
 80145d4:	e008      	b.n	80145e8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80145e0:	68b9      	ldr	r1, [r7, #8]
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 f80a 	bl	80145fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d1e3      	bne.n	80145b6 <ip_reass_tmr+0x12>
    }
  }
}
 80145ee:	bf00      	nop
 80145f0:	bf00      	nop
 80145f2:	3710      	adds	r7, #16
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}
 80145f8:	20008cf4 	.word	0x20008cf4

080145fc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b088      	sub	sp, #32
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014606:	2300      	movs	r3, #0
 8014608:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801460a:	683a      	ldr	r2, [r7, #0]
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	429a      	cmp	r2, r3
 8014610:	d105      	bne.n	801461e <ip_reass_free_complete_datagram+0x22>
 8014612:	4b45      	ldr	r3, [pc, #276]	; (8014728 <ip_reass_free_complete_datagram+0x12c>)
 8014614:	22ab      	movs	r2, #171	; 0xab
 8014616:	4945      	ldr	r1, [pc, #276]	; (801472c <ip_reass_free_complete_datagram+0x130>)
 8014618:	4845      	ldr	r0, [pc, #276]	; (8014730 <ip_reass_free_complete_datagram+0x134>)
 801461a:	f000 ff21 	bl	8015460 <iprintf>
  if (prev != NULL) {
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d00a      	beq.n	801463a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	429a      	cmp	r2, r3
 801462c:	d005      	beq.n	801463a <ip_reass_free_complete_datagram+0x3e>
 801462e:	4b3e      	ldr	r3, [pc, #248]	; (8014728 <ip_reass_free_complete_datagram+0x12c>)
 8014630:	22ad      	movs	r2, #173	; 0xad
 8014632:	4940      	ldr	r1, [pc, #256]	; (8014734 <ip_reass_free_complete_datagram+0x138>)
 8014634:	483e      	ldr	r0, [pc, #248]	; (8014730 <ip_reass_free_complete_datagram+0x134>)
 8014636:	f000 ff13 	bl	8015460 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	685b      	ldr	r3, [r3, #4]
 8014640:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014642:	697b      	ldr	r3, [r7, #20]
 8014644:	889b      	ldrh	r3, [r3, #4]
 8014646:	b29b      	uxth	r3, r3
 8014648:	2b00      	cmp	r3, #0
 801464a:	d12a      	bne.n	80146a2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	681a      	ldr	r2, [r3, #0]
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801465a:	69bb      	ldr	r3, [r7, #24]
 801465c:	6858      	ldr	r0, [r3, #4]
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	3308      	adds	r3, #8
 8014662:	2214      	movs	r2, #20
 8014664:	4619      	mov	r1, r3
 8014666:	f000 fee5 	bl	8015434 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801466a:	2101      	movs	r1, #1
 801466c:	69b8      	ldr	r0, [r7, #24]
 801466e:	f7ff fc47 	bl	8013f00 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014672:	69b8      	ldr	r0, [r7, #24]
 8014674:	f7f7 fd6e 	bl	800c154 <pbuf_clen>
 8014678:	4603      	mov	r3, r0
 801467a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801467c:	8bfa      	ldrh	r2, [r7, #30]
 801467e:	8a7b      	ldrh	r3, [r7, #18]
 8014680:	4413      	add	r3, r2
 8014682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014686:	db05      	blt.n	8014694 <ip_reass_free_complete_datagram+0x98>
 8014688:	4b27      	ldr	r3, [pc, #156]	; (8014728 <ip_reass_free_complete_datagram+0x12c>)
 801468a:	22bc      	movs	r2, #188	; 0xbc
 801468c:	492a      	ldr	r1, [pc, #168]	; (8014738 <ip_reass_free_complete_datagram+0x13c>)
 801468e:	4828      	ldr	r0, [pc, #160]	; (8014730 <ip_reass_free_complete_datagram+0x134>)
 8014690:	f000 fee6 	bl	8015460 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014694:	8bfa      	ldrh	r2, [r7, #30]
 8014696:	8a7b      	ldrh	r3, [r7, #18]
 8014698:	4413      	add	r3, r2
 801469a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801469c:	69b8      	ldr	r0, [r7, #24]
 801469e:	f7f7 fcd1 	bl	800c044 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	685b      	ldr	r3, [r3, #4]
 80146a6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80146a8:	e01f      	b.n	80146ea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80146aa:	69bb      	ldr	r3, [r7, #24]
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	617b      	str	r3, [r7, #20]
    pcur = p;
 80146b0:	69bb      	ldr	r3, [r7, #24]
 80146b2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80146ba:	68f8      	ldr	r0, [r7, #12]
 80146bc:	f7f7 fd4a 	bl	800c154 <pbuf_clen>
 80146c0:	4603      	mov	r3, r0
 80146c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80146c4:	8bfa      	ldrh	r2, [r7, #30]
 80146c6:	8a7b      	ldrh	r3, [r7, #18]
 80146c8:	4413      	add	r3, r2
 80146ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146ce:	db05      	blt.n	80146dc <ip_reass_free_complete_datagram+0xe0>
 80146d0:	4b15      	ldr	r3, [pc, #84]	; (8014728 <ip_reass_free_complete_datagram+0x12c>)
 80146d2:	22cc      	movs	r2, #204	; 0xcc
 80146d4:	4918      	ldr	r1, [pc, #96]	; (8014738 <ip_reass_free_complete_datagram+0x13c>)
 80146d6:	4816      	ldr	r0, [pc, #88]	; (8014730 <ip_reass_free_complete_datagram+0x134>)
 80146d8:	f000 fec2 	bl	8015460 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80146dc:	8bfa      	ldrh	r2, [r7, #30]
 80146de:	8a7b      	ldrh	r3, [r7, #18]
 80146e0:	4413      	add	r3, r2
 80146e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80146e4:	68f8      	ldr	r0, [r7, #12]
 80146e6:	f7f7 fcad 	bl	800c044 <pbuf_free>
  while (p != NULL) {
 80146ea:	69bb      	ldr	r3, [r7, #24]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d1dc      	bne.n	80146aa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80146f0:	6839      	ldr	r1, [r7, #0]
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f000 f8c2 	bl	801487c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80146f8:	4b10      	ldr	r3, [pc, #64]	; (801473c <ip_reass_free_complete_datagram+0x140>)
 80146fa:	881b      	ldrh	r3, [r3, #0]
 80146fc:	8bfa      	ldrh	r2, [r7, #30]
 80146fe:	429a      	cmp	r2, r3
 8014700:	d905      	bls.n	801470e <ip_reass_free_complete_datagram+0x112>
 8014702:	4b09      	ldr	r3, [pc, #36]	; (8014728 <ip_reass_free_complete_datagram+0x12c>)
 8014704:	22d2      	movs	r2, #210	; 0xd2
 8014706:	490e      	ldr	r1, [pc, #56]	; (8014740 <ip_reass_free_complete_datagram+0x144>)
 8014708:	4809      	ldr	r0, [pc, #36]	; (8014730 <ip_reass_free_complete_datagram+0x134>)
 801470a:	f000 fea9 	bl	8015460 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801470e:	4b0b      	ldr	r3, [pc, #44]	; (801473c <ip_reass_free_complete_datagram+0x140>)
 8014710:	881a      	ldrh	r2, [r3, #0]
 8014712:	8bfb      	ldrh	r3, [r7, #30]
 8014714:	1ad3      	subs	r3, r2, r3
 8014716:	b29a      	uxth	r2, r3
 8014718:	4b08      	ldr	r3, [pc, #32]	; (801473c <ip_reass_free_complete_datagram+0x140>)
 801471a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801471c:	8bfb      	ldrh	r3, [r7, #30]
}
 801471e:	4618      	mov	r0, r3
 8014720:	3720      	adds	r7, #32
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	08018f70 	.word	0x08018f70
 801472c:	08018fac 	.word	0x08018fac
 8014730:	08018fb8 	.word	0x08018fb8
 8014734:	08018fe0 	.word	0x08018fe0
 8014738:	08018ff4 	.word	0x08018ff4
 801473c:	20008cf8 	.word	0x20008cf8
 8014740:	08019014 	.word	0x08019014

08014744 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b08a      	sub	sp, #40	; 0x28
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
 801474c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801474e:	2300      	movs	r3, #0
 8014750:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014752:	2300      	movs	r3, #0
 8014754:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014756:	2300      	movs	r3, #0
 8014758:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801475a:	2300      	movs	r3, #0
 801475c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801475e:	2300      	movs	r3, #0
 8014760:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014762:	4b28      	ldr	r3, [pc, #160]	; (8014804 <ip_reass_remove_oldest_datagram+0xc0>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014768:	e030      	b.n	80147cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801476c:	695a      	ldr	r2, [r3, #20]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	68db      	ldr	r3, [r3, #12]
 8014772:	429a      	cmp	r2, r3
 8014774:	d10c      	bne.n	8014790 <ip_reass_remove_oldest_datagram+0x4c>
 8014776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014778:	699a      	ldr	r2, [r3, #24]
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	691b      	ldr	r3, [r3, #16]
 801477e:	429a      	cmp	r2, r3
 8014780:	d106      	bne.n	8014790 <ip_reass_remove_oldest_datagram+0x4c>
 8014782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014784:	899a      	ldrh	r2, [r3, #12]
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	889b      	ldrh	r3, [r3, #4]
 801478a:	b29b      	uxth	r3, r3
 801478c:	429a      	cmp	r2, r3
 801478e:	d014      	beq.n	80147ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	3301      	adds	r3, #1
 8014794:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014796:	6a3b      	ldr	r3, [r7, #32]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d104      	bne.n	80147a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801479e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80147a0:	69fb      	ldr	r3, [r7, #28]
 80147a2:	61bb      	str	r3, [r7, #24]
 80147a4:	e009      	b.n	80147ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80147a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a8:	7fda      	ldrb	r2, [r3, #31]
 80147aa:	6a3b      	ldr	r3, [r7, #32]
 80147ac:	7fdb      	ldrb	r3, [r3, #31]
 80147ae:	429a      	cmp	r2, r3
 80147b0:	d803      	bhi.n	80147ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80147b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80147b6:	69fb      	ldr	r3, [r7, #28]
 80147b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80147ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d001      	beq.n	80147c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80147c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80147c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80147cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d1cb      	bne.n	801476a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80147d2:	6a3b      	ldr	r3, [r7, #32]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d008      	beq.n	80147ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80147d8:	69b9      	ldr	r1, [r7, #24]
 80147da:	6a38      	ldr	r0, [r7, #32]
 80147dc:	f7ff ff0e 	bl	80145fc <ip_reass_free_complete_datagram>
 80147e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80147e2:	697a      	ldr	r2, [r7, #20]
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	4413      	add	r3, r2
 80147e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80147ea:	697a      	ldr	r2, [r7, #20]
 80147ec:	683b      	ldr	r3, [r7, #0]
 80147ee:	429a      	cmp	r2, r3
 80147f0:	da02      	bge.n	80147f8 <ip_reass_remove_oldest_datagram+0xb4>
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	dcac      	bgt.n	8014752 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80147f8:	697b      	ldr	r3, [r7, #20]
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3728      	adds	r7, #40	; 0x28
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	20008cf4 	.word	0x20008cf4

08014808 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b084      	sub	sp, #16
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
 8014810:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014812:	2004      	movs	r0, #4
 8014814:	f7f6 fd30 	bl	800b278 <memp_malloc>
 8014818:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d110      	bne.n	8014842 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014820:	6839      	ldr	r1, [r7, #0]
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f7ff ff8e 	bl	8014744 <ip_reass_remove_oldest_datagram>
 8014828:	4602      	mov	r2, r0
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	4293      	cmp	r3, r2
 801482e:	dc03      	bgt.n	8014838 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014830:	2004      	movs	r0, #4
 8014832:	f7f6 fd21 	bl	800b278 <memp_malloc>
 8014836:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d101      	bne.n	8014842 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801483e:	2300      	movs	r3, #0
 8014840:	e016      	b.n	8014870 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014842:	2220      	movs	r2, #32
 8014844:	2100      	movs	r1, #0
 8014846:	68f8      	ldr	r0, [r7, #12]
 8014848:	f000 fe02 	bl	8015450 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	220f      	movs	r2, #15
 8014850:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014852:	4b09      	ldr	r3, [pc, #36]	; (8014878 <ip_reass_enqueue_new_datagram+0x70>)
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801485a:	4a07      	ldr	r2, [pc, #28]	; (8014878 <ip_reass_enqueue_new_datagram+0x70>)
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	3308      	adds	r3, #8
 8014864:	2214      	movs	r2, #20
 8014866:	6879      	ldr	r1, [r7, #4]
 8014868:	4618      	mov	r0, r3
 801486a:	f000 fde3 	bl	8015434 <memcpy>
  return ipr;
 801486e:	68fb      	ldr	r3, [r7, #12]
}
 8014870:	4618      	mov	r0, r3
 8014872:	3710      	adds	r7, #16
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	20008cf4 	.word	0x20008cf4

0801487c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014886:	4b10      	ldr	r3, [pc, #64]	; (80148c8 <ip_reass_dequeue_datagram+0x4c>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	687a      	ldr	r2, [r7, #4]
 801488c:	429a      	cmp	r2, r3
 801488e:	d104      	bne.n	801489a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	4a0c      	ldr	r2, [pc, #48]	; (80148c8 <ip_reass_dequeue_datagram+0x4c>)
 8014896:	6013      	str	r3, [r2, #0]
 8014898:	e00d      	b.n	80148b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d106      	bne.n	80148ae <ip_reass_dequeue_datagram+0x32>
 80148a0:	4b0a      	ldr	r3, [pc, #40]	; (80148cc <ip_reass_dequeue_datagram+0x50>)
 80148a2:	f240 1245 	movw	r2, #325	; 0x145
 80148a6:	490a      	ldr	r1, [pc, #40]	; (80148d0 <ip_reass_dequeue_datagram+0x54>)
 80148a8:	480a      	ldr	r0, [pc, #40]	; (80148d4 <ip_reass_dequeue_datagram+0x58>)
 80148aa:	f000 fdd9 	bl	8015460 <iprintf>
    prev->next = ipr->next;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681a      	ldr	r2, [r3, #0]
 80148b2:	683b      	ldr	r3, [r7, #0]
 80148b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80148b6:	6879      	ldr	r1, [r7, #4]
 80148b8:	2004      	movs	r0, #4
 80148ba:	f7f6 fd4d 	bl	800b358 <memp_free>
}
 80148be:	bf00      	nop
 80148c0:	3708      	adds	r7, #8
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	20008cf4 	.word	0x20008cf4
 80148cc:	08018f70 	.word	0x08018f70
 80148d0:	08019038 	.word	0x08019038
 80148d4:	08018fb8 	.word	0x08018fb8

080148d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b08c      	sub	sp, #48	; 0x30
 80148dc:	af00      	add	r7, sp, #0
 80148de:	60f8      	str	r0, [r7, #12]
 80148e0:	60b9      	str	r1, [r7, #8]
 80148e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80148e4:	2300      	movs	r3, #0
 80148e6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80148e8:	2301      	movs	r3, #1
 80148ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80148f2:	69fb      	ldr	r3, [r7, #28]
 80148f4:	885b      	ldrh	r3, [r3, #2]
 80148f6:	b29b      	uxth	r3, r3
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7f6 f845 	bl	800a988 <lwip_htons>
 80148fe:	4603      	mov	r3, r0
 8014900:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014902:	69fb      	ldr	r3, [r7, #28]
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	f003 030f 	and.w	r3, r3, #15
 801490a:	b2db      	uxtb	r3, r3
 801490c:	009b      	lsls	r3, r3, #2
 801490e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014910:	7e7b      	ldrb	r3, [r7, #25]
 8014912:	b29b      	uxth	r3, r3
 8014914:	8b7a      	ldrh	r2, [r7, #26]
 8014916:	429a      	cmp	r2, r3
 8014918:	d202      	bcs.n	8014920 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801491a:	f04f 33ff 	mov.w	r3, #4294967295
 801491e:	e135      	b.n	8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014920:	7e7b      	ldrb	r3, [r7, #25]
 8014922:	b29b      	uxth	r3, r3
 8014924:	8b7a      	ldrh	r2, [r7, #26]
 8014926:	1ad3      	subs	r3, r2, r3
 8014928:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	88db      	ldrh	r3, [r3, #6]
 801492e:	b29b      	uxth	r3, r3
 8014930:	4618      	mov	r0, r3
 8014932:	f7f6 f829 	bl	800a988 <lwip_htons>
 8014936:	4603      	mov	r3, r0
 8014938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801493c:	b29b      	uxth	r3, r3
 801493e:	00db      	lsls	r3, r3, #3
 8014940:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	685b      	ldr	r3, [r3, #4]
 8014946:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801494a:	2200      	movs	r2, #0
 801494c:	701a      	strb	r2, [r3, #0]
 801494e:	2200      	movs	r2, #0
 8014950:	705a      	strb	r2, [r3, #1]
 8014952:	2200      	movs	r2, #0
 8014954:	709a      	strb	r2, [r3, #2]
 8014956:	2200      	movs	r2, #0
 8014958:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801495c:	8afa      	ldrh	r2, [r7, #22]
 801495e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014960:	8afa      	ldrh	r2, [r7, #22]
 8014962:	8b7b      	ldrh	r3, [r7, #26]
 8014964:	4413      	add	r3, r2
 8014966:	b29a      	uxth	r2, r3
 8014968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801496a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801496e:	88db      	ldrh	r3, [r3, #6]
 8014970:	b29b      	uxth	r3, r3
 8014972:	8afa      	ldrh	r2, [r7, #22]
 8014974:	429a      	cmp	r2, r3
 8014976:	d902      	bls.n	801497e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014978:	f04f 33ff 	mov.w	r3, #4294967295
 801497c:	e106      	b.n	8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	685b      	ldr	r3, [r3, #4]
 8014982:	627b      	str	r3, [r7, #36]	; 0x24
 8014984:	e068      	b.n	8014a58 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498e:	889b      	ldrh	r3, [r3, #4]
 8014990:	b29a      	uxth	r2, r3
 8014992:	693b      	ldr	r3, [r7, #16]
 8014994:	889b      	ldrh	r3, [r3, #4]
 8014996:	b29b      	uxth	r3, r3
 8014998:	429a      	cmp	r2, r3
 801499a:	d235      	bcs.n	8014a08 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801499e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80149a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d020      	beq.n	80149ea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80149a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149aa:	889b      	ldrh	r3, [r3, #4]
 80149ac:	b29a      	uxth	r2, r3
 80149ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b0:	88db      	ldrh	r3, [r3, #6]
 80149b2:	b29b      	uxth	r3, r3
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d307      	bcc.n	80149c8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80149b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ba:	88db      	ldrh	r3, [r3, #6]
 80149bc:	b29a      	uxth	r2, r3
 80149be:	693b      	ldr	r3, [r7, #16]
 80149c0:	889b      	ldrh	r3, [r3, #4]
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d902      	bls.n	80149ce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80149c8:	f04f 33ff 	mov.w	r3, #4294967295
 80149cc:	e0de      	b.n	8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80149ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d0:	68ba      	ldr	r2, [r7, #8]
 80149d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80149d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d6:	88db      	ldrh	r3, [r3, #6]
 80149d8:	b29a      	uxth	r2, r3
 80149da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149dc:	889b      	ldrh	r3, [r3, #4]
 80149de:	b29b      	uxth	r3, r3
 80149e0:	429a      	cmp	r2, r3
 80149e2:	d03d      	beq.n	8014a60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80149e4:	2300      	movs	r3, #0
 80149e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80149e8:	e03a      	b.n	8014a60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80149ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149ec:	88db      	ldrh	r3, [r3, #6]
 80149ee:	b29a      	uxth	r2, r3
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	889b      	ldrh	r3, [r3, #4]
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	429a      	cmp	r2, r3
 80149f8:	d902      	bls.n	8014a00 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80149fa:	f04f 33ff 	mov.w	r3, #4294967295
 80149fe:	e0c5      	b.n	8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	68ba      	ldr	r2, [r7, #8]
 8014a04:	605a      	str	r2, [r3, #4]
      break;
 8014a06:	e02b      	b.n	8014a60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a0a:	889b      	ldrh	r3, [r3, #4]
 8014a0c:	b29a      	uxth	r2, r3
 8014a0e:	693b      	ldr	r3, [r7, #16]
 8014a10:	889b      	ldrh	r3, [r3, #4]
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	429a      	cmp	r2, r3
 8014a16:	d102      	bne.n	8014a1e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a18:	f04f 33ff 	mov.w	r3, #4294967295
 8014a1c:	e0b6      	b.n	8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a20:	889b      	ldrh	r3, [r3, #4]
 8014a22:	b29a      	uxth	r2, r3
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	88db      	ldrh	r3, [r3, #6]
 8014a28:	b29b      	uxth	r3, r3
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d202      	bcs.n	8014a34 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8014a32:	e0ab      	b.n	8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d009      	beq.n	8014a4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a3c:	88db      	ldrh	r3, [r3, #6]
 8014a3e:	b29a      	uxth	r2, r3
 8014a40:	693b      	ldr	r3, [r7, #16]
 8014a42:	889b      	ldrh	r3, [r3, #4]
 8014a44:	b29b      	uxth	r3, r3
 8014a46:	429a      	cmp	r2, r3
 8014a48:	d001      	beq.n	8014a4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014a54:	693b      	ldr	r3, [r7, #16]
 8014a56:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d193      	bne.n	8014986 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014a5e:	e000      	b.n	8014a62 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014a60:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d12d      	bne.n	8014ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d01c      	beq.n	8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a70:	88db      	ldrh	r3, [r3, #6]
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a76:	889b      	ldrh	r3, [r3, #4]
 8014a78:	b29b      	uxth	r3, r3
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	d906      	bls.n	8014a8c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014a7e:	4b45      	ldr	r3, [pc, #276]	; (8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a80:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014a84:	4944      	ldr	r1, [pc, #272]	; (8014b98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014a86:	4845      	ldr	r0, [pc, #276]	; (8014b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a88:	f000 fcea 	bl	8015460 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8e:	68ba      	ldr	r2, [r7, #8]
 8014a90:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a94:	88db      	ldrh	r3, [r3, #6]
 8014a96:	b29a      	uxth	r2, r3
 8014a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a9a:	889b      	ldrh	r3, [r3, #4]
 8014a9c:	b29b      	uxth	r3, r3
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d010      	beq.n	8014ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	623b      	str	r3, [r7, #32]
 8014aa6:	e00d      	b.n	8014ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d006      	beq.n	8014abe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014ab0:	4b38      	ldr	r3, [pc, #224]	; (8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014ab2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014ab6:	493a      	ldr	r1, [pc, #232]	; (8014ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014ab8:	4838      	ldr	r0, [pc, #224]	; (8014b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014aba:	f000 fcd1 	bl	8015460 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	68ba      	ldr	r2, [r7, #8]
 8014ac2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d105      	bne.n	8014ad6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	7f9b      	ldrb	r3, [r3, #30]
 8014ace:	f003 0301 	and.w	r3, r3, #1
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d059      	beq.n	8014b8a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014ad6:	6a3b      	ldr	r3, [r7, #32]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d04f      	beq.n	8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	685b      	ldr	r3, [r3, #4]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d006      	beq.n	8014af2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	685b      	ldr	r3, [r3, #4]
 8014aea:	889b      	ldrh	r3, [r3, #4]
 8014aec:	b29b      	uxth	r3, r3
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d002      	beq.n	8014af8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014af2:	2300      	movs	r3, #0
 8014af4:	623b      	str	r3, [r7, #32]
 8014af6:	e041      	b.n	8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014b02:	e012      	b.n	8014b2a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b06:	685b      	ldr	r3, [r3, #4]
 8014b08:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0c:	88db      	ldrh	r3, [r3, #6]
 8014b0e:	b29a      	uxth	r2, r3
 8014b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b12:	889b      	ldrh	r3, [r3, #4]
 8014b14:	b29b      	uxth	r3, r3
 8014b16:	429a      	cmp	r2, r3
 8014b18:	d002      	beq.n	8014b20 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	623b      	str	r3, [r7, #32]
            break;
 8014b1e:	e007      	b.n	8014b30 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b22:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d1e9      	bne.n	8014b04 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014b30:	6a3b      	ldr	r3, [r7, #32]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d022      	beq.n	8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	685b      	ldr	r3, [r3, #4]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d106      	bne.n	8014b4c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014b3e:	4b15      	ldr	r3, [pc, #84]	; (8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b40:	f240 12df 	movw	r2, #479	; 0x1df
 8014b44:	4917      	ldr	r1, [pc, #92]	; (8014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014b46:	4815      	ldr	r0, [pc, #84]	; (8014b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b48:	f000 fc8a 	bl	8015460 <iprintf>
          LWIP_ASSERT("sanity check",
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	685b      	ldr	r3, [r3, #4]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d106      	bne.n	8014b66 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014b58:	4b0e      	ldr	r3, [pc, #56]	; (8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014b5e:	4911      	ldr	r1, [pc, #68]	; (8014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014b60:	480e      	ldr	r0, [pc, #56]	; (8014b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b62:	f000 fc7d 	bl	8015460 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d006      	beq.n	8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014b6e:	4b09      	ldr	r3, [pc, #36]	; (8014b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b70:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014b74:	490c      	ldr	r1, [pc, #48]	; (8014ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014b76:	4809      	ldr	r0, [pc, #36]	; (8014b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b78:	f000 fc72 	bl	8015460 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014b7c:	6a3b      	ldr	r3, [r7, #32]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	bf14      	ite	ne
 8014b82:	2301      	movne	r3, #1
 8014b84:	2300      	moveq	r3, #0
 8014b86:	b2db      	uxtb	r3, r3
 8014b88:	e000      	b.n	8014b8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014b8a:	2300      	movs	r3, #0
}
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	3730      	adds	r7, #48	; 0x30
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}
 8014b94:	08018f70 	.word	0x08018f70
 8014b98:	08019054 	.word	0x08019054
 8014b9c:	08018fb8 	.word	0x08018fb8
 8014ba0:	08019074 	.word	0x08019074
 8014ba4:	080190ac 	.word	0x080190ac
 8014ba8:	080190bc 	.word	0x080190bc

08014bac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b08e      	sub	sp, #56	; 0x38
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bbc:	781b      	ldrb	r3, [r3, #0]
 8014bbe:	f003 030f 	and.w	r3, r3, #15
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	009b      	lsls	r3, r3, #2
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	2b14      	cmp	r3, #20
 8014bca:	f040 8171 	bne.w	8014eb0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd0:	88db      	ldrh	r3, [r3, #6]
 8014bd2:	b29b      	uxth	r3, r3
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7f5 fed7 	bl	800a988 <lwip_htons>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014be0:	b29b      	uxth	r3, r3
 8014be2:	00db      	lsls	r3, r3, #3
 8014be4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014be8:	885b      	ldrh	r3, [r3, #2]
 8014bea:	b29b      	uxth	r3, r3
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7f5 fecb 	bl	800a988 <lwip_htons>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf8:	781b      	ldrb	r3, [r3, #0]
 8014bfa:	f003 030f 	and.w	r3, r3, #15
 8014bfe:	b2db      	uxtb	r3, r3
 8014c00:	009b      	lsls	r3, r3, #2
 8014c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014c06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014c0a:	b29b      	uxth	r3, r3
 8014c0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014c0e:	429a      	cmp	r2, r3
 8014c10:	f0c0 8150 	bcc.w	8014eb4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014c14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014c18:	b29b      	uxth	r3, r3
 8014c1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014c1c:	1ad3      	subs	r3, r2, r3
 8014c1e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014c20:	6878      	ldr	r0, [r7, #4]
 8014c22:	f7f7 fa97 	bl	800c154 <pbuf_clen>
 8014c26:	4603      	mov	r3, r0
 8014c28:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014c2a:	4b8c      	ldr	r3, [pc, #560]	; (8014e5c <ip4_reass+0x2b0>)
 8014c2c:	881b      	ldrh	r3, [r3, #0]
 8014c2e:	461a      	mov	r2, r3
 8014c30:	8c3b      	ldrh	r3, [r7, #32]
 8014c32:	4413      	add	r3, r2
 8014c34:	2b0a      	cmp	r3, #10
 8014c36:	dd10      	ble.n	8014c5a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014c38:	8c3b      	ldrh	r3, [r7, #32]
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c3e:	f7ff fd81 	bl	8014744 <ip_reass_remove_oldest_datagram>
 8014c42:	4603      	mov	r3, r0
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	f000 8137 	beq.w	8014eb8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014c4a:	4b84      	ldr	r3, [pc, #528]	; (8014e5c <ip4_reass+0x2b0>)
 8014c4c:	881b      	ldrh	r3, [r3, #0]
 8014c4e:	461a      	mov	r2, r3
 8014c50:	8c3b      	ldrh	r3, [r7, #32]
 8014c52:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014c54:	2b0a      	cmp	r3, #10
 8014c56:	f300 812f 	bgt.w	8014eb8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014c5a:	4b81      	ldr	r3, [pc, #516]	; (8014e60 <ip4_reass+0x2b4>)
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8014c60:	e015      	b.n	8014c8e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c64:	695a      	ldr	r2, [r3, #20]
 8014c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c68:	68db      	ldr	r3, [r3, #12]
 8014c6a:	429a      	cmp	r2, r3
 8014c6c:	d10c      	bne.n	8014c88 <ip4_reass+0xdc>
 8014c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c70:	699a      	ldr	r2, [r3, #24]
 8014c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c74:	691b      	ldr	r3, [r3, #16]
 8014c76:	429a      	cmp	r2, r3
 8014c78:	d106      	bne.n	8014c88 <ip4_reass+0xdc>
 8014c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c7c:	899a      	ldrh	r2, [r3, #12]
 8014c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c80:	889b      	ldrh	r3, [r3, #4]
 8014c82:	b29b      	uxth	r3, r3
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d006      	beq.n	8014c96 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8014c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d1e6      	bne.n	8014c62 <ip4_reass+0xb6>
 8014c94:	e000      	b.n	8014c98 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014c96:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d109      	bne.n	8014cb2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014c9e:	8c3b      	ldrh	r3, [r7, #32]
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ca4:	f7ff fdb0 	bl	8014808 <ip_reass_enqueue_new_datagram>
 8014ca8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d11c      	bne.n	8014cea <ip4_reass+0x13e>
      goto nullreturn;
 8014cb0:	e105      	b.n	8014ebe <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cb4:	88db      	ldrh	r3, [r3, #6]
 8014cb6:	b29b      	uxth	r3, r3
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f7f5 fe65 	bl	800a988 <lwip_htons>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d110      	bne.n	8014cea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cca:	89db      	ldrh	r3, [r3, #14]
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7f5 fe5b 	bl	800a988 <lwip_htons>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d006      	beq.n	8014cea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cde:	3308      	adds	r3, #8
 8014ce0:	2214      	movs	r2, #20
 8014ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	f000 fba5 	bl	8015434 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cec:	88db      	ldrh	r3, [r3, #6]
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	f003 0320 	and.w	r3, r3, #32
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	bf0c      	ite	eq
 8014cf8:	2301      	moveq	r3, #1
 8014cfa:	2300      	movne	r3, #0
 8014cfc:	b2db      	uxtb	r3, r3
 8014cfe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014d00:	69fb      	ldr	r3, [r7, #28]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d00e      	beq.n	8014d24 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014d06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014d08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d0a:	4413      	add	r3, r2
 8014d0c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014d0e:	8b7a      	ldrh	r2, [r7, #26]
 8014d10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014d12:	429a      	cmp	r2, r3
 8014d14:	f0c0 80a0 	bcc.w	8014e58 <ip4_reass+0x2ac>
 8014d18:	8b7b      	ldrh	r3, [r7, #26]
 8014d1a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	f200 809a 	bhi.w	8014e58 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014d24:	69fa      	ldr	r2, [r7, #28]
 8014d26:	6879      	ldr	r1, [r7, #4]
 8014d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d2a:	f7ff fdd5 	bl	80148d8 <ip_reass_chain_frag_into_datagram_and_validate>
 8014d2e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d36:	f000 809b 	beq.w	8014e70 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014d3a:	4b48      	ldr	r3, [pc, #288]	; (8014e5c <ip4_reass+0x2b0>)
 8014d3c:	881a      	ldrh	r2, [r3, #0]
 8014d3e:	8c3b      	ldrh	r3, [r7, #32]
 8014d40:	4413      	add	r3, r2
 8014d42:	b29a      	uxth	r2, r3
 8014d44:	4b45      	ldr	r3, [pc, #276]	; (8014e5c <ip4_reass+0x2b0>)
 8014d46:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014d48:	69fb      	ldr	r3, [r7, #28]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d00d      	beq.n	8014d6a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014d4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014d50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d52:	4413      	add	r3, r2
 8014d54:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d58:	8a7a      	ldrh	r2, [r7, #18]
 8014d5a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d5e:	7f9b      	ldrb	r3, [r3, #30]
 8014d60:	f043 0301 	orr.w	r3, r3, #1
 8014d64:	b2da      	uxtb	r2, r3
 8014d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d68:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014d6a:	697b      	ldr	r3, [r7, #20]
 8014d6c:	2b01      	cmp	r3, #1
 8014d6e:	d171      	bne.n	8014e54 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d72:	8b9b      	ldrh	r3, [r3, #28]
 8014d74:	3314      	adds	r3, #20
 8014d76:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d7a:	685b      	ldr	r3, [r3, #4]
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d8c:	3308      	adds	r3, #8
 8014d8e:	2214      	movs	r2, #20
 8014d90:	4619      	mov	r1, r3
 8014d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d94:	f000 fb4e 	bl	8015434 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014d98:	8a3b      	ldrh	r3, [r7, #16]
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f7f5 fdf4 	bl	800a988 <lwip_htons>
 8014da0:	4603      	mov	r3, r0
 8014da2:	461a      	mov	r2, r3
 8014da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014da6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014daa:	2200      	movs	r2, #0
 8014dac:	719a      	strb	r2, [r3, #6]
 8014dae:	2200      	movs	r2, #0
 8014db0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db4:	2200      	movs	r2, #0
 8014db6:	729a      	strb	r2, [r3, #10]
 8014db8:	2200      	movs	r2, #0
 8014dba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dbe:	685b      	ldr	r3, [r3, #4]
 8014dc0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014dc2:	e00d      	b.n	8014de0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dc6:	685b      	ldr	r3, [r3, #4]
 8014dc8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014dca:	2114      	movs	r1, #20
 8014dcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014dce:	f7f7 f8b3 	bl	800bf38 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014dd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f7f7 f9f7 	bl	800c1c8 <pbuf_cat>
      r = iprh->next_pbuf;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d1ee      	bne.n	8014dc4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014de6:	4b1e      	ldr	r3, [pc, #120]	; (8014e60 <ip4_reass+0x2b4>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d102      	bne.n	8014df6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014df0:	2300      	movs	r3, #0
 8014df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014df4:	e010      	b.n	8014e18 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014df6:	4b1a      	ldr	r3, [pc, #104]	; (8014e60 <ip4_reass+0x2b4>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014dfc:	e007      	b.n	8014e0e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d006      	beq.n	8014e16 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d1f4      	bne.n	8014dfe <ip4_reass+0x252>
 8014e14:	e000      	b.n	8014e18 <ip4_reass+0x26c>
          break;
 8014e16:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014e18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e1c:	f7ff fd2e 	bl	801487c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014e20:	6878      	ldr	r0, [r7, #4]
 8014e22:	f7f7 f997 	bl	800c154 <pbuf_clen>
 8014e26:	4603      	mov	r3, r0
 8014e28:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014e2a:	4b0c      	ldr	r3, [pc, #48]	; (8014e5c <ip4_reass+0x2b0>)
 8014e2c:	881b      	ldrh	r3, [r3, #0]
 8014e2e:	8c3a      	ldrh	r2, [r7, #32]
 8014e30:	429a      	cmp	r2, r3
 8014e32:	d906      	bls.n	8014e42 <ip4_reass+0x296>
 8014e34:	4b0b      	ldr	r3, [pc, #44]	; (8014e64 <ip4_reass+0x2b8>)
 8014e36:	f240 229b 	movw	r2, #667	; 0x29b
 8014e3a:	490b      	ldr	r1, [pc, #44]	; (8014e68 <ip4_reass+0x2bc>)
 8014e3c:	480b      	ldr	r0, [pc, #44]	; (8014e6c <ip4_reass+0x2c0>)
 8014e3e:	f000 fb0f 	bl	8015460 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014e42:	4b06      	ldr	r3, [pc, #24]	; (8014e5c <ip4_reass+0x2b0>)
 8014e44:	881a      	ldrh	r2, [r3, #0]
 8014e46:	8c3b      	ldrh	r3, [r7, #32]
 8014e48:	1ad3      	subs	r3, r2, r3
 8014e4a:	b29a      	uxth	r2, r3
 8014e4c:	4b03      	ldr	r3, [pc, #12]	; (8014e5c <ip4_reass+0x2b0>)
 8014e4e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	e038      	b.n	8014ec6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014e54:	2300      	movs	r3, #0
 8014e56:	e036      	b.n	8014ec6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014e58:	bf00      	nop
 8014e5a:	e00a      	b.n	8014e72 <ip4_reass+0x2c6>
 8014e5c:	20008cf8 	.word	0x20008cf8
 8014e60:	20008cf4 	.word	0x20008cf4
 8014e64:	08018f70 	.word	0x08018f70
 8014e68:	080190e0 	.word	0x080190e0
 8014e6c:	08018fb8 	.word	0x08018fb8
    goto nullreturn_ipr;
 8014e70:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d106      	bne.n	8014e86 <ip4_reass+0x2da>
 8014e78:	4b15      	ldr	r3, [pc, #84]	; (8014ed0 <ip4_reass+0x324>)
 8014e7a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014e7e:	4915      	ldr	r1, [pc, #84]	; (8014ed4 <ip4_reass+0x328>)
 8014e80:	4815      	ldr	r0, [pc, #84]	; (8014ed8 <ip4_reass+0x32c>)
 8014e82:	f000 faed 	bl	8015460 <iprintf>
  if (ipr->p == NULL) {
 8014e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e88:	685b      	ldr	r3, [r3, #4]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d116      	bne.n	8014ebc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014e8e:	4b13      	ldr	r3, [pc, #76]	; (8014edc <ip4_reass+0x330>)
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d006      	beq.n	8014ea6 <ip4_reass+0x2fa>
 8014e98:	4b0d      	ldr	r3, [pc, #52]	; (8014ed0 <ip4_reass+0x324>)
 8014e9a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014e9e:	4910      	ldr	r1, [pc, #64]	; (8014ee0 <ip4_reass+0x334>)
 8014ea0:	480d      	ldr	r0, [pc, #52]	; (8014ed8 <ip4_reass+0x32c>)
 8014ea2:	f000 fadd 	bl	8015460 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014ea6:	2100      	movs	r1, #0
 8014ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014eaa:	f7ff fce7 	bl	801487c <ip_reass_dequeue_datagram>
 8014eae:	e006      	b.n	8014ebe <ip4_reass+0x312>
    goto nullreturn;
 8014eb0:	bf00      	nop
 8014eb2:	e004      	b.n	8014ebe <ip4_reass+0x312>
    goto nullreturn;
 8014eb4:	bf00      	nop
 8014eb6:	e002      	b.n	8014ebe <ip4_reass+0x312>
      goto nullreturn;
 8014eb8:	bf00      	nop
 8014eba:	e000      	b.n	8014ebe <ip4_reass+0x312>
  }

nullreturn:
 8014ebc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f7f7 f8c0 	bl	800c044 <pbuf_free>
  return NULL;
 8014ec4:	2300      	movs	r3, #0
}
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	3738      	adds	r7, #56	; 0x38
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd80      	pop	{r7, pc}
 8014ece:	bf00      	nop
 8014ed0:	08018f70 	.word	0x08018f70
 8014ed4:	080190fc 	.word	0x080190fc
 8014ed8:	08018fb8 	.word	0x08018fb8
 8014edc:	20008cf4 	.word	0x20008cf4
 8014ee0:	08019108 	.word	0x08019108

08014ee4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014ee8:	2005      	movs	r0, #5
 8014eea:	f7f6 f9c5 	bl	800b278 <memp_malloc>
 8014eee:	4603      	mov	r3, r0
}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	bd80      	pop	{r7, pc}

08014ef4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d106      	bne.n	8014f10 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014f02:	4b07      	ldr	r3, [pc, #28]	; (8014f20 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014f04:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014f08:	4906      	ldr	r1, [pc, #24]	; (8014f24 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014f0a:	4807      	ldr	r0, [pc, #28]	; (8014f28 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014f0c:	f000 faa8 	bl	8015460 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014f10:	6879      	ldr	r1, [r7, #4]
 8014f12:	2005      	movs	r0, #5
 8014f14:	f7f6 fa20 	bl	800b358 <memp_free>
}
 8014f18:	bf00      	nop
 8014f1a:	3708      	adds	r7, #8
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	bd80      	pop	{r7, pc}
 8014f20:	08018f70 	.word	0x08018f70
 8014f24:	08019128 	.word	0x08019128
 8014f28:	08018fb8 	.word	0x08018fb8

08014f2c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b084      	sub	sp, #16
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d106      	bne.n	8014f4c <ipfrag_free_pbuf_custom+0x20>
 8014f3e:	4b11      	ldr	r3, [pc, #68]	; (8014f84 <ipfrag_free_pbuf_custom+0x58>)
 8014f40:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014f44:	4910      	ldr	r1, [pc, #64]	; (8014f88 <ipfrag_free_pbuf_custom+0x5c>)
 8014f46:	4811      	ldr	r0, [pc, #68]	; (8014f8c <ipfrag_free_pbuf_custom+0x60>)
 8014f48:	f000 fa8a 	bl	8015460 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014f4c:	68fa      	ldr	r2, [r7, #12]
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	429a      	cmp	r2, r3
 8014f52:	d006      	beq.n	8014f62 <ipfrag_free_pbuf_custom+0x36>
 8014f54:	4b0b      	ldr	r3, [pc, #44]	; (8014f84 <ipfrag_free_pbuf_custom+0x58>)
 8014f56:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014f5a:	490d      	ldr	r1, [pc, #52]	; (8014f90 <ipfrag_free_pbuf_custom+0x64>)
 8014f5c:	480b      	ldr	r0, [pc, #44]	; (8014f8c <ipfrag_free_pbuf_custom+0x60>)
 8014f5e:	f000 fa7f 	bl	8015460 <iprintf>
  if (pcr->original != NULL) {
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	695b      	ldr	r3, [r3, #20]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d004      	beq.n	8014f74 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	695b      	ldr	r3, [r3, #20]
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7f7 f868 	bl	800c044 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014f74:	68f8      	ldr	r0, [r7, #12]
 8014f76:	f7ff ffbd 	bl	8014ef4 <ip_frag_free_pbuf_custom_ref>
}
 8014f7a:	bf00      	nop
 8014f7c:	3710      	adds	r7, #16
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}
 8014f82:	bf00      	nop
 8014f84:	08018f70 	.word	0x08018f70
 8014f88:	08019134 	.word	0x08019134
 8014f8c:	08018fb8 	.word	0x08018fb8
 8014f90:	08019140 	.word	0x08019140

08014f94 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b094      	sub	sp, #80	; 0x50
 8014f98:	af02      	add	r7, sp, #8
 8014f9a:	60f8      	str	r0, [r7, #12]
 8014f9c:	60b9      	str	r1, [r7, #8]
 8014f9e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014faa:	3b14      	subs	r3, #20
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	da00      	bge.n	8014fb2 <ip4_frag+0x1e>
 8014fb0:	3307      	adds	r3, #7
 8014fb2:	10db      	asrs	r3, r3, #3
 8014fb4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014fb6:	2314      	movs	r3, #20
 8014fb8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fc2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc6:	781b      	ldrb	r3, [r3, #0]
 8014fc8:	f003 030f 	and.w	r3, r3, #15
 8014fcc:	b2db      	uxtb	r3, r3
 8014fce:	009b      	lsls	r3, r3, #2
 8014fd0:	b2db      	uxtb	r3, r3
 8014fd2:	2b14      	cmp	r3, #20
 8014fd4:	d002      	beq.n	8014fdc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014fd6:	f06f 0305 	mvn.w	r3, #5
 8014fda:	e110      	b.n	80151fe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	895b      	ldrh	r3, [r3, #10]
 8014fe0:	2b13      	cmp	r3, #19
 8014fe2:	d809      	bhi.n	8014ff8 <ip4_frag+0x64>
 8014fe4:	4b88      	ldr	r3, [pc, #544]	; (8015208 <ip4_frag+0x274>)
 8014fe6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014fea:	4988      	ldr	r1, [pc, #544]	; (801520c <ip4_frag+0x278>)
 8014fec:	4888      	ldr	r0, [pc, #544]	; (8015210 <ip4_frag+0x27c>)
 8014fee:	f000 fa37 	bl	8015460 <iprintf>
 8014ff2:	f06f 0305 	mvn.w	r3, #5
 8014ff6:	e102      	b.n	80151fe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ffa:	88db      	ldrh	r3, [r3, #6]
 8014ffc:	b29b      	uxth	r3, r3
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7f5 fcc2 	bl	800a988 <lwip_htons>
 8015004:	4603      	mov	r3, r0
 8015006:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015008:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801500a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801500e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015012:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015018:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	891b      	ldrh	r3, [r3, #8]
 801501e:	3b14      	subs	r3, #20
 8015020:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015024:	e0e1      	b.n	80151ea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015026:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015028:	00db      	lsls	r3, r3, #3
 801502a:	b29b      	uxth	r3, r3
 801502c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015030:	4293      	cmp	r3, r2
 8015032:	bf28      	it	cs
 8015034:	4613      	movcs	r3, r2
 8015036:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015038:	f44f 7220 	mov.w	r2, #640	; 0x280
 801503c:	2114      	movs	r1, #20
 801503e:	200e      	movs	r0, #14
 8015040:	f7f6 fd1c 	bl	800ba7c <pbuf_alloc>
 8015044:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015048:	2b00      	cmp	r3, #0
 801504a:	f000 80d5 	beq.w	80151f8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015050:	895b      	ldrh	r3, [r3, #10]
 8015052:	2b13      	cmp	r3, #19
 8015054:	d806      	bhi.n	8015064 <ip4_frag+0xd0>
 8015056:	4b6c      	ldr	r3, [pc, #432]	; (8015208 <ip4_frag+0x274>)
 8015058:	f44f 7249 	mov.w	r2, #804	; 0x324
 801505c:	496d      	ldr	r1, [pc, #436]	; (8015214 <ip4_frag+0x280>)
 801505e:	486c      	ldr	r0, [pc, #432]	; (8015210 <ip4_frag+0x27c>)
 8015060:	f000 f9fe 	bl	8015460 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	2214      	movs	r2, #20
 801506a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801506c:	4618      	mov	r0, r3
 801506e:	f000 f9e1 	bl	8015434 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015078:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801507a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801507e:	e064      	b.n	801514a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	895a      	ldrh	r2, [r3, #10]
 8015084:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015086:	1ad3      	subs	r3, r2, r3
 8015088:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	895b      	ldrh	r3, [r3, #10]
 801508e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015090:	429a      	cmp	r2, r3
 8015092:	d906      	bls.n	80150a2 <ip4_frag+0x10e>
 8015094:	4b5c      	ldr	r3, [pc, #368]	; (8015208 <ip4_frag+0x274>)
 8015096:	f240 322d 	movw	r2, #813	; 0x32d
 801509a:	495f      	ldr	r1, [pc, #380]	; (8015218 <ip4_frag+0x284>)
 801509c:	485c      	ldr	r0, [pc, #368]	; (8015210 <ip4_frag+0x27c>)
 801509e:	f000 f9df 	bl	8015460 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80150a2:	8bfa      	ldrh	r2, [r7, #30]
 80150a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80150a8:	4293      	cmp	r3, r2
 80150aa:	bf28      	it	cs
 80150ac:	4613      	movcs	r3, r2
 80150ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80150b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d105      	bne.n	80150c6 <ip4_frag+0x132>
        poff = 0;
 80150ba:	2300      	movs	r3, #0
 80150bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	60fb      	str	r3, [r7, #12]
        continue;
 80150c4:	e041      	b.n	801514a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80150c6:	f7ff ff0d 	bl	8014ee4 <ip_frag_alloc_pbuf_custom_ref>
 80150ca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80150cc:	69bb      	ldr	r3, [r7, #24]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d103      	bne.n	80150da <ip4_frag+0x146>
        pbuf_free(rambuf);
 80150d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150d4:	f7f6 ffb6 	bl	800c044 <pbuf_free>
        goto memerr;
 80150d8:	e08f      	b.n	80151fa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80150da:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80150e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80150e2:	4413      	add	r3, r2
 80150e4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80150e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80150ec:	9201      	str	r2, [sp, #4]
 80150ee:	9300      	str	r3, [sp, #0]
 80150f0:	4603      	mov	r3, r0
 80150f2:	2241      	movs	r2, #65	; 0x41
 80150f4:	2000      	movs	r0, #0
 80150f6:	f7f6 fdeb 	bl	800bcd0 <pbuf_alloced_custom>
 80150fa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80150fc:	697b      	ldr	r3, [r7, #20]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d106      	bne.n	8015110 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015102:	69b8      	ldr	r0, [r7, #24]
 8015104:	f7ff fef6 	bl	8014ef4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801510a:	f7f6 ff9b 	bl	800c044 <pbuf_free>
        goto memerr;
 801510e:	e074      	b.n	80151fa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015110:	68f8      	ldr	r0, [r7, #12]
 8015112:	f7f7 f837 	bl	800c184 <pbuf_ref>
      pcr->original = p;
 8015116:	69bb      	ldr	r3, [r7, #24]
 8015118:	68fa      	ldr	r2, [r7, #12]
 801511a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801511c:	69bb      	ldr	r3, [r7, #24]
 801511e:	4a3f      	ldr	r2, [pc, #252]	; (801521c <ip4_frag+0x288>)
 8015120:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015122:	6979      	ldr	r1, [r7, #20]
 8015124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015126:	f7f7 f84f 	bl	800c1c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801512a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801512e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015132:	1ad3      	subs	r3, r2, r3
 8015134:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015138:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801513c:	2b00      	cmp	r3, #0
 801513e:	d004      	beq.n	801514a <ip4_frag+0x1b6>
        poff = 0;
 8015140:	2300      	movs	r3, #0
 8015142:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801514a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801514e:	2b00      	cmp	r3, #0
 8015150:	d196      	bne.n	8015080 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015152:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015154:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015158:	4413      	add	r3, r2
 801515a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015160:	f1a3 0213 	sub.w	r2, r3, #19
 8015164:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015168:	429a      	cmp	r2, r3
 801516a:	bfcc      	ite	gt
 801516c:	2301      	movgt	r3, #1
 801516e:	2300      	movle	r3, #0
 8015170:	b2db      	uxtb	r3, r3
 8015172:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015174:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801517c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801517e:	6a3b      	ldr	r3, [r7, #32]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d002      	beq.n	801518a <ip4_frag+0x1f6>
 8015184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015186:	2b00      	cmp	r3, #0
 8015188:	d003      	beq.n	8015192 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801518a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801518c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015190:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015192:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015194:	4618      	mov	r0, r3
 8015196:	f7f5 fbf7 	bl	800a988 <lwip_htons>
 801519a:	4603      	mov	r3, r0
 801519c:	461a      	mov	r2, r3
 801519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151a0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80151a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80151a4:	3314      	adds	r3, #20
 80151a6:	b29b      	uxth	r3, r3
 80151a8:	4618      	mov	r0, r3
 80151aa:	f7f5 fbed 	bl	800a988 <lwip_htons>
 80151ae:	4603      	mov	r3, r0
 80151b0:	461a      	mov	r2, r3
 80151b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80151b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b8:	2200      	movs	r2, #0
 80151ba:	729a      	strb	r2, [r3, #10]
 80151bc:	2200      	movs	r2, #0
 80151be:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80151c0:	68bb      	ldr	r3, [r7, #8]
 80151c2:	695b      	ldr	r3, [r3, #20]
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151c8:	68b8      	ldr	r0, [r7, #8]
 80151ca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80151cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80151ce:	f7f6 ff39 	bl	800c044 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80151d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80151d8:	1ad3      	subs	r3, r2, r3
 80151da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80151de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80151e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151e4:	4413      	add	r3, r2
 80151e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80151ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	f47f af19 	bne.w	8015026 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80151f4:	2300      	movs	r3, #0
 80151f6:	e002      	b.n	80151fe <ip4_frag+0x26a>
      goto memerr;
 80151f8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80151fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80151fe:	4618      	mov	r0, r3
 8015200:	3748      	adds	r7, #72	; 0x48
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}
 8015206:	bf00      	nop
 8015208:	08018f70 	.word	0x08018f70
 801520c:	0801914c 	.word	0x0801914c
 8015210:	08018fb8 	.word	0x08018fb8
 8015214:	08019168 	.word	0x08019168
 8015218:	08019188 	.word	0x08019188
 801521c:	08014f2d 	.word	0x08014f2d

08015220 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b086      	sub	sp, #24
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
 8015228:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801522a:	230e      	movs	r3, #14
 801522c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	895b      	ldrh	r3, [r3, #10]
 8015232:	2b0e      	cmp	r3, #14
 8015234:	d96e      	bls.n	8015314 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	7bdb      	ldrb	r3, [r3, #15]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d106      	bne.n	801524c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801523e:	683b      	ldr	r3, [r7, #0]
 8015240:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015244:	3301      	adds	r3, #1
 8015246:	b2da      	uxtb	r2, r3
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015252:	693b      	ldr	r3, [r7, #16]
 8015254:	7b1a      	ldrb	r2, [r3, #12]
 8015256:	7b5b      	ldrb	r3, [r3, #13]
 8015258:	021b      	lsls	r3, r3, #8
 801525a:	4313      	orrs	r3, r2
 801525c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	781b      	ldrb	r3, [r3, #0]
 8015262:	f003 0301 	and.w	r3, r3, #1
 8015266:	2b00      	cmp	r3, #0
 8015268:	d023      	beq.n	80152b2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801526a:	693b      	ldr	r3, [r7, #16]
 801526c:	781b      	ldrb	r3, [r3, #0]
 801526e:	2b01      	cmp	r3, #1
 8015270:	d10f      	bne.n	8015292 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015272:	693b      	ldr	r3, [r7, #16]
 8015274:	785b      	ldrb	r3, [r3, #1]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d11b      	bne.n	80152b2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801527e:	2b5e      	cmp	r3, #94	; 0x5e
 8015280:	d117      	bne.n	80152b2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	7b5b      	ldrb	r3, [r3, #13]
 8015286:	f043 0310 	orr.w	r3, r3, #16
 801528a:	b2da      	uxtb	r2, r3
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	735a      	strb	r2, [r3, #13]
 8015290:	e00f      	b.n	80152b2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	2206      	movs	r2, #6
 8015296:	4928      	ldr	r1, [pc, #160]	; (8015338 <ethernet_input+0x118>)
 8015298:	4618      	mov	r0, r3
 801529a:	f000 f8bb 	bl	8015414 <memcmp>
 801529e:	4603      	mov	r3, r0
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d106      	bne.n	80152b2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	7b5b      	ldrb	r3, [r3, #13]
 80152a8:	f043 0308 	orr.w	r3, r3, #8
 80152ac:	b2da      	uxtb	r2, r3
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80152b2:	89fb      	ldrh	r3, [r7, #14]
 80152b4:	2b08      	cmp	r3, #8
 80152b6:	d003      	beq.n	80152c0 <ethernet_input+0xa0>
 80152b8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80152bc:	d014      	beq.n	80152e8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80152be:	e032      	b.n	8015326 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152c6:	f003 0308 	and.w	r3, r3, #8
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d024      	beq.n	8015318 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80152ce:	8afb      	ldrh	r3, [r7, #22]
 80152d0:	4619      	mov	r1, r3
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f7f6 fe30 	bl	800bf38 <pbuf_remove_header>
 80152d8:	4603      	mov	r3, r0
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d11e      	bne.n	801531c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80152de:	6839      	ldr	r1, [r7, #0]
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f7fe ff21 	bl	8014128 <ip4_input>
      break;
 80152e6:	e013      	b.n	8015310 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80152e8:	683b      	ldr	r3, [r7, #0]
 80152ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152ee:	f003 0308 	and.w	r3, r3, #8
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d014      	beq.n	8015320 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80152f6:	8afb      	ldrh	r3, [r7, #22]
 80152f8:	4619      	mov	r1, r3
 80152fa:	6878      	ldr	r0, [r7, #4]
 80152fc:	f7f6 fe1c 	bl	800bf38 <pbuf_remove_header>
 8015300:	4603      	mov	r3, r0
 8015302:	2b00      	cmp	r3, #0
 8015304:	d10e      	bne.n	8015324 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015306:	6839      	ldr	r1, [r7, #0]
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f7fe f8c1 	bl	8013490 <etharp_input>
      break;
 801530e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015310:	2300      	movs	r3, #0
 8015312:	e00c      	b.n	801532e <ethernet_input+0x10e>
    goto free_and_return;
 8015314:	bf00      	nop
 8015316:	e006      	b.n	8015326 <ethernet_input+0x106>
        goto free_and_return;
 8015318:	bf00      	nop
 801531a:	e004      	b.n	8015326 <ethernet_input+0x106>
        goto free_and_return;
 801531c:	bf00      	nop
 801531e:	e002      	b.n	8015326 <ethernet_input+0x106>
        goto free_and_return;
 8015320:	bf00      	nop
 8015322:	e000      	b.n	8015326 <ethernet_input+0x106>
        goto free_and_return;
 8015324:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f7f6 fe8c 	bl	800c044 <pbuf_free>
  return ERR_OK;
 801532c:	2300      	movs	r3, #0
}
 801532e:	4618      	mov	r0, r3
 8015330:	3718      	adds	r7, #24
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
 8015336:	bf00      	nop
 8015338:	0801b258 	.word	0x0801b258

0801533c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801533c:	b580      	push	{r7, lr}
 801533e:	b086      	sub	sp, #24
 8015340:	af00      	add	r7, sp, #0
 8015342:	60f8      	str	r0, [r7, #12]
 8015344:	60b9      	str	r1, [r7, #8]
 8015346:	607a      	str	r2, [r7, #4]
 8015348:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801534a:	8c3b      	ldrh	r3, [r7, #32]
 801534c:	4618      	mov	r0, r3
 801534e:	f7f5 fb1b 	bl	800a988 <lwip_htons>
 8015352:	4603      	mov	r3, r0
 8015354:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015356:	210e      	movs	r1, #14
 8015358:	68b8      	ldr	r0, [r7, #8]
 801535a:	f7f6 fddd 	bl	800bf18 <pbuf_add_header>
 801535e:	4603      	mov	r3, r0
 8015360:	2b00      	cmp	r3, #0
 8015362:	d125      	bne.n	80153b0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015364:	68bb      	ldr	r3, [r7, #8]
 8015366:	685b      	ldr	r3, [r3, #4]
 8015368:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801536a:	693b      	ldr	r3, [r7, #16]
 801536c:	8afa      	ldrh	r2, [r7, #22]
 801536e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	2206      	movs	r2, #6
 8015374:	6839      	ldr	r1, [r7, #0]
 8015376:	4618      	mov	r0, r3
 8015378:	f000 f85c 	bl	8015434 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	3306      	adds	r3, #6
 8015380:	2206      	movs	r2, #6
 8015382:	6879      	ldr	r1, [r7, #4]
 8015384:	4618      	mov	r0, r3
 8015386:	f000 f855 	bl	8015434 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015390:	2b06      	cmp	r3, #6
 8015392:	d006      	beq.n	80153a2 <ethernet_output+0x66>
 8015394:	4b0a      	ldr	r3, [pc, #40]	; (80153c0 <ethernet_output+0x84>)
 8015396:	f44f 7299 	mov.w	r2, #306	; 0x132
 801539a:	490a      	ldr	r1, [pc, #40]	; (80153c4 <ethernet_output+0x88>)
 801539c:	480a      	ldr	r0, [pc, #40]	; (80153c8 <ethernet_output+0x8c>)
 801539e:	f000 f85f 	bl	8015460 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	699b      	ldr	r3, [r3, #24]
 80153a6:	68b9      	ldr	r1, [r7, #8]
 80153a8:	68f8      	ldr	r0, [r7, #12]
 80153aa:	4798      	blx	r3
 80153ac:	4603      	mov	r3, r0
 80153ae:	e002      	b.n	80153b6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80153b0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80153b2:	f06f 0301 	mvn.w	r3, #1
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3718      	adds	r7, #24
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	08019198 	.word	0x08019198
 80153c4:	080191d0 	.word	0x080191d0
 80153c8:	08019204 	.word	0x08019204

080153cc <__libc_init_array>:
 80153cc:	b570      	push	{r4, r5, r6, lr}
 80153ce:	4d0d      	ldr	r5, [pc, #52]	; (8015404 <__libc_init_array+0x38>)
 80153d0:	4c0d      	ldr	r4, [pc, #52]	; (8015408 <__libc_init_array+0x3c>)
 80153d2:	1b64      	subs	r4, r4, r5
 80153d4:	10a4      	asrs	r4, r4, #2
 80153d6:	2600      	movs	r6, #0
 80153d8:	42a6      	cmp	r6, r4
 80153da:	d109      	bne.n	80153f0 <__libc_init_array+0x24>
 80153dc:	4d0b      	ldr	r5, [pc, #44]	; (801540c <__libc_init_array+0x40>)
 80153de:	4c0c      	ldr	r4, [pc, #48]	; (8015410 <__libc_init_array+0x44>)
 80153e0:	f001 f904 	bl	80165ec <_init>
 80153e4:	1b64      	subs	r4, r4, r5
 80153e6:	10a4      	asrs	r4, r4, #2
 80153e8:	2600      	movs	r6, #0
 80153ea:	42a6      	cmp	r6, r4
 80153ec:	d105      	bne.n	80153fa <__libc_init_array+0x2e>
 80153ee:	bd70      	pop	{r4, r5, r6, pc}
 80153f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80153f4:	4798      	blx	r3
 80153f6:	3601      	adds	r6, #1
 80153f8:	e7ee      	b.n	80153d8 <__libc_init_array+0xc>
 80153fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80153fe:	4798      	blx	r3
 8015400:	3601      	adds	r6, #1
 8015402:	e7f2      	b.n	80153ea <__libc_init_array+0x1e>
 8015404:	0801b3b8 	.word	0x0801b3b8
 8015408:	0801b3b8 	.word	0x0801b3b8
 801540c:	0801b3b8 	.word	0x0801b3b8
 8015410:	0801b3bc 	.word	0x0801b3bc

08015414 <memcmp>:
 8015414:	b510      	push	{r4, lr}
 8015416:	3901      	subs	r1, #1
 8015418:	4402      	add	r2, r0
 801541a:	4290      	cmp	r0, r2
 801541c:	d101      	bne.n	8015422 <memcmp+0xe>
 801541e:	2000      	movs	r0, #0
 8015420:	e005      	b.n	801542e <memcmp+0x1a>
 8015422:	7803      	ldrb	r3, [r0, #0]
 8015424:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015428:	42a3      	cmp	r3, r4
 801542a:	d001      	beq.n	8015430 <memcmp+0x1c>
 801542c:	1b18      	subs	r0, r3, r4
 801542e:	bd10      	pop	{r4, pc}
 8015430:	3001      	adds	r0, #1
 8015432:	e7f2      	b.n	801541a <memcmp+0x6>

08015434 <memcpy>:
 8015434:	440a      	add	r2, r1
 8015436:	4291      	cmp	r1, r2
 8015438:	f100 33ff 	add.w	r3, r0, #4294967295
 801543c:	d100      	bne.n	8015440 <memcpy+0xc>
 801543e:	4770      	bx	lr
 8015440:	b510      	push	{r4, lr}
 8015442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015446:	f803 4f01 	strb.w	r4, [r3, #1]!
 801544a:	4291      	cmp	r1, r2
 801544c:	d1f9      	bne.n	8015442 <memcpy+0xe>
 801544e:	bd10      	pop	{r4, pc}

08015450 <memset>:
 8015450:	4402      	add	r2, r0
 8015452:	4603      	mov	r3, r0
 8015454:	4293      	cmp	r3, r2
 8015456:	d100      	bne.n	801545a <memset+0xa>
 8015458:	4770      	bx	lr
 801545a:	f803 1b01 	strb.w	r1, [r3], #1
 801545e:	e7f9      	b.n	8015454 <memset+0x4>

08015460 <iprintf>:
 8015460:	b40f      	push	{r0, r1, r2, r3}
 8015462:	4b0a      	ldr	r3, [pc, #40]	; (801548c <iprintf+0x2c>)
 8015464:	b513      	push	{r0, r1, r4, lr}
 8015466:	681c      	ldr	r4, [r3, #0]
 8015468:	b124      	cbz	r4, 8015474 <iprintf+0x14>
 801546a:	69a3      	ldr	r3, [r4, #24]
 801546c:	b913      	cbnz	r3, 8015474 <iprintf+0x14>
 801546e:	4620      	mov	r0, r4
 8015470:	f000 faba 	bl	80159e8 <__sinit>
 8015474:	ab05      	add	r3, sp, #20
 8015476:	9a04      	ldr	r2, [sp, #16]
 8015478:	68a1      	ldr	r1, [r4, #8]
 801547a:	9301      	str	r3, [sp, #4]
 801547c:	4620      	mov	r0, r4
 801547e:	f000 fcdd 	bl	8015e3c <_vfiprintf_r>
 8015482:	b002      	add	sp, #8
 8015484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015488:	b004      	add	sp, #16
 801548a:	4770      	bx	lr
 801548c:	20000068 	.word	0x20000068

08015490 <_puts_r>:
 8015490:	b570      	push	{r4, r5, r6, lr}
 8015492:	460e      	mov	r6, r1
 8015494:	4605      	mov	r5, r0
 8015496:	b118      	cbz	r0, 80154a0 <_puts_r+0x10>
 8015498:	6983      	ldr	r3, [r0, #24]
 801549a:	b90b      	cbnz	r3, 80154a0 <_puts_r+0x10>
 801549c:	f000 faa4 	bl	80159e8 <__sinit>
 80154a0:	69ab      	ldr	r3, [r5, #24]
 80154a2:	68ac      	ldr	r4, [r5, #8]
 80154a4:	b913      	cbnz	r3, 80154ac <_puts_r+0x1c>
 80154a6:	4628      	mov	r0, r5
 80154a8:	f000 fa9e 	bl	80159e8 <__sinit>
 80154ac:	4b2c      	ldr	r3, [pc, #176]	; (8015560 <_puts_r+0xd0>)
 80154ae:	429c      	cmp	r4, r3
 80154b0:	d120      	bne.n	80154f4 <_puts_r+0x64>
 80154b2:	686c      	ldr	r4, [r5, #4]
 80154b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154b6:	07db      	lsls	r3, r3, #31
 80154b8:	d405      	bmi.n	80154c6 <_puts_r+0x36>
 80154ba:	89a3      	ldrh	r3, [r4, #12]
 80154bc:	0598      	lsls	r0, r3, #22
 80154be:	d402      	bmi.n	80154c6 <_puts_r+0x36>
 80154c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154c2:	f000 fb41 	bl	8015b48 <__retarget_lock_acquire_recursive>
 80154c6:	89a3      	ldrh	r3, [r4, #12]
 80154c8:	0719      	lsls	r1, r3, #28
 80154ca:	d51d      	bpl.n	8015508 <_puts_r+0x78>
 80154cc:	6923      	ldr	r3, [r4, #16]
 80154ce:	b1db      	cbz	r3, 8015508 <_puts_r+0x78>
 80154d0:	3e01      	subs	r6, #1
 80154d2:	68a3      	ldr	r3, [r4, #8]
 80154d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80154d8:	3b01      	subs	r3, #1
 80154da:	60a3      	str	r3, [r4, #8]
 80154dc:	bb39      	cbnz	r1, 801552e <_puts_r+0x9e>
 80154de:	2b00      	cmp	r3, #0
 80154e0:	da38      	bge.n	8015554 <_puts_r+0xc4>
 80154e2:	4622      	mov	r2, r4
 80154e4:	210a      	movs	r1, #10
 80154e6:	4628      	mov	r0, r5
 80154e8:	f000 f886 	bl	80155f8 <__swbuf_r>
 80154ec:	3001      	adds	r0, #1
 80154ee:	d011      	beq.n	8015514 <_puts_r+0x84>
 80154f0:	250a      	movs	r5, #10
 80154f2:	e011      	b.n	8015518 <_puts_r+0x88>
 80154f4:	4b1b      	ldr	r3, [pc, #108]	; (8015564 <_puts_r+0xd4>)
 80154f6:	429c      	cmp	r4, r3
 80154f8:	d101      	bne.n	80154fe <_puts_r+0x6e>
 80154fa:	68ac      	ldr	r4, [r5, #8]
 80154fc:	e7da      	b.n	80154b4 <_puts_r+0x24>
 80154fe:	4b1a      	ldr	r3, [pc, #104]	; (8015568 <_puts_r+0xd8>)
 8015500:	429c      	cmp	r4, r3
 8015502:	bf08      	it	eq
 8015504:	68ec      	ldreq	r4, [r5, #12]
 8015506:	e7d5      	b.n	80154b4 <_puts_r+0x24>
 8015508:	4621      	mov	r1, r4
 801550a:	4628      	mov	r0, r5
 801550c:	f000 f8c6 	bl	801569c <__swsetup_r>
 8015510:	2800      	cmp	r0, #0
 8015512:	d0dd      	beq.n	80154d0 <_puts_r+0x40>
 8015514:	f04f 35ff 	mov.w	r5, #4294967295
 8015518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801551a:	07da      	lsls	r2, r3, #31
 801551c:	d405      	bmi.n	801552a <_puts_r+0x9a>
 801551e:	89a3      	ldrh	r3, [r4, #12]
 8015520:	059b      	lsls	r3, r3, #22
 8015522:	d402      	bmi.n	801552a <_puts_r+0x9a>
 8015524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015526:	f000 fb10 	bl	8015b4a <__retarget_lock_release_recursive>
 801552a:	4628      	mov	r0, r5
 801552c:	bd70      	pop	{r4, r5, r6, pc}
 801552e:	2b00      	cmp	r3, #0
 8015530:	da04      	bge.n	801553c <_puts_r+0xac>
 8015532:	69a2      	ldr	r2, [r4, #24]
 8015534:	429a      	cmp	r2, r3
 8015536:	dc06      	bgt.n	8015546 <_puts_r+0xb6>
 8015538:	290a      	cmp	r1, #10
 801553a:	d004      	beq.n	8015546 <_puts_r+0xb6>
 801553c:	6823      	ldr	r3, [r4, #0]
 801553e:	1c5a      	adds	r2, r3, #1
 8015540:	6022      	str	r2, [r4, #0]
 8015542:	7019      	strb	r1, [r3, #0]
 8015544:	e7c5      	b.n	80154d2 <_puts_r+0x42>
 8015546:	4622      	mov	r2, r4
 8015548:	4628      	mov	r0, r5
 801554a:	f000 f855 	bl	80155f8 <__swbuf_r>
 801554e:	3001      	adds	r0, #1
 8015550:	d1bf      	bne.n	80154d2 <_puts_r+0x42>
 8015552:	e7df      	b.n	8015514 <_puts_r+0x84>
 8015554:	6823      	ldr	r3, [r4, #0]
 8015556:	250a      	movs	r5, #10
 8015558:	1c5a      	adds	r2, r3, #1
 801555a:	6022      	str	r2, [r4, #0]
 801555c:	701d      	strb	r5, [r3, #0]
 801555e:	e7db      	b.n	8015518 <_puts_r+0x88>
 8015560:	0801b33c 	.word	0x0801b33c
 8015564:	0801b35c 	.word	0x0801b35c
 8015568:	0801b31c 	.word	0x0801b31c

0801556c <puts>:
 801556c:	4b02      	ldr	r3, [pc, #8]	; (8015578 <puts+0xc>)
 801556e:	4601      	mov	r1, r0
 8015570:	6818      	ldr	r0, [r3, #0]
 8015572:	f7ff bf8d 	b.w	8015490 <_puts_r>
 8015576:	bf00      	nop
 8015578:	20000068 	.word	0x20000068

0801557c <rand>:
 801557c:	4b16      	ldr	r3, [pc, #88]	; (80155d8 <rand+0x5c>)
 801557e:	b510      	push	{r4, lr}
 8015580:	681c      	ldr	r4, [r3, #0]
 8015582:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015584:	b9b3      	cbnz	r3, 80155b4 <rand+0x38>
 8015586:	2018      	movs	r0, #24
 8015588:	f000 fb46 	bl	8015c18 <malloc>
 801558c:	63a0      	str	r0, [r4, #56]	; 0x38
 801558e:	b928      	cbnz	r0, 801559c <rand+0x20>
 8015590:	4602      	mov	r2, r0
 8015592:	4b12      	ldr	r3, [pc, #72]	; (80155dc <rand+0x60>)
 8015594:	4812      	ldr	r0, [pc, #72]	; (80155e0 <rand+0x64>)
 8015596:	214e      	movs	r1, #78	; 0x4e
 8015598:	f000 f8ee 	bl	8015778 <__assert_func>
 801559c:	4a11      	ldr	r2, [pc, #68]	; (80155e4 <rand+0x68>)
 801559e:	4b12      	ldr	r3, [pc, #72]	; (80155e8 <rand+0x6c>)
 80155a0:	e9c0 2300 	strd	r2, r3, [r0]
 80155a4:	4b11      	ldr	r3, [pc, #68]	; (80155ec <rand+0x70>)
 80155a6:	6083      	str	r3, [r0, #8]
 80155a8:	230b      	movs	r3, #11
 80155aa:	8183      	strh	r3, [r0, #12]
 80155ac:	2201      	movs	r2, #1
 80155ae:	2300      	movs	r3, #0
 80155b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80155b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80155b6:	4a0e      	ldr	r2, [pc, #56]	; (80155f0 <rand+0x74>)
 80155b8:	6920      	ldr	r0, [r4, #16]
 80155ba:	6963      	ldr	r3, [r4, #20]
 80155bc:	490d      	ldr	r1, [pc, #52]	; (80155f4 <rand+0x78>)
 80155be:	4342      	muls	r2, r0
 80155c0:	fb01 2203 	mla	r2, r1, r3, r2
 80155c4:	fba0 0101 	umull	r0, r1, r0, r1
 80155c8:	1c43      	adds	r3, r0, #1
 80155ca:	eb42 0001 	adc.w	r0, r2, r1
 80155ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80155d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80155d6:	bd10      	pop	{r4, pc}
 80155d8:	20000068 	.word	0x20000068
 80155dc:	0801b26c 	.word	0x0801b26c
 80155e0:	0801b283 	.word	0x0801b283
 80155e4:	abcd330e 	.word	0xabcd330e
 80155e8:	e66d1234 	.word	0xe66d1234
 80155ec:	0005deec 	.word	0x0005deec
 80155f0:	5851f42d 	.word	0x5851f42d
 80155f4:	4c957f2d 	.word	0x4c957f2d

080155f8 <__swbuf_r>:
 80155f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155fa:	460e      	mov	r6, r1
 80155fc:	4614      	mov	r4, r2
 80155fe:	4605      	mov	r5, r0
 8015600:	b118      	cbz	r0, 801560a <__swbuf_r+0x12>
 8015602:	6983      	ldr	r3, [r0, #24]
 8015604:	b90b      	cbnz	r3, 801560a <__swbuf_r+0x12>
 8015606:	f000 f9ef 	bl	80159e8 <__sinit>
 801560a:	4b21      	ldr	r3, [pc, #132]	; (8015690 <__swbuf_r+0x98>)
 801560c:	429c      	cmp	r4, r3
 801560e:	d12b      	bne.n	8015668 <__swbuf_r+0x70>
 8015610:	686c      	ldr	r4, [r5, #4]
 8015612:	69a3      	ldr	r3, [r4, #24]
 8015614:	60a3      	str	r3, [r4, #8]
 8015616:	89a3      	ldrh	r3, [r4, #12]
 8015618:	071a      	lsls	r2, r3, #28
 801561a:	d52f      	bpl.n	801567c <__swbuf_r+0x84>
 801561c:	6923      	ldr	r3, [r4, #16]
 801561e:	b36b      	cbz	r3, 801567c <__swbuf_r+0x84>
 8015620:	6923      	ldr	r3, [r4, #16]
 8015622:	6820      	ldr	r0, [r4, #0]
 8015624:	1ac0      	subs	r0, r0, r3
 8015626:	6963      	ldr	r3, [r4, #20]
 8015628:	b2f6      	uxtb	r6, r6
 801562a:	4283      	cmp	r3, r0
 801562c:	4637      	mov	r7, r6
 801562e:	dc04      	bgt.n	801563a <__swbuf_r+0x42>
 8015630:	4621      	mov	r1, r4
 8015632:	4628      	mov	r0, r5
 8015634:	f000 f944 	bl	80158c0 <_fflush_r>
 8015638:	bb30      	cbnz	r0, 8015688 <__swbuf_r+0x90>
 801563a:	68a3      	ldr	r3, [r4, #8]
 801563c:	3b01      	subs	r3, #1
 801563e:	60a3      	str	r3, [r4, #8]
 8015640:	6823      	ldr	r3, [r4, #0]
 8015642:	1c5a      	adds	r2, r3, #1
 8015644:	6022      	str	r2, [r4, #0]
 8015646:	701e      	strb	r6, [r3, #0]
 8015648:	6963      	ldr	r3, [r4, #20]
 801564a:	3001      	adds	r0, #1
 801564c:	4283      	cmp	r3, r0
 801564e:	d004      	beq.n	801565a <__swbuf_r+0x62>
 8015650:	89a3      	ldrh	r3, [r4, #12]
 8015652:	07db      	lsls	r3, r3, #31
 8015654:	d506      	bpl.n	8015664 <__swbuf_r+0x6c>
 8015656:	2e0a      	cmp	r6, #10
 8015658:	d104      	bne.n	8015664 <__swbuf_r+0x6c>
 801565a:	4621      	mov	r1, r4
 801565c:	4628      	mov	r0, r5
 801565e:	f000 f92f 	bl	80158c0 <_fflush_r>
 8015662:	b988      	cbnz	r0, 8015688 <__swbuf_r+0x90>
 8015664:	4638      	mov	r0, r7
 8015666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015668:	4b0a      	ldr	r3, [pc, #40]	; (8015694 <__swbuf_r+0x9c>)
 801566a:	429c      	cmp	r4, r3
 801566c:	d101      	bne.n	8015672 <__swbuf_r+0x7a>
 801566e:	68ac      	ldr	r4, [r5, #8]
 8015670:	e7cf      	b.n	8015612 <__swbuf_r+0x1a>
 8015672:	4b09      	ldr	r3, [pc, #36]	; (8015698 <__swbuf_r+0xa0>)
 8015674:	429c      	cmp	r4, r3
 8015676:	bf08      	it	eq
 8015678:	68ec      	ldreq	r4, [r5, #12]
 801567a:	e7ca      	b.n	8015612 <__swbuf_r+0x1a>
 801567c:	4621      	mov	r1, r4
 801567e:	4628      	mov	r0, r5
 8015680:	f000 f80c 	bl	801569c <__swsetup_r>
 8015684:	2800      	cmp	r0, #0
 8015686:	d0cb      	beq.n	8015620 <__swbuf_r+0x28>
 8015688:	f04f 37ff 	mov.w	r7, #4294967295
 801568c:	e7ea      	b.n	8015664 <__swbuf_r+0x6c>
 801568e:	bf00      	nop
 8015690:	0801b33c 	.word	0x0801b33c
 8015694:	0801b35c 	.word	0x0801b35c
 8015698:	0801b31c 	.word	0x0801b31c

0801569c <__swsetup_r>:
 801569c:	4b32      	ldr	r3, [pc, #200]	; (8015768 <__swsetup_r+0xcc>)
 801569e:	b570      	push	{r4, r5, r6, lr}
 80156a0:	681d      	ldr	r5, [r3, #0]
 80156a2:	4606      	mov	r6, r0
 80156a4:	460c      	mov	r4, r1
 80156a6:	b125      	cbz	r5, 80156b2 <__swsetup_r+0x16>
 80156a8:	69ab      	ldr	r3, [r5, #24]
 80156aa:	b913      	cbnz	r3, 80156b2 <__swsetup_r+0x16>
 80156ac:	4628      	mov	r0, r5
 80156ae:	f000 f99b 	bl	80159e8 <__sinit>
 80156b2:	4b2e      	ldr	r3, [pc, #184]	; (801576c <__swsetup_r+0xd0>)
 80156b4:	429c      	cmp	r4, r3
 80156b6:	d10f      	bne.n	80156d8 <__swsetup_r+0x3c>
 80156b8:	686c      	ldr	r4, [r5, #4]
 80156ba:	89a3      	ldrh	r3, [r4, #12]
 80156bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80156c0:	0719      	lsls	r1, r3, #28
 80156c2:	d42c      	bmi.n	801571e <__swsetup_r+0x82>
 80156c4:	06dd      	lsls	r5, r3, #27
 80156c6:	d411      	bmi.n	80156ec <__swsetup_r+0x50>
 80156c8:	2309      	movs	r3, #9
 80156ca:	6033      	str	r3, [r6, #0]
 80156cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80156d0:	81a3      	strh	r3, [r4, #12]
 80156d2:	f04f 30ff 	mov.w	r0, #4294967295
 80156d6:	e03e      	b.n	8015756 <__swsetup_r+0xba>
 80156d8:	4b25      	ldr	r3, [pc, #148]	; (8015770 <__swsetup_r+0xd4>)
 80156da:	429c      	cmp	r4, r3
 80156dc:	d101      	bne.n	80156e2 <__swsetup_r+0x46>
 80156de:	68ac      	ldr	r4, [r5, #8]
 80156e0:	e7eb      	b.n	80156ba <__swsetup_r+0x1e>
 80156e2:	4b24      	ldr	r3, [pc, #144]	; (8015774 <__swsetup_r+0xd8>)
 80156e4:	429c      	cmp	r4, r3
 80156e6:	bf08      	it	eq
 80156e8:	68ec      	ldreq	r4, [r5, #12]
 80156ea:	e7e6      	b.n	80156ba <__swsetup_r+0x1e>
 80156ec:	0758      	lsls	r0, r3, #29
 80156ee:	d512      	bpl.n	8015716 <__swsetup_r+0x7a>
 80156f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80156f2:	b141      	cbz	r1, 8015706 <__swsetup_r+0x6a>
 80156f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80156f8:	4299      	cmp	r1, r3
 80156fa:	d002      	beq.n	8015702 <__swsetup_r+0x66>
 80156fc:	4630      	mov	r0, r6
 80156fe:	f000 fa93 	bl	8015c28 <_free_r>
 8015702:	2300      	movs	r3, #0
 8015704:	6363      	str	r3, [r4, #52]	; 0x34
 8015706:	89a3      	ldrh	r3, [r4, #12]
 8015708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801570c:	81a3      	strh	r3, [r4, #12]
 801570e:	2300      	movs	r3, #0
 8015710:	6063      	str	r3, [r4, #4]
 8015712:	6923      	ldr	r3, [r4, #16]
 8015714:	6023      	str	r3, [r4, #0]
 8015716:	89a3      	ldrh	r3, [r4, #12]
 8015718:	f043 0308 	orr.w	r3, r3, #8
 801571c:	81a3      	strh	r3, [r4, #12]
 801571e:	6923      	ldr	r3, [r4, #16]
 8015720:	b94b      	cbnz	r3, 8015736 <__swsetup_r+0x9a>
 8015722:	89a3      	ldrh	r3, [r4, #12]
 8015724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801572c:	d003      	beq.n	8015736 <__swsetup_r+0x9a>
 801572e:	4621      	mov	r1, r4
 8015730:	4630      	mov	r0, r6
 8015732:	f000 fa31 	bl	8015b98 <__smakebuf_r>
 8015736:	89a0      	ldrh	r0, [r4, #12]
 8015738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801573c:	f010 0301 	ands.w	r3, r0, #1
 8015740:	d00a      	beq.n	8015758 <__swsetup_r+0xbc>
 8015742:	2300      	movs	r3, #0
 8015744:	60a3      	str	r3, [r4, #8]
 8015746:	6963      	ldr	r3, [r4, #20]
 8015748:	425b      	negs	r3, r3
 801574a:	61a3      	str	r3, [r4, #24]
 801574c:	6923      	ldr	r3, [r4, #16]
 801574e:	b943      	cbnz	r3, 8015762 <__swsetup_r+0xc6>
 8015750:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015754:	d1ba      	bne.n	80156cc <__swsetup_r+0x30>
 8015756:	bd70      	pop	{r4, r5, r6, pc}
 8015758:	0781      	lsls	r1, r0, #30
 801575a:	bf58      	it	pl
 801575c:	6963      	ldrpl	r3, [r4, #20]
 801575e:	60a3      	str	r3, [r4, #8]
 8015760:	e7f4      	b.n	801574c <__swsetup_r+0xb0>
 8015762:	2000      	movs	r0, #0
 8015764:	e7f7      	b.n	8015756 <__swsetup_r+0xba>
 8015766:	bf00      	nop
 8015768:	20000068 	.word	0x20000068
 801576c:	0801b33c 	.word	0x0801b33c
 8015770:	0801b35c 	.word	0x0801b35c
 8015774:	0801b31c 	.word	0x0801b31c

08015778 <__assert_func>:
 8015778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801577a:	4614      	mov	r4, r2
 801577c:	461a      	mov	r2, r3
 801577e:	4b09      	ldr	r3, [pc, #36]	; (80157a4 <__assert_func+0x2c>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	4605      	mov	r5, r0
 8015784:	68d8      	ldr	r0, [r3, #12]
 8015786:	b14c      	cbz	r4, 801579c <__assert_func+0x24>
 8015788:	4b07      	ldr	r3, [pc, #28]	; (80157a8 <__assert_func+0x30>)
 801578a:	9100      	str	r1, [sp, #0]
 801578c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015790:	4906      	ldr	r1, [pc, #24]	; (80157ac <__assert_func+0x34>)
 8015792:	462b      	mov	r3, r5
 8015794:	f000 f9a6 	bl	8015ae4 <fiprintf>
 8015798:	f000 fe7a 	bl	8016490 <abort>
 801579c:	4b04      	ldr	r3, [pc, #16]	; (80157b0 <__assert_func+0x38>)
 801579e:	461c      	mov	r4, r3
 80157a0:	e7f3      	b.n	801578a <__assert_func+0x12>
 80157a2:	bf00      	nop
 80157a4:	20000068 	.word	0x20000068
 80157a8:	0801b2de 	.word	0x0801b2de
 80157ac:	0801b2eb 	.word	0x0801b2eb
 80157b0:	0801b319 	.word	0x0801b319

080157b4 <__sflush_r>:
 80157b4:	898a      	ldrh	r2, [r1, #12]
 80157b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157ba:	4605      	mov	r5, r0
 80157bc:	0710      	lsls	r0, r2, #28
 80157be:	460c      	mov	r4, r1
 80157c0:	d458      	bmi.n	8015874 <__sflush_r+0xc0>
 80157c2:	684b      	ldr	r3, [r1, #4]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	dc05      	bgt.n	80157d4 <__sflush_r+0x20>
 80157c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	dc02      	bgt.n	80157d4 <__sflush_r+0x20>
 80157ce:	2000      	movs	r0, #0
 80157d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80157d6:	2e00      	cmp	r6, #0
 80157d8:	d0f9      	beq.n	80157ce <__sflush_r+0x1a>
 80157da:	2300      	movs	r3, #0
 80157dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80157e0:	682f      	ldr	r7, [r5, #0]
 80157e2:	602b      	str	r3, [r5, #0]
 80157e4:	d032      	beq.n	801584c <__sflush_r+0x98>
 80157e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80157e8:	89a3      	ldrh	r3, [r4, #12]
 80157ea:	075a      	lsls	r2, r3, #29
 80157ec:	d505      	bpl.n	80157fa <__sflush_r+0x46>
 80157ee:	6863      	ldr	r3, [r4, #4]
 80157f0:	1ac0      	subs	r0, r0, r3
 80157f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80157f4:	b10b      	cbz	r3, 80157fa <__sflush_r+0x46>
 80157f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80157f8:	1ac0      	subs	r0, r0, r3
 80157fa:	2300      	movs	r3, #0
 80157fc:	4602      	mov	r2, r0
 80157fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015800:	6a21      	ldr	r1, [r4, #32]
 8015802:	4628      	mov	r0, r5
 8015804:	47b0      	blx	r6
 8015806:	1c43      	adds	r3, r0, #1
 8015808:	89a3      	ldrh	r3, [r4, #12]
 801580a:	d106      	bne.n	801581a <__sflush_r+0x66>
 801580c:	6829      	ldr	r1, [r5, #0]
 801580e:	291d      	cmp	r1, #29
 8015810:	d82c      	bhi.n	801586c <__sflush_r+0xb8>
 8015812:	4a2a      	ldr	r2, [pc, #168]	; (80158bc <__sflush_r+0x108>)
 8015814:	40ca      	lsrs	r2, r1
 8015816:	07d6      	lsls	r6, r2, #31
 8015818:	d528      	bpl.n	801586c <__sflush_r+0xb8>
 801581a:	2200      	movs	r2, #0
 801581c:	6062      	str	r2, [r4, #4]
 801581e:	04d9      	lsls	r1, r3, #19
 8015820:	6922      	ldr	r2, [r4, #16]
 8015822:	6022      	str	r2, [r4, #0]
 8015824:	d504      	bpl.n	8015830 <__sflush_r+0x7c>
 8015826:	1c42      	adds	r2, r0, #1
 8015828:	d101      	bne.n	801582e <__sflush_r+0x7a>
 801582a:	682b      	ldr	r3, [r5, #0]
 801582c:	b903      	cbnz	r3, 8015830 <__sflush_r+0x7c>
 801582e:	6560      	str	r0, [r4, #84]	; 0x54
 8015830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015832:	602f      	str	r7, [r5, #0]
 8015834:	2900      	cmp	r1, #0
 8015836:	d0ca      	beq.n	80157ce <__sflush_r+0x1a>
 8015838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801583c:	4299      	cmp	r1, r3
 801583e:	d002      	beq.n	8015846 <__sflush_r+0x92>
 8015840:	4628      	mov	r0, r5
 8015842:	f000 f9f1 	bl	8015c28 <_free_r>
 8015846:	2000      	movs	r0, #0
 8015848:	6360      	str	r0, [r4, #52]	; 0x34
 801584a:	e7c1      	b.n	80157d0 <__sflush_r+0x1c>
 801584c:	6a21      	ldr	r1, [r4, #32]
 801584e:	2301      	movs	r3, #1
 8015850:	4628      	mov	r0, r5
 8015852:	47b0      	blx	r6
 8015854:	1c41      	adds	r1, r0, #1
 8015856:	d1c7      	bne.n	80157e8 <__sflush_r+0x34>
 8015858:	682b      	ldr	r3, [r5, #0]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d0c4      	beq.n	80157e8 <__sflush_r+0x34>
 801585e:	2b1d      	cmp	r3, #29
 8015860:	d001      	beq.n	8015866 <__sflush_r+0xb2>
 8015862:	2b16      	cmp	r3, #22
 8015864:	d101      	bne.n	801586a <__sflush_r+0xb6>
 8015866:	602f      	str	r7, [r5, #0]
 8015868:	e7b1      	b.n	80157ce <__sflush_r+0x1a>
 801586a:	89a3      	ldrh	r3, [r4, #12]
 801586c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015870:	81a3      	strh	r3, [r4, #12]
 8015872:	e7ad      	b.n	80157d0 <__sflush_r+0x1c>
 8015874:	690f      	ldr	r7, [r1, #16]
 8015876:	2f00      	cmp	r7, #0
 8015878:	d0a9      	beq.n	80157ce <__sflush_r+0x1a>
 801587a:	0793      	lsls	r3, r2, #30
 801587c:	680e      	ldr	r6, [r1, #0]
 801587e:	bf08      	it	eq
 8015880:	694b      	ldreq	r3, [r1, #20]
 8015882:	600f      	str	r7, [r1, #0]
 8015884:	bf18      	it	ne
 8015886:	2300      	movne	r3, #0
 8015888:	eba6 0807 	sub.w	r8, r6, r7
 801588c:	608b      	str	r3, [r1, #8]
 801588e:	f1b8 0f00 	cmp.w	r8, #0
 8015892:	dd9c      	ble.n	80157ce <__sflush_r+0x1a>
 8015894:	6a21      	ldr	r1, [r4, #32]
 8015896:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015898:	4643      	mov	r3, r8
 801589a:	463a      	mov	r2, r7
 801589c:	4628      	mov	r0, r5
 801589e:	47b0      	blx	r6
 80158a0:	2800      	cmp	r0, #0
 80158a2:	dc06      	bgt.n	80158b2 <__sflush_r+0xfe>
 80158a4:	89a3      	ldrh	r3, [r4, #12]
 80158a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158aa:	81a3      	strh	r3, [r4, #12]
 80158ac:	f04f 30ff 	mov.w	r0, #4294967295
 80158b0:	e78e      	b.n	80157d0 <__sflush_r+0x1c>
 80158b2:	4407      	add	r7, r0
 80158b4:	eba8 0800 	sub.w	r8, r8, r0
 80158b8:	e7e9      	b.n	801588e <__sflush_r+0xda>
 80158ba:	bf00      	nop
 80158bc:	20400001 	.word	0x20400001

080158c0 <_fflush_r>:
 80158c0:	b538      	push	{r3, r4, r5, lr}
 80158c2:	690b      	ldr	r3, [r1, #16]
 80158c4:	4605      	mov	r5, r0
 80158c6:	460c      	mov	r4, r1
 80158c8:	b913      	cbnz	r3, 80158d0 <_fflush_r+0x10>
 80158ca:	2500      	movs	r5, #0
 80158cc:	4628      	mov	r0, r5
 80158ce:	bd38      	pop	{r3, r4, r5, pc}
 80158d0:	b118      	cbz	r0, 80158da <_fflush_r+0x1a>
 80158d2:	6983      	ldr	r3, [r0, #24]
 80158d4:	b90b      	cbnz	r3, 80158da <_fflush_r+0x1a>
 80158d6:	f000 f887 	bl	80159e8 <__sinit>
 80158da:	4b14      	ldr	r3, [pc, #80]	; (801592c <_fflush_r+0x6c>)
 80158dc:	429c      	cmp	r4, r3
 80158de:	d11b      	bne.n	8015918 <_fflush_r+0x58>
 80158e0:	686c      	ldr	r4, [r5, #4]
 80158e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d0ef      	beq.n	80158ca <_fflush_r+0xa>
 80158ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80158ec:	07d0      	lsls	r0, r2, #31
 80158ee:	d404      	bmi.n	80158fa <_fflush_r+0x3a>
 80158f0:	0599      	lsls	r1, r3, #22
 80158f2:	d402      	bmi.n	80158fa <_fflush_r+0x3a>
 80158f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80158f6:	f000 f927 	bl	8015b48 <__retarget_lock_acquire_recursive>
 80158fa:	4628      	mov	r0, r5
 80158fc:	4621      	mov	r1, r4
 80158fe:	f7ff ff59 	bl	80157b4 <__sflush_r>
 8015902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015904:	07da      	lsls	r2, r3, #31
 8015906:	4605      	mov	r5, r0
 8015908:	d4e0      	bmi.n	80158cc <_fflush_r+0xc>
 801590a:	89a3      	ldrh	r3, [r4, #12]
 801590c:	059b      	lsls	r3, r3, #22
 801590e:	d4dd      	bmi.n	80158cc <_fflush_r+0xc>
 8015910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015912:	f000 f91a 	bl	8015b4a <__retarget_lock_release_recursive>
 8015916:	e7d9      	b.n	80158cc <_fflush_r+0xc>
 8015918:	4b05      	ldr	r3, [pc, #20]	; (8015930 <_fflush_r+0x70>)
 801591a:	429c      	cmp	r4, r3
 801591c:	d101      	bne.n	8015922 <_fflush_r+0x62>
 801591e:	68ac      	ldr	r4, [r5, #8]
 8015920:	e7df      	b.n	80158e2 <_fflush_r+0x22>
 8015922:	4b04      	ldr	r3, [pc, #16]	; (8015934 <_fflush_r+0x74>)
 8015924:	429c      	cmp	r4, r3
 8015926:	bf08      	it	eq
 8015928:	68ec      	ldreq	r4, [r5, #12]
 801592a:	e7da      	b.n	80158e2 <_fflush_r+0x22>
 801592c:	0801b33c 	.word	0x0801b33c
 8015930:	0801b35c 	.word	0x0801b35c
 8015934:	0801b31c 	.word	0x0801b31c

08015938 <std>:
 8015938:	2300      	movs	r3, #0
 801593a:	b510      	push	{r4, lr}
 801593c:	4604      	mov	r4, r0
 801593e:	e9c0 3300 	strd	r3, r3, [r0]
 8015942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015946:	6083      	str	r3, [r0, #8]
 8015948:	8181      	strh	r1, [r0, #12]
 801594a:	6643      	str	r3, [r0, #100]	; 0x64
 801594c:	81c2      	strh	r2, [r0, #14]
 801594e:	6183      	str	r3, [r0, #24]
 8015950:	4619      	mov	r1, r3
 8015952:	2208      	movs	r2, #8
 8015954:	305c      	adds	r0, #92	; 0x5c
 8015956:	f7ff fd7b 	bl	8015450 <memset>
 801595a:	4b05      	ldr	r3, [pc, #20]	; (8015970 <std+0x38>)
 801595c:	6263      	str	r3, [r4, #36]	; 0x24
 801595e:	4b05      	ldr	r3, [pc, #20]	; (8015974 <std+0x3c>)
 8015960:	62a3      	str	r3, [r4, #40]	; 0x28
 8015962:	4b05      	ldr	r3, [pc, #20]	; (8015978 <std+0x40>)
 8015964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015966:	4b05      	ldr	r3, [pc, #20]	; (801597c <std+0x44>)
 8015968:	6224      	str	r4, [r4, #32]
 801596a:	6323      	str	r3, [r4, #48]	; 0x30
 801596c:	bd10      	pop	{r4, pc}
 801596e:	bf00      	nop
 8015970:	080163e5 	.word	0x080163e5
 8015974:	08016407 	.word	0x08016407
 8015978:	0801643f 	.word	0x0801643f
 801597c:	08016463 	.word	0x08016463

08015980 <_cleanup_r>:
 8015980:	4901      	ldr	r1, [pc, #4]	; (8015988 <_cleanup_r+0x8>)
 8015982:	f000 b8c1 	b.w	8015b08 <_fwalk_reent>
 8015986:	bf00      	nop
 8015988:	080158c1 	.word	0x080158c1

0801598c <__sfmoreglue>:
 801598c:	b570      	push	{r4, r5, r6, lr}
 801598e:	2268      	movs	r2, #104	; 0x68
 8015990:	1e4d      	subs	r5, r1, #1
 8015992:	4355      	muls	r5, r2
 8015994:	460e      	mov	r6, r1
 8015996:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801599a:	f000 f9b1 	bl	8015d00 <_malloc_r>
 801599e:	4604      	mov	r4, r0
 80159a0:	b140      	cbz	r0, 80159b4 <__sfmoreglue+0x28>
 80159a2:	2100      	movs	r1, #0
 80159a4:	e9c0 1600 	strd	r1, r6, [r0]
 80159a8:	300c      	adds	r0, #12
 80159aa:	60a0      	str	r0, [r4, #8]
 80159ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80159b0:	f7ff fd4e 	bl	8015450 <memset>
 80159b4:	4620      	mov	r0, r4
 80159b6:	bd70      	pop	{r4, r5, r6, pc}

080159b8 <__sfp_lock_acquire>:
 80159b8:	4801      	ldr	r0, [pc, #4]	; (80159c0 <__sfp_lock_acquire+0x8>)
 80159ba:	f000 b8c5 	b.w	8015b48 <__retarget_lock_acquire_recursive>
 80159be:	bf00      	nop
 80159c0:	20008d01 	.word	0x20008d01

080159c4 <__sfp_lock_release>:
 80159c4:	4801      	ldr	r0, [pc, #4]	; (80159cc <__sfp_lock_release+0x8>)
 80159c6:	f000 b8c0 	b.w	8015b4a <__retarget_lock_release_recursive>
 80159ca:	bf00      	nop
 80159cc:	20008d01 	.word	0x20008d01

080159d0 <__sinit_lock_acquire>:
 80159d0:	4801      	ldr	r0, [pc, #4]	; (80159d8 <__sinit_lock_acquire+0x8>)
 80159d2:	f000 b8b9 	b.w	8015b48 <__retarget_lock_acquire_recursive>
 80159d6:	bf00      	nop
 80159d8:	20008d02 	.word	0x20008d02

080159dc <__sinit_lock_release>:
 80159dc:	4801      	ldr	r0, [pc, #4]	; (80159e4 <__sinit_lock_release+0x8>)
 80159de:	f000 b8b4 	b.w	8015b4a <__retarget_lock_release_recursive>
 80159e2:	bf00      	nop
 80159e4:	20008d02 	.word	0x20008d02

080159e8 <__sinit>:
 80159e8:	b510      	push	{r4, lr}
 80159ea:	4604      	mov	r4, r0
 80159ec:	f7ff fff0 	bl	80159d0 <__sinit_lock_acquire>
 80159f0:	69a3      	ldr	r3, [r4, #24]
 80159f2:	b11b      	cbz	r3, 80159fc <__sinit+0x14>
 80159f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159f8:	f7ff bff0 	b.w	80159dc <__sinit_lock_release>
 80159fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015a00:	6523      	str	r3, [r4, #80]	; 0x50
 8015a02:	4b13      	ldr	r3, [pc, #76]	; (8015a50 <__sinit+0x68>)
 8015a04:	4a13      	ldr	r2, [pc, #76]	; (8015a54 <__sinit+0x6c>)
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	62a2      	str	r2, [r4, #40]	; 0x28
 8015a0a:	42a3      	cmp	r3, r4
 8015a0c:	bf04      	itt	eq
 8015a0e:	2301      	moveq	r3, #1
 8015a10:	61a3      	streq	r3, [r4, #24]
 8015a12:	4620      	mov	r0, r4
 8015a14:	f000 f820 	bl	8015a58 <__sfp>
 8015a18:	6060      	str	r0, [r4, #4]
 8015a1a:	4620      	mov	r0, r4
 8015a1c:	f000 f81c 	bl	8015a58 <__sfp>
 8015a20:	60a0      	str	r0, [r4, #8]
 8015a22:	4620      	mov	r0, r4
 8015a24:	f000 f818 	bl	8015a58 <__sfp>
 8015a28:	2200      	movs	r2, #0
 8015a2a:	60e0      	str	r0, [r4, #12]
 8015a2c:	2104      	movs	r1, #4
 8015a2e:	6860      	ldr	r0, [r4, #4]
 8015a30:	f7ff ff82 	bl	8015938 <std>
 8015a34:	68a0      	ldr	r0, [r4, #8]
 8015a36:	2201      	movs	r2, #1
 8015a38:	2109      	movs	r1, #9
 8015a3a:	f7ff ff7d 	bl	8015938 <std>
 8015a3e:	68e0      	ldr	r0, [r4, #12]
 8015a40:	2202      	movs	r2, #2
 8015a42:	2112      	movs	r1, #18
 8015a44:	f7ff ff78 	bl	8015938 <std>
 8015a48:	2301      	movs	r3, #1
 8015a4a:	61a3      	str	r3, [r4, #24]
 8015a4c:	e7d2      	b.n	80159f4 <__sinit+0xc>
 8015a4e:	bf00      	nop
 8015a50:	0801b268 	.word	0x0801b268
 8015a54:	08015981 	.word	0x08015981

08015a58 <__sfp>:
 8015a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a5a:	4607      	mov	r7, r0
 8015a5c:	f7ff ffac 	bl	80159b8 <__sfp_lock_acquire>
 8015a60:	4b1e      	ldr	r3, [pc, #120]	; (8015adc <__sfp+0x84>)
 8015a62:	681e      	ldr	r6, [r3, #0]
 8015a64:	69b3      	ldr	r3, [r6, #24]
 8015a66:	b913      	cbnz	r3, 8015a6e <__sfp+0x16>
 8015a68:	4630      	mov	r0, r6
 8015a6a:	f7ff ffbd 	bl	80159e8 <__sinit>
 8015a6e:	3648      	adds	r6, #72	; 0x48
 8015a70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015a74:	3b01      	subs	r3, #1
 8015a76:	d503      	bpl.n	8015a80 <__sfp+0x28>
 8015a78:	6833      	ldr	r3, [r6, #0]
 8015a7a:	b30b      	cbz	r3, 8015ac0 <__sfp+0x68>
 8015a7c:	6836      	ldr	r6, [r6, #0]
 8015a7e:	e7f7      	b.n	8015a70 <__sfp+0x18>
 8015a80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015a84:	b9d5      	cbnz	r5, 8015abc <__sfp+0x64>
 8015a86:	4b16      	ldr	r3, [pc, #88]	; (8015ae0 <__sfp+0x88>)
 8015a88:	60e3      	str	r3, [r4, #12]
 8015a8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015a8e:	6665      	str	r5, [r4, #100]	; 0x64
 8015a90:	f000 f859 	bl	8015b46 <__retarget_lock_init_recursive>
 8015a94:	f7ff ff96 	bl	80159c4 <__sfp_lock_release>
 8015a98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015a9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015aa0:	6025      	str	r5, [r4, #0]
 8015aa2:	61a5      	str	r5, [r4, #24]
 8015aa4:	2208      	movs	r2, #8
 8015aa6:	4629      	mov	r1, r5
 8015aa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015aac:	f7ff fcd0 	bl	8015450 <memset>
 8015ab0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015ab4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015ab8:	4620      	mov	r0, r4
 8015aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015abc:	3468      	adds	r4, #104	; 0x68
 8015abe:	e7d9      	b.n	8015a74 <__sfp+0x1c>
 8015ac0:	2104      	movs	r1, #4
 8015ac2:	4638      	mov	r0, r7
 8015ac4:	f7ff ff62 	bl	801598c <__sfmoreglue>
 8015ac8:	4604      	mov	r4, r0
 8015aca:	6030      	str	r0, [r6, #0]
 8015acc:	2800      	cmp	r0, #0
 8015ace:	d1d5      	bne.n	8015a7c <__sfp+0x24>
 8015ad0:	f7ff ff78 	bl	80159c4 <__sfp_lock_release>
 8015ad4:	230c      	movs	r3, #12
 8015ad6:	603b      	str	r3, [r7, #0]
 8015ad8:	e7ee      	b.n	8015ab8 <__sfp+0x60>
 8015ada:	bf00      	nop
 8015adc:	0801b268 	.word	0x0801b268
 8015ae0:	ffff0001 	.word	0xffff0001

08015ae4 <fiprintf>:
 8015ae4:	b40e      	push	{r1, r2, r3}
 8015ae6:	b503      	push	{r0, r1, lr}
 8015ae8:	4601      	mov	r1, r0
 8015aea:	ab03      	add	r3, sp, #12
 8015aec:	4805      	ldr	r0, [pc, #20]	; (8015b04 <fiprintf+0x20>)
 8015aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8015af2:	6800      	ldr	r0, [r0, #0]
 8015af4:	9301      	str	r3, [sp, #4]
 8015af6:	f000 f9a1 	bl	8015e3c <_vfiprintf_r>
 8015afa:	b002      	add	sp, #8
 8015afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b00:	b003      	add	sp, #12
 8015b02:	4770      	bx	lr
 8015b04:	20000068 	.word	0x20000068

08015b08 <_fwalk_reent>:
 8015b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b0c:	4606      	mov	r6, r0
 8015b0e:	4688      	mov	r8, r1
 8015b10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015b14:	2700      	movs	r7, #0
 8015b16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015b1a:	f1b9 0901 	subs.w	r9, r9, #1
 8015b1e:	d505      	bpl.n	8015b2c <_fwalk_reent+0x24>
 8015b20:	6824      	ldr	r4, [r4, #0]
 8015b22:	2c00      	cmp	r4, #0
 8015b24:	d1f7      	bne.n	8015b16 <_fwalk_reent+0xe>
 8015b26:	4638      	mov	r0, r7
 8015b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b2c:	89ab      	ldrh	r3, [r5, #12]
 8015b2e:	2b01      	cmp	r3, #1
 8015b30:	d907      	bls.n	8015b42 <_fwalk_reent+0x3a>
 8015b32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015b36:	3301      	adds	r3, #1
 8015b38:	d003      	beq.n	8015b42 <_fwalk_reent+0x3a>
 8015b3a:	4629      	mov	r1, r5
 8015b3c:	4630      	mov	r0, r6
 8015b3e:	47c0      	blx	r8
 8015b40:	4307      	orrs	r7, r0
 8015b42:	3568      	adds	r5, #104	; 0x68
 8015b44:	e7e9      	b.n	8015b1a <_fwalk_reent+0x12>

08015b46 <__retarget_lock_init_recursive>:
 8015b46:	4770      	bx	lr

08015b48 <__retarget_lock_acquire_recursive>:
 8015b48:	4770      	bx	lr

08015b4a <__retarget_lock_release_recursive>:
 8015b4a:	4770      	bx	lr

08015b4c <__swhatbuf_r>:
 8015b4c:	b570      	push	{r4, r5, r6, lr}
 8015b4e:	460e      	mov	r6, r1
 8015b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b54:	2900      	cmp	r1, #0
 8015b56:	b096      	sub	sp, #88	; 0x58
 8015b58:	4614      	mov	r4, r2
 8015b5a:	461d      	mov	r5, r3
 8015b5c:	da08      	bge.n	8015b70 <__swhatbuf_r+0x24>
 8015b5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015b62:	2200      	movs	r2, #0
 8015b64:	602a      	str	r2, [r5, #0]
 8015b66:	061a      	lsls	r2, r3, #24
 8015b68:	d410      	bmi.n	8015b8c <__swhatbuf_r+0x40>
 8015b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b6e:	e00e      	b.n	8015b8e <__swhatbuf_r+0x42>
 8015b70:	466a      	mov	r2, sp
 8015b72:	f000 fca5 	bl	80164c0 <_fstat_r>
 8015b76:	2800      	cmp	r0, #0
 8015b78:	dbf1      	blt.n	8015b5e <__swhatbuf_r+0x12>
 8015b7a:	9a01      	ldr	r2, [sp, #4]
 8015b7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015b80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015b84:	425a      	negs	r2, r3
 8015b86:	415a      	adcs	r2, r3
 8015b88:	602a      	str	r2, [r5, #0]
 8015b8a:	e7ee      	b.n	8015b6a <__swhatbuf_r+0x1e>
 8015b8c:	2340      	movs	r3, #64	; 0x40
 8015b8e:	2000      	movs	r0, #0
 8015b90:	6023      	str	r3, [r4, #0]
 8015b92:	b016      	add	sp, #88	; 0x58
 8015b94:	bd70      	pop	{r4, r5, r6, pc}
	...

08015b98 <__smakebuf_r>:
 8015b98:	898b      	ldrh	r3, [r1, #12]
 8015b9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015b9c:	079d      	lsls	r5, r3, #30
 8015b9e:	4606      	mov	r6, r0
 8015ba0:	460c      	mov	r4, r1
 8015ba2:	d507      	bpl.n	8015bb4 <__smakebuf_r+0x1c>
 8015ba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ba8:	6023      	str	r3, [r4, #0]
 8015baa:	6123      	str	r3, [r4, #16]
 8015bac:	2301      	movs	r3, #1
 8015bae:	6163      	str	r3, [r4, #20]
 8015bb0:	b002      	add	sp, #8
 8015bb2:	bd70      	pop	{r4, r5, r6, pc}
 8015bb4:	ab01      	add	r3, sp, #4
 8015bb6:	466a      	mov	r2, sp
 8015bb8:	f7ff ffc8 	bl	8015b4c <__swhatbuf_r>
 8015bbc:	9900      	ldr	r1, [sp, #0]
 8015bbe:	4605      	mov	r5, r0
 8015bc0:	4630      	mov	r0, r6
 8015bc2:	f000 f89d 	bl	8015d00 <_malloc_r>
 8015bc6:	b948      	cbnz	r0, 8015bdc <__smakebuf_r+0x44>
 8015bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bcc:	059a      	lsls	r2, r3, #22
 8015bce:	d4ef      	bmi.n	8015bb0 <__smakebuf_r+0x18>
 8015bd0:	f023 0303 	bic.w	r3, r3, #3
 8015bd4:	f043 0302 	orr.w	r3, r3, #2
 8015bd8:	81a3      	strh	r3, [r4, #12]
 8015bda:	e7e3      	b.n	8015ba4 <__smakebuf_r+0xc>
 8015bdc:	4b0d      	ldr	r3, [pc, #52]	; (8015c14 <__smakebuf_r+0x7c>)
 8015bde:	62b3      	str	r3, [r6, #40]	; 0x28
 8015be0:	89a3      	ldrh	r3, [r4, #12]
 8015be2:	6020      	str	r0, [r4, #0]
 8015be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015be8:	81a3      	strh	r3, [r4, #12]
 8015bea:	9b00      	ldr	r3, [sp, #0]
 8015bec:	6163      	str	r3, [r4, #20]
 8015bee:	9b01      	ldr	r3, [sp, #4]
 8015bf0:	6120      	str	r0, [r4, #16]
 8015bf2:	b15b      	cbz	r3, 8015c0c <__smakebuf_r+0x74>
 8015bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bf8:	4630      	mov	r0, r6
 8015bfa:	f000 fc73 	bl	80164e4 <_isatty_r>
 8015bfe:	b128      	cbz	r0, 8015c0c <__smakebuf_r+0x74>
 8015c00:	89a3      	ldrh	r3, [r4, #12]
 8015c02:	f023 0303 	bic.w	r3, r3, #3
 8015c06:	f043 0301 	orr.w	r3, r3, #1
 8015c0a:	81a3      	strh	r3, [r4, #12]
 8015c0c:	89a0      	ldrh	r0, [r4, #12]
 8015c0e:	4305      	orrs	r5, r0
 8015c10:	81a5      	strh	r5, [r4, #12]
 8015c12:	e7cd      	b.n	8015bb0 <__smakebuf_r+0x18>
 8015c14:	08015981 	.word	0x08015981

08015c18 <malloc>:
 8015c18:	4b02      	ldr	r3, [pc, #8]	; (8015c24 <malloc+0xc>)
 8015c1a:	4601      	mov	r1, r0
 8015c1c:	6818      	ldr	r0, [r3, #0]
 8015c1e:	f000 b86f 	b.w	8015d00 <_malloc_r>
 8015c22:	bf00      	nop
 8015c24:	20000068 	.word	0x20000068

08015c28 <_free_r>:
 8015c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c2a:	2900      	cmp	r1, #0
 8015c2c:	d044      	beq.n	8015cb8 <_free_r+0x90>
 8015c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c32:	9001      	str	r0, [sp, #4]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	f1a1 0404 	sub.w	r4, r1, #4
 8015c3a:	bfb8      	it	lt
 8015c3c:	18e4      	addlt	r4, r4, r3
 8015c3e:	f000 fc73 	bl	8016528 <__malloc_lock>
 8015c42:	4a1e      	ldr	r2, [pc, #120]	; (8015cbc <_free_r+0x94>)
 8015c44:	9801      	ldr	r0, [sp, #4]
 8015c46:	6813      	ldr	r3, [r2, #0]
 8015c48:	b933      	cbnz	r3, 8015c58 <_free_r+0x30>
 8015c4a:	6063      	str	r3, [r4, #4]
 8015c4c:	6014      	str	r4, [r2, #0]
 8015c4e:	b003      	add	sp, #12
 8015c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c54:	f000 bc6e 	b.w	8016534 <__malloc_unlock>
 8015c58:	42a3      	cmp	r3, r4
 8015c5a:	d908      	bls.n	8015c6e <_free_r+0x46>
 8015c5c:	6825      	ldr	r5, [r4, #0]
 8015c5e:	1961      	adds	r1, r4, r5
 8015c60:	428b      	cmp	r3, r1
 8015c62:	bf01      	itttt	eq
 8015c64:	6819      	ldreq	r1, [r3, #0]
 8015c66:	685b      	ldreq	r3, [r3, #4]
 8015c68:	1949      	addeq	r1, r1, r5
 8015c6a:	6021      	streq	r1, [r4, #0]
 8015c6c:	e7ed      	b.n	8015c4a <_free_r+0x22>
 8015c6e:	461a      	mov	r2, r3
 8015c70:	685b      	ldr	r3, [r3, #4]
 8015c72:	b10b      	cbz	r3, 8015c78 <_free_r+0x50>
 8015c74:	42a3      	cmp	r3, r4
 8015c76:	d9fa      	bls.n	8015c6e <_free_r+0x46>
 8015c78:	6811      	ldr	r1, [r2, #0]
 8015c7a:	1855      	adds	r5, r2, r1
 8015c7c:	42a5      	cmp	r5, r4
 8015c7e:	d10b      	bne.n	8015c98 <_free_r+0x70>
 8015c80:	6824      	ldr	r4, [r4, #0]
 8015c82:	4421      	add	r1, r4
 8015c84:	1854      	adds	r4, r2, r1
 8015c86:	42a3      	cmp	r3, r4
 8015c88:	6011      	str	r1, [r2, #0]
 8015c8a:	d1e0      	bne.n	8015c4e <_free_r+0x26>
 8015c8c:	681c      	ldr	r4, [r3, #0]
 8015c8e:	685b      	ldr	r3, [r3, #4]
 8015c90:	6053      	str	r3, [r2, #4]
 8015c92:	4421      	add	r1, r4
 8015c94:	6011      	str	r1, [r2, #0]
 8015c96:	e7da      	b.n	8015c4e <_free_r+0x26>
 8015c98:	d902      	bls.n	8015ca0 <_free_r+0x78>
 8015c9a:	230c      	movs	r3, #12
 8015c9c:	6003      	str	r3, [r0, #0]
 8015c9e:	e7d6      	b.n	8015c4e <_free_r+0x26>
 8015ca0:	6825      	ldr	r5, [r4, #0]
 8015ca2:	1961      	adds	r1, r4, r5
 8015ca4:	428b      	cmp	r3, r1
 8015ca6:	bf04      	itt	eq
 8015ca8:	6819      	ldreq	r1, [r3, #0]
 8015caa:	685b      	ldreq	r3, [r3, #4]
 8015cac:	6063      	str	r3, [r4, #4]
 8015cae:	bf04      	itt	eq
 8015cb0:	1949      	addeq	r1, r1, r5
 8015cb2:	6021      	streq	r1, [r4, #0]
 8015cb4:	6054      	str	r4, [r2, #4]
 8015cb6:	e7ca      	b.n	8015c4e <_free_r+0x26>
 8015cb8:	b003      	add	sp, #12
 8015cba:	bd30      	pop	{r4, r5, pc}
 8015cbc:	20008d04 	.word	0x20008d04

08015cc0 <sbrk_aligned>:
 8015cc0:	b570      	push	{r4, r5, r6, lr}
 8015cc2:	4e0e      	ldr	r6, [pc, #56]	; (8015cfc <sbrk_aligned+0x3c>)
 8015cc4:	460c      	mov	r4, r1
 8015cc6:	6831      	ldr	r1, [r6, #0]
 8015cc8:	4605      	mov	r5, r0
 8015cca:	b911      	cbnz	r1, 8015cd2 <sbrk_aligned+0x12>
 8015ccc:	f000 fb7a 	bl	80163c4 <_sbrk_r>
 8015cd0:	6030      	str	r0, [r6, #0]
 8015cd2:	4621      	mov	r1, r4
 8015cd4:	4628      	mov	r0, r5
 8015cd6:	f000 fb75 	bl	80163c4 <_sbrk_r>
 8015cda:	1c43      	adds	r3, r0, #1
 8015cdc:	d00a      	beq.n	8015cf4 <sbrk_aligned+0x34>
 8015cde:	1cc4      	adds	r4, r0, #3
 8015ce0:	f024 0403 	bic.w	r4, r4, #3
 8015ce4:	42a0      	cmp	r0, r4
 8015ce6:	d007      	beq.n	8015cf8 <sbrk_aligned+0x38>
 8015ce8:	1a21      	subs	r1, r4, r0
 8015cea:	4628      	mov	r0, r5
 8015cec:	f000 fb6a 	bl	80163c4 <_sbrk_r>
 8015cf0:	3001      	adds	r0, #1
 8015cf2:	d101      	bne.n	8015cf8 <sbrk_aligned+0x38>
 8015cf4:	f04f 34ff 	mov.w	r4, #4294967295
 8015cf8:	4620      	mov	r0, r4
 8015cfa:	bd70      	pop	{r4, r5, r6, pc}
 8015cfc:	20008d08 	.word	0x20008d08

08015d00 <_malloc_r>:
 8015d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d04:	1ccd      	adds	r5, r1, #3
 8015d06:	f025 0503 	bic.w	r5, r5, #3
 8015d0a:	3508      	adds	r5, #8
 8015d0c:	2d0c      	cmp	r5, #12
 8015d0e:	bf38      	it	cc
 8015d10:	250c      	movcc	r5, #12
 8015d12:	2d00      	cmp	r5, #0
 8015d14:	4607      	mov	r7, r0
 8015d16:	db01      	blt.n	8015d1c <_malloc_r+0x1c>
 8015d18:	42a9      	cmp	r1, r5
 8015d1a:	d905      	bls.n	8015d28 <_malloc_r+0x28>
 8015d1c:	230c      	movs	r3, #12
 8015d1e:	603b      	str	r3, [r7, #0]
 8015d20:	2600      	movs	r6, #0
 8015d22:	4630      	mov	r0, r6
 8015d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d28:	4e2e      	ldr	r6, [pc, #184]	; (8015de4 <_malloc_r+0xe4>)
 8015d2a:	f000 fbfd 	bl	8016528 <__malloc_lock>
 8015d2e:	6833      	ldr	r3, [r6, #0]
 8015d30:	461c      	mov	r4, r3
 8015d32:	bb34      	cbnz	r4, 8015d82 <_malloc_r+0x82>
 8015d34:	4629      	mov	r1, r5
 8015d36:	4638      	mov	r0, r7
 8015d38:	f7ff ffc2 	bl	8015cc0 <sbrk_aligned>
 8015d3c:	1c43      	adds	r3, r0, #1
 8015d3e:	4604      	mov	r4, r0
 8015d40:	d14d      	bne.n	8015dde <_malloc_r+0xde>
 8015d42:	6834      	ldr	r4, [r6, #0]
 8015d44:	4626      	mov	r6, r4
 8015d46:	2e00      	cmp	r6, #0
 8015d48:	d140      	bne.n	8015dcc <_malloc_r+0xcc>
 8015d4a:	6823      	ldr	r3, [r4, #0]
 8015d4c:	4631      	mov	r1, r6
 8015d4e:	4638      	mov	r0, r7
 8015d50:	eb04 0803 	add.w	r8, r4, r3
 8015d54:	f000 fb36 	bl	80163c4 <_sbrk_r>
 8015d58:	4580      	cmp	r8, r0
 8015d5a:	d13a      	bne.n	8015dd2 <_malloc_r+0xd2>
 8015d5c:	6821      	ldr	r1, [r4, #0]
 8015d5e:	3503      	adds	r5, #3
 8015d60:	1a6d      	subs	r5, r5, r1
 8015d62:	f025 0503 	bic.w	r5, r5, #3
 8015d66:	3508      	adds	r5, #8
 8015d68:	2d0c      	cmp	r5, #12
 8015d6a:	bf38      	it	cc
 8015d6c:	250c      	movcc	r5, #12
 8015d6e:	4629      	mov	r1, r5
 8015d70:	4638      	mov	r0, r7
 8015d72:	f7ff ffa5 	bl	8015cc0 <sbrk_aligned>
 8015d76:	3001      	adds	r0, #1
 8015d78:	d02b      	beq.n	8015dd2 <_malloc_r+0xd2>
 8015d7a:	6823      	ldr	r3, [r4, #0]
 8015d7c:	442b      	add	r3, r5
 8015d7e:	6023      	str	r3, [r4, #0]
 8015d80:	e00e      	b.n	8015da0 <_malloc_r+0xa0>
 8015d82:	6822      	ldr	r2, [r4, #0]
 8015d84:	1b52      	subs	r2, r2, r5
 8015d86:	d41e      	bmi.n	8015dc6 <_malloc_r+0xc6>
 8015d88:	2a0b      	cmp	r2, #11
 8015d8a:	d916      	bls.n	8015dba <_malloc_r+0xba>
 8015d8c:	1961      	adds	r1, r4, r5
 8015d8e:	42a3      	cmp	r3, r4
 8015d90:	6025      	str	r5, [r4, #0]
 8015d92:	bf18      	it	ne
 8015d94:	6059      	strne	r1, [r3, #4]
 8015d96:	6863      	ldr	r3, [r4, #4]
 8015d98:	bf08      	it	eq
 8015d9a:	6031      	streq	r1, [r6, #0]
 8015d9c:	5162      	str	r2, [r4, r5]
 8015d9e:	604b      	str	r3, [r1, #4]
 8015da0:	4638      	mov	r0, r7
 8015da2:	f104 060b 	add.w	r6, r4, #11
 8015da6:	f000 fbc5 	bl	8016534 <__malloc_unlock>
 8015daa:	f026 0607 	bic.w	r6, r6, #7
 8015dae:	1d23      	adds	r3, r4, #4
 8015db0:	1af2      	subs	r2, r6, r3
 8015db2:	d0b6      	beq.n	8015d22 <_malloc_r+0x22>
 8015db4:	1b9b      	subs	r3, r3, r6
 8015db6:	50a3      	str	r3, [r4, r2]
 8015db8:	e7b3      	b.n	8015d22 <_malloc_r+0x22>
 8015dba:	6862      	ldr	r2, [r4, #4]
 8015dbc:	42a3      	cmp	r3, r4
 8015dbe:	bf0c      	ite	eq
 8015dc0:	6032      	streq	r2, [r6, #0]
 8015dc2:	605a      	strne	r2, [r3, #4]
 8015dc4:	e7ec      	b.n	8015da0 <_malloc_r+0xa0>
 8015dc6:	4623      	mov	r3, r4
 8015dc8:	6864      	ldr	r4, [r4, #4]
 8015dca:	e7b2      	b.n	8015d32 <_malloc_r+0x32>
 8015dcc:	4634      	mov	r4, r6
 8015dce:	6876      	ldr	r6, [r6, #4]
 8015dd0:	e7b9      	b.n	8015d46 <_malloc_r+0x46>
 8015dd2:	230c      	movs	r3, #12
 8015dd4:	603b      	str	r3, [r7, #0]
 8015dd6:	4638      	mov	r0, r7
 8015dd8:	f000 fbac 	bl	8016534 <__malloc_unlock>
 8015ddc:	e7a1      	b.n	8015d22 <_malloc_r+0x22>
 8015dde:	6025      	str	r5, [r4, #0]
 8015de0:	e7de      	b.n	8015da0 <_malloc_r+0xa0>
 8015de2:	bf00      	nop
 8015de4:	20008d04 	.word	0x20008d04

08015de8 <__sfputc_r>:
 8015de8:	6893      	ldr	r3, [r2, #8]
 8015dea:	3b01      	subs	r3, #1
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	b410      	push	{r4}
 8015df0:	6093      	str	r3, [r2, #8]
 8015df2:	da08      	bge.n	8015e06 <__sfputc_r+0x1e>
 8015df4:	6994      	ldr	r4, [r2, #24]
 8015df6:	42a3      	cmp	r3, r4
 8015df8:	db01      	blt.n	8015dfe <__sfputc_r+0x16>
 8015dfa:	290a      	cmp	r1, #10
 8015dfc:	d103      	bne.n	8015e06 <__sfputc_r+0x1e>
 8015dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e02:	f7ff bbf9 	b.w	80155f8 <__swbuf_r>
 8015e06:	6813      	ldr	r3, [r2, #0]
 8015e08:	1c58      	adds	r0, r3, #1
 8015e0a:	6010      	str	r0, [r2, #0]
 8015e0c:	7019      	strb	r1, [r3, #0]
 8015e0e:	4608      	mov	r0, r1
 8015e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015e14:	4770      	bx	lr

08015e16 <__sfputs_r>:
 8015e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e18:	4606      	mov	r6, r0
 8015e1a:	460f      	mov	r7, r1
 8015e1c:	4614      	mov	r4, r2
 8015e1e:	18d5      	adds	r5, r2, r3
 8015e20:	42ac      	cmp	r4, r5
 8015e22:	d101      	bne.n	8015e28 <__sfputs_r+0x12>
 8015e24:	2000      	movs	r0, #0
 8015e26:	e007      	b.n	8015e38 <__sfputs_r+0x22>
 8015e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e2c:	463a      	mov	r2, r7
 8015e2e:	4630      	mov	r0, r6
 8015e30:	f7ff ffda 	bl	8015de8 <__sfputc_r>
 8015e34:	1c43      	adds	r3, r0, #1
 8015e36:	d1f3      	bne.n	8015e20 <__sfputs_r+0xa>
 8015e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015e3c <_vfiprintf_r>:
 8015e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e40:	460d      	mov	r5, r1
 8015e42:	b09d      	sub	sp, #116	; 0x74
 8015e44:	4614      	mov	r4, r2
 8015e46:	4698      	mov	r8, r3
 8015e48:	4606      	mov	r6, r0
 8015e4a:	b118      	cbz	r0, 8015e54 <_vfiprintf_r+0x18>
 8015e4c:	6983      	ldr	r3, [r0, #24]
 8015e4e:	b90b      	cbnz	r3, 8015e54 <_vfiprintf_r+0x18>
 8015e50:	f7ff fdca 	bl	80159e8 <__sinit>
 8015e54:	4b89      	ldr	r3, [pc, #548]	; (801607c <_vfiprintf_r+0x240>)
 8015e56:	429d      	cmp	r5, r3
 8015e58:	d11b      	bne.n	8015e92 <_vfiprintf_r+0x56>
 8015e5a:	6875      	ldr	r5, [r6, #4]
 8015e5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015e5e:	07d9      	lsls	r1, r3, #31
 8015e60:	d405      	bmi.n	8015e6e <_vfiprintf_r+0x32>
 8015e62:	89ab      	ldrh	r3, [r5, #12]
 8015e64:	059a      	lsls	r2, r3, #22
 8015e66:	d402      	bmi.n	8015e6e <_vfiprintf_r+0x32>
 8015e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015e6a:	f7ff fe6d 	bl	8015b48 <__retarget_lock_acquire_recursive>
 8015e6e:	89ab      	ldrh	r3, [r5, #12]
 8015e70:	071b      	lsls	r3, r3, #28
 8015e72:	d501      	bpl.n	8015e78 <_vfiprintf_r+0x3c>
 8015e74:	692b      	ldr	r3, [r5, #16]
 8015e76:	b9eb      	cbnz	r3, 8015eb4 <_vfiprintf_r+0x78>
 8015e78:	4629      	mov	r1, r5
 8015e7a:	4630      	mov	r0, r6
 8015e7c:	f7ff fc0e 	bl	801569c <__swsetup_r>
 8015e80:	b1c0      	cbz	r0, 8015eb4 <_vfiprintf_r+0x78>
 8015e82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015e84:	07dc      	lsls	r4, r3, #31
 8015e86:	d50e      	bpl.n	8015ea6 <_vfiprintf_r+0x6a>
 8015e88:	f04f 30ff 	mov.w	r0, #4294967295
 8015e8c:	b01d      	add	sp, #116	; 0x74
 8015e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e92:	4b7b      	ldr	r3, [pc, #492]	; (8016080 <_vfiprintf_r+0x244>)
 8015e94:	429d      	cmp	r5, r3
 8015e96:	d101      	bne.n	8015e9c <_vfiprintf_r+0x60>
 8015e98:	68b5      	ldr	r5, [r6, #8]
 8015e9a:	e7df      	b.n	8015e5c <_vfiprintf_r+0x20>
 8015e9c:	4b79      	ldr	r3, [pc, #484]	; (8016084 <_vfiprintf_r+0x248>)
 8015e9e:	429d      	cmp	r5, r3
 8015ea0:	bf08      	it	eq
 8015ea2:	68f5      	ldreq	r5, [r6, #12]
 8015ea4:	e7da      	b.n	8015e5c <_vfiprintf_r+0x20>
 8015ea6:	89ab      	ldrh	r3, [r5, #12]
 8015ea8:	0598      	lsls	r0, r3, #22
 8015eaa:	d4ed      	bmi.n	8015e88 <_vfiprintf_r+0x4c>
 8015eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015eae:	f7ff fe4c 	bl	8015b4a <__retarget_lock_release_recursive>
 8015eb2:	e7e9      	b.n	8015e88 <_vfiprintf_r+0x4c>
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8015eb8:	2320      	movs	r3, #32
 8015eba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ebe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ec2:	2330      	movs	r3, #48	; 0x30
 8015ec4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016088 <_vfiprintf_r+0x24c>
 8015ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ecc:	f04f 0901 	mov.w	r9, #1
 8015ed0:	4623      	mov	r3, r4
 8015ed2:	469a      	mov	sl, r3
 8015ed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ed8:	b10a      	cbz	r2, 8015ede <_vfiprintf_r+0xa2>
 8015eda:	2a25      	cmp	r2, #37	; 0x25
 8015edc:	d1f9      	bne.n	8015ed2 <_vfiprintf_r+0x96>
 8015ede:	ebba 0b04 	subs.w	fp, sl, r4
 8015ee2:	d00b      	beq.n	8015efc <_vfiprintf_r+0xc0>
 8015ee4:	465b      	mov	r3, fp
 8015ee6:	4622      	mov	r2, r4
 8015ee8:	4629      	mov	r1, r5
 8015eea:	4630      	mov	r0, r6
 8015eec:	f7ff ff93 	bl	8015e16 <__sfputs_r>
 8015ef0:	3001      	adds	r0, #1
 8015ef2:	f000 80aa 	beq.w	801604a <_vfiprintf_r+0x20e>
 8015ef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ef8:	445a      	add	r2, fp
 8015efa:	9209      	str	r2, [sp, #36]	; 0x24
 8015efc:	f89a 3000 	ldrb.w	r3, [sl]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	f000 80a2 	beq.w	801604a <_vfiprintf_r+0x20e>
 8015f06:	2300      	movs	r3, #0
 8015f08:	f04f 32ff 	mov.w	r2, #4294967295
 8015f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f10:	f10a 0a01 	add.w	sl, sl, #1
 8015f14:	9304      	str	r3, [sp, #16]
 8015f16:	9307      	str	r3, [sp, #28]
 8015f18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f1c:	931a      	str	r3, [sp, #104]	; 0x68
 8015f1e:	4654      	mov	r4, sl
 8015f20:	2205      	movs	r2, #5
 8015f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f26:	4858      	ldr	r0, [pc, #352]	; (8016088 <_vfiprintf_r+0x24c>)
 8015f28:	f7ea f97a 	bl	8000220 <memchr>
 8015f2c:	9a04      	ldr	r2, [sp, #16]
 8015f2e:	b9d8      	cbnz	r0, 8015f68 <_vfiprintf_r+0x12c>
 8015f30:	06d1      	lsls	r1, r2, #27
 8015f32:	bf44      	itt	mi
 8015f34:	2320      	movmi	r3, #32
 8015f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f3a:	0713      	lsls	r3, r2, #28
 8015f3c:	bf44      	itt	mi
 8015f3e:	232b      	movmi	r3, #43	; 0x2b
 8015f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f44:	f89a 3000 	ldrb.w	r3, [sl]
 8015f48:	2b2a      	cmp	r3, #42	; 0x2a
 8015f4a:	d015      	beq.n	8015f78 <_vfiprintf_r+0x13c>
 8015f4c:	9a07      	ldr	r2, [sp, #28]
 8015f4e:	4654      	mov	r4, sl
 8015f50:	2000      	movs	r0, #0
 8015f52:	f04f 0c0a 	mov.w	ip, #10
 8015f56:	4621      	mov	r1, r4
 8015f58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f5c:	3b30      	subs	r3, #48	; 0x30
 8015f5e:	2b09      	cmp	r3, #9
 8015f60:	d94e      	bls.n	8016000 <_vfiprintf_r+0x1c4>
 8015f62:	b1b0      	cbz	r0, 8015f92 <_vfiprintf_r+0x156>
 8015f64:	9207      	str	r2, [sp, #28]
 8015f66:	e014      	b.n	8015f92 <_vfiprintf_r+0x156>
 8015f68:	eba0 0308 	sub.w	r3, r0, r8
 8015f6c:	fa09 f303 	lsl.w	r3, r9, r3
 8015f70:	4313      	orrs	r3, r2
 8015f72:	9304      	str	r3, [sp, #16]
 8015f74:	46a2      	mov	sl, r4
 8015f76:	e7d2      	b.n	8015f1e <_vfiprintf_r+0xe2>
 8015f78:	9b03      	ldr	r3, [sp, #12]
 8015f7a:	1d19      	adds	r1, r3, #4
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	9103      	str	r1, [sp, #12]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	bfbb      	ittet	lt
 8015f84:	425b      	neglt	r3, r3
 8015f86:	f042 0202 	orrlt.w	r2, r2, #2
 8015f8a:	9307      	strge	r3, [sp, #28]
 8015f8c:	9307      	strlt	r3, [sp, #28]
 8015f8e:	bfb8      	it	lt
 8015f90:	9204      	strlt	r2, [sp, #16]
 8015f92:	7823      	ldrb	r3, [r4, #0]
 8015f94:	2b2e      	cmp	r3, #46	; 0x2e
 8015f96:	d10c      	bne.n	8015fb2 <_vfiprintf_r+0x176>
 8015f98:	7863      	ldrb	r3, [r4, #1]
 8015f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8015f9c:	d135      	bne.n	801600a <_vfiprintf_r+0x1ce>
 8015f9e:	9b03      	ldr	r3, [sp, #12]
 8015fa0:	1d1a      	adds	r2, r3, #4
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	9203      	str	r2, [sp, #12]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	bfb8      	it	lt
 8015faa:	f04f 33ff 	movlt.w	r3, #4294967295
 8015fae:	3402      	adds	r4, #2
 8015fb0:	9305      	str	r3, [sp, #20]
 8015fb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016098 <_vfiprintf_r+0x25c>
 8015fb6:	7821      	ldrb	r1, [r4, #0]
 8015fb8:	2203      	movs	r2, #3
 8015fba:	4650      	mov	r0, sl
 8015fbc:	f7ea f930 	bl	8000220 <memchr>
 8015fc0:	b140      	cbz	r0, 8015fd4 <_vfiprintf_r+0x198>
 8015fc2:	2340      	movs	r3, #64	; 0x40
 8015fc4:	eba0 000a 	sub.w	r0, r0, sl
 8015fc8:	fa03 f000 	lsl.w	r0, r3, r0
 8015fcc:	9b04      	ldr	r3, [sp, #16]
 8015fce:	4303      	orrs	r3, r0
 8015fd0:	3401      	adds	r4, #1
 8015fd2:	9304      	str	r3, [sp, #16]
 8015fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fd8:	482c      	ldr	r0, [pc, #176]	; (801608c <_vfiprintf_r+0x250>)
 8015fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015fde:	2206      	movs	r2, #6
 8015fe0:	f7ea f91e 	bl	8000220 <memchr>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d03f      	beq.n	8016068 <_vfiprintf_r+0x22c>
 8015fe8:	4b29      	ldr	r3, [pc, #164]	; (8016090 <_vfiprintf_r+0x254>)
 8015fea:	bb1b      	cbnz	r3, 8016034 <_vfiprintf_r+0x1f8>
 8015fec:	9b03      	ldr	r3, [sp, #12]
 8015fee:	3307      	adds	r3, #7
 8015ff0:	f023 0307 	bic.w	r3, r3, #7
 8015ff4:	3308      	adds	r3, #8
 8015ff6:	9303      	str	r3, [sp, #12]
 8015ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ffa:	443b      	add	r3, r7
 8015ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8015ffe:	e767      	b.n	8015ed0 <_vfiprintf_r+0x94>
 8016000:	fb0c 3202 	mla	r2, ip, r2, r3
 8016004:	460c      	mov	r4, r1
 8016006:	2001      	movs	r0, #1
 8016008:	e7a5      	b.n	8015f56 <_vfiprintf_r+0x11a>
 801600a:	2300      	movs	r3, #0
 801600c:	3401      	adds	r4, #1
 801600e:	9305      	str	r3, [sp, #20]
 8016010:	4619      	mov	r1, r3
 8016012:	f04f 0c0a 	mov.w	ip, #10
 8016016:	4620      	mov	r0, r4
 8016018:	f810 2b01 	ldrb.w	r2, [r0], #1
 801601c:	3a30      	subs	r2, #48	; 0x30
 801601e:	2a09      	cmp	r2, #9
 8016020:	d903      	bls.n	801602a <_vfiprintf_r+0x1ee>
 8016022:	2b00      	cmp	r3, #0
 8016024:	d0c5      	beq.n	8015fb2 <_vfiprintf_r+0x176>
 8016026:	9105      	str	r1, [sp, #20]
 8016028:	e7c3      	b.n	8015fb2 <_vfiprintf_r+0x176>
 801602a:	fb0c 2101 	mla	r1, ip, r1, r2
 801602e:	4604      	mov	r4, r0
 8016030:	2301      	movs	r3, #1
 8016032:	e7f0      	b.n	8016016 <_vfiprintf_r+0x1da>
 8016034:	ab03      	add	r3, sp, #12
 8016036:	9300      	str	r3, [sp, #0]
 8016038:	462a      	mov	r2, r5
 801603a:	4b16      	ldr	r3, [pc, #88]	; (8016094 <_vfiprintf_r+0x258>)
 801603c:	a904      	add	r1, sp, #16
 801603e:	4630      	mov	r0, r6
 8016040:	f3af 8000 	nop.w
 8016044:	4607      	mov	r7, r0
 8016046:	1c78      	adds	r0, r7, #1
 8016048:	d1d6      	bne.n	8015ff8 <_vfiprintf_r+0x1bc>
 801604a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801604c:	07d9      	lsls	r1, r3, #31
 801604e:	d405      	bmi.n	801605c <_vfiprintf_r+0x220>
 8016050:	89ab      	ldrh	r3, [r5, #12]
 8016052:	059a      	lsls	r2, r3, #22
 8016054:	d402      	bmi.n	801605c <_vfiprintf_r+0x220>
 8016056:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016058:	f7ff fd77 	bl	8015b4a <__retarget_lock_release_recursive>
 801605c:	89ab      	ldrh	r3, [r5, #12]
 801605e:	065b      	lsls	r3, r3, #25
 8016060:	f53f af12 	bmi.w	8015e88 <_vfiprintf_r+0x4c>
 8016064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016066:	e711      	b.n	8015e8c <_vfiprintf_r+0x50>
 8016068:	ab03      	add	r3, sp, #12
 801606a:	9300      	str	r3, [sp, #0]
 801606c:	462a      	mov	r2, r5
 801606e:	4b09      	ldr	r3, [pc, #36]	; (8016094 <_vfiprintf_r+0x258>)
 8016070:	a904      	add	r1, sp, #16
 8016072:	4630      	mov	r0, r6
 8016074:	f000 f880 	bl	8016178 <_printf_i>
 8016078:	e7e4      	b.n	8016044 <_vfiprintf_r+0x208>
 801607a:	bf00      	nop
 801607c:	0801b33c 	.word	0x0801b33c
 8016080:	0801b35c 	.word	0x0801b35c
 8016084:	0801b31c 	.word	0x0801b31c
 8016088:	0801b37c 	.word	0x0801b37c
 801608c:	0801b386 	.word	0x0801b386
 8016090:	00000000 	.word	0x00000000
 8016094:	08015e17 	.word	0x08015e17
 8016098:	0801b382 	.word	0x0801b382

0801609c <_printf_common>:
 801609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160a0:	4616      	mov	r6, r2
 80160a2:	4699      	mov	r9, r3
 80160a4:	688a      	ldr	r2, [r1, #8]
 80160a6:	690b      	ldr	r3, [r1, #16]
 80160a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80160ac:	4293      	cmp	r3, r2
 80160ae:	bfb8      	it	lt
 80160b0:	4613      	movlt	r3, r2
 80160b2:	6033      	str	r3, [r6, #0]
 80160b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80160b8:	4607      	mov	r7, r0
 80160ba:	460c      	mov	r4, r1
 80160bc:	b10a      	cbz	r2, 80160c2 <_printf_common+0x26>
 80160be:	3301      	adds	r3, #1
 80160c0:	6033      	str	r3, [r6, #0]
 80160c2:	6823      	ldr	r3, [r4, #0]
 80160c4:	0699      	lsls	r1, r3, #26
 80160c6:	bf42      	ittt	mi
 80160c8:	6833      	ldrmi	r3, [r6, #0]
 80160ca:	3302      	addmi	r3, #2
 80160cc:	6033      	strmi	r3, [r6, #0]
 80160ce:	6825      	ldr	r5, [r4, #0]
 80160d0:	f015 0506 	ands.w	r5, r5, #6
 80160d4:	d106      	bne.n	80160e4 <_printf_common+0x48>
 80160d6:	f104 0a19 	add.w	sl, r4, #25
 80160da:	68e3      	ldr	r3, [r4, #12]
 80160dc:	6832      	ldr	r2, [r6, #0]
 80160de:	1a9b      	subs	r3, r3, r2
 80160e0:	42ab      	cmp	r3, r5
 80160e2:	dc26      	bgt.n	8016132 <_printf_common+0x96>
 80160e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80160e8:	1e13      	subs	r3, r2, #0
 80160ea:	6822      	ldr	r2, [r4, #0]
 80160ec:	bf18      	it	ne
 80160ee:	2301      	movne	r3, #1
 80160f0:	0692      	lsls	r2, r2, #26
 80160f2:	d42b      	bmi.n	801614c <_printf_common+0xb0>
 80160f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80160f8:	4649      	mov	r1, r9
 80160fa:	4638      	mov	r0, r7
 80160fc:	47c0      	blx	r8
 80160fe:	3001      	adds	r0, #1
 8016100:	d01e      	beq.n	8016140 <_printf_common+0xa4>
 8016102:	6823      	ldr	r3, [r4, #0]
 8016104:	68e5      	ldr	r5, [r4, #12]
 8016106:	6832      	ldr	r2, [r6, #0]
 8016108:	f003 0306 	and.w	r3, r3, #6
 801610c:	2b04      	cmp	r3, #4
 801610e:	bf08      	it	eq
 8016110:	1aad      	subeq	r5, r5, r2
 8016112:	68a3      	ldr	r3, [r4, #8]
 8016114:	6922      	ldr	r2, [r4, #16]
 8016116:	bf0c      	ite	eq
 8016118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801611c:	2500      	movne	r5, #0
 801611e:	4293      	cmp	r3, r2
 8016120:	bfc4      	itt	gt
 8016122:	1a9b      	subgt	r3, r3, r2
 8016124:	18ed      	addgt	r5, r5, r3
 8016126:	2600      	movs	r6, #0
 8016128:	341a      	adds	r4, #26
 801612a:	42b5      	cmp	r5, r6
 801612c:	d11a      	bne.n	8016164 <_printf_common+0xc8>
 801612e:	2000      	movs	r0, #0
 8016130:	e008      	b.n	8016144 <_printf_common+0xa8>
 8016132:	2301      	movs	r3, #1
 8016134:	4652      	mov	r2, sl
 8016136:	4649      	mov	r1, r9
 8016138:	4638      	mov	r0, r7
 801613a:	47c0      	blx	r8
 801613c:	3001      	adds	r0, #1
 801613e:	d103      	bne.n	8016148 <_printf_common+0xac>
 8016140:	f04f 30ff 	mov.w	r0, #4294967295
 8016144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016148:	3501      	adds	r5, #1
 801614a:	e7c6      	b.n	80160da <_printf_common+0x3e>
 801614c:	18e1      	adds	r1, r4, r3
 801614e:	1c5a      	adds	r2, r3, #1
 8016150:	2030      	movs	r0, #48	; 0x30
 8016152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016156:	4422      	add	r2, r4
 8016158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801615c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016160:	3302      	adds	r3, #2
 8016162:	e7c7      	b.n	80160f4 <_printf_common+0x58>
 8016164:	2301      	movs	r3, #1
 8016166:	4622      	mov	r2, r4
 8016168:	4649      	mov	r1, r9
 801616a:	4638      	mov	r0, r7
 801616c:	47c0      	blx	r8
 801616e:	3001      	adds	r0, #1
 8016170:	d0e6      	beq.n	8016140 <_printf_common+0xa4>
 8016172:	3601      	adds	r6, #1
 8016174:	e7d9      	b.n	801612a <_printf_common+0x8e>
	...

08016178 <_printf_i>:
 8016178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801617c:	7e0f      	ldrb	r7, [r1, #24]
 801617e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016180:	2f78      	cmp	r7, #120	; 0x78
 8016182:	4691      	mov	r9, r2
 8016184:	4680      	mov	r8, r0
 8016186:	460c      	mov	r4, r1
 8016188:	469a      	mov	sl, r3
 801618a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801618e:	d807      	bhi.n	80161a0 <_printf_i+0x28>
 8016190:	2f62      	cmp	r7, #98	; 0x62
 8016192:	d80a      	bhi.n	80161aa <_printf_i+0x32>
 8016194:	2f00      	cmp	r7, #0
 8016196:	f000 80d8 	beq.w	801634a <_printf_i+0x1d2>
 801619a:	2f58      	cmp	r7, #88	; 0x58
 801619c:	f000 80a3 	beq.w	80162e6 <_printf_i+0x16e>
 80161a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80161a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80161a8:	e03a      	b.n	8016220 <_printf_i+0xa8>
 80161aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80161ae:	2b15      	cmp	r3, #21
 80161b0:	d8f6      	bhi.n	80161a0 <_printf_i+0x28>
 80161b2:	a101      	add	r1, pc, #4	; (adr r1, 80161b8 <_printf_i+0x40>)
 80161b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80161b8:	08016211 	.word	0x08016211
 80161bc:	08016225 	.word	0x08016225
 80161c0:	080161a1 	.word	0x080161a1
 80161c4:	080161a1 	.word	0x080161a1
 80161c8:	080161a1 	.word	0x080161a1
 80161cc:	080161a1 	.word	0x080161a1
 80161d0:	08016225 	.word	0x08016225
 80161d4:	080161a1 	.word	0x080161a1
 80161d8:	080161a1 	.word	0x080161a1
 80161dc:	080161a1 	.word	0x080161a1
 80161e0:	080161a1 	.word	0x080161a1
 80161e4:	08016331 	.word	0x08016331
 80161e8:	08016255 	.word	0x08016255
 80161ec:	08016313 	.word	0x08016313
 80161f0:	080161a1 	.word	0x080161a1
 80161f4:	080161a1 	.word	0x080161a1
 80161f8:	08016353 	.word	0x08016353
 80161fc:	080161a1 	.word	0x080161a1
 8016200:	08016255 	.word	0x08016255
 8016204:	080161a1 	.word	0x080161a1
 8016208:	080161a1 	.word	0x080161a1
 801620c:	0801631b 	.word	0x0801631b
 8016210:	682b      	ldr	r3, [r5, #0]
 8016212:	1d1a      	adds	r2, r3, #4
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	602a      	str	r2, [r5, #0]
 8016218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801621c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016220:	2301      	movs	r3, #1
 8016222:	e0a3      	b.n	801636c <_printf_i+0x1f4>
 8016224:	6820      	ldr	r0, [r4, #0]
 8016226:	6829      	ldr	r1, [r5, #0]
 8016228:	0606      	lsls	r6, r0, #24
 801622a:	f101 0304 	add.w	r3, r1, #4
 801622e:	d50a      	bpl.n	8016246 <_printf_i+0xce>
 8016230:	680e      	ldr	r6, [r1, #0]
 8016232:	602b      	str	r3, [r5, #0]
 8016234:	2e00      	cmp	r6, #0
 8016236:	da03      	bge.n	8016240 <_printf_i+0xc8>
 8016238:	232d      	movs	r3, #45	; 0x2d
 801623a:	4276      	negs	r6, r6
 801623c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016240:	485e      	ldr	r0, [pc, #376]	; (80163bc <_printf_i+0x244>)
 8016242:	230a      	movs	r3, #10
 8016244:	e019      	b.n	801627a <_printf_i+0x102>
 8016246:	680e      	ldr	r6, [r1, #0]
 8016248:	602b      	str	r3, [r5, #0]
 801624a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801624e:	bf18      	it	ne
 8016250:	b236      	sxthne	r6, r6
 8016252:	e7ef      	b.n	8016234 <_printf_i+0xbc>
 8016254:	682b      	ldr	r3, [r5, #0]
 8016256:	6820      	ldr	r0, [r4, #0]
 8016258:	1d19      	adds	r1, r3, #4
 801625a:	6029      	str	r1, [r5, #0]
 801625c:	0601      	lsls	r1, r0, #24
 801625e:	d501      	bpl.n	8016264 <_printf_i+0xec>
 8016260:	681e      	ldr	r6, [r3, #0]
 8016262:	e002      	b.n	801626a <_printf_i+0xf2>
 8016264:	0646      	lsls	r6, r0, #25
 8016266:	d5fb      	bpl.n	8016260 <_printf_i+0xe8>
 8016268:	881e      	ldrh	r6, [r3, #0]
 801626a:	4854      	ldr	r0, [pc, #336]	; (80163bc <_printf_i+0x244>)
 801626c:	2f6f      	cmp	r7, #111	; 0x6f
 801626e:	bf0c      	ite	eq
 8016270:	2308      	moveq	r3, #8
 8016272:	230a      	movne	r3, #10
 8016274:	2100      	movs	r1, #0
 8016276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801627a:	6865      	ldr	r5, [r4, #4]
 801627c:	60a5      	str	r5, [r4, #8]
 801627e:	2d00      	cmp	r5, #0
 8016280:	bfa2      	ittt	ge
 8016282:	6821      	ldrge	r1, [r4, #0]
 8016284:	f021 0104 	bicge.w	r1, r1, #4
 8016288:	6021      	strge	r1, [r4, #0]
 801628a:	b90e      	cbnz	r6, 8016290 <_printf_i+0x118>
 801628c:	2d00      	cmp	r5, #0
 801628e:	d04d      	beq.n	801632c <_printf_i+0x1b4>
 8016290:	4615      	mov	r5, r2
 8016292:	fbb6 f1f3 	udiv	r1, r6, r3
 8016296:	fb03 6711 	mls	r7, r3, r1, r6
 801629a:	5dc7      	ldrb	r7, [r0, r7]
 801629c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80162a0:	4637      	mov	r7, r6
 80162a2:	42bb      	cmp	r3, r7
 80162a4:	460e      	mov	r6, r1
 80162a6:	d9f4      	bls.n	8016292 <_printf_i+0x11a>
 80162a8:	2b08      	cmp	r3, #8
 80162aa:	d10b      	bne.n	80162c4 <_printf_i+0x14c>
 80162ac:	6823      	ldr	r3, [r4, #0]
 80162ae:	07de      	lsls	r6, r3, #31
 80162b0:	d508      	bpl.n	80162c4 <_printf_i+0x14c>
 80162b2:	6923      	ldr	r3, [r4, #16]
 80162b4:	6861      	ldr	r1, [r4, #4]
 80162b6:	4299      	cmp	r1, r3
 80162b8:	bfde      	ittt	le
 80162ba:	2330      	movle	r3, #48	; 0x30
 80162bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80162c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80162c4:	1b52      	subs	r2, r2, r5
 80162c6:	6122      	str	r2, [r4, #16]
 80162c8:	f8cd a000 	str.w	sl, [sp]
 80162cc:	464b      	mov	r3, r9
 80162ce:	aa03      	add	r2, sp, #12
 80162d0:	4621      	mov	r1, r4
 80162d2:	4640      	mov	r0, r8
 80162d4:	f7ff fee2 	bl	801609c <_printf_common>
 80162d8:	3001      	adds	r0, #1
 80162da:	d14c      	bne.n	8016376 <_printf_i+0x1fe>
 80162dc:	f04f 30ff 	mov.w	r0, #4294967295
 80162e0:	b004      	add	sp, #16
 80162e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162e6:	4835      	ldr	r0, [pc, #212]	; (80163bc <_printf_i+0x244>)
 80162e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80162ec:	6829      	ldr	r1, [r5, #0]
 80162ee:	6823      	ldr	r3, [r4, #0]
 80162f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80162f4:	6029      	str	r1, [r5, #0]
 80162f6:	061d      	lsls	r5, r3, #24
 80162f8:	d514      	bpl.n	8016324 <_printf_i+0x1ac>
 80162fa:	07df      	lsls	r7, r3, #31
 80162fc:	bf44      	itt	mi
 80162fe:	f043 0320 	orrmi.w	r3, r3, #32
 8016302:	6023      	strmi	r3, [r4, #0]
 8016304:	b91e      	cbnz	r6, 801630e <_printf_i+0x196>
 8016306:	6823      	ldr	r3, [r4, #0]
 8016308:	f023 0320 	bic.w	r3, r3, #32
 801630c:	6023      	str	r3, [r4, #0]
 801630e:	2310      	movs	r3, #16
 8016310:	e7b0      	b.n	8016274 <_printf_i+0xfc>
 8016312:	6823      	ldr	r3, [r4, #0]
 8016314:	f043 0320 	orr.w	r3, r3, #32
 8016318:	6023      	str	r3, [r4, #0]
 801631a:	2378      	movs	r3, #120	; 0x78
 801631c:	4828      	ldr	r0, [pc, #160]	; (80163c0 <_printf_i+0x248>)
 801631e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016322:	e7e3      	b.n	80162ec <_printf_i+0x174>
 8016324:	0659      	lsls	r1, r3, #25
 8016326:	bf48      	it	mi
 8016328:	b2b6      	uxthmi	r6, r6
 801632a:	e7e6      	b.n	80162fa <_printf_i+0x182>
 801632c:	4615      	mov	r5, r2
 801632e:	e7bb      	b.n	80162a8 <_printf_i+0x130>
 8016330:	682b      	ldr	r3, [r5, #0]
 8016332:	6826      	ldr	r6, [r4, #0]
 8016334:	6961      	ldr	r1, [r4, #20]
 8016336:	1d18      	adds	r0, r3, #4
 8016338:	6028      	str	r0, [r5, #0]
 801633a:	0635      	lsls	r5, r6, #24
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	d501      	bpl.n	8016344 <_printf_i+0x1cc>
 8016340:	6019      	str	r1, [r3, #0]
 8016342:	e002      	b.n	801634a <_printf_i+0x1d2>
 8016344:	0670      	lsls	r0, r6, #25
 8016346:	d5fb      	bpl.n	8016340 <_printf_i+0x1c8>
 8016348:	8019      	strh	r1, [r3, #0]
 801634a:	2300      	movs	r3, #0
 801634c:	6123      	str	r3, [r4, #16]
 801634e:	4615      	mov	r5, r2
 8016350:	e7ba      	b.n	80162c8 <_printf_i+0x150>
 8016352:	682b      	ldr	r3, [r5, #0]
 8016354:	1d1a      	adds	r2, r3, #4
 8016356:	602a      	str	r2, [r5, #0]
 8016358:	681d      	ldr	r5, [r3, #0]
 801635a:	6862      	ldr	r2, [r4, #4]
 801635c:	2100      	movs	r1, #0
 801635e:	4628      	mov	r0, r5
 8016360:	f7e9 ff5e 	bl	8000220 <memchr>
 8016364:	b108      	cbz	r0, 801636a <_printf_i+0x1f2>
 8016366:	1b40      	subs	r0, r0, r5
 8016368:	6060      	str	r0, [r4, #4]
 801636a:	6863      	ldr	r3, [r4, #4]
 801636c:	6123      	str	r3, [r4, #16]
 801636e:	2300      	movs	r3, #0
 8016370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016374:	e7a8      	b.n	80162c8 <_printf_i+0x150>
 8016376:	6923      	ldr	r3, [r4, #16]
 8016378:	462a      	mov	r2, r5
 801637a:	4649      	mov	r1, r9
 801637c:	4640      	mov	r0, r8
 801637e:	47d0      	blx	sl
 8016380:	3001      	adds	r0, #1
 8016382:	d0ab      	beq.n	80162dc <_printf_i+0x164>
 8016384:	6823      	ldr	r3, [r4, #0]
 8016386:	079b      	lsls	r3, r3, #30
 8016388:	d413      	bmi.n	80163b2 <_printf_i+0x23a>
 801638a:	68e0      	ldr	r0, [r4, #12]
 801638c:	9b03      	ldr	r3, [sp, #12]
 801638e:	4298      	cmp	r0, r3
 8016390:	bfb8      	it	lt
 8016392:	4618      	movlt	r0, r3
 8016394:	e7a4      	b.n	80162e0 <_printf_i+0x168>
 8016396:	2301      	movs	r3, #1
 8016398:	4632      	mov	r2, r6
 801639a:	4649      	mov	r1, r9
 801639c:	4640      	mov	r0, r8
 801639e:	47d0      	blx	sl
 80163a0:	3001      	adds	r0, #1
 80163a2:	d09b      	beq.n	80162dc <_printf_i+0x164>
 80163a4:	3501      	adds	r5, #1
 80163a6:	68e3      	ldr	r3, [r4, #12]
 80163a8:	9903      	ldr	r1, [sp, #12]
 80163aa:	1a5b      	subs	r3, r3, r1
 80163ac:	42ab      	cmp	r3, r5
 80163ae:	dcf2      	bgt.n	8016396 <_printf_i+0x21e>
 80163b0:	e7eb      	b.n	801638a <_printf_i+0x212>
 80163b2:	2500      	movs	r5, #0
 80163b4:	f104 0619 	add.w	r6, r4, #25
 80163b8:	e7f5      	b.n	80163a6 <_printf_i+0x22e>
 80163ba:	bf00      	nop
 80163bc:	0801b38d 	.word	0x0801b38d
 80163c0:	0801b39e 	.word	0x0801b39e

080163c4 <_sbrk_r>:
 80163c4:	b538      	push	{r3, r4, r5, lr}
 80163c6:	4d06      	ldr	r5, [pc, #24]	; (80163e0 <_sbrk_r+0x1c>)
 80163c8:	2300      	movs	r3, #0
 80163ca:	4604      	mov	r4, r0
 80163cc:	4608      	mov	r0, r1
 80163ce:	602b      	str	r3, [r5, #0]
 80163d0:	f7eb fc2a 	bl	8001c28 <_sbrk>
 80163d4:	1c43      	adds	r3, r0, #1
 80163d6:	d102      	bne.n	80163de <_sbrk_r+0x1a>
 80163d8:	682b      	ldr	r3, [r5, #0]
 80163da:	b103      	cbz	r3, 80163de <_sbrk_r+0x1a>
 80163dc:	6023      	str	r3, [r4, #0]
 80163de:	bd38      	pop	{r3, r4, r5, pc}
 80163e0:	20008cfc 	.word	0x20008cfc

080163e4 <__sread>:
 80163e4:	b510      	push	{r4, lr}
 80163e6:	460c      	mov	r4, r1
 80163e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163ec:	f000 f8a8 	bl	8016540 <_read_r>
 80163f0:	2800      	cmp	r0, #0
 80163f2:	bfab      	itete	ge
 80163f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80163f6:	89a3      	ldrhlt	r3, [r4, #12]
 80163f8:	181b      	addge	r3, r3, r0
 80163fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80163fe:	bfac      	ite	ge
 8016400:	6563      	strge	r3, [r4, #84]	; 0x54
 8016402:	81a3      	strhlt	r3, [r4, #12]
 8016404:	bd10      	pop	{r4, pc}

08016406 <__swrite>:
 8016406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801640a:	461f      	mov	r7, r3
 801640c:	898b      	ldrh	r3, [r1, #12]
 801640e:	05db      	lsls	r3, r3, #23
 8016410:	4605      	mov	r5, r0
 8016412:	460c      	mov	r4, r1
 8016414:	4616      	mov	r6, r2
 8016416:	d505      	bpl.n	8016424 <__swrite+0x1e>
 8016418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801641c:	2302      	movs	r3, #2
 801641e:	2200      	movs	r2, #0
 8016420:	f000 f870 	bl	8016504 <_lseek_r>
 8016424:	89a3      	ldrh	r3, [r4, #12]
 8016426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801642a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801642e:	81a3      	strh	r3, [r4, #12]
 8016430:	4632      	mov	r2, r6
 8016432:	463b      	mov	r3, r7
 8016434:	4628      	mov	r0, r5
 8016436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801643a:	f000 b817 	b.w	801646c <_write_r>

0801643e <__sseek>:
 801643e:	b510      	push	{r4, lr}
 8016440:	460c      	mov	r4, r1
 8016442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016446:	f000 f85d 	bl	8016504 <_lseek_r>
 801644a:	1c43      	adds	r3, r0, #1
 801644c:	89a3      	ldrh	r3, [r4, #12]
 801644e:	bf15      	itete	ne
 8016450:	6560      	strne	r0, [r4, #84]	; 0x54
 8016452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801645a:	81a3      	strheq	r3, [r4, #12]
 801645c:	bf18      	it	ne
 801645e:	81a3      	strhne	r3, [r4, #12]
 8016460:	bd10      	pop	{r4, pc}

08016462 <__sclose>:
 8016462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016466:	f000 b81b 	b.w	80164a0 <_close_r>
	...

0801646c <_write_r>:
 801646c:	b538      	push	{r3, r4, r5, lr}
 801646e:	4d07      	ldr	r5, [pc, #28]	; (801648c <_write_r+0x20>)
 8016470:	4604      	mov	r4, r0
 8016472:	4608      	mov	r0, r1
 8016474:	4611      	mov	r1, r2
 8016476:	2200      	movs	r2, #0
 8016478:	602a      	str	r2, [r5, #0]
 801647a:	461a      	mov	r2, r3
 801647c:	f7ea f964 	bl	8000748 <_write>
 8016480:	1c43      	adds	r3, r0, #1
 8016482:	d102      	bne.n	801648a <_write_r+0x1e>
 8016484:	682b      	ldr	r3, [r5, #0]
 8016486:	b103      	cbz	r3, 801648a <_write_r+0x1e>
 8016488:	6023      	str	r3, [r4, #0]
 801648a:	bd38      	pop	{r3, r4, r5, pc}
 801648c:	20008cfc 	.word	0x20008cfc

08016490 <abort>:
 8016490:	b508      	push	{r3, lr}
 8016492:	2006      	movs	r0, #6
 8016494:	f000 f88e 	bl	80165b4 <raise>
 8016498:	2001      	movs	r0, #1
 801649a:	f7eb fb69 	bl	8001b70 <_exit>
	...

080164a0 <_close_r>:
 80164a0:	b538      	push	{r3, r4, r5, lr}
 80164a2:	4d06      	ldr	r5, [pc, #24]	; (80164bc <_close_r+0x1c>)
 80164a4:	2300      	movs	r3, #0
 80164a6:	4604      	mov	r4, r0
 80164a8:	4608      	mov	r0, r1
 80164aa:	602b      	str	r3, [r5, #0]
 80164ac:	f7eb fb87 	bl	8001bbe <_close>
 80164b0:	1c43      	adds	r3, r0, #1
 80164b2:	d102      	bne.n	80164ba <_close_r+0x1a>
 80164b4:	682b      	ldr	r3, [r5, #0]
 80164b6:	b103      	cbz	r3, 80164ba <_close_r+0x1a>
 80164b8:	6023      	str	r3, [r4, #0]
 80164ba:	bd38      	pop	{r3, r4, r5, pc}
 80164bc:	20008cfc 	.word	0x20008cfc

080164c0 <_fstat_r>:
 80164c0:	b538      	push	{r3, r4, r5, lr}
 80164c2:	4d07      	ldr	r5, [pc, #28]	; (80164e0 <_fstat_r+0x20>)
 80164c4:	2300      	movs	r3, #0
 80164c6:	4604      	mov	r4, r0
 80164c8:	4608      	mov	r0, r1
 80164ca:	4611      	mov	r1, r2
 80164cc:	602b      	str	r3, [r5, #0]
 80164ce:	f7eb fb82 	bl	8001bd6 <_fstat>
 80164d2:	1c43      	adds	r3, r0, #1
 80164d4:	d102      	bne.n	80164dc <_fstat_r+0x1c>
 80164d6:	682b      	ldr	r3, [r5, #0]
 80164d8:	b103      	cbz	r3, 80164dc <_fstat_r+0x1c>
 80164da:	6023      	str	r3, [r4, #0]
 80164dc:	bd38      	pop	{r3, r4, r5, pc}
 80164de:	bf00      	nop
 80164e0:	20008cfc 	.word	0x20008cfc

080164e4 <_isatty_r>:
 80164e4:	b538      	push	{r3, r4, r5, lr}
 80164e6:	4d06      	ldr	r5, [pc, #24]	; (8016500 <_isatty_r+0x1c>)
 80164e8:	2300      	movs	r3, #0
 80164ea:	4604      	mov	r4, r0
 80164ec:	4608      	mov	r0, r1
 80164ee:	602b      	str	r3, [r5, #0]
 80164f0:	f7eb fb81 	bl	8001bf6 <_isatty>
 80164f4:	1c43      	adds	r3, r0, #1
 80164f6:	d102      	bne.n	80164fe <_isatty_r+0x1a>
 80164f8:	682b      	ldr	r3, [r5, #0]
 80164fa:	b103      	cbz	r3, 80164fe <_isatty_r+0x1a>
 80164fc:	6023      	str	r3, [r4, #0]
 80164fe:	bd38      	pop	{r3, r4, r5, pc}
 8016500:	20008cfc 	.word	0x20008cfc

08016504 <_lseek_r>:
 8016504:	b538      	push	{r3, r4, r5, lr}
 8016506:	4d07      	ldr	r5, [pc, #28]	; (8016524 <_lseek_r+0x20>)
 8016508:	4604      	mov	r4, r0
 801650a:	4608      	mov	r0, r1
 801650c:	4611      	mov	r1, r2
 801650e:	2200      	movs	r2, #0
 8016510:	602a      	str	r2, [r5, #0]
 8016512:	461a      	mov	r2, r3
 8016514:	f7eb fb7a 	bl	8001c0c <_lseek>
 8016518:	1c43      	adds	r3, r0, #1
 801651a:	d102      	bne.n	8016522 <_lseek_r+0x1e>
 801651c:	682b      	ldr	r3, [r5, #0]
 801651e:	b103      	cbz	r3, 8016522 <_lseek_r+0x1e>
 8016520:	6023      	str	r3, [r4, #0]
 8016522:	bd38      	pop	{r3, r4, r5, pc}
 8016524:	20008cfc 	.word	0x20008cfc

08016528 <__malloc_lock>:
 8016528:	4801      	ldr	r0, [pc, #4]	; (8016530 <__malloc_lock+0x8>)
 801652a:	f7ff bb0d 	b.w	8015b48 <__retarget_lock_acquire_recursive>
 801652e:	bf00      	nop
 8016530:	20008d00 	.word	0x20008d00

08016534 <__malloc_unlock>:
 8016534:	4801      	ldr	r0, [pc, #4]	; (801653c <__malloc_unlock+0x8>)
 8016536:	f7ff bb08 	b.w	8015b4a <__retarget_lock_release_recursive>
 801653a:	bf00      	nop
 801653c:	20008d00 	.word	0x20008d00

08016540 <_read_r>:
 8016540:	b538      	push	{r3, r4, r5, lr}
 8016542:	4d07      	ldr	r5, [pc, #28]	; (8016560 <_read_r+0x20>)
 8016544:	4604      	mov	r4, r0
 8016546:	4608      	mov	r0, r1
 8016548:	4611      	mov	r1, r2
 801654a:	2200      	movs	r2, #0
 801654c:	602a      	str	r2, [r5, #0]
 801654e:	461a      	mov	r2, r3
 8016550:	f7eb fb18 	bl	8001b84 <_read>
 8016554:	1c43      	adds	r3, r0, #1
 8016556:	d102      	bne.n	801655e <_read_r+0x1e>
 8016558:	682b      	ldr	r3, [r5, #0]
 801655a:	b103      	cbz	r3, 801655e <_read_r+0x1e>
 801655c:	6023      	str	r3, [r4, #0]
 801655e:	bd38      	pop	{r3, r4, r5, pc}
 8016560:	20008cfc 	.word	0x20008cfc

08016564 <_raise_r>:
 8016564:	291f      	cmp	r1, #31
 8016566:	b538      	push	{r3, r4, r5, lr}
 8016568:	4604      	mov	r4, r0
 801656a:	460d      	mov	r5, r1
 801656c:	d904      	bls.n	8016578 <_raise_r+0x14>
 801656e:	2316      	movs	r3, #22
 8016570:	6003      	str	r3, [r0, #0]
 8016572:	f04f 30ff 	mov.w	r0, #4294967295
 8016576:	bd38      	pop	{r3, r4, r5, pc}
 8016578:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801657a:	b112      	cbz	r2, 8016582 <_raise_r+0x1e>
 801657c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016580:	b94b      	cbnz	r3, 8016596 <_raise_r+0x32>
 8016582:	4620      	mov	r0, r4
 8016584:	f000 f830 	bl	80165e8 <_getpid_r>
 8016588:	462a      	mov	r2, r5
 801658a:	4601      	mov	r1, r0
 801658c:	4620      	mov	r0, r4
 801658e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016592:	f000 b817 	b.w	80165c4 <_kill_r>
 8016596:	2b01      	cmp	r3, #1
 8016598:	d00a      	beq.n	80165b0 <_raise_r+0x4c>
 801659a:	1c59      	adds	r1, r3, #1
 801659c:	d103      	bne.n	80165a6 <_raise_r+0x42>
 801659e:	2316      	movs	r3, #22
 80165a0:	6003      	str	r3, [r0, #0]
 80165a2:	2001      	movs	r0, #1
 80165a4:	e7e7      	b.n	8016576 <_raise_r+0x12>
 80165a6:	2400      	movs	r4, #0
 80165a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80165ac:	4628      	mov	r0, r5
 80165ae:	4798      	blx	r3
 80165b0:	2000      	movs	r0, #0
 80165b2:	e7e0      	b.n	8016576 <_raise_r+0x12>

080165b4 <raise>:
 80165b4:	4b02      	ldr	r3, [pc, #8]	; (80165c0 <raise+0xc>)
 80165b6:	4601      	mov	r1, r0
 80165b8:	6818      	ldr	r0, [r3, #0]
 80165ba:	f7ff bfd3 	b.w	8016564 <_raise_r>
 80165be:	bf00      	nop
 80165c0:	20000068 	.word	0x20000068

080165c4 <_kill_r>:
 80165c4:	b538      	push	{r3, r4, r5, lr}
 80165c6:	4d07      	ldr	r5, [pc, #28]	; (80165e4 <_kill_r+0x20>)
 80165c8:	2300      	movs	r3, #0
 80165ca:	4604      	mov	r4, r0
 80165cc:	4608      	mov	r0, r1
 80165ce:	4611      	mov	r1, r2
 80165d0:	602b      	str	r3, [r5, #0]
 80165d2:	f7eb fabb 	bl	8001b4c <_kill>
 80165d6:	1c43      	adds	r3, r0, #1
 80165d8:	d102      	bne.n	80165e0 <_kill_r+0x1c>
 80165da:	682b      	ldr	r3, [r5, #0]
 80165dc:	b103      	cbz	r3, 80165e0 <_kill_r+0x1c>
 80165de:	6023      	str	r3, [r4, #0]
 80165e0:	bd38      	pop	{r3, r4, r5, pc}
 80165e2:	bf00      	nop
 80165e4:	20008cfc 	.word	0x20008cfc

080165e8 <_getpid_r>:
 80165e8:	f7eb baa8 	b.w	8001b3c <_getpid>

080165ec <_init>:
 80165ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ee:	bf00      	nop
 80165f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165f2:	bc08      	pop	{r3}
 80165f4:	469e      	mov	lr, r3
 80165f6:	4770      	bx	lr

080165f8 <_fini>:
 80165f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165fa:	bf00      	nop
 80165fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80165fe:	bc08      	pop	{r3}
 8016600:	469e      	mov	lr, r3
 8016602:	4770      	bx	lr
